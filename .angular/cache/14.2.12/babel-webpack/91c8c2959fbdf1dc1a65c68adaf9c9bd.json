{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { complex } from '../kernels/Complex';\n/**\n * Generates a tensorInfo with all zeros value.\n * @param backend cpu backend.\n * @param shape Shape for the zeros tensor.\n * @param dtype Optional. If set, the result has this dtype.\n */\n\nexport function zeros(backend, shape, dtype = 'float32') {\n  if (dtype === 'complex64') {\n    const real = zeros(backend, shape, 'float32');\n    const imag = zeros(backend, shape, 'float32');\n    return complex({\n      inputs: {\n        real,\n        imag\n      },\n      backend\n    });\n  }\n\n  const values = util.makeZerosTypedArray(util.sizeFromShape(shape), dtype);\n  return backend.makeTensorInfo(shape, dtype, values);\n}","map":{"version":3,"names":["util","complex","zeros","backend","shape","dtype","real","imag","inputs","values","makeZerosTypedArray","sizeFromShape","makeTensorInfo"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/zeros_impl.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { complex } from '../kernels/Complex';\n/**\n * Generates a tensorInfo with all zeros value.\n * @param backend cpu backend.\n * @param shape Shape for the zeros tensor.\n * @param dtype Optional. If set, the result has this dtype.\n */\nexport function zeros(backend, shape, dtype = 'float32') {\n    if (dtype === 'complex64') {\n        const real = zeros(backend, shape, 'float32');\n        const imag = zeros(backend, shape, 'float32');\n        return complex({ inputs: { real, imag }, backend });\n    }\n    const values = util.makeZerosTypedArray(util.sizeFromShape(shape), dtype);\n    return backend.makeTensorInfo(shape, dtype, values);\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,IAAT,QAAqB,uBAArB;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,KAAT,CAAeC,OAAf,EAAwBC,KAAxB,EAA+BC,KAAK,GAAG,SAAvC,EAAkD;EACrD,IAAIA,KAAK,KAAK,WAAd,EAA2B;IACvB,MAAMC,IAAI,GAAGJ,KAAK,CAACC,OAAD,EAAUC,KAAV,EAAiB,SAAjB,CAAlB;IACA,MAAMG,IAAI,GAAGL,KAAK,CAACC,OAAD,EAAUC,KAAV,EAAiB,SAAjB,CAAlB;IACA,OAAOH,OAAO,CAAC;MAAEO,MAAM,EAAE;QAAEF,IAAF;QAAQC;MAAR,CAAV;MAA0BJ;IAA1B,CAAD,CAAd;EACH;;EACD,MAAMM,MAAM,GAAGT,IAAI,CAACU,mBAAL,CAAyBV,IAAI,CAACW,aAAL,CAAmBP,KAAnB,CAAzB,EAAoDC,KAApD,CAAf;EACA,OAAOF,OAAO,CAACS,cAAR,CAAuBR,KAAvB,EAA8BC,KAA9B,EAAqCI,MAArC,CAAP;AACH"},"metadata":{},"sourceType":"module"}