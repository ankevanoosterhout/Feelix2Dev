{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2D, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv2D(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode\n  } = attrs;\n  assertNotComplex([x, filter], 'conv2d');\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false\n  /* depthwise */\n  , $dataFormat);\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const padLeft = convInfo.padInfo.left;\n  const padTop = convInfo.padInfo.top;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const y = new TensorBuffer(convInfo.outShape, x.dtype);\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n  const xBatchStride = xStrides[0];\n  const xRowStride = isChannelsLast ? xStrides[1] : xStrides[2];\n  const xColStride = isChannelsLast ? xStrides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : xStrides[1];\n  const yBatchStride = y.strides[0];\n  const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n  const yColStride = isChannelsLast ? y.strides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : y.strides[1];\n  const xVals = backend.data.get(x.dataId).values;\n  const wVals = backend.data.get(filter.dataId).values;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xBatchStride;\n    const yOffset1 = b * yBatchStride;\n\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * yRowStride;\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xRowStride;\n\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * yColStride;\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * xColStride;\n            let wOffset3 = wOffset2;\n\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1 * xChannelStride];\n\n              for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                yVals[yOffset3 + d2 * yChannelStride] += xVal * wVals[wOffset3 + d2];\n              }\n\n              wOffset3 += convInfo.outChannels;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, yVals);\n}\nexport const conv2DConfig = {\n  kernelName: Conv2D,\n  backendName: 'cpu',\n  kernelFunc: conv2D\n};","map":{"version":3,"names":["backend_util","Conv2D","TensorBuffer","util","assertNotComplex","conv2D","args","inputs","backend","attrs","x","filter","strides","pad","dataFormat","dilations","dimRoundingMode","$dataFormat","convertConv2DDataFormat","convInfo","computeConv2DInfo","shape","filterHeight","filterWidth","dilationHeight","dilationWidth","padLeft","padInfo","left","padTop","top","isChannelsLast","y","outShape","dtype","xStrides","computeStrides","filterStrides","xBatchStride","xRowStride","xColStride","xChannelStride","yBatchStride","yRowStride","yColStride","yChannelStride","xVals","data","get","dataId","values","wVals","yVals","b","batchSize","xOffset1","yOffset1","yR","outHeight","yOffset2","xRCorner","strideHeight","wR","xR","inHeight","wOffset1","xOffset2","yC","outWidth","yOffset3","xCCorner","strideWidth","wC","xC","inWidth","wOffset2","xOffset3","wOffset3","d1","inChannels","xVal","d2","outChannels","makeTensorInfo","conv2DConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Conv2D.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2D, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv2D(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter } = inputs;\n    const { strides, pad, dataFormat, dilations, dimRoundingMode } = attrs;\n    assertNotComplex([x, filter], 'conv2d');\n    const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n    const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false /* depthwise */, $dataFormat);\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const padLeft = convInfo.padInfo.left;\n    const padTop = convInfo.padInfo.top;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    const y = new TensorBuffer(convInfo.outShape, x.dtype);\n    const xStrides = util.computeStrides(x.shape);\n    const filterStrides = util.computeStrides(filter.shape);\n    const xBatchStride = xStrides[0];\n    const xRowStride = isChannelsLast ? xStrides[1] : xStrides[2];\n    const xColStride = isChannelsLast ? xStrides[2] : 1;\n    const xChannelStride = isChannelsLast ? 1 : xStrides[1];\n    const yBatchStride = y.strides[0];\n    const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n    const yColStride = isChannelsLast ? y.strides[2] : 1;\n    const yChannelStride = isChannelsLast ? 1 : y.strides[1];\n    const xVals = backend.data.get(x.dataId).values;\n    const wVals = backend.data.get(filter.dataId).values;\n    const yVals = y.values;\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n        const xOffset1 = b * xBatchStride;\n        const yOffset1 = b * yBatchStride;\n        for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n            const yOffset2 = yOffset1 + yR * yRowStride;\n            const xRCorner = yR * convInfo.strideHeight - padTop;\n            for (let wR = 0; wR < filterHeight; ++wR) {\n                const xR = xRCorner + wR * dilationHeight;\n                if (xR < 0 || xR >= convInfo.inHeight) {\n                    continue;\n                }\n                const wOffset1 = wR * filterStrides[0];\n                const xOffset2 = xOffset1 + xR * xRowStride;\n                for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n                    const yOffset3 = yOffset2 + yC * yColStride;\n                    const xCCorner = yC * convInfo.strideWidth - padLeft;\n                    for (let wC = 0; wC < filterWidth; ++wC) {\n                        const xC = xCCorner + wC * dilationWidth;\n                        if (xC < 0 || xC >= convInfo.inWidth) {\n                            continue;\n                        }\n                        const wOffset2 = wOffset1 + wC * filterStrides[1];\n                        const xOffset3 = xOffset2 + xC * xColStride;\n                        let wOffset3 = wOffset2;\n                        for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                            const xVal = xVals[xOffset3 + d1 * xChannelStride];\n                            for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                                yVals[yOffset3 + d2 * yChannelStride] +=\n                                    xVal * wVals[wOffset3 + d2];\n                            }\n                            wOffset3 += convInfo.outChannels;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(y.shape, y.dtype, yVals);\n}\nexport const conv2DConfig = {\n    kernelName: Conv2D,\n    backendName: 'cpu',\n    kernelFunc: conv2D\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}