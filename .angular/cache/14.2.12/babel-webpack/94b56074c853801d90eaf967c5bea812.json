{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Explicit error types.\n *\n * See the following link for more information about why the code includes\n * calls to setPrototypeOf:\n *\n * https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n */\n// tslint:enable\n\n/**\n * Equivalent of Python's AttributeError.\n */\nexport class AttributeError extends Error {\n  constructor(message) {\n    super(message); // Set the prototype explicitly.\n\n    Object.setPrototypeOf(this, AttributeError.prototype);\n  }\n\n}\n/**\n * Equivalent of Python's RuntimeError.\n */\n\nexport class RuntimeError extends Error {\n  constructor(message) {\n    super(message); // Set the prototype explicitly.\n\n    Object.setPrototypeOf(this, RuntimeError.prototype);\n  }\n\n}\n/**\n * Equivalent of Python's ValueError.\n */\n\nexport class ValueError extends Error {\n  constructor(message) {\n    super(message); // Set the prototype explicitly.\n\n    Object.setPrototypeOf(this, ValueError.prototype);\n  }\n\n}\n/**\n * Equivalent of Python's NotImplementedError.\n */\n\nexport class NotImplementedError extends Error {\n  constructor(message) {\n    super(message); // Set the prototype explicitly.\n\n    Object.setPrototypeOf(this, NotImplementedError.prototype);\n  }\n\n}\n/**\n * Equivalent of Python's AssertionError.\n */\n\nexport class AssertionError extends Error {\n  constructor(message) {\n    super(message); // Set the prototype explicitly.\n\n    Object.setPrototypeOf(this, AssertionError.prototype);\n  }\n\n}\n/**\n * Equivalent of Python's IndexError.\n */\n\nexport class IndexError extends Error {\n  constructor(message) {\n    super(message); // Set the prototype explicitly.\n\n    Object.setPrototypeOf(this, IndexError.prototype);\n  }\n\n}","map":{"version":3,"names":["AttributeError","Error","constructor","message","Object","setPrototypeOf","prototype","RuntimeError","ValueError","NotImplementedError","AssertionError","IndexError"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-layers/dist/errors.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Explicit error types.\n *\n * See the following link for more information about why the code includes\n * calls to setPrototypeOf:\n *\n * https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n */\n// tslint:enable\n/**\n * Equivalent of Python's AttributeError.\n */\nexport class AttributeError extends Error {\n    constructor(message) {\n        super(message);\n        // Set the prototype explicitly.\n        Object.setPrototypeOf(this, AttributeError.prototype);\n    }\n}\n/**\n * Equivalent of Python's RuntimeError.\n */\nexport class RuntimeError extends Error {\n    constructor(message) {\n        super(message);\n        // Set the prototype explicitly.\n        Object.setPrototypeOf(this, RuntimeError.prototype);\n    }\n}\n/**\n * Equivalent of Python's ValueError.\n */\nexport class ValueError extends Error {\n    constructor(message) {\n        super(message);\n        // Set the prototype explicitly.\n        Object.setPrototypeOf(this, ValueError.prototype);\n    }\n}\n/**\n * Equivalent of Python's NotImplementedError.\n */\nexport class NotImplementedError extends Error {\n    constructor(message) {\n        super(message);\n        // Set the prototype explicitly.\n        Object.setPrototypeOf(this, NotImplementedError.prototype);\n    }\n}\n/**\n * Equivalent of Python's AssertionError.\n */\nexport class AssertionError extends Error {\n    constructor(message) {\n        super(message);\n        // Set the prototype explicitly.\n        Object.setPrototypeOf(this, AssertionError.prototype);\n    }\n}\n/**\n * Equivalent of Python's IndexError.\n */\nexport class IndexError extends Error {\n    constructor(message) {\n        super(message);\n        // Set the prototype explicitly.\n        Object.setPrototypeOf(this, IndexError.prototype);\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA,OAAO,MAAMA,cAAN,SAA6BC,KAA7B,CAAmC;EACtCC,WAAW,CAACC,OAAD,EAAU;IACjB,MAAMA,OAAN,EADiB,CAEjB;;IACAC,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4BL,cAAc,CAACM,SAA3C;EACH;;AALqC;AAO1C;AACA;AACA;;AACA,OAAO,MAAMC,YAAN,SAA2BN,KAA3B,CAAiC;EACpCC,WAAW,CAACC,OAAD,EAAU;IACjB,MAAMA,OAAN,EADiB,CAEjB;;IACAC,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4BE,YAAY,CAACD,SAAzC;EACH;;AALmC;AAOxC;AACA;AACA;;AACA,OAAO,MAAME,UAAN,SAAyBP,KAAzB,CAA+B;EAClCC,WAAW,CAACC,OAAD,EAAU;IACjB,MAAMA,OAAN,EADiB,CAEjB;;IACAC,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4BG,UAAU,CAACF,SAAvC;EACH;;AALiC;AAOtC;AACA;AACA;;AACA,OAAO,MAAMG,mBAAN,SAAkCR,KAAlC,CAAwC;EAC3CC,WAAW,CAACC,OAAD,EAAU;IACjB,MAAMA,OAAN,EADiB,CAEjB;;IACAC,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4BI,mBAAmB,CAACH,SAAhD;EACH;;AAL0C;AAO/C;AACA;AACA;;AACA,OAAO,MAAMI,cAAN,SAA6BT,KAA7B,CAAmC;EACtCC,WAAW,CAACC,OAAD,EAAU;IACjB,MAAMA,OAAN,EADiB,CAEjB;;IACAC,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4BK,cAAc,CAACJ,SAA3C;EACH;;AALqC;AAO1C;AACA;AACA;;AACA,OAAO,MAAMK,UAAN,SAAyBV,KAAzB,CAA+B;EAClCC,WAAW,CAACC,OAAD,EAAU;IACjB,MAAMA,OAAN,EADiB,CAEjB;;IACAC,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4BM,UAAU,CAACL,SAAvC;EACH;;AALiC"},"metadata":{},"sourceType":"module"}