{"ast":null,"code":"import { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { Reduction } from '../loss_ops_utils';\nimport { mul } from '../mul';\nimport { op } from '../operation';\nimport { relu } from '../relu';\nimport { scalar } from '../scalar';\nimport { sub } from '../sub';\nimport { computeWeightedLoss } from './compute_weighted_loss';\n/**\n * Computes the Hinge loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\n\nfunction hingeLoss_(labels, predictions, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n  let $labels = convertToTensor(labels, 'labels', 'hingeLoss');\n  const $predictions = convertToTensor(predictions, 'predictions', 'hingeLoss');\n  let $weights = null;\n\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'hingeLoss');\n  }\n\n  assertShapesMatch($labels.shape, $predictions.shape, 'Error in hingeLoss: ');\n  const one = scalar(1); // Convert binary labels to (-1, 1)\n\n  $labels = sub(mul(scalar(2), $labels), one);\n  const losses = relu(sub(one, mul($labels, $predictions)));\n  return computeWeightedLoss(losses, $weights, reduction);\n}\n\nexport const hingeLoss = op({\n  hingeLoss_\n});","map":{"version":3,"names":["convertToTensor","assertShapesMatch","Reduction","mul","op","relu","scalar","sub","computeWeightedLoss","hingeLoss_","labels","predictions","weights","reduction","SUM_BY_NONZERO_WEIGHTS","$labels","$predictions","$weights","shape","one","losses","hingeLoss"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/losses/hinge_loss.js"],"sourcesContent":["import { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { Reduction } from '../loss_ops_utils';\nimport { mul } from '../mul';\nimport { op } from '../operation';\nimport { relu } from '../relu';\nimport { scalar } from '../scalar';\nimport { sub } from '../sub';\nimport { computeWeightedLoss } from './compute_weighted_loss';\n/**\n * Computes the Hinge loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction hingeLoss_(labels, predictions, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    let $labels = convertToTensor(labels, 'labels', 'hingeLoss');\n    const $predictions = convertToTensor(predictions, 'predictions', 'hingeLoss');\n    let $weights = null;\n    if (weights != null) {\n        $weights = convertToTensor(weights, 'weights', 'hingeLoss');\n    }\n    assertShapesMatch($labels.shape, $predictions.shape, 'Error in hingeLoss: ');\n    const one = scalar(1);\n    // Convert binary labels to (-1, 1)\n    $labels = sub(mul(scalar(2), $labels), one);\n    const losses = relu(sub(one, mul($labels, $predictions)));\n    return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const hingeLoss = op({ hingeLoss_ });\n"],"mappings":"AAAA,SAASA,eAAT,QAAgC,uBAAhC;AACA,SAASC,iBAAT,QAAkC,YAAlC;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,SAASC,EAAT,QAAmB,cAAnB;AACA,SAASC,IAAT,QAAqB,SAArB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,SAASC,mBAAT,QAAoC,yBAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,UAAT,CAAoBC,MAApB,EAA4BC,WAA5B,EAAyCC,OAAzC,EAAkDC,SAAS,GAAGX,SAAS,CAACY,sBAAxE,EAAgG;EAC5F,IAAIC,OAAO,GAAGf,eAAe,CAACU,MAAD,EAAS,QAAT,EAAmB,WAAnB,CAA7B;EACA,MAAMM,YAAY,GAAGhB,eAAe,CAACW,WAAD,EAAc,aAAd,EAA6B,WAA7B,CAApC;EACA,IAAIM,QAAQ,GAAG,IAAf;;EACA,IAAIL,OAAO,IAAI,IAAf,EAAqB;IACjBK,QAAQ,GAAGjB,eAAe,CAACY,OAAD,EAAU,SAAV,EAAqB,WAArB,CAA1B;EACH;;EACDX,iBAAiB,CAACc,OAAO,CAACG,KAAT,EAAgBF,YAAY,CAACE,KAA7B,EAAoC,sBAApC,CAAjB;EACA,MAAMC,GAAG,GAAGb,MAAM,CAAC,CAAD,CAAlB,CAR4F,CAS5F;;EACAS,OAAO,GAAGR,GAAG,CAACJ,GAAG,CAACG,MAAM,CAAC,CAAD,CAAP,EAAYS,OAAZ,CAAJ,EAA0BI,GAA1B,CAAb;EACA,MAAMC,MAAM,GAAGf,IAAI,CAACE,GAAG,CAACY,GAAD,EAAMhB,GAAG,CAACY,OAAD,EAAUC,YAAV,CAAT,CAAJ,CAAnB;EACA,OAAOR,mBAAmB,CAACY,MAAD,EAASH,QAAT,EAAmBJ,SAAnB,CAA1B;AACH;;AACD,OAAO,MAAMQ,SAAS,GAAGjB,EAAE,CAAC;EAAEK;AAAF,CAAD,CAApB"},"metadata":{},"sourceType":"module"}