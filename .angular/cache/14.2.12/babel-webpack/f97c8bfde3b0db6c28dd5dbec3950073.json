{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from './environment';\nimport { getGlobal } from './global_util';\nimport * as log from './log';\nconst kernelRegistry = getGlobal('kernelRegistry', () => new Map());\nconst gradRegistry = getGlobal('gradRegistry', () => new Map());\n/**\n * Returns the kernel function (code) associated with the provided names.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n */\n\nexport function getKernel(kernelName, backendName) {\n  const key = makeKey(kernelName, backendName);\n  return kernelRegistry.get(key);\n}\n/**\n * Returns the registered gradient info associated with the provided kernel.\n * @param kernelName The official TF kernel name.\n */\n\nexport function getGradient(kernelName) {\n  return gradRegistry.get(kernelName);\n}\nexport function getKernelsForBackend(backendName) {\n  const it = kernelRegistry.entries();\n  const result = [];\n\n  while (true) {\n    const {\n      done,\n      value\n    } = it.next();\n\n    if (done) {\n      break;\n    }\n\n    const [key, config] = value;\n    const [backend] = key.split('_');\n\n    if (backend === backendName) {\n      result.push(config);\n    }\n  }\n\n  return result;\n}\n/**\n * Registers the function (forward pass) for the kernel in a global registry.\n *\n * @param config A config object with the following properties:\n * - `kernelName` The official name of the kernel.\n * - `backendName` The official name of the backend.\n * - `kernelFunc` The function to run during the forward pass of the kernel.\n * - `setupFunc` Optional. Gets called once, after the backend initializes.\n * - `disposeFunc` Optional. Gets called once, right before the backend is\n * disposed.\n */\n\nexport function registerKernel(config) {\n  const {\n    kernelName,\n    backendName\n  } = config;\n  const key = makeKey(kernelName, backendName);\n\n  if (kernelRegistry.has(key)) {\n    log.warn(`The kernel '${kernelName}' for backend ` + `'${backendName}' is already registered`);\n  }\n\n  kernelRegistry.set(key, config);\n}\n/**\n * Registers a gradient function for a given kernel in the global registry,\n * to be used during the back-propagation of that kernel.\n *\n * @param config An object with the following properties:\n * - `kernelName` The name of the kernel that the gradient function is for.\n * - `gradFunc` The function to run during back-propagation.\n */\n\nexport function registerGradient(config) {\n  const {\n    kernelName\n  } = config;\n\n  if (gradRegistry.has(kernelName)) {\n    // TODO (yassogba) after 3.0 assess whether we need to keep this gated\n    // to debug mode.\n    if (env().getBool('DEBUG')) {\n      log.warn(`Overriding the gradient for '${kernelName}'`);\n    }\n  }\n\n  gradRegistry.set(kernelName, config);\n}\n/**\n * Removes the kernel function from the registry.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n *\n */\n\nexport function unregisterKernel(kernelName, backendName) {\n  const key = makeKey(kernelName, backendName);\n\n  if (!kernelRegistry.has(key)) {\n    throw new Error(`The kernel '${kernelName}' for backend ` + `'${backendName}' is not registered`);\n  }\n\n  kernelRegistry.delete(key);\n}\n/** Removes the registered gradient from the global registry. */\n\nexport function unregisterGradient(kernelName) {\n  if (!gradRegistry.has(kernelName)) {\n    throw new Error(`The gradient '${kernelName}' for backend is not registered`);\n  }\n\n  gradRegistry.delete(kernelName);\n}\n/**\n * Finds kernels that have already been registered to a backend and re-registers\n * them for a new backend. Useful for registering custom backends.\n * @param registeredBackendName Already registered backend.\n * @param newBackendName New backend.\n */\n\nexport function copyRegisteredKernels(registeredBackendName, newBackendName) {\n  const kernels = getKernelsForBackend(registeredBackendName);\n  kernels.forEach(kernelConfig => {\n    const newKernelConfig = Object.assign({}, kernelConfig, {\n      backendName: newBackendName\n    });\n    registerKernel(newKernelConfig);\n  });\n}\n\nfunction makeKey(kernelName, backendName) {\n  return `${backendName}_${kernelName}`;\n}","map":{"version":3,"names":["env","getGlobal","log","kernelRegistry","Map","gradRegistry","getKernel","kernelName","backendName","key","makeKey","get","getGradient","getKernelsForBackend","it","entries","result","done","value","next","config","backend","split","push","registerKernel","has","warn","set","registerGradient","getBool","unregisterKernel","Error","delete","unregisterGradient","copyRegisteredKernels","registeredBackendName","newBackendName","kernels","forEach","kernelConfig","newKernelConfig","Object","assign"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/kernel_registry.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from './environment';\nimport { getGlobal } from './global_util';\nimport * as log from './log';\nconst kernelRegistry = getGlobal('kernelRegistry', () => new Map());\nconst gradRegistry = getGlobal('gradRegistry', () => new Map());\n/**\n * Returns the kernel function (code) associated with the provided names.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n */\nexport function getKernel(kernelName, backendName) {\n    const key = makeKey(kernelName, backendName);\n    return kernelRegistry.get(key);\n}\n/**\n * Returns the registered gradient info associated with the provided kernel.\n * @param kernelName The official TF kernel name.\n */\nexport function getGradient(kernelName) {\n    return gradRegistry.get(kernelName);\n}\nexport function getKernelsForBackend(backendName) {\n    const it = kernelRegistry.entries();\n    const result = [];\n    while (true) {\n        const { done, value } = it.next();\n        if (done) {\n            break;\n        }\n        const [key, config] = value;\n        const [backend,] = key.split('_');\n        if (backend === backendName) {\n            result.push(config);\n        }\n    }\n    return result;\n}\n/**\n * Registers the function (forward pass) for the kernel in a global registry.\n *\n * @param config A config object with the following properties:\n * - `kernelName` The official name of the kernel.\n * - `backendName` The official name of the backend.\n * - `kernelFunc` The function to run during the forward pass of the kernel.\n * - `setupFunc` Optional. Gets called once, after the backend initializes.\n * - `disposeFunc` Optional. Gets called once, right before the backend is\n * disposed.\n */\nexport function registerKernel(config) {\n    const { kernelName, backendName } = config;\n    const key = makeKey(kernelName, backendName);\n    if (kernelRegistry.has(key)) {\n        log.warn(`The kernel '${kernelName}' for backend ` +\n            `'${backendName}' is already registered`);\n    }\n    kernelRegistry.set(key, config);\n}\n/**\n * Registers a gradient function for a given kernel in the global registry,\n * to be used during the back-propagation of that kernel.\n *\n * @param config An object with the following properties:\n * - `kernelName` The name of the kernel that the gradient function is for.\n * - `gradFunc` The function to run during back-propagation.\n */\nexport function registerGradient(config) {\n    const { kernelName } = config;\n    if (gradRegistry.has(kernelName)) {\n        // TODO (yassogba) after 3.0 assess whether we need to keep this gated\n        // to debug mode.\n        if (env().getBool('DEBUG')) {\n            log.warn(`Overriding the gradient for '${kernelName}'`);\n        }\n    }\n    gradRegistry.set(kernelName, config);\n}\n/**\n * Removes the kernel function from the registry.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n *\n */\nexport function unregisterKernel(kernelName, backendName) {\n    const key = makeKey(kernelName, backendName);\n    if (!kernelRegistry.has(key)) {\n        throw new Error(`The kernel '${kernelName}' for backend ` +\n            `'${backendName}' is not registered`);\n    }\n    kernelRegistry.delete(key);\n}\n/** Removes the registered gradient from the global registry. */\nexport function unregisterGradient(kernelName) {\n    if (!gradRegistry.has(kernelName)) {\n        throw new Error(`The gradient '${kernelName}' for backend is not registered`);\n    }\n    gradRegistry.delete(kernelName);\n}\n/**\n * Finds kernels that have already been registered to a backend and re-registers\n * them for a new backend. Useful for registering custom backends.\n * @param registeredBackendName Already registered backend.\n * @param newBackendName New backend.\n */\nexport function copyRegisteredKernels(registeredBackendName, newBackendName) {\n    const kernels = getKernelsForBackend(registeredBackendName);\n    kernels.forEach(kernelConfig => {\n        const newKernelConfig = Object.assign({}, kernelConfig, { backendName: newBackendName });\n        registerKernel(newKernelConfig);\n    });\n}\nfunction makeKey(kernelName, backendName) {\n    return `${backendName}_${kernelName}`;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}