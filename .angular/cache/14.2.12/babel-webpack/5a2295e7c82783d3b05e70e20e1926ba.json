{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { MirrorPad } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Pads a `tf.Tensor` using mirror padding.\n *\n * This operation implements the `REFLECT` and `SYMMETRIC` modes of pad.\n *\n * ```js\n * const x = tf.range(0, 9).reshape([1, 1, 3, 3]);\n * x.mirrorPad([[0, 0], [0, 0], [2, 2], [2, 2]], 'reflect').print();\n * ```\n * @param x The tensor to pad.\n * @param paddings An array of length `R` (the rank of the tensor), where\n * each element is a length-2 tuple of ints `[padBefore, padAfter]`,\n * specifying how much to pad along each dimension of the tensor.\n * In \"reflect\" mode, the padded regions do not include the borders,\n * while in \"symmetric\" mode the padded regions do include the borders.\n * For example, if the input is `[1, 2, 3]` and paddings is `[0, 2]`,\n * then the output is `[1, 2, 3, 2, 1]` in \"reflect\" mode, and\n * `[1, 2, 3, 3, 2]` in \"symmetric\" mode.\n * If `mode` is \"reflect\" then both `paddings[D, 0]` and `paddings[D, 1]`\n * must be no greater than `x.shape[D] - 1`. If mode is \"symmetric\"\n * then both `paddings[D, 0]` and `paddings[D, 1]` must be no greater than\n * `x.shape[D]`\n * @param mode String to specify padding mode. Can be `'reflect' | 'symmetric'`\n */\n\n/** @doc {heading: 'Tensors', subheading: 'Transformations'} */\n\nfunction mirrorPad_(x, paddings, mode) {\n  util.assert(mode === 'reflect' || mode === 'symmetric', () => `Invalid mode. Mode must be either reflect or symmetric. ` + `Got ${mode}.`);\n  const $x = convertToTensor(x, 'x', 'mirrorPad');\n\n  if ($x.rank === 0) {\n    throw new Error('mirrorPad(scalar) is not defined. ' + 'Pass non-scalar to mirrorPad');\n  }\n\n  util.assert(paddings.length === $x.rank, () => `Padding doesn't match input. Must be ${$x.rank}. ` + `Got ${paddings.length}.`);\n  const shapeOffset = mode === 'reflect' ? 1 : 0;\n\n  for (let i = 0; i < $x.rank; i++) {\n    util.assert(paddings[i].length === 2, () => `Invalid number of paddings. Must be length of 2 each.`);\n    util.assert(paddings[i][0] >= 0 && paddings[i][0] <= $x.shape[i] - shapeOffset && paddings[i][1] >= 0 && paddings[i][1] <= $x.shape[i] - shapeOffset, () => `Padding in dimension ${i} cannot be greater than or equal ` + `to ${$x.shape[i] - shapeOffset} or less than 0 for input of ` + `shape ${$x.shape}`);\n  }\n\n  const attrs = {\n    paddings,\n    mode\n  };\n  const inputs = {\n    x: $x\n  };\n  return ENGINE.runKernel(MirrorPad, inputs, attrs);\n}\n\nexport const mirrorPad = op({\n  mirrorPad_\n});","map":{"version":3,"names":["ENGINE","MirrorPad","convertToTensor","util","op","mirrorPad_","x","paddings","mode","assert","$x","rank","Error","length","shapeOffset","i","shape","attrs","inputs","runKernel","mirrorPad"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/mirror_pad.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { MirrorPad } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Pads a `tf.Tensor` using mirror padding.\n *\n * This operation implements the `REFLECT` and `SYMMETRIC` modes of pad.\n *\n * ```js\n * const x = tf.range(0, 9).reshape([1, 1, 3, 3]);\n * x.mirrorPad([[0, 0], [0, 0], [2, 2], [2, 2]], 'reflect').print();\n * ```\n * @param x The tensor to pad.\n * @param paddings An array of length `R` (the rank of the tensor), where\n * each element is a length-2 tuple of ints `[padBefore, padAfter]`,\n * specifying how much to pad along each dimension of the tensor.\n * In \"reflect\" mode, the padded regions do not include the borders,\n * while in \"symmetric\" mode the padded regions do include the borders.\n * For example, if the input is `[1, 2, 3]` and paddings is `[0, 2]`,\n * then the output is `[1, 2, 3, 2, 1]` in \"reflect\" mode, and\n * `[1, 2, 3, 3, 2]` in \"symmetric\" mode.\n * If `mode` is \"reflect\" then both `paddings[D, 0]` and `paddings[D, 1]`\n * must be no greater than `x.shape[D] - 1`. If mode is \"symmetric\"\n * then both `paddings[D, 0]` and `paddings[D, 1]` must be no greater than\n * `x.shape[D]`\n * @param mode String to specify padding mode. Can be `'reflect' | 'symmetric'`\n */\n/** @doc {heading: 'Tensors', subheading: 'Transformations'} */\nfunction mirrorPad_(x, paddings, mode) {\n    util.assert(mode === 'reflect' || mode === 'symmetric', () => `Invalid mode. Mode must be either reflect or symmetric. ` +\n        `Got ${mode}.`);\n    const $x = convertToTensor(x, 'x', 'mirrorPad');\n    if ($x.rank === 0) {\n        throw new Error('mirrorPad(scalar) is not defined. ' +\n            'Pass non-scalar to mirrorPad');\n    }\n    util.assert(paddings.length === $x.rank, () => `Padding doesn't match input. Must be ${$x.rank}. ` +\n        `Got ${paddings.length}.`);\n    const shapeOffset = mode === 'reflect' ? 1 : 0;\n    for (let i = 0; i < $x.rank; i++) {\n        util.assert(paddings[i].length === 2, () => `Invalid number of paddings. Must be length of 2 each.`);\n        util.assert(paddings[i][0] >= 0 && paddings[i][0] <= $x.shape[i] - shapeOffset &&\n            paddings[i][1] >= 0 && paddings[i][1] <= $x.shape[i] - shapeOffset, () => `Padding in dimension ${i} cannot be greater than or equal ` +\n            `to ${$x.shape[i] - shapeOffset} or less than 0 for input of ` +\n            `shape ${$x.shape}`);\n    }\n    const attrs = { paddings, mode };\n    const inputs = { x: $x };\n    return ENGINE.runKernel(MirrorPad, inputs, attrs);\n}\nexport const mirrorPad = op({ mirrorPad_ });\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,WAAvB;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AACA,SAASC,EAAT,QAAmB,aAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA,SAASC,UAAT,CAAoBC,CAApB,EAAuBC,QAAvB,EAAiCC,IAAjC,EAAuC;EACnCL,IAAI,CAACM,MAAL,CAAYD,IAAI,KAAK,SAAT,IAAsBA,IAAI,KAAK,WAA3C,EAAwD,MAAO,0DAAD,GACzD,OAAMA,IAAK,GADhB;EAEA,MAAME,EAAE,GAAGR,eAAe,CAACI,CAAD,EAAI,GAAJ,EAAS,WAAT,CAA1B;;EACA,IAAII,EAAE,CAACC,IAAH,KAAY,CAAhB,EAAmB;IACf,MAAM,IAAIC,KAAJ,CAAU,uCACZ,8BADE,CAAN;EAEH;;EACDT,IAAI,CAACM,MAAL,CAAYF,QAAQ,CAACM,MAAT,KAAoBH,EAAE,CAACC,IAAnC,EAAyC,MAAO,wCAAuCD,EAAE,CAACC,IAAK,IAAhD,GAC1C,OAAMJ,QAAQ,CAACM,MAAO,GAD3B;EAEA,MAAMC,WAAW,GAAGN,IAAI,KAAK,SAAT,GAAqB,CAArB,GAAyB,CAA7C;;EACA,KAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,EAAE,CAACC,IAAvB,EAA6BI,CAAC,EAA9B,EAAkC;IAC9BZ,IAAI,CAACM,MAAL,CAAYF,QAAQ,CAACQ,CAAD,CAAR,CAAYF,MAAZ,KAAuB,CAAnC,EAAsC,MAAO,uDAA7C;IACAV,IAAI,CAACM,MAAL,CAAYF,QAAQ,CAACQ,CAAD,CAAR,CAAY,CAAZ,KAAkB,CAAlB,IAAuBR,QAAQ,CAACQ,CAAD,CAAR,CAAY,CAAZ,KAAkBL,EAAE,CAACM,KAAH,CAASD,CAAT,IAAcD,WAAvD,IACRP,QAAQ,CAACQ,CAAD,CAAR,CAAY,CAAZ,KAAkB,CADV,IACeR,QAAQ,CAACQ,CAAD,CAAR,CAAY,CAAZ,KAAkBL,EAAE,CAACM,KAAH,CAASD,CAAT,IAAcD,WAD3D,EACwE,MAAO,wBAAuBC,CAAE,mCAA1B,GACzE,MAAKL,EAAE,CAACM,KAAH,CAASD,CAAT,IAAcD,WAAY,+BAD0C,GAEzE,SAAQJ,EAAE,CAACM,KAAM,EAHtB;EAIH;;EACD,MAAMC,KAAK,GAAG;IAAEV,QAAF;IAAYC;EAAZ,CAAd;EACA,MAAMU,MAAM,GAAG;IAAEZ,CAAC,EAAEI;EAAL,CAAf;EACA,OAAOV,MAAM,CAACmB,SAAP,CAAiBlB,SAAjB,EAA4BiB,MAA5B,EAAoCD,KAApC,CAAP;AACH;;AACD,OAAO,MAAMG,SAAS,GAAGhB,EAAE,CAAC;EAAEC;AAAF,CAAD,CAApB"},"metadata":{},"sourceType":"module"}