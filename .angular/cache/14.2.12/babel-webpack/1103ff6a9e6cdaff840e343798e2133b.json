{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { NodeValueImpl } from './custom_op/node_value_impl';\nimport { getRegisteredOp } from './custom_op/register';\nimport * as arithmetic from './executors/arithmetic_executor';\nimport * as basicMath from './executors/basic_math_executor';\nimport * as control from './executors/control_executor';\nimport * as convolution from './executors/convolution_executor';\nimport * as creation from './executors/creation_executor';\nimport * as dynamic from './executors/dynamic_executor';\nimport * as evaluation from './executors/evaluation_executor';\nimport * as graph from './executors/graph_executor';\nimport * as hashTable from './executors/hash_table_executor';\nimport * as image from './executors/image_executor';\nimport * as logical from './executors/logical_executor';\nimport * as matrices from './executors/matrices_executor';\nimport * as normalization from './executors/normalization_executor';\nimport * as reduction from './executors/reduction_executor';\nimport * as sliceJoin from './executors/slice_join_executor';\nimport * as sparse from './executors/sparse_executor';\nimport * as spectral from './executors/spectral_executor';\nimport * as string from './executors/string_executor';\nimport * as transformation from './executors/transformation_executor';\n/**\n * Executes the op defined by the node object.\n * @param node\n * @param tensorMap contains tensors for executed nodes and weights\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\n\nexport function executeOp(node, tensorMap, context, resourceManager, tidy = tfc.tidy) {\n  const value = ((node, tensorMap, context) => {\n    switch (node.category) {\n      case 'arithmetic':\n        return tidy(() => arithmetic.executeOp(node, tensorMap, context));\n\n      case 'basic_math':\n        return tidy(() => basicMath.executeOp(node, tensorMap, context));\n\n      case 'control':\n        return control.executeOp(node, tensorMap, context);\n\n      case 'convolution':\n        return tidy(() => convolution.executeOp(node, tensorMap, context));\n\n      case 'creation':\n        return tidy(() => creation.executeOp(node, tensorMap, context));\n\n      case 'dynamic':\n        return dynamic.executeOp(node, tensorMap, context);\n\n      case 'evaluation':\n        return tidy(() => evaluation.executeOp(node, tensorMap, context));\n\n      case 'image':\n        return tidy(() => image.executeOp(node, tensorMap, context));\n\n      case 'graph':\n        return tidy(() => graph.executeOp(node, tensorMap, context));\n\n      case 'logical':\n        return tidy(() => logical.executeOp(node, tensorMap, context));\n\n      case 'matrices':\n        return tidy(() => matrices.executeOp(node, tensorMap, context));\n\n      case 'normalization':\n        return tidy(() => normalization.executeOp(node, tensorMap, context));\n\n      case 'reduction':\n        return tidy(() => reduction.executeOp(node, tensorMap, context));\n\n      case 'slice_join':\n        return tidy(() => sliceJoin.executeOp(node, tensorMap, context));\n\n      case 'sparse':\n        return tidy(() => sparse.executeOp(node, tensorMap, context));\n\n      case 'spectral':\n        return tidy(() => spectral.executeOp(node, tensorMap, context));\n\n      case 'string':\n        return tidy(() => string.executeOp(node, tensorMap, context));\n\n      case 'transformation':\n        return tidy(() => transformation.executeOp(node, tensorMap, context));\n\n      case 'hash_table':\n        return hashTable.executeOp(node, tensorMap, context, resourceManager);\n\n      case 'custom':\n        const opMapper = getRegisteredOp(node.op);\n\n        if (opMapper && opMapper.customExecutor) {\n          return opMapper.customExecutor(new NodeValueImpl(node, tensorMap, context));\n        } else {\n          throw TypeError(`Custom op ${node.op} is not registered.`);\n        }\n\n      default:\n        throw TypeError(`Unknown op '${node.op}'. File an issue at ` + `https://github.com/tensorflow/tfjs/issues so we can add it` + `, or register a custom execution with tf.registerOp()`);\n    }\n  })(node, tensorMap, context);\n\n  if (tfc.util.isPromise(value)) {\n    return value.then(data => [].concat(data));\n  }\n\n  return [].concat(value);\n}","map":{"version":3,"names":["tfc","NodeValueImpl","getRegisteredOp","arithmetic","basicMath","control","convolution","creation","dynamic","evaluation","graph","hashTable","image","logical","matrices","normalization","reduction","sliceJoin","sparse","spectral","string","transformation","executeOp","node","tensorMap","context","resourceManager","tidy","value","category","opMapper","op","customExecutor","TypeError","util","isPromise","then","data","concat"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-converter/dist/operations/operation_executor.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { NodeValueImpl } from './custom_op/node_value_impl';\nimport { getRegisteredOp } from './custom_op/register';\nimport * as arithmetic from './executors/arithmetic_executor';\nimport * as basicMath from './executors/basic_math_executor';\nimport * as control from './executors/control_executor';\nimport * as convolution from './executors/convolution_executor';\nimport * as creation from './executors/creation_executor';\nimport * as dynamic from './executors/dynamic_executor';\nimport * as evaluation from './executors/evaluation_executor';\nimport * as graph from './executors/graph_executor';\nimport * as hashTable from './executors/hash_table_executor';\nimport * as image from './executors/image_executor';\nimport * as logical from './executors/logical_executor';\nimport * as matrices from './executors/matrices_executor';\nimport * as normalization from './executors/normalization_executor';\nimport * as reduction from './executors/reduction_executor';\nimport * as sliceJoin from './executors/slice_join_executor';\nimport * as sparse from './executors/sparse_executor';\nimport * as spectral from './executors/spectral_executor';\nimport * as string from './executors/string_executor';\nimport * as transformation from './executors/transformation_executor';\n/**\n * Executes the op defined by the node object.\n * @param node\n * @param tensorMap contains tensors for executed nodes and weights\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\nexport function executeOp(node, tensorMap, context, resourceManager, tidy = tfc.tidy) {\n    const value = ((node, tensorMap, context) => {\n        switch (node.category) {\n            case 'arithmetic':\n                return tidy(() => arithmetic.executeOp(node, tensorMap, context));\n            case 'basic_math':\n                return tidy(() => basicMath.executeOp(node, tensorMap, context));\n            case 'control':\n                return control.executeOp(node, tensorMap, context);\n            case 'convolution':\n                return tidy(() => convolution.executeOp(node, tensorMap, context));\n            case 'creation':\n                return tidy(() => creation.executeOp(node, tensorMap, context));\n            case 'dynamic':\n                return dynamic.executeOp(node, tensorMap, context);\n            case 'evaluation':\n                return tidy(() => evaluation.executeOp(node, tensorMap, context));\n            case 'image':\n                return tidy(() => image.executeOp(node, tensorMap, context));\n            case 'graph':\n                return tidy(() => graph.executeOp(node, tensorMap, context));\n            case 'logical':\n                return tidy(() => logical.executeOp(node, tensorMap, context));\n            case 'matrices':\n                return tidy(() => matrices.executeOp(node, tensorMap, context));\n            case 'normalization':\n                return tidy(() => normalization.executeOp(node, tensorMap, context));\n            case 'reduction':\n                return tidy(() => reduction.executeOp(node, tensorMap, context));\n            case 'slice_join':\n                return tidy(() => sliceJoin.executeOp(node, tensorMap, context));\n            case 'sparse':\n                return tidy(() => sparse.executeOp(node, tensorMap, context));\n            case 'spectral':\n                return tidy(() => spectral.executeOp(node, tensorMap, context));\n            case 'string':\n                return tidy(() => string.executeOp(node, tensorMap, context));\n            case 'transformation':\n                return tidy(() => transformation.executeOp(node, tensorMap, context));\n            case 'hash_table':\n                return hashTable.executeOp(node, tensorMap, context, resourceManager);\n            case 'custom':\n                const opMapper = getRegisteredOp(node.op);\n                if (opMapper && opMapper.customExecutor) {\n                    return opMapper.customExecutor(new NodeValueImpl(node, tensorMap, context));\n                }\n                else {\n                    throw TypeError(`Custom op ${node.op} is not registered.`);\n                }\n            default:\n                throw TypeError(`Unknown op '${node.op}'. File an issue at ` +\n                    `https://github.com/tensorflow/tfjs/issues so we can add it` +\n                    `, or register a custom execution with tf.registerOp()`);\n        }\n    })(node, tensorMap, context);\n    if (tfc.util.isPromise(value)) {\n        return value.then((data) => [].concat(data));\n    }\n    return [].concat(value);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}