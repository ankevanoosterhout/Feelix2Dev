{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Embedding Layer.\n *\n * Original source: keras/constraints.py\n */\nimport { notEqual, reshape, serialization, tidy, zerosLike } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { Layer } from '../engine/topology';\nimport { ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport * as generic_utils from '../utils/generic_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nexport class Embedding extends Layer {\n  constructor(args) {\n    super(args);\n    this.embeddings = null;\n    this.DEFAULT_EMBEDDINGS_INITIALIZER = 'randomUniform';\n\n    if (args.batchInputShape == null && args.inputShape == null) {\n      // Porting Note: This logic is copied from Layer's constructor, since we\n      // can't do exactly what the Python constructor does for Embedding().\n      // Specifically, the super constructor can not be called after the\n      // mutation of the `config` argument.\n      let batchSize = null;\n\n      if (args.batchSize != null) {\n        batchSize = args.batchSize;\n      }\n\n      if (args.inputLength == null) {\n        // Fix super-constructor to what it would have done if\n        // 'config.inputShape' were (None, )\n        this.batchInputShape = [batchSize, null];\n      } else {\n        // Fix super-constructor to what it would have done if\n        // 'config.inputShape' were (config.inputLength, )\n        this.batchInputShape = [batchSize].concat(generic_utils.toList(args.inputLength));\n      }\n    }\n\n    this.inputDim = args.inputDim;\n    generic_utils.assertPositiveInteger(this.inputDim, 'inputDim');\n    this.outputDim = args.outputDim;\n    generic_utils.assertPositiveInteger(this.outputDim, 'outputDim');\n    this.embeddingsInitializer = getInitializer(args.embeddingsInitializer || this.DEFAULT_EMBEDDINGS_INITIALIZER);\n    this.embeddingsRegularizer = getRegularizer(args.embeddingsRegularizer);\n    this.activityRegularizer = getRegularizer(args.activityRegularizer);\n    this.embeddingsConstraint = getConstraint(args.embeddingsConstraint);\n    this.maskZero = args.maskZero;\n    this.supportsMasking = args.maskZero;\n    this.inputLength = args.inputLength;\n  }\n\n  build(inputShape) {\n    this.embeddings = this.addWeight('embeddings', [this.inputDim, this.outputDim], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, true, this.embeddingsConstraint);\n    this.built = true;\n  } // Override warnOnIncompatibleInputShape because an embedding layer allows\n  // the input to have varying ranks.\n\n\n  warnOnIncompatibleInputShape(inputShape) {}\n\n  computeMask(inputs, mask) {\n    return tidy(() => {\n      if (!this.maskZero) {\n        return null;\n      } else {\n        inputs = getExactlyOneTensor(inputs);\n        return notEqual(inputs, zerosLike(inputs));\n      }\n    });\n  }\n\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n\n    if (this.inputLength == null) {\n      return [...inputShape, this.outputDim];\n    } // inputLength can be an array if input is 3D or higher.\n\n\n    const inLens = generic_utils.toList(this.inputLength);\n\n    if (inLens.length !== inputShape.length - 1) {\n      throw new ValueError(`\"inputLength\" is ${this.inputLength}, but received ` + `input shape has shape ${inputShape}`);\n    } else {\n      let i = 0;\n\n      for (let k = 0; k < inLens.length; ++k) {\n        const s1 = inLens[k];\n        const s2 = inputShape[k + 1];\n\n        if (s1 != null && s2 != null && s1 !== s2) {\n          throw new ValueError(`\"inputLength\" is ${this.inputLength}, but received ` + `input shape has shape ${inputShape}`);\n        } else if (s1 == null) {\n          inLens[i] = s2;\n        }\n\n        i++;\n      }\n    }\n\n    return [inputShape[0], ...inLens, this.outputDim];\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs); // Embedding layer accepts only a single input.\n\n      let input = getExactlyOneTensor(inputs);\n\n      if (input.dtype !== 'int32') {\n        input = K.cast(input, 'int32');\n      }\n\n      const output = K.gather(this.embeddings.read(), reshape(input, [input.size]));\n      return reshape(output, getExactlyOneShape(this.computeOutputShape(input.shape)));\n    });\n  }\n\n  getConfig() {\n    const config = {\n      inputDim: this.inputDim,\n      outputDim: this.outputDim,\n      embeddingsInitializer: serializeInitializer(this.embeddingsInitializer),\n      embeddingsRegularizer: serializeRegularizer(this.embeddingsRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      embeddingsConstraint: serializeConstraint(this.embeddingsConstraint),\n      maskZero: this.maskZero,\n      inputLength: this.inputLength\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nEmbedding.className = 'Embedding';\nserialization.registerClass(Embedding);","map":{"version":3,"names":["notEqual","reshape","serialization","tidy","zerosLike","K","getConstraint","serializeConstraint","Layer","ValueError","getInitializer","serializeInitializer","getRegularizer","serializeRegularizer","generic_utils","getExactlyOneShape","getExactlyOneTensor","Embedding","constructor","args","embeddings","DEFAULT_EMBEDDINGS_INITIALIZER","batchInputShape","inputShape","batchSize","inputLength","concat","toList","inputDim","assertPositiveInteger","outputDim","embeddingsInitializer","embeddingsRegularizer","activityRegularizer","embeddingsConstraint","maskZero","supportsMasking","build","addWeight","dtype","built","warnOnIncompatibleInputShape","computeMask","inputs","mask","computeOutputShape","inLens","length","i","k","s1","s2","call","kwargs","invokeCallHook","input","cast","output","gather","read","size","shape","getConfig","config","baseConfig","Object","assign","className","registerClass"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-layers/dist/layers/embeddings.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Embedding Layer.\n *\n * Original source: keras/constraints.py\n */\nimport { notEqual, reshape, serialization, tidy, zerosLike } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { Layer } from '../engine/topology';\nimport { ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport * as generic_utils from '../utils/generic_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nexport class Embedding extends Layer {\n    constructor(args) {\n        super(args);\n        this.embeddings = null;\n        this.DEFAULT_EMBEDDINGS_INITIALIZER = 'randomUniform';\n        if (args.batchInputShape == null && args.inputShape == null) {\n            // Porting Note: This logic is copied from Layer's constructor, since we\n            // can't do exactly what the Python constructor does for Embedding().\n            // Specifically, the super constructor can not be called after the\n            // mutation of the `config` argument.\n            let batchSize = null;\n            if (args.batchSize != null) {\n                batchSize = args.batchSize;\n            }\n            if (args.inputLength == null) {\n                // Fix super-constructor to what it would have done if\n                // 'config.inputShape' were (None, )\n                this.batchInputShape = [batchSize, null];\n            }\n            else {\n                // Fix super-constructor to what it would have done if\n                // 'config.inputShape' were (config.inputLength, )\n                this.batchInputShape =\n                    [batchSize].concat(generic_utils.toList(args.inputLength));\n            }\n        }\n        this.inputDim = args.inputDim;\n        generic_utils.assertPositiveInteger(this.inputDim, 'inputDim');\n        this.outputDim = args.outputDim;\n        generic_utils.assertPositiveInteger(this.outputDim, 'outputDim');\n        this.embeddingsInitializer = getInitializer(args.embeddingsInitializer || this.DEFAULT_EMBEDDINGS_INITIALIZER);\n        this.embeddingsRegularizer = getRegularizer(args.embeddingsRegularizer);\n        this.activityRegularizer = getRegularizer(args.activityRegularizer);\n        this.embeddingsConstraint = getConstraint(args.embeddingsConstraint);\n        this.maskZero = args.maskZero;\n        this.supportsMasking = args.maskZero;\n        this.inputLength = args.inputLength;\n    }\n    build(inputShape) {\n        this.embeddings = this.addWeight('embeddings', [this.inputDim, this.outputDim], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, true, this.embeddingsConstraint);\n        this.built = true;\n    }\n    // Override warnOnIncompatibleInputShape because an embedding layer allows\n    // the input to have varying ranks.\n    warnOnIncompatibleInputShape(inputShape) { }\n    computeMask(inputs, mask) {\n        return tidy(() => {\n            if (!this.maskZero) {\n                return null;\n            }\n            else {\n                inputs = getExactlyOneTensor(inputs);\n                return notEqual(inputs, zerosLike(inputs));\n            }\n        });\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        if (this.inputLength == null) {\n            return [...inputShape, this.outputDim];\n        }\n        // inputLength can be an array if input is 3D or higher.\n        const inLens = generic_utils.toList(this.inputLength);\n        if (inLens.length !== inputShape.length - 1) {\n            throw new ValueError(`\"inputLength\" is ${this.inputLength}, but received ` +\n                `input shape has shape ${inputShape}`);\n        }\n        else {\n            let i = 0;\n            for (let k = 0; k < inLens.length; ++k) {\n                const s1 = inLens[k];\n                const s2 = inputShape[k + 1];\n                if ((s1 != null) && (s2 != null) && (s1 !== s2)) {\n                    throw new ValueError(`\"inputLength\" is ${this.inputLength}, but received ` +\n                        `input shape has shape ${inputShape}`);\n                }\n                else if (s1 == null) {\n                    inLens[i] = s2;\n                }\n                i++;\n            }\n        }\n        return [inputShape[0], ...inLens, this.outputDim];\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            // Embedding layer accepts only a single input.\n            let input = getExactlyOneTensor(inputs);\n            if (input.dtype !== 'int32') {\n                input = K.cast(input, 'int32');\n            }\n            const output = K.gather(this.embeddings.read(), reshape(input, [input.size]));\n            return reshape(output, getExactlyOneShape(this.computeOutputShape(input.shape)));\n        });\n    }\n    getConfig() {\n        const config = {\n            inputDim: this.inputDim,\n            outputDim: this.outputDim,\n            embeddingsInitializer: serializeInitializer(this.embeddingsInitializer),\n            embeddingsRegularizer: serializeRegularizer(this.embeddingsRegularizer),\n            activityRegularizer: serializeRegularizer(this.activityRegularizer),\n            embeddingsConstraint: serializeConstraint(this.embeddingsConstraint),\n            maskZero: this.maskZero,\n            inputLength: this.inputLength\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nEmbedding.className = 'Embedding';\nserialization.registerClass(Embedding);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}