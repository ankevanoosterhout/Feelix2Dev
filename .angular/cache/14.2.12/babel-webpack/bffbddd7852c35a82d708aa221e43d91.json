{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nexport class DepthwiseConv2DProgram {\n  constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false, hasLeakyReluAlpha = false) {\n    this.variableNames = ['x', 'W'];\n    this.customUniforms = [{\n      name: 'pads',\n      type: 'ivec2'\n    }, {\n      name: 'strides',\n      type: 'ivec2'\n    }, {\n      name: 'dilations',\n      type: 'ivec2'\n    }, {\n      name: 'inDims',\n      type: 'ivec2'\n    }];\n    this.outputShape = convInfo.outShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n    let activationSnippet = '',\n        applyActivationSnippet = '';\n\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n\n}","map":{"version":3,"names":["useShapeUniforms","DepthwiseConv2DProgram","constructor","convInfo","addBias","activation","hasPreluActivation","hasLeakyReluAlpha","variableNames","customUniforms","name","type","outputShape","outShape","enableShapeUniforms","length","filterHeight","filterWidth","channelMul","outChannels","inChannels","activationSnippet","applyActivationSnippet","addBiasSnippet","push","userCode"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_gpu_depthwise.js"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nexport class DepthwiseConv2DProgram {\n    constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false, hasLeakyReluAlpha = false) {\n        this.variableNames = ['x', 'W'];\n        this.customUniforms = [\n            { name: 'pads', type: 'ivec2' },\n            { name: 'strides', type: 'ivec2' },\n            { name: 'dilations', type: 'ivec2' },\n            { name: 'inDims', type: 'ivec2' },\n        ];\n        this.outputShape = convInfo.outShape;\n        this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const channelMul = convInfo.outChannels / convInfo.inChannels;\n        let activationSnippet = '', applyActivationSnippet = '';\n        if (activation) {\n            if (hasPreluActivation) {\n                activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else if (hasLeakyReluAlpha) {\n                activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else {\n                activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n            }\n            applyActivationSnippet = `result = activation(result);`;\n        }\n        const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n        if (addBias) {\n            this.variableNames.push('bias');\n        }\n        if (hasPreluActivation) {\n            this.variableNames.push('preluActivationWeights');\n        }\n        if (hasLeakyReluAlpha) {\n            this.variableNames.push('leakyreluAlpha');\n        }\n        this.userCode = `\n      ${activationSnippet}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,gBAAT,QAAiC,cAAjC;AACA,OAAO,MAAMC,sBAAN,CAA6B;EAChCC,WAAW,CAACC,QAAD,EAAWC,OAAO,GAAG,KAArB,EAA4BC,UAAU,GAAG,IAAzC,EAA+CC,kBAAkB,GAAG,KAApE,EAA2EC,iBAAiB,GAAG,KAA/F,EAAsG;IAC7G,KAAKC,aAAL,GAAqB,CAAC,GAAD,EAAM,GAAN,CAArB;IACA,KAAKC,cAAL,GAAsB,CAClB;MAAEC,IAAI,EAAE,MAAR;MAAgBC,IAAI,EAAE;IAAtB,CADkB,EAElB;MAAED,IAAI,EAAE,SAAR;MAAmBC,IAAI,EAAE;IAAzB,CAFkB,EAGlB;MAAED,IAAI,EAAE,WAAR;MAAqBC,IAAI,EAAE;IAA3B,CAHkB,EAIlB;MAAED,IAAI,EAAE,QAAR;MAAkBC,IAAI,EAAE;IAAxB,CAJkB,CAAtB;IAMA,KAAKC,WAAL,GAAmBT,QAAQ,CAACU,QAA5B;IACA,KAAKC,mBAAL,GAA2Bd,gBAAgB,CAAC,KAAKY,WAAL,CAAiBG,MAAlB,CAA3C;IACA,MAAMC,YAAY,GAAGb,QAAQ,CAACa,YAA9B;IACA,MAAMC,WAAW,GAAGd,QAAQ,CAACc,WAA7B;IACA,MAAMC,UAAU,GAAGf,QAAQ,CAACgB,WAAT,GAAuBhB,QAAQ,CAACiB,UAAnD;IACA,IAAIC,iBAAiB,GAAG,EAAxB;IAAA,IAA4BC,sBAAsB,GAAG,EAArD;;IACA,IAAIjB,UAAJ,EAAgB;MACZ,IAAIC,kBAAJ,EAAwB;QACpBe,iBAAiB,GAAI;AACrC;AACA,YAAYhB,UAAW;AACvB,UAHgB;MAIH,CALD,MAMK,IAAIE,iBAAJ,EAAuB;QACxBc,iBAAiB,GAAI;AACrC;AACA,YAAYhB,UAAW;AACvB,UAHgB;MAIH,CALI,MAMA;QACDgB,iBAAiB,GAAI;AACrC;AACA,cAAchB,UAAW;AACzB;AACA,SAJgB;MAKH;;MACDiB,sBAAsB,GAAI,8BAA1B;IACH;;IACD,MAAMC,cAAc,GAAGnB,OAAO,GAAG,iCAAH,GAAuC,EAArE;;IACA,IAAIA,OAAJ,EAAa;MACT,KAAKI,aAAL,CAAmBgB,IAAnB,CAAwB,MAAxB;IACH;;IACD,IAAIlB,kBAAJ,EAAwB;MACpB,KAAKE,aAAL,CAAmBgB,IAAnB,CAAwB,wBAAxB;IACH;;IACD,IAAIjB,iBAAJ,EAAuB;MACnB,KAAKC,aAAL,CAAmBgB,IAAnB,CAAwB,gBAAxB;IACH;;IACD,KAAKC,QAAL,GAAiB;AACzB,QAAQJ,iBAAkB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwBH,UAAW;AACnC,4BAA4BA,UAAW;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgCF,YAAa;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkCC,WAAY;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAUM,cAAe;AACzB,UAAUD,sBAAuB;AACjC;AACA;AACA,KA3CQ;EA4CH;;AA3F+B"},"metadata":{},"sourceType":"module"}