{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class StridedSliceProgram {\n  constructor(begin, strides, size) {\n    this.variableNames = ['x'];\n    this.outputShape = size;\n    const rank = size.length;\n    const inputDtype = getCoordsDataType(size.length);\n    const dtype = getCoordsDataType(size.length);\n    let newCoords = '';\n\n    if (rank === 1) {\n      newCoords = 'coords * strides + begin';\n    } else {\n      let outputAxis = 0;\n      newCoords = size.map((_, i) => {\n        outputAxis++;\n        return size.length === 1 ? `coords * strides[${i}] + begin[${i}]` : `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;\n      }).join(',');\n    }\n\n    this.userCode = `\n      ${inputDtype} begin = ${inputDtype}(${begin});\n      ${inputDtype} strides = ${inputDtype}(${strides});\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        setOutput(getX(${newCoords}));\n      }\n    `;\n  }\n\n}","map":{"version":3,"names":["getCoordsDataType","StridedSliceProgram","constructor","begin","strides","size","variableNames","outputShape","rank","length","inputDtype","dtype","newCoords","outputAxis","map","_","i","join","userCode"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/strided_slice_gpu.js"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class StridedSliceProgram {\n    constructor(begin, strides, size) {\n        this.variableNames = ['x'];\n        this.outputShape = size;\n        const rank = size.length;\n        const inputDtype = getCoordsDataType(size.length);\n        const dtype = getCoordsDataType(size.length);\n        let newCoords = '';\n        if (rank === 1) {\n            newCoords = 'coords * strides + begin';\n        }\n        else {\n            let outputAxis = 0;\n            newCoords =\n                size.map((_, i) => {\n                    outputAxis++;\n                    return size.length === 1 ?\n                        `coords * strides[${i}] + begin[${i}]` :\n                        `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;\n                })\n                    .join(',');\n        }\n        this.userCode = `\n      ${inputDtype} begin = ${inputDtype}(${begin});\n      ${inputDtype} strides = ${inputDtype}(${strides});\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        setOutput(getX(${newCoords}));\n      }\n    `;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,iBAAT,QAAkC,mBAAlC;AACA,OAAO,MAAMC,mBAAN,CAA0B;EAC7BC,WAAW,CAACC,KAAD,EAAQC,OAAR,EAAiBC,IAAjB,EAAuB;IAC9B,KAAKC,aAAL,GAAqB,CAAC,GAAD,CAArB;IACA,KAAKC,WAAL,GAAmBF,IAAnB;IACA,MAAMG,IAAI,GAAGH,IAAI,CAACI,MAAlB;IACA,MAAMC,UAAU,GAAGV,iBAAiB,CAACK,IAAI,CAACI,MAAN,CAApC;IACA,MAAME,KAAK,GAAGX,iBAAiB,CAACK,IAAI,CAACI,MAAN,CAA/B;IACA,IAAIG,SAAS,GAAG,EAAhB;;IACA,IAAIJ,IAAI,KAAK,CAAb,EAAgB;MACZI,SAAS,GAAG,0BAAZ;IACH,CAFD,MAGK;MACD,IAAIC,UAAU,GAAG,CAAjB;MACAD,SAAS,GACLP,IAAI,CAACS,GAAL,CAAS,CAACC,CAAD,EAAIC,CAAJ,KAAU;QACfH,UAAU;QACV,OAAOR,IAAI,CAACI,MAAL,KAAgB,CAAhB,GACF,oBAAmBO,CAAE,aAAYA,CAAE,GADjC,GAEF,UAASH,UAAU,GAAG,CAAE,eAAcG,CAAE,aAAYA,CAAE,GAF3D;MAGH,CALD,EAMKC,IANL,CAMU,GANV,CADJ;IAQH;;IACD,KAAKC,QAAL,GAAiB;AACzB,QAAQR,UAAW,YAAWA,UAAW,IAAGP,KAAM;AAClD,QAAQO,UAAW,cAAaA,UAAW,IAAGN,OAAQ;AACtD;AACA;AACA,UAAUO,KAAM;AAChB,yBAAyBC,SAAU;AACnC;AACA,KARQ;EASH;;AA/B4B"},"metadata":{},"sourceType":"module"}