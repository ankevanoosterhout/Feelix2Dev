{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Convolutional Layers\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { getActivation, serializeActivation } from '../activations';\nimport { imageDataFormat } from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport { checkDataFormat, checkInterpolationFormat, checkPaddingMode } from '../common';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { InputSpec, Layer } from '../engine/topology';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { convOutputLength, deconvLength, normalizeArray } from '../utils/conv_utils';\nimport * as generic_utils from '../utils/generic_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\n/**\n * Transpose and cast the input before the conv2d.\n * @param x Input image tensor.\n * @param dataFormat\n */\n\nexport function preprocessConv2DInput(x, dataFormat) {\n  // TODO(cais): Cast type to float32 if not.\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n\n    if (dataFormat === 'channelsFirst') {\n      return tfc.transpose(x, [0, 2, 3, 1]); // NCHW -> NHWC.\n    } else {\n      return x;\n    }\n  });\n}\n/**\n * Transpose and cast the input before the conv3d.\n * @param x Input image tensor.\n * @param dataFormat\n */\n\nexport function preprocessConv3DInput(x, dataFormat) {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n\n    if (dataFormat === 'channelsFirst') {\n      return tfc.transpose(x, [0, 2, 3, 4, 1]); // NCDHW -> NDHWC.\n    } else {\n      return x;\n    }\n  });\n}\n/**\n * 1D-convolution with bias added.\n *\n * Porting Note: This function does not exist in the Python Keras backend.\n *   It is exactly the same as `conv2d`, except the added `bias`.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.\n * @param bias Bias, rank-3, of shape `[outDepth]`.\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\n\nexport function conv1dWithBias(x, kernel, bias, strides = 1, padding = 'valid', dataFormat, dilationRate = 1) {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n\n    checkDataFormat(dataFormat); // Check the ranks of x, kernel and bias.\n\n    if (x.shape.length !== 3) {\n      throw new ValueError(`The input of a conv1dWithBias operation should be 3, but is ` + `${x.shape.length} instead.`);\n    }\n\n    if (kernel.shape.length !== 3) {\n      throw new ValueError(`The kernel for a conv1dWithBias operation should be 3, but is ` + `${kernel.shape.length} instead`);\n    }\n\n    if (bias != null && bias.shape.length !== 1) {\n      throw new ValueError(`The bias for a conv1dWithBias operation should be 1, but is ` + `${kernel.shape.length} instead`);\n    } // TODO(cais): Support CAUSAL padding mode.\n\n\n    if (dataFormat === 'channelsFirst') {\n      x = tfc.transpose(x, [0, 2, 1]); // NCW -> NWC.\n    }\n\n    if (padding === 'causal') {\n      throw new NotImplementedError('The support for CAUSAL padding mode in conv1dWithBias is not ' + 'implemented yet.');\n    }\n\n    let y = tfc.conv1d(x, kernel, strides, padding === 'same' ? 'same' : 'valid', 'NWC', dilationRate);\n\n    if (bias != null) {\n      y = K.biasAdd(y, bias);\n    }\n\n    return y;\n  });\n}\n/**\n * 1D-convolution.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.s\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\n\nexport function conv1d(x, kernel, strides = 1, padding = 'valid', dataFormat, dilationRate = 1) {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv1dWithBias(x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n/**\n * 2D Convolution\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 2D pooling.\n */\n\nexport function conv2d(x, kernel, strides = [1, 1], padding = 'valid', dataFormat, dilationRate) {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv2dWithBiasActivation(x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n/**\n * 2D Convolution with an added bias and optional activation.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv2d`, except the added `bias`.\n */\n\nexport function conv2dWithBiasActivation(x, kernel, bias, strides = [1, 1], padding = 'valid', dataFormat, dilationRate, activation = null) {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n\n    checkDataFormat(dataFormat);\n\n    if (x.rank !== 3 && x.rank !== 4) {\n      throw new ValueError(`conv2dWithBiasActivation expects input to be of rank 3 or 4, ` + `but received ${x.rank}.`);\n    }\n\n    if (kernel.rank !== 3 && kernel.rank !== 4) {\n      throw new ValueError(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, ` + `but received ${x.rank}.`);\n    }\n\n    let y = preprocessConv2DInput(x, dataFormat);\n\n    if (padding === 'causal') {\n      throw new NotImplementedError('The support for CAUSAL padding mode in conv1dWithBias is not ' + 'implemented yet.');\n    }\n\n    y = tfc.fused.conv2d({\n      x: y,\n      filter: kernel,\n      strides: strides,\n      pad: padding === 'same' ? 'same' : 'valid',\n      dilations: dilationRate,\n      dataFormat: 'NHWC',\n      bias,\n      activation\n    });\n\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 3, 1, 2]);\n    }\n\n    return y;\n  });\n}\n/**\n * 3D Convolution.\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 3D convolution.\n */\n\nexport function conv3d(x, kernel, strides = [1, 1, 1], padding = 'valid', dataFormat, dilationRate) {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv3dWithBias(x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n/**\n * 3D Convolution with an added bias.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv3d`, except the added `bias`.\n */\n\nexport function conv3dWithBias(x, kernel, bias, strides = [1, 1, 1], padding = 'valid', dataFormat, dilationRate) {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n\n    checkDataFormat(dataFormat);\n\n    if (x.rank !== 4 && x.rank !== 5) {\n      throw new ValueError(`conv3dWithBias expects input to be of rank 4 or 5, but received ` + `${x.rank}.`);\n    }\n\n    if (kernel.rank !== 4 && kernel.rank !== 5) {\n      throw new ValueError(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ` + `${x.rank}.`);\n    }\n\n    let y = preprocessConv3DInput(x, dataFormat);\n\n    if (padding === 'causal') {\n      throw new NotImplementedError('The support for CAUSAL padding mode in conv3dWithBias is not ' + 'implemented yet.');\n    }\n\n    y = tfc.conv3d(y, kernel, strides, padding === 'same' ? 'same' : 'valid', 'NDHWC', dilationRate);\n\n    if (bias != null) {\n      y = K.biasAdd(y, bias);\n    }\n\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 4, 1, 2, 3]);\n    }\n\n    return y;\n  });\n}\n/**\n * Abstract convolution layer.\n */\n\nexport class BaseConv extends Layer {\n  constructor(rank, args) {\n    super(args);\n    this.bias = null;\n    this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n    this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n    BaseConv.verifyArgs(args);\n    this.rank = rank;\n    generic_utils.assertPositiveInteger(this.rank, 'rank');\n\n    if (this.rank !== 1 && this.rank !== 2 && this.rank !== 3) {\n      throw new NotImplementedError(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is ` + `not implemented yet.`);\n    }\n\n    this.kernelSize = normalizeArray(args.kernelSize, rank, 'kernelSize');\n    this.strides = normalizeArray(args.strides == null ? 1 : args.strides, rank, 'strides');\n    this.padding = args.padding == null ? 'valid' : args.padding;\n    checkPaddingMode(this.padding);\n    this.dataFormat = args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    this.activation = getActivation(args.activation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n    this.biasInitializer = getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n    this.activityRegularizer = getRegularizer(args.activityRegularizer);\n    this.dilationRate = normalizeArray(args.dilationRate == null ? 1 : args.dilationRate, rank, 'dilationRate');\n\n    if (this.rank === 1 && Array.isArray(this.dilationRate) && this.dilationRate.length !== 1) {\n      throw new ValueError(`dilationRate must be a number or an array of a single number ` + `for 1D convolution, but received ` + `${JSON.stringify(this.dilationRate)}`);\n    } else if (this.rank === 2) {\n      if (typeof this.dilationRate === 'number') {\n        this.dilationRate = [this.dilationRate, this.dilationRate];\n      } else if (this.dilationRate.length !== 2) {\n        throw new ValueError(`dilationRate must be a number or array of two numbers for 2D ` + `convolution, but received ${JSON.stringify(this.dilationRate)}`);\n      }\n    } else if (this.rank === 3) {\n      if (typeof this.dilationRate === 'number') {\n        this.dilationRate = [this.dilationRate, this.dilationRate, this.dilationRate];\n      } else if (this.dilationRate.length !== 3) {\n        throw new ValueError(`dilationRate must be a number or array of three numbers for 3D ` + `convolution, but received ${JSON.stringify(this.dilationRate)}`);\n      }\n    }\n  }\n\n  static verifyArgs(args) {\n    // Check config.kernelSize type and shape.\n    generic_utils.assert('kernelSize' in args, `required key 'kernelSize' not in config`);\n\n    if (typeof args.kernelSize !== 'number' && !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 3)) {\n      throw new ValueError(`BaseConv expects config.kernelSize to be number or number[] with ` + `length 1, 2, or 3, but received ${JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n\n  getConfig() {\n    const config = {\n      kernelSize: this.kernelSize,\n      strides: this.strides,\n      padding: this.padding,\n      dataFormat: this.dataFormat,\n      dilationRate: this.dilationRate,\n      activation: serializeActivation(this.activation),\n      useBias: this.useBias,\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      biasConstraint: serializeConstraint(this.biasConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n}\n/**\n * Abstract nD convolution layer.  Ancestor of convolution layers which reduce\n * across channels, i.e., Conv1D and Conv2D, but not DepthwiseConv2D.\n */\n\nexport class Conv extends BaseConv {\n  constructor(rank, args) {\n    super(rank, args);\n    this.kernel = null;\n    Conv.verifyArgs(args);\n    this.filters = args.filters;\n    generic_utils.assertPositiveInteger(this.filters, 'filters');\n    this.kernelInitializer = getInitializer(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n  }\n\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError(`The channel dimension of the input should be defined. ` + `Found ${inputShape[channelAxis]}`);\n    }\n\n    const inputDim = inputShape[channelAxis];\n    const kernelShape = this.kernelSize.concat([inputDim, this.filters]);\n    this.kernel = this.addWeight('kernel', kernelShape, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n\n    if (this.useBias) {\n      this.bias = this.addWeight('bias', [this.filters], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    }\n\n    this.inputSpec = [{\n      ndim: this.rank + 2,\n      axes: {\n        [channelAxis]: inputDim\n      }\n    }];\n    this.built = true;\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      let outputs;\n      const biasValue = this.bias == null ? null : this.bias.read();\n      const fusedActivationName = generic_utils.mapActivationToFusedKernel(this.activation.getClassName());\n\n      if (fusedActivationName != null && this.rank === 2) {\n        outputs = conv2dWithBiasActivation(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate, fusedActivationName);\n      } else {\n        if (this.rank === 1) {\n          outputs = conv1dWithBias(inputs, this.kernel.read(), biasValue, this.strides[0], this.padding, this.dataFormat, this.dilationRate[0]);\n        } else if (this.rank === 2) {\n          // TODO(cais): Move up to constructor.\n          outputs = conv2dWithBiasActivation(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate);\n        } else if (this.rank === 3) {\n          outputs = conv3dWithBias(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate);\n        } else {\n          throw new NotImplementedError('convolutions greater than 3D are not implemented yet.');\n        }\n\n        if (this.activation != null) {\n          outputs = this.activation.apply(outputs);\n        }\n      }\n\n      return outputs;\n    });\n  }\n\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const newSpace = [];\n    const space = this.dataFormat === 'channelsLast' ? inputShape.slice(1, inputShape.length - 1) : inputShape.slice(2);\n\n    for (let i = 0; i < space.length; ++i) {\n      const newDim = convOutputLength(space[i], this.kernelSize[i], this.padding, this.strides[i], typeof this.dilationRate === 'number' ? this.dilationRate : this.dilationRate[i]);\n      newSpace.push(newDim);\n    }\n\n    let outputShape = [inputShape[0]];\n\n    if (this.dataFormat === 'channelsLast') {\n      outputShape = outputShape.concat(newSpace);\n      outputShape.push(this.filters);\n    } else {\n      outputShape.push(this.filters);\n      outputShape = outputShape.concat(newSpace);\n    }\n\n    return outputShape;\n  }\n\n  getConfig() {\n    const config = {\n      filters: this.filters,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  static verifyArgs(args) {\n    // Check config.filters type, shape, and value.\n    if (!('filters' in args) || typeof args.filters !== 'number' || args.filters < 1) {\n      throw new ValueError(`Convolution layer expected config.filters to be a 'number' > 0 ` + `but got ${JSON.stringify(args.filters)}`);\n    }\n  }\n\n}\nexport class Conv2D extends Conv {\n  constructor(args) {\n    super(2, args);\n    Conv2D.verifyArgs(args);\n  }\n\n  getConfig() {\n    const config = super.getConfig();\n    delete config['rank'];\n    return config;\n  }\n\n  static verifyArgs(args) {\n    // config.kernelSize must be a number or array of numbers.\n    if (typeof args.kernelSize !== 'number' && !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 2)) {\n      throw new ValueError(`Conv2D expects config.kernelSize to be number or number[] with ` + `length 1 or 2, but received ${JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n\n}\n/** @nocollapse */\n\nConv2D.className = 'Conv2D';\nserialization.registerClass(Conv2D);\nexport class Conv3D extends Conv {\n  constructor(args) {\n    super(3, args);\n    Conv3D.verifyArgs(args);\n  }\n\n  getConfig() {\n    const config = super.getConfig();\n    delete config['rank'];\n    return config;\n  }\n\n  static verifyArgs(args) {\n    // config.kernelSize must be a number or array of numbers.\n    if (typeof args.kernelSize !== 'number') {\n      if (!(Array.isArray(args.kernelSize) && (args.kernelSize.length === 1 || args.kernelSize.length === 3))) {\n        throw new ValueError(`Conv3D expects config.kernelSize to be number or` + ` [number, number, number], but received ${JSON.stringify(args.kernelSize)}.`);\n      }\n    }\n  }\n\n}\n/** @nocollapse */\n\nConv3D.className = 'Conv3D';\nserialization.registerClass(Conv3D);\nexport class Conv2DTranspose extends Conv2D {\n  constructor(args) {\n    super(args);\n    this.inputSpec = [new InputSpec({\n      ndim: 4\n    })];\n\n    if (this.padding !== 'same' && this.padding !== 'valid') {\n      throw new ValueError(`Conv2DTranspose currently supports only padding modes 'same' ` + `and 'valid', but received padding mode ${this.padding}`);\n    }\n  }\n\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n\n    if (inputShape.length !== 4) {\n      throw new ValueError('Input should have rank 4; Received input shape: ' + JSON.stringify(inputShape));\n    }\n\n    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError('The channel dimension of the inputs should be defined. ' + 'Found `None`.');\n    }\n\n    const inputDim = inputShape[channelAxis];\n    const kernelShape = this.kernelSize.concat([this.filters, inputDim]);\n    this.kernel = this.addWeight('kernel', kernelShape, 'float32', this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n\n    if (this.useBias) {\n      this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    } // Set input spec.\n\n\n    this.inputSpec = [new InputSpec({\n      ndim: 4,\n      axes: {\n        [channelAxis]: inputDim\n      }\n    })];\n    this.built = true;\n  }\n\n  call(inputs, kwargs) {\n    return tfc.tidy(() => {\n      let input = getExactlyOneTensor(inputs);\n\n      if (input.shape.length !== 4) {\n        throw new ValueError(`Conv2DTranspose.call() expects input tensor to be rank-4, but ` + `received a tensor of rank-${input.shape.length}`);\n      }\n\n      const inputShape = input.shape;\n      const batchSize = inputShape[0];\n      let hAxis;\n      let wAxis;\n\n      if (this.dataFormat === 'channelsFirst') {\n        hAxis = 2;\n        wAxis = 3;\n      } else {\n        hAxis = 1;\n        wAxis = 2;\n      }\n\n      const height = inputShape[hAxis];\n      const width = inputShape[wAxis];\n      const kernelH = this.kernelSize[0];\n      const kernelW = this.kernelSize[1];\n      const strideH = this.strides[0];\n      const strideW = this.strides[1]; // Infer the dynamic output shape.\n\n      const outHeight = deconvLength(height, strideH, kernelH, this.padding);\n      const outWidth = deconvLength(width, strideW, kernelW, this.padding); // Porting Note: We don't branch based on `this.dataFormat` here,\n      // because\n      //   the tjfs-core function `conv2dTranspose` called below always\n      //   assumes channelsLast.\n\n      const outputShape = [batchSize, outHeight, outWidth, this.filters];\n\n      if (this.dataFormat !== 'channelsLast') {\n        input = tfc.transpose(input, [0, 2, 3, 1]);\n      }\n\n      let outputs = tfc.conv2dTranspose(input, this.kernel.read(), outputShape, this.strides, this.padding);\n\n      if (this.dataFormat !== 'channelsLast') {\n        outputs = tfc.transpose(outputs, [0, 3, 1, 2]);\n      }\n\n      if (this.bias != null) {\n        outputs = K.biasAdd(outputs, this.bias.read(), this.dataFormat);\n      }\n\n      if (this.activation != null) {\n        outputs = this.activation.apply(outputs);\n      }\n\n      return outputs;\n    });\n  }\n\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const outputShape = inputShape.slice();\n    let channelAxis;\n    let heightAxis;\n    let widthAxis;\n\n    if (this.dataFormat === 'channelsFirst') {\n      channelAxis = 1;\n      heightAxis = 2;\n      widthAxis = 3;\n    } else {\n      channelAxis = 3;\n      heightAxis = 1;\n      widthAxis = 2;\n    }\n\n    const kernelH = this.kernelSize[0];\n    const kernelW = this.kernelSize[1];\n    const strideH = this.strides[0];\n    const strideW = this.strides[1];\n    outputShape[channelAxis] = this.filters;\n    outputShape[heightAxis] = deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);\n    outputShape[widthAxis] = deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);\n    return outputShape;\n  }\n\n  getConfig() {\n    const config = super.getConfig();\n    delete config['dilationRate'];\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nConv2DTranspose.className = 'Conv2DTranspose';\nserialization.registerClass(Conv2DTranspose);\nexport class Conv3DTranspose extends Conv3D {\n  constructor(args) {\n    super(args);\n    this.inputSpec = [new InputSpec({\n      ndim: 5\n    })];\n\n    if (this.padding !== 'same' && this.padding !== 'valid') {\n      throw new ValueError(`Conv3DTranspose currently supports only padding modes 'same' ` + `and 'valid', but received padding mode ${this.padding}`);\n    }\n  }\n\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n\n    if (inputShape.length !== 5) {\n      throw new ValueError('Input should have rank 5; Received input shape: ' + JSON.stringify(inputShape));\n    }\n\n    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError('The channel dimension of the inputs should be defined. ' + 'Found `None`.');\n    }\n\n    const inputDim = inputShape[channelAxis];\n    const kernelShape = this.kernelSize.concat([this.filters, inputDim]);\n    this.kernel = this.addWeight('kernel', kernelShape, 'float32', this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n\n    if (this.useBias) {\n      this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    } // Set input spec.\n\n\n    this.inputSpec = [new InputSpec({\n      ndim: 5,\n      axes: {\n        [channelAxis]: inputDim\n      }\n    })];\n    this.built = true;\n  }\n\n  call(inputs, kwargs) {\n    return tfc.tidy(() => {\n      let input = getExactlyOneTensor(inputs);\n\n      if (input.shape.length !== 5) {\n        throw new ValueError(`Conv3DTranspose.call() expects input tensor to be rank-4, but ` + `received a tensor of rank-${input.shape.length}`);\n      }\n\n      const inputShape = input.shape;\n      const batchSize = inputShape[0];\n      let hAxis;\n      let wAxis;\n      let dAxis;\n\n      if (this.dataFormat === 'channelsFirst') {\n        dAxis = 2;\n        hAxis = 3;\n        wAxis = 4;\n      } else {\n        dAxis = 1;\n        hAxis = 2;\n        wAxis = 3;\n      }\n\n      const depth = inputShape[dAxis];\n      const height = inputShape[hAxis];\n      const width = inputShape[wAxis];\n      const kernelD = this.kernelSize[0];\n      const kernelH = this.kernelSize[1];\n      const kernelW = this.kernelSize[2];\n      const strideD = this.strides[0];\n      const strideH = this.strides[1];\n      const strideW = this.strides[2]; // Infer the dynamic output shape.\n\n      const outDepth = deconvLength(depth, strideD, kernelD, this.padding);\n      const outHeight = deconvLength(height, strideH, kernelH, this.padding);\n      const outWidth = deconvLength(width, strideW, kernelW, this.padding); // Same as `conv2dTranspose`. We always assumes channelsLast.\n\n      const outputShape = [batchSize, outDepth, outHeight, outWidth, this.filters];\n\n      if (this.dataFormat !== 'channelsLast') {\n        input = tfc.transpose(input, [0, 2, 3, 4, 1]);\n      }\n\n      let outputs = tfc.conv3dTranspose(input, this.kernel.read(), outputShape, this.strides, this.padding);\n\n      if (this.dataFormat !== 'channelsLast') {\n        outputs = tfc.transpose(outputs, [0, 4, 1, 2, 3]);\n      }\n\n      if (this.bias !== null) {\n        outputs = K.biasAdd(outputs, this.bias.read(), this.dataFormat);\n      }\n\n      if (this.activation !== null) {\n        outputs = this.activation.apply(outputs);\n      }\n\n      return outputs;\n    });\n  }\n\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const outputShape = inputShape.slice();\n    let channelAxis;\n    let depthAxis;\n    let heightAxis;\n    let widthAxis;\n\n    if (this.dataFormat === 'channelsFirst') {\n      channelAxis = 1;\n      depthAxis = 2;\n      heightAxis = 3;\n      widthAxis = 4;\n    } else {\n      channelAxis = 4;\n      depthAxis = 1;\n      heightAxis = 2;\n      widthAxis = 3;\n    }\n\n    const kernelD = this.kernelSize[0];\n    const kernelH = this.kernelSize[1];\n    const kernelW = this.kernelSize[2];\n    const strideD = this.strides[0];\n    const strideH = this.strides[1];\n    const strideW = this.strides[2];\n    outputShape[channelAxis] = this.filters;\n    outputShape[depthAxis] = deconvLength(outputShape[depthAxis], strideD, kernelD, this.padding);\n    outputShape[heightAxis] = deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);\n    outputShape[widthAxis] = deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);\n    return outputShape;\n  }\n\n  getConfig() {\n    const config = super.getConfig();\n    delete config['dilationRate'];\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nConv3DTranspose.className = 'Conv3DTranspose';\nserialization.registerClass(Conv3DTranspose);\nexport class SeparableConv extends Conv {\n  constructor(rank, config) {\n    super(rank, config);\n    this.DEFAULT_DEPTHWISE_INITIALIZER = 'glorotUniform';\n    this.DEFAULT_POINTWISE_INITIALIZER = 'glorotUniform';\n    this.depthwiseKernel = null;\n    this.pointwiseKernel = null;\n\n    if (config.filters == null) {\n      throw new ValueError('The `filters` configuration field is required by SeparableConv, ' + 'but is unspecified.');\n    }\n\n    if (config.kernelInitializer != null || config.kernelRegularizer != null || config.kernelConstraint != null) {\n      throw new ValueError('Fields kernelInitializer, kernelRegularizer and kernelConstraint ' + 'are invalid for SeparableConv2D. Use depthwiseInitializer, ' + 'depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, ' + 'pointwiseRegularizer and pointwiseConstraint instead.');\n    }\n\n    if (config.padding != null && config.padding !== 'same' && config.padding !== 'valid') {\n      throw new ValueError(`SeparableConv${this.rank}D supports only padding modes: ` + `'same' and 'valid', but received ${JSON.stringify(config.padding)}`);\n    }\n\n    this.depthMultiplier = config.depthMultiplier == null ? 1 : config.depthMultiplier;\n    this.depthwiseInitializer = getInitializer(config.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER);\n    this.depthwiseRegularizer = getRegularizer(config.depthwiseRegularizer);\n    this.depthwiseConstraint = getConstraint(config.depthwiseConstraint);\n    this.pointwiseInitializer = getInitializer(config.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER);\n    this.pointwiseRegularizer = getRegularizer(config.pointwiseRegularizer);\n    this.pointwiseConstraint = getConstraint(config.pointwiseConstraint);\n  }\n\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n\n    if (inputShape.length < this.rank + 2) {\n      throw new ValueError(`Inputs to SeparableConv${this.rank}D should have rank ` + `${this.rank + 2}, but received input shape: ` + `${JSON.stringify(inputShape)}`);\n    }\n\n    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n\n    if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n      throw new ValueError(`The channel dimension of the inputs should be defined, ` + `but found ${JSON.stringify(inputShape[channelAxis])}`);\n    }\n\n    const inputDim = inputShape[channelAxis];\n    const depthwiseKernelShape = this.kernelSize.concat([inputDim, this.depthMultiplier]);\n    const pointwiseKernelShape = [];\n\n    for (let i = 0; i < this.rank; ++i) {\n      pointwiseKernelShape.push(1);\n    }\n\n    pointwiseKernelShape.push(inputDim * this.depthMultiplier, this.filters);\n    const trainable = true;\n    this.depthwiseKernel = this.addWeight('depthwise_kernel', depthwiseKernelShape, 'float32', this.depthwiseInitializer, this.depthwiseRegularizer, trainable, this.depthwiseConstraint);\n    this.pointwiseKernel = this.addWeight('pointwise_kernel', pointwiseKernelShape, 'float32', this.pointwiseInitializer, this.pointwiseRegularizer, trainable, this.pointwiseConstraint);\n\n    if (this.useBias) {\n      this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, trainable, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n\n    this.inputSpec = [new InputSpec({\n      ndim: this.rank + 2,\n      axes: {\n        [channelAxis]: inputDim\n      }\n    })];\n    this.built = true;\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      let output;\n\n      if (this.rank === 1) {\n        throw new NotImplementedError('1D separable convolution is not implemented yet.');\n      } else if (this.rank === 2) {\n        if (this.dataFormat === 'channelsFirst') {\n          inputs = tfc.transpose(inputs, [0, 2, 3, 1]); // NCHW -> NHWC.\n        }\n\n        output = tfc.separableConv2d(inputs, this.depthwiseKernel.read(), this.pointwiseKernel.read(), this.strides, this.padding, this.dilationRate, 'NHWC');\n      }\n\n      if (this.useBias) {\n        output = K.biasAdd(output, this.bias.read(), this.dataFormat);\n      }\n\n      if (this.activation != null) {\n        output = this.activation.apply(output);\n      }\n\n      if (this.dataFormat === 'channelsFirst') {\n        output = tfc.transpose(output, [0, 3, 1, 2]); // NHWC -> NCHW.\n      }\n\n      return output;\n    });\n  }\n\n  getConfig() {\n    const config = super.getConfig();\n    delete config['rank'];\n    delete config['kernelInitializer'];\n    delete config['kernelRegularizer'];\n    delete config['kernelConstraint'];\n    config['depthwiseInitializer'] = serializeInitializer(this.depthwiseInitializer);\n    config['pointwiseInitializer'] = serializeInitializer(this.pointwiseInitializer);\n    config['depthwiseRegularizer'] = serializeRegularizer(this.depthwiseRegularizer);\n    config['pointwiseRegularizer'] = serializeRegularizer(this.pointwiseRegularizer);\n    config['depthwiseConstraint'] = serializeConstraint(this.depthwiseConstraint);\n    config['pointwiseConstraint'] = serializeConstraint(this.pointwiseConstraint);\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nSeparableConv.className = 'SeparableConv';\nexport class SeparableConv2D extends SeparableConv {\n  constructor(args) {\n    super(2, args);\n  }\n\n}\n/** @nocollapse */\n\nSeparableConv2D.className = 'SeparableConv2D';\nserialization.registerClass(SeparableConv2D);\nexport class Conv1D extends Conv {\n  constructor(args) {\n    super(1, args);\n    Conv1D.verifyArgs(args);\n    this.inputSpec = [{\n      ndim: 3\n    }];\n  }\n\n  getConfig() {\n    const config = super.getConfig();\n    delete config['rank'];\n    delete config['dataFormat'];\n    return config;\n  }\n\n  static verifyArgs(args) {\n    // config.kernelSize must be a number or array of numbers.\n    if (typeof args.kernelSize !== 'number' && !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 1)) {\n      throw new ValueError(`Conv1D expects config.kernelSize to be number or number[] with ` + `length 1, but received ${JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n\n}\n/** @nocollapse */\n\nConv1D.className = 'Conv1D';\nserialization.registerClass(Conv1D);\nexport class Cropping2D extends Layer {\n  constructor(args) {\n    super(args);\n\n    if (typeof args.cropping === 'number') {\n      this.cropping = [[args.cropping, args.cropping], [args.cropping, args.cropping]];\n    } else if (typeof args.cropping[0] === 'number') {\n      this.cropping = [[args.cropping[0], args.cropping[0]], [args.cropping[1], args.cropping[1]]];\n    } else {\n      this.cropping = args.cropping;\n    }\n\n    this.dataFormat = args.dataFormat === undefined ? 'channelsLast' : args.dataFormat;\n    this.inputSpec = [{\n      ndim: 4\n    }];\n  }\n\n  computeOutputShape(inputShape) {\n    if (this.dataFormat === 'channelsFirst') {\n      return [inputShape[0], inputShape[1], inputShape[2] - this.cropping[0][0] - this.cropping[0][1], inputShape[3] - this.cropping[1][0] - this.cropping[1][1]];\n    } else {\n      return [inputShape[0], inputShape[1] - this.cropping[0][0] - this.cropping[0][1], inputShape[2] - this.cropping[1][0] - this.cropping[1][1], inputShape[3]];\n    }\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n\n      if (this.dataFormat === 'channelsLast') {\n        const hSliced = K.sliceAlongAxis(inputs, this.cropping[0][0], inputs.shape[1] - this.cropping[0][0] - this.cropping[0][1], 2);\n        return K.sliceAlongAxis(hSliced, this.cropping[1][0], inputs.shape[2] - this.cropping[1][1] - this.cropping[1][0], 3);\n      } else {\n        const hSliced = K.sliceAlongAxis(inputs, this.cropping[0][0], inputs.shape[2] - this.cropping[0][0] - this.cropping[0][1], 3);\n        return K.sliceAlongAxis(hSliced, this.cropping[1][0], inputs.shape[3] - this.cropping[1][1] - this.cropping[1][0], 4);\n      }\n    });\n  }\n\n  getConfig() {\n    const config = {\n      cropping: this.cropping,\n      dataFormat: this.dataFormat\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nCropping2D.className = 'Cropping2D';\nserialization.registerClass(Cropping2D);\nexport class UpSampling2D extends Layer {\n  constructor(args) {\n    super(args);\n    this.DEFAULT_SIZE = [2, 2];\n    this.inputSpec = [{\n      ndim: 4\n    }];\n    this.size = args.size == null ? this.DEFAULT_SIZE : args.size;\n    this.dataFormat = args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    this.interpolation = args.interpolation == null ? 'nearest' : args.interpolation;\n    checkInterpolationFormat(this.interpolation);\n  }\n\n  computeOutputShape(inputShape) {\n    if (this.dataFormat === 'channelsFirst') {\n      const height = inputShape[2] == null ? null : this.size[0] * inputShape[2];\n      const width = inputShape[3] == null ? null : this.size[1] * inputShape[3];\n      return [inputShape[0], inputShape[1], height, width];\n    } else {\n      const height = inputShape[1] == null ? null : this.size[0] * inputShape[1];\n      const width = inputShape[2] == null ? null : this.size[1] * inputShape[2];\n      return [inputShape[0], height, width, inputShape[3]];\n    }\n  }\n\n  call(inputs, kwargs) {\n    return tfc.tidy(() => {\n      let input = getExactlyOneTensor(inputs);\n      const inputShape = input.shape;\n\n      if (this.dataFormat === 'channelsFirst') {\n        input = tfc.transpose(input, [0, 2, 3, 1]);\n        const height = this.size[0] * inputShape[2];\n        const width = this.size[1] * inputShape[3];\n        const resized = this.interpolation === 'nearest' ? tfc.image.resizeNearestNeighbor(input, [height, width]) : tfc.image.resizeBilinear(input, [height, width]);\n        return tfc.transpose(resized, [0, 3, 1, 2]);\n      } else {\n        const height = this.size[0] * inputShape[1];\n        const width = this.size[1] * inputShape[2];\n        return this.interpolation === 'nearest' ? tfc.image.resizeNearestNeighbor(input, [height, width]) : tfc.image.resizeBilinear(input, [height, width]);\n      }\n    });\n  }\n\n  getConfig() {\n    const config = {\n      size: this.size,\n      dataFormat: this.dataFormat,\n      interpolation: this.interpolation\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nUpSampling2D.className = 'UpSampling2D';\nserialization.registerClass(UpSampling2D);","map":{"version":3,"names":["tfc","serialization","tidy","getActivation","serializeActivation","imageDataFormat","K","checkDataFormat","checkInterpolationFormat","checkPaddingMode","getConstraint","serializeConstraint","InputSpec","Layer","NotImplementedError","ValueError","getInitializer","serializeInitializer","getRegularizer","serializeRegularizer","convOutputLength","deconvLength","normalizeArray","generic_utils","getExactlyOneShape","getExactlyOneTensor","preprocessConv2DInput","x","dataFormat","transpose","preprocessConv3DInput","conv1dWithBias","kernel","bias","strides","padding","dilationRate","shape","length","y","conv1d","biasAdd","conv2d","conv2dWithBiasActivation","activation","rank","fused","filter","pad","dilations","conv3d","conv3dWithBias","BaseConv","constructor","args","DEFAULT_KERNEL_INITIALIZER","DEFAULT_BIAS_INITIALIZER","verifyArgs","assertPositiveInteger","kernelSize","useBias","biasInitializer","biasConstraint","biasRegularizer","activityRegularizer","Array","isArray","JSON","stringify","assert","checkArrayTypeAndLength","getConfig","config","baseConfig","Object","assign","Conv","filters","kernelInitializer","kernelConstraint","kernelRegularizer","build","inputShape","channelAxis","inputDim","kernelShape","concat","addWeight","inputSpec","ndim","axes","built","call","inputs","kwargs","outputs","biasValue","read","fusedActivationName","mapActivationToFusedKernel","getClassName","apply","computeOutputShape","newSpace","space","slice","i","newDim","push","outputShape","Conv2D","className","registerClass","Conv3D","Conv2DTranspose","input","batchSize","hAxis","wAxis","height","width","kernelH","kernelW","strideH","strideW","outHeight","outWidth","conv2dTranspose","heightAxis","widthAxis","Conv3DTranspose","dAxis","depth","kernelD","strideD","outDepth","conv3dTranspose","depthAxis","SeparableConv","DEFAULT_DEPTHWISE_INITIALIZER","DEFAULT_POINTWISE_INITIALIZER","depthwiseKernel","pointwiseKernel","depthMultiplier","depthwiseInitializer","depthwiseRegularizer","depthwiseConstraint","pointwiseInitializer","pointwiseRegularizer","pointwiseConstraint","depthwiseKernelShape","pointwiseKernelShape","trainable","output","separableConv2d","SeparableConv2D","Conv1D","Cropping2D","cropping","undefined","hSliced","sliceAlongAxis","UpSampling2D","DEFAULT_SIZE","size","interpolation","resized","image","resizeNearestNeighbor","resizeBilinear"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Convolutional Layers\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { getActivation, serializeActivation } from '../activations';\nimport { imageDataFormat } from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport { checkDataFormat, checkInterpolationFormat, checkPaddingMode } from '../common';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { InputSpec, Layer } from '../engine/topology';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { convOutputLength, deconvLength, normalizeArray } from '../utils/conv_utils';\nimport * as generic_utils from '../utils/generic_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\n/**\n * Transpose and cast the input before the conv2d.\n * @param x Input image tensor.\n * @param dataFormat\n */\nexport function preprocessConv2DInput(x, dataFormat) {\n    // TODO(cais): Cast type to float32 if not.\n    return tidy(() => {\n        checkDataFormat(dataFormat);\n        if (dataFormat === 'channelsFirst') {\n            return tfc.transpose(x, [0, 2, 3, 1]); // NCHW -> NHWC.\n        }\n        else {\n            return x;\n        }\n    });\n}\n/**\n * Transpose and cast the input before the conv3d.\n * @param x Input image tensor.\n * @param dataFormat\n */\nexport function preprocessConv3DInput(x, dataFormat) {\n    return tidy(() => {\n        checkDataFormat(dataFormat);\n        if (dataFormat === 'channelsFirst') {\n            return tfc.transpose(x, [0, 2, 3, 4, 1]); // NCDHW -> NDHWC.\n        }\n        else {\n            return x;\n        }\n    });\n}\n/**\n * 1D-convolution with bias added.\n *\n * Porting Note: This function does not exist in the Python Keras backend.\n *   It is exactly the same as `conv2d`, except the added `bias`.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.\n * @param bias Bias, rank-3, of shape `[outDepth]`.\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\nexport function conv1dWithBias(x, kernel, bias, strides = 1, padding = 'valid', dataFormat, dilationRate = 1) {\n    return tidy(() => {\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        checkDataFormat(dataFormat);\n        // Check the ranks of x, kernel and bias.\n        if (x.shape.length !== 3) {\n            throw new ValueError(`The input of a conv1dWithBias operation should be 3, but is ` +\n                `${x.shape.length} instead.`);\n        }\n        if (kernel.shape.length !== 3) {\n            throw new ValueError(`The kernel for a conv1dWithBias operation should be 3, but is ` +\n                `${kernel.shape.length} instead`);\n        }\n        if (bias != null && bias.shape.length !== 1) {\n            throw new ValueError(`The bias for a conv1dWithBias operation should be 1, but is ` +\n                `${kernel.shape.length} instead`);\n        }\n        // TODO(cais): Support CAUSAL padding mode.\n        if (dataFormat === 'channelsFirst') {\n            x = tfc.transpose(x, [0, 2, 1]); // NCW -> NWC.\n        }\n        if (padding === 'causal') {\n            throw new NotImplementedError('The support for CAUSAL padding mode in conv1dWithBias is not ' +\n                'implemented yet.');\n        }\n        let y = tfc.conv1d(x, kernel, strides, padding === 'same' ? 'same' : 'valid', 'NWC', dilationRate);\n        if (bias != null) {\n            y = K.biasAdd(y, bias);\n        }\n        return y;\n    });\n}\n/**\n * 1D-convolution.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.s\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\nexport function conv1d(x, kernel, strides = 1, padding = 'valid', dataFormat, dilationRate = 1) {\n    return tidy(() => {\n        checkDataFormat(dataFormat);\n        return conv1dWithBias(x, kernel, null, strides, padding, dataFormat, dilationRate);\n    });\n}\n/**\n * 2D Convolution\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 2D pooling.\n */\nexport function conv2d(x, kernel, strides = [1, 1], padding = 'valid', dataFormat, dilationRate) {\n    return tidy(() => {\n        checkDataFormat(dataFormat);\n        return conv2dWithBiasActivation(x, kernel, null, strides, padding, dataFormat, dilationRate);\n    });\n}\n/**\n * 2D Convolution with an added bias and optional activation.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv2d`, except the added `bias`.\n */\nexport function conv2dWithBiasActivation(x, kernel, bias, strides = [1, 1], padding = 'valid', dataFormat, dilationRate, activation = null) {\n    return tidy(() => {\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        checkDataFormat(dataFormat);\n        if (x.rank !== 3 && x.rank !== 4) {\n            throw new ValueError(`conv2dWithBiasActivation expects input to be of rank 3 or 4, ` +\n                `but received ${x.rank}.`);\n        }\n        if (kernel.rank !== 3 && kernel.rank !== 4) {\n            throw new ValueError(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, ` +\n                `but received ${x.rank}.`);\n        }\n        let y = preprocessConv2DInput(x, dataFormat);\n        if (padding === 'causal') {\n            throw new NotImplementedError('The support for CAUSAL padding mode in conv1dWithBias is not ' +\n                'implemented yet.');\n        }\n        y = tfc.fused.conv2d({\n            x: y,\n            filter: kernel,\n            strides: strides,\n            pad: padding === 'same' ? 'same' : 'valid',\n            dilations: dilationRate,\n            dataFormat: 'NHWC',\n            bias,\n            activation\n        });\n        if (dataFormat === 'channelsFirst') {\n            y = tfc.transpose(y, [0, 3, 1, 2]);\n        }\n        return y;\n    });\n}\n/**\n * 3D Convolution.\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 3D convolution.\n */\nexport function conv3d(x, kernel, strides = [1, 1, 1], padding = 'valid', dataFormat, dilationRate) {\n    return tidy(() => {\n        checkDataFormat(dataFormat);\n        return conv3dWithBias(x, kernel, null, strides, padding, dataFormat, dilationRate);\n    });\n}\n/**\n * 3D Convolution with an added bias.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv3d`, except the added `bias`.\n */\nexport function conv3dWithBias(x, kernel, bias, strides = [1, 1, 1], padding = 'valid', dataFormat, dilationRate) {\n    return tidy(() => {\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        checkDataFormat(dataFormat);\n        if (x.rank !== 4 && x.rank !== 5) {\n            throw new ValueError(`conv3dWithBias expects input to be of rank 4 or 5, but received ` +\n                `${x.rank}.`);\n        }\n        if (kernel.rank !== 4 && kernel.rank !== 5) {\n            throw new ValueError(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ` +\n                `${x.rank}.`);\n        }\n        let y = preprocessConv3DInput(x, dataFormat);\n        if (padding === 'causal') {\n            throw new NotImplementedError('The support for CAUSAL padding mode in conv3dWithBias is not ' +\n                'implemented yet.');\n        }\n        y = tfc.conv3d(y, kernel, strides, padding === 'same' ? 'same' : 'valid', 'NDHWC', dilationRate);\n        if (bias != null) {\n            y = K.biasAdd(y, bias);\n        }\n        if (dataFormat === 'channelsFirst') {\n            y = tfc.transpose(y, [0, 4, 1, 2, 3]);\n        }\n        return y;\n    });\n}\n/**\n * Abstract convolution layer.\n */\nexport class BaseConv extends Layer {\n    constructor(rank, args) {\n        super(args);\n        this.bias = null;\n        this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n        this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n        BaseConv.verifyArgs(args);\n        this.rank = rank;\n        generic_utils.assertPositiveInteger(this.rank, 'rank');\n        if (this.rank !== 1 && this.rank !== 2 && this.rank !== 3) {\n            throw new NotImplementedError(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is ` +\n                `not implemented yet.`);\n        }\n        this.kernelSize = normalizeArray(args.kernelSize, rank, 'kernelSize');\n        this.strides = normalizeArray(args.strides == null ? 1 : args.strides, rank, 'strides');\n        this.padding = args.padding == null ? 'valid' : args.padding;\n        checkPaddingMode(this.padding);\n        this.dataFormat =\n            args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n        checkDataFormat(this.dataFormat);\n        this.activation = getActivation(args.activation);\n        this.useBias = args.useBias == null ? true : args.useBias;\n        this.biasInitializer =\n            getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n        this.biasConstraint = getConstraint(args.biasConstraint);\n        this.biasRegularizer = getRegularizer(args.biasRegularizer);\n        this.activityRegularizer = getRegularizer(args.activityRegularizer);\n        this.dilationRate = normalizeArray(args.dilationRate == null ? 1 : args.dilationRate, rank, 'dilationRate');\n        if (this.rank === 1 &&\n            (Array.isArray(this.dilationRate) && this.dilationRate.length !== 1)) {\n            throw new ValueError(`dilationRate must be a number or an array of a single number ` +\n                `for 1D convolution, but received ` +\n                `${JSON.stringify(this.dilationRate)}`);\n        }\n        else if (this.rank === 2) {\n            if (typeof this.dilationRate === 'number') {\n                this.dilationRate = [this.dilationRate, this.dilationRate];\n            }\n            else if (this.dilationRate.length !== 2) {\n                throw new ValueError(`dilationRate must be a number or array of two numbers for 2D ` +\n                    `convolution, but received ${JSON.stringify(this.dilationRate)}`);\n            }\n        }\n        else if (this.rank === 3) {\n            if (typeof this.dilationRate === 'number') {\n                this.dilationRate =\n                    [this.dilationRate, this.dilationRate, this.dilationRate];\n            }\n            else if (this.dilationRate.length !== 3) {\n                throw new ValueError(`dilationRate must be a number or array of three numbers for 3D ` +\n                    `convolution, but received ${JSON.stringify(this.dilationRate)}`);\n            }\n        }\n    }\n    static verifyArgs(args) {\n        // Check config.kernelSize type and shape.\n        generic_utils.assert('kernelSize' in args, `required key 'kernelSize' not in config`);\n        if (typeof args.kernelSize !== 'number' &&\n            !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 3)) {\n            throw new ValueError(`BaseConv expects config.kernelSize to be number or number[] with ` +\n                `length 1, 2, or 3, but received ${JSON.stringify(args.kernelSize)}.`);\n        }\n    }\n    getConfig() {\n        const config = {\n            kernelSize: this.kernelSize,\n            strides: this.strides,\n            padding: this.padding,\n            dataFormat: this.dataFormat,\n            dilationRate: this.dilationRate,\n            activation: serializeActivation(this.activation),\n            useBias: this.useBias,\n            biasInitializer: serializeInitializer(this.biasInitializer),\n            biasRegularizer: serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: serializeRegularizer(this.activityRegularizer),\n            biasConstraint: serializeConstraint(this.biasConstraint)\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/**\n * Abstract nD convolution layer.  Ancestor of convolution layers which reduce\n * across channels, i.e., Conv1D and Conv2D, but not DepthwiseConv2D.\n */\nexport class Conv extends BaseConv {\n    constructor(rank, args) {\n        super(rank, args);\n        this.kernel = null;\n        Conv.verifyArgs(args);\n        this.filters = args.filters;\n        generic_utils.assertPositiveInteger(this.filters, 'filters');\n        this.kernelInitializer = getInitializer(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n        this.kernelConstraint = getConstraint(args.kernelConstraint);\n        this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n        if (inputShape[channelAxis] == null) {\n            throw new ValueError(`The channel dimension of the input should be defined. ` +\n                `Found ${inputShape[channelAxis]}`);\n        }\n        const inputDim = inputShape[channelAxis];\n        const kernelShape = this.kernelSize.concat([inputDim, this.filters]);\n        this.kernel = this.addWeight('kernel', kernelShape, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.filters], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        this.inputSpec = [{ ndim: this.rank + 2, axes: { [channelAxis]: inputDim } }];\n        this.built = true;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = getExactlyOneTensor(inputs);\n            let outputs;\n            const biasValue = this.bias == null ? null : this.bias.read();\n            const fusedActivationName = generic_utils.mapActivationToFusedKernel(this.activation.getClassName());\n            if (fusedActivationName != null && this.rank === 2) {\n                outputs = conv2dWithBiasActivation(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate, fusedActivationName);\n            }\n            else {\n                if (this.rank === 1) {\n                    outputs = conv1dWithBias(inputs, this.kernel.read(), biasValue, this.strides[0], this.padding, this.dataFormat, this.dilationRate[0]);\n                }\n                else if (this.rank === 2) {\n                    // TODO(cais): Move up to constructor.\n                    outputs = conv2dWithBiasActivation(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate);\n                }\n                else if (this.rank === 3) {\n                    outputs = conv3dWithBias(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate);\n                }\n                else {\n                    throw new NotImplementedError('convolutions greater than 3D are not implemented yet.');\n                }\n                if (this.activation != null) {\n                    outputs = this.activation.apply(outputs);\n                }\n            }\n            return outputs;\n        });\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const newSpace = [];\n        const space = (this.dataFormat === 'channelsLast') ?\n            inputShape.slice(1, inputShape.length - 1) :\n            inputShape.slice(2);\n        for (let i = 0; i < space.length; ++i) {\n            const newDim = convOutputLength(space[i], this.kernelSize[i], this.padding, this.strides[i], typeof this.dilationRate === 'number' ? this.dilationRate :\n                this.dilationRate[i]);\n            newSpace.push(newDim);\n        }\n        let outputShape = [inputShape[0]];\n        if (this.dataFormat === 'channelsLast') {\n            outputShape = outputShape.concat(newSpace);\n            outputShape.push(this.filters);\n        }\n        else {\n            outputShape.push(this.filters);\n            outputShape = outputShape.concat(newSpace);\n        }\n        return outputShape;\n    }\n    getConfig() {\n        const config = {\n            filters: this.filters,\n            kernelInitializer: serializeInitializer(this.kernelInitializer),\n            kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n            kernelConstraint: serializeConstraint(this.kernelConstraint)\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    static verifyArgs(args) {\n        // Check config.filters type, shape, and value.\n        if (!('filters' in args) || typeof args.filters !== 'number' ||\n            args.filters < 1) {\n            throw new ValueError(`Convolution layer expected config.filters to be a 'number' > 0 ` +\n                `but got ${JSON.stringify(args.filters)}`);\n        }\n    }\n}\nexport class Conv2D extends Conv {\n    constructor(args) {\n        super(2, args);\n        Conv2D.verifyArgs(args);\n    }\n    getConfig() {\n        const config = super.getConfig();\n        delete config['rank'];\n        return config;\n    }\n    static verifyArgs(args) {\n        // config.kernelSize must be a number or array of numbers.\n        if ((typeof args.kernelSize !== 'number') &&\n            !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 2)) {\n            throw new ValueError(`Conv2D expects config.kernelSize to be number or number[] with ` +\n                `length 1 or 2, but received ${JSON.stringify(args.kernelSize)}.`);\n        }\n    }\n}\n/** @nocollapse */\nConv2D.className = 'Conv2D';\nserialization.registerClass(Conv2D);\nexport class Conv3D extends Conv {\n    constructor(args) {\n        super(3, args);\n        Conv3D.verifyArgs(args);\n    }\n    getConfig() {\n        const config = super.getConfig();\n        delete config['rank'];\n        return config;\n    }\n    static verifyArgs(args) {\n        // config.kernelSize must be a number or array of numbers.\n        if (typeof args.kernelSize !== 'number') {\n            if (!(Array.isArray(args.kernelSize) &&\n                (args.kernelSize.length === 1 || args.kernelSize.length === 3))) {\n                throw new ValueError(`Conv3D expects config.kernelSize to be number or` +\n                    ` [number, number, number], but received ${JSON.stringify(args.kernelSize)}.`);\n            }\n        }\n    }\n}\n/** @nocollapse */\nConv3D.className = 'Conv3D';\nserialization.registerClass(Conv3D);\nexport class Conv2DTranspose extends Conv2D {\n    constructor(args) {\n        super(args);\n        this.inputSpec = [new InputSpec({ ndim: 4 })];\n        if (this.padding !== 'same' && this.padding !== 'valid') {\n            throw new ValueError(`Conv2DTranspose currently supports only padding modes 'same' ` +\n                `and 'valid', but received padding mode ${this.padding}`);\n        }\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        if (inputShape.length !== 4) {\n            throw new ValueError('Input should have rank 4; Received input shape: ' +\n                JSON.stringify(inputShape));\n        }\n        const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n        if (inputShape[channelAxis] == null) {\n            throw new ValueError('The channel dimension of the inputs should be defined. ' +\n                'Found `None`.');\n        }\n        const inputDim = inputShape[channelAxis];\n        const kernelShape = this.kernelSize.concat([this.filters, inputDim]);\n        this.kernel = this.addWeight('kernel', kernelShape, 'float32', this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        // Set input spec.\n        this.inputSpec =\n            [new InputSpec({ ndim: 4, axes: { [channelAxis]: inputDim } })];\n        this.built = true;\n    }\n    call(inputs, kwargs) {\n        return tfc.tidy(() => {\n            let input = getExactlyOneTensor(inputs);\n            if (input.shape.length !== 4) {\n                throw new ValueError(`Conv2DTranspose.call() expects input tensor to be rank-4, but ` +\n                    `received a tensor of rank-${input.shape.length}`);\n            }\n            const inputShape = input.shape;\n            const batchSize = inputShape[0];\n            let hAxis;\n            let wAxis;\n            if (this.dataFormat === 'channelsFirst') {\n                hAxis = 2;\n                wAxis = 3;\n            }\n            else {\n                hAxis = 1;\n                wAxis = 2;\n            }\n            const height = inputShape[hAxis];\n            const width = inputShape[wAxis];\n            const kernelH = this.kernelSize[0];\n            const kernelW = this.kernelSize[1];\n            const strideH = this.strides[0];\n            const strideW = this.strides[1];\n            // Infer the dynamic output shape.\n            const outHeight = deconvLength(height, strideH, kernelH, this.padding);\n            const outWidth = deconvLength(width, strideW, kernelW, this.padding);\n            // Porting Note: We don't branch based on `this.dataFormat` here,\n            // because\n            //   the tjfs-core function `conv2dTranspose` called below always\n            //   assumes channelsLast.\n            const outputShape = [batchSize, outHeight, outWidth, this.filters];\n            if (this.dataFormat !== 'channelsLast') {\n                input = tfc.transpose(input, [0, 2, 3, 1]);\n            }\n            let outputs = tfc.conv2dTranspose(input, this.kernel.read(), outputShape, this.strides, this.padding);\n            if (this.dataFormat !== 'channelsLast') {\n                outputs = tfc.transpose(outputs, [0, 3, 1, 2]);\n            }\n            if (this.bias != null) {\n                outputs =\n                    K.biasAdd(outputs, this.bias.read(), this.dataFormat);\n            }\n            if (this.activation != null) {\n                outputs = this.activation.apply(outputs);\n            }\n            return outputs;\n        });\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const outputShape = inputShape.slice();\n        let channelAxis;\n        let heightAxis;\n        let widthAxis;\n        if (this.dataFormat === 'channelsFirst') {\n            channelAxis = 1;\n            heightAxis = 2;\n            widthAxis = 3;\n        }\n        else {\n            channelAxis = 3;\n            heightAxis = 1;\n            widthAxis = 2;\n        }\n        const kernelH = this.kernelSize[0];\n        const kernelW = this.kernelSize[1];\n        const strideH = this.strides[0];\n        const strideW = this.strides[1];\n        outputShape[channelAxis] = this.filters;\n        outputShape[heightAxis] =\n            deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);\n        outputShape[widthAxis] =\n            deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);\n        return outputShape;\n    }\n    getConfig() {\n        const config = super.getConfig();\n        delete config['dilationRate'];\n        return config;\n    }\n}\n/** @nocollapse */\nConv2DTranspose.className = 'Conv2DTranspose';\nserialization.registerClass(Conv2DTranspose);\nexport class Conv3DTranspose extends Conv3D {\n    constructor(args) {\n        super(args);\n        this.inputSpec = [new InputSpec({ ndim: 5 })];\n        if (this.padding !== 'same' && this.padding !== 'valid') {\n            throw new ValueError(`Conv3DTranspose currently supports only padding modes 'same' ` +\n                `and 'valid', but received padding mode ${this.padding}`);\n        }\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        if (inputShape.length !== 5) {\n            throw new ValueError('Input should have rank 5; Received input shape: ' +\n                JSON.stringify(inputShape));\n        }\n        const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n        if (inputShape[channelAxis] == null) {\n            throw new ValueError('The channel dimension of the inputs should be defined. ' +\n                'Found `None`.');\n        }\n        const inputDim = inputShape[channelAxis];\n        const kernelShape = this.kernelSize.concat([this.filters, inputDim]);\n        this.kernel = this.addWeight('kernel', kernelShape, 'float32', this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        // Set input spec.\n        this.inputSpec =\n            [new InputSpec({ ndim: 5, axes: { [channelAxis]: inputDim } })];\n        this.built = true;\n    }\n    call(inputs, kwargs) {\n        return tfc.tidy(() => {\n            let input = getExactlyOneTensor(inputs);\n            if (input.shape.length !== 5) {\n                throw new ValueError(`Conv3DTranspose.call() expects input tensor to be rank-4, but ` +\n                    `received a tensor of rank-${input.shape.length}`);\n            }\n            const inputShape = input.shape;\n            const batchSize = inputShape[0];\n            let hAxis;\n            let wAxis;\n            let dAxis;\n            if (this.dataFormat === 'channelsFirst') {\n                dAxis = 2;\n                hAxis = 3;\n                wAxis = 4;\n            }\n            else {\n                dAxis = 1;\n                hAxis = 2;\n                wAxis = 3;\n            }\n            const depth = inputShape[dAxis];\n            const height = inputShape[hAxis];\n            const width = inputShape[wAxis];\n            const kernelD = this.kernelSize[0];\n            const kernelH = this.kernelSize[1];\n            const kernelW = this.kernelSize[2];\n            const strideD = this.strides[0];\n            const strideH = this.strides[1];\n            const strideW = this.strides[2];\n            // Infer the dynamic output shape.\n            const outDepth = deconvLength(depth, strideD, kernelD, this.padding);\n            const outHeight = deconvLength(height, strideH, kernelH, this.padding);\n            const outWidth = deconvLength(width, strideW, kernelW, this.padding);\n            // Same as `conv2dTranspose`. We always assumes channelsLast.\n            const outputShape = [batchSize, outDepth, outHeight, outWidth, this.filters];\n            if (this.dataFormat !== 'channelsLast') {\n                input = tfc.transpose(input, [0, 2, 3, 4, 1]);\n            }\n            let outputs = tfc.conv3dTranspose(input, this.kernel.read(), outputShape, this.strides, this.padding);\n            if (this.dataFormat !== 'channelsLast') {\n                outputs = tfc.transpose(outputs, [0, 4, 1, 2, 3]);\n            }\n            if (this.bias !== null) {\n                outputs =\n                    K.biasAdd(outputs, this.bias.read(), this.dataFormat);\n            }\n            if (this.activation !== null) {\n                outputs = this.activation.apply(outputs);\n            }\n            return outputs;\n        });\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const outputShape = inputShape.slice();\n        let channelAxis;\n        let depthAxis;\n        let heightAxis;\n        let widthAxis;\n        if (this.dataFormat === 'channelsFirst') {\n            channelAxis = 1;\n            depthAxis = 2;\n            heightAxis = 3;\n            widthAxis = 4;\n        }\n        else {\n            channelAxis = 4;\n            depthAxis = 1;\n            heightAxis = 2;\n            widthAxis = 3;\n        }\n        const kernelD = this.kernelSize[0];\n        const kernelH = this.kernelSize[1];\n        const kernelW = this.kernelSize[2];\n        const strideD = this.strides[0];\n        const strideH = this.strides[1];\n        const strideW = this.strides[2];\n        outputShape[channelAxis] = this.filters;\n        outputShape[depthAxis] =\n            deconvLength(outputShape[depthAxis], strideD, kernelD, this.padding);\n        outputShape[heightAxis] =\n            deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);\n        outputShape[widthAxis] =\n            deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);\n        return outputShape;\n    }\n    getConfig() {\n        const config = super.getConfig();\n        delete config['dilationRate'];\n        return config;\n    }\n}\n/** @nocollapse */\nConv3DTranspose.className = 'Conv3DTranspose';\nserialization.registerClass(Conv3DTranspose);\nexport class SeparableConv extends Conv {\n    constructor(rank, config) {\n        super(rank, config);\n        this.DEFAULT_DEPTHWISE_INITIALIZER = 'glorotUniform';\n        this.DEFAULT_POINTWISE_INITIALIZER = 'glorotUniform';\n        this.depthwiseKernel = null;\n        this.pointwiseKernel = null;\n        if (config.filters == null) {\n            throw new ValueError('The `filters` configuration field is required by SeparableConv, ' +\n                'but is unspecified.');\n        }\n        if (config.kernelInitializer != null || config.kernelRegularizer != null ||\n            config.kernelConstraint != null) {\n            throw new ValueError('Fields kernelInitializer, kernelRegularizer and kernelConstraint ' +\n                'are invalid for SeparableConv2D. Use depthwiseInitializer, ' +\n                'depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, ' +\n                'pointwiseRegularizer and pointwiseConstraint instead.');\n        }\n        if (config.padding != null && config.padding !== 'same' &&\n            config.padding !== 'valid') {\n            throw new ValueError(`SeparableConv${this.rank}D supports only padding modes: ` +\n                `'same' and 'valid', but received ${JSON.stringify(config.padding)}`);\n        }\n        this.depthMultiplier =\n            config.depthMultiplier == null ? 1 : config.depthMultiplier;\n        this.depthwiseInitializer = getInitializer(config.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER);\n        this.depthwiseRegularizer = getRegularizer(config.depthwiseRegularizer);\n        this.depthwiseConstraint = getConstraint(config.depthwiseConstraint);\n        this.pointwiseInitializer = getInitializer(config.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER);\n        this.pointwiseRegularizer = getRegularizer(config.pointwiseRegularizer);\n        this.pointwiseConstraint = getConstraint(config.pointwiseConstraint);\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        if (inputShape.length < this.rank + 2) {\n            throw new ValueError(`Inputs to SeparableConv${this.rank}D should have rank ` +\n                `${this.rank + 2}, but received input shape: ` +\n                `${JSON.stringify(inputShape)}`);\n        }\n        const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n        if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n            throw new ValueError(`The channel dimension of the inputs should be defined, ` +\n                `but found ${JSON.stringify(inputShape[channelAxis])}`);\n        }\n        const inputDim = inputShape[channelAxis];\n        const depthwiseKernelShape = this.kernelSize.concat([inputDim, this.depthMultiplier]);\n        const pointwiseKernelShape = [];\n        for (let i = 0; i < this.rank; ++i) {\n            pointwiseKernelShape.push(1);\n        }\n        pointwiseKernelShape.push(inputDim * this.depthMultiplier, this.filters);\n        const trainable = true;\n        this.depthwiseKernel = this.addWeight('depthwise_kernel', depthwiseKernelShape, 'float32', this.depthwiseInitializer, this.depthwiseRegularizer, trainable, this.depthwiseConstraint);\n        this.pointwiseKernel = this.addWeight('pointwise_kernel', pointwiseKernelShape, 'float32', this.pointwiseInitializer, this.pointwiseRegularizer, trainable, this.pointwiseConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, trainable, this.biasConstraint);\n        }\n        else {\n            this.bias = null;\n        }\n        this.inputSpec =\n            [new InputSpec({ ndim: this.rank + 2, axes: { [channelAxis]: inputDim } })];\n        this.built = true;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = getExactlyOneTensor(inputs);\n            let output;\n            if (this.rank === 1) {\n                throw new NotImplementedError('1D separable convolution is not implemented yet.');\n            }\n            else if (this.rank === 2) {\n                if (this.dataFormat === 'channelsFirst') {\n                    inputs = tfc.transpose(inputs, [0, 2, 3, 1]); // NCHW -> NHWC.\n                }\n                output = tfc.separableConv2d(inputs, this.depthwiseKernel.read(), this.pointwiseKernel.read(), this.strides, this.padding, this.dilationRate, 'NHWC');\n            }\n            if (this.useBias) {\n                output = K.biasAdd(output, this.bias.read(), this.dataFormat);\n            }\n            if (this.activation != null) {\n                output = this.activation.apply(output);\n            }\n            if (this.dataFormat === 'channelsFirst') {\n                output = tfc.transpose(output, [0, 3, 1, 2]); // NHWC -> NCHW.\n            }\n            return output;\n        });\n    }\n    getConfig() {\n        const config = super.getConfig();\n        delete config['rank'];\n        delete config['kernelInitializer'];\n        delete config['kernelRegularizer'];\n        delete config['kernelConstraint'];\n        config['depthwiseInitializer'] =\n            serializeInitializer(this.depthwiseInitializer);\n        config['pointwiseInitializer'] =\n            serializeInitializer(this.pointwiseInitializer);\n        config['depthwiseRegularizer'] =\n            serializeRegularizer(this.depthwiseRegularizer);\n        config['pointwiseRegularizer'] =\n            serializeRegularizer(this.pointwiseRegularizer);\n        config['depthwiseConstraint'] =\n            serializeConstraint(this.depthwiseConstraint);\n        config['pointwiseConstraint'] =\n            serializeConstraint(this.pointwiseConstraint);\n        return config;\n    }\n}\n/** @nocollapse */\nSeparableConv.className = 'SeparableConv';\nexport class SeparableConv2D extends SeparableConv {\n    constructor(args) {\n        super(2, args);\n    }\n}\n/** @nocollapse */\nSeparableConv2D.className = 'SeparableConv2D';\nserialization.registerClass(SeparableConv2D);\nexport class Conv1D extends Conv {\n    constructor(args) {\n        super(1, args);\n        Conv1D.verifyArgs(args);\n        this.inputSpec = [{ ndim: 3 }];\n    }\n    getConfig() {\n        const config = super.getConfig();\n        delete config['rank'];\n        delete config['dataFormat'];\n        return config;\n    }\n    static verifyArgs(args) {\n        // config.kernelSize must be a number or array of numbers.\n        if (typeof args.kernelSize !== 'number' &&\n            !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 1)) {\n            throw new ValueError(`Conv1D expects config.kernelSize to be number or number[] with ` +\n                `length 1, but received ${JSON.stringify(args.kernelSize)}.`);\n        }\n    }\n}\n/** @nocollapse */\nConv1D.className = 'Conv1D';\nserialization.registerClass(Conv1D);\nexport class Cropping2D extends Layer {\n    constructor(args) {\n        super(args);\n        if (typeof args.cropping === 'number') {\n            this.cropping =\n                [[args.cropping, args.cropping], [args.cropping, args.cropping]];\n        }\n        else if (typeof args.cropping[0] === 'number') {\n            this.cropping = [\n                [args.cropping[0], args.cropping[0]],\n                [args.cropping[1], args.cropping[1]]\n            ];\n        }\n        else {\n            this.cropping = args.cropping;\n        }\n        this.dataFormat =\n            args.dataFormat === undefined ? 'channelsLast' : args.dataFormat;\n        this.inputSpec = [{ ndim: 4 }];\n    }\n    computeOutputShape(inputShape) {\n        if (this.dataFormat === 'channelsFirst') {\n            return [\n                inputShape[0], inputShape[1],\n                inputShape[2] - this.cropping[0][0] - this.cropping[0][1],\n                inputShape[3] - this.cropping[1][0] - this.cropping[1][1]\n            ];\n        }\n        else {\n            return [\n                inputShape[0],\n                inputShape[1] - this.cropping[0][0] - this.cropping[0][1],\n                inputShape[2] - this.cropping[1][0] - this.cropping[1][1], inputShape[3]\n            ];\n        }\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = getExactlyOneTensor(inputs);\n            if (this.dataFormat === 'channelsLast') {\n                const hSliced = K.sliceAlongAxis(inputs, this.cropping[0][0], inputs.shape[1] - this.cropping[0][0] - this.cropping[0][1], 2);\n                return K.sliceAlongAxis(hSliced, this.cropping[1][0], inputs.shape[2] - this.cropping[1][1] - this.cropping[1][0], 3);\n            }\n            else {\n                const hSliced = K.sliceAlongAxis(inputs, this.cropping[0][0], inputs.shape[2] - this.cropping[0][0] - this.cropping[0][1], 3);\n                return K.sliceAlongAxis(hSliced, this.cropping[1][0], inputs.shape[3] - this.cropping[1][1] - this.cropping[1][0], 4);\n            }\n        });\n    }\n    getConfig() {\n        const config = { cropping: this.cropping, dataFormat: this.dataFormat };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nCropping2D.className = 'Cropping2D';\nserialization.registerClass(Cropping2D);\nexport class UpSampling2D extends Layer {\n    constructor(args) {\n        super(args);\n        this.DEFAULT_SIZE = [2, 2];\n        this.inputSpec = [{ ndim: 4 }];\n        this.size = args.size == null ? this.DEFAULT_SIZE : args.size;\n        this.dataFormat =\n            args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n        checkDataFormat(this.dataFormat);\n        this.interpolation =\n            args.interpolation == null ? 'nearest' : args.interpolation;\n        checkInterpolationFormat(this.interpolation);\n    }\n    computeOutputShape(inputShape) {\n        if (this.dataFormat === 'channelsFirst') {\n            const height = inputShape[2] == null ? null : this.size[0] * inputShape[2];\n            const width = inputShape[3] == null ? null : this.size[1] * inputShape[3];\n            return [inputShape[0], inputShape[1], height, width];\n        }\n        else {\n            const height = inputShape[1] == null ? null : this.size[0] * inputShape[1];\n            const width = inputShape[2] == null ? null : this.size[1] * inputShape[2];\n            return [inputShape[0], height, width, inputShape[3]];\n        }\n    }\n    call(inputs, kwargs) {\n        return tfc.tidy(() => {\n            let input = getExactlyOneTensor(inputs);\n            const inputShape = input.shape;\n            if (this.dataFormat === 'channelsFirst') {\n                input = tfc.transpose(input, [0, 2, 3, 1]);\n                const height = this.size[0] * inputShape[2];\n                const width = this.size[1] * inputShape[3];\n                const resized = this.interpolation === 'nearest' ?\n                    tfc.image.resizeNearestNeighbor(input, [height, width]) :\n                    tfc.image.resizeBilinear(input, [height, width]);\n                return tfc.transpose(resized, [0, 3, 1, 2]);\n            }\n            else {\n                const height = this.size[0] * inputShape[1];\n                const width = this.size[1] * inputShape[2];\n                return this.interpolation === 'nearest' ?\n                    tfc.image.resizeNearestNeighbor(input, [height, width]) :\n                    tfc.image.resizeBilinear(input, [height, width]);\n            }\n        });\n    }\n    getConfig() {\n        const config = {\n            size: this.size,\n            dataFormat: this.dataFormat,\n            interpolation: this.interpolation\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nUpSampling2D.className = 'UpSampling2D';\nserialization.registerClass(UpSampling2D);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}