{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * This differs from util.assertShapesMatch in that it allows values of\n * negative one, an undefined size of a dimensinon, in a shape to match\n * anything.\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * Used by TensorList and TensorArray to verify if elementShape matches, support\n * negative value as the dim shape.\n * @param shapeA\n * @param shapeB\n * @param errorMessagePrefix\n */\n\nexport function assertShapesMatchAllowUndefinedSize(shapeA, shapeB, errorMessagePrefix = '') {\n  // constant shape means unknown rank\n  if (typeof shapeA === 'number' || typeof shapeB === 'number') {\n    return;\n  }\n\n  util.assert(shapeA.length === shapeB.length, () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n\n  for (let i = 0; i < shapeA.length; i++) {\n    const dim0 = shapeA[i];\n    const dim1 = shapeB[i];\n    util.assert(dim0 < 0 || dim1 < 0 || dim0 === dim1, () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n  }\n}\nexport function fullDefinedShape(elementShape) {\n  if (typeof elementShape === 'number' || elementShape.some(dim => dim < 0)) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Generate the output element shape from the list elementShape, list tensors\n * and input param.\n * @param listElementShape\n * @param tensors\n * @param elementShape\n */\n\nexport function inferElementShape(listElementShape, tensors, elementShape) {\n  let partialShape = mergeElementShape(listElementShape, elementShape);\n  const notfullDefinedShape = !fullDefinedShape(partialShape);\n\n  if (notfullDefinedShape && tensors.length === 0) {\n    throw new Error(`Tried to calculate elements of an empty list` + ` with non-fully-defined elementShape: ${partialShape}`);\n  }\n\n  if (notfullDefinedShape) {\n    tensors.forEach(tensor => {\n      partialShape = mergeElementShape(tensor.shape, partialShape);\n    });\n  }\n\n  if (!fullDefinedShape(partialShape)) {\n    throw new Error(`Non-fully-defined elementShape: ${partialShape}`);\n  }\n\n  return partialShape;\n}\nexport function mergeElementShape(elementShapeA, elementShapeB) {\n  if (typeof elementShapeA === 'number') {\n    return elementShapeB;\n  }\n\n  if (typeof elementShapeB === 'number') {\n    return elementShapeA;\n  }\n\n  if (elementShapeA.length !== elementShapeB.length) {\n    throw new Error(`Incompatible ranks during merge: ${elementShapeA} vs. ${elementShapeB}`);\n  }\n\n  const result = [];\n\n  for (let i = 0; i < elementShapeA.length; ++i) {\n    const dim0 = elementShapeA[i];\n    const dim1 = elementShapeB[i];\n\n    if (dim0 >= 0 && dim1 >= 0 && dim0 !== dim1) {\n      throw new Error(`Incompatible shape during merge: ${elementShapeA} vs. ${elementShapeB}`);\n    }\n\n    result[i] = dim0 >= 0 ? dim0 : dim1;\n  }\n\n  return result;\n}","map":{"version":3,"names":["util","assertShapesMatchAllowUndefinedSize","shapeA","shapeB","errorMessagePrefix","assert","length","i","dim0","dim1","fullDefinedShape","elementShape","some","dim","inferElementShape","listElementShape","tensors","partialShape","mergeElementShape","notfullDefinedShape","Error","forEach","tensor","shape","elementShapeA","elementShapeB","result"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_utils.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * This differs from util.assertShapesMatch in that it allows values of\n * negative one, an undefined size of a dimensinon, in a shape to match\n * anything.\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * Used by TensorList and TensorArray to verify if elementShape matches, support\n * negative value as the dim shape.\n * @param shapeA\n * @param shapeB\n * @param errorMessagePrefix\n */\nexport function assertShapesMatchAllowUndefinedSize(shapeA, shapeB, errorMessagePrefix = '') {\n    // constant shape means unknown rank\n    if (typeof shapeA === 'number' || typeof shapeB === 'number') {\n        return;\n    }\n    util.assert(shapeA.length === shapeB.length, () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n    for (let i = 0; i < shapeA.length; i++) {\n        const dim0 = shapeA[i];\n        const dim1 = shapeB[i];\n        util.assert(dim0 < 0 || dim1 < 0 || dim0 === dim1, () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n    }\n}\nexport function fullDefinedShape(elementShape) {\n    if (typeof elementShape === 'number' || elementShape.some(dim => dim < 0)) {\n        return false;\n    }\n    return true;\n}\n/**\n * Generate the output element shape from the list elementShape, list tensors\n * and input param.\n * @param listElementShape\n * @param tensors\n * @param elementShape\n */\nexport function inferElementShape(listElementShape, tensors, elementShape) {\n    let partialShape = mergeElementShape(listElementShape, elementShape);\n    const notfullDefinedShape = !fullDefinedShape(partialShape);\n    if (notfullDefinedShape && tensors.length === 0) {\n        throw new Error(`Tried to calculate elements of an empty list` +\n            ` with non-fully-defined elementShape: ${partialShape}`);\n    }\n    if (notfullDefinedShape) {\n        tensors.forEach(tensor => {\n            partialShape = mergeElementShape(tensor.shape, partialShape);\n        });\n    }\n    if (!fullDefinedShape(partialShape)) {\n        throw new Error(`Non-fully-defined elementShape: ${partialShape}`);\n    }\n    return partialShape;\n}\nexport function mergeElementShape(elementShapeA, elementShapeB) {\n    if (typeof elementShapeA === 'number') {\n        return elementShapeB;\n    }\n    if (typeof elementShapeB === 'number') {\n        return elementShapeA;\n    }\n    if (elementShapeA.length !== elementShapeB.length) {\n        throw new Error(`Incompatible ranks during merge: ${elementShapeA} vs. ${elementShapeB}`);\n    }\n    const result = [];\n    for (let i = 0; i < elementShapeA.length; ++i) {\n        const dim0 = elementShapeA[i];\n        const dim1 = elementShapeB[i];\n        if (dim0 >= 0 && dim1 >= 0 && dim0 !== dim1) {\n            throw new Error(`Incompatible shape during merge: ${elementShapeA} vs. ${elementShapeB}`);\n        }\n        result[i] = dim0 >= 0 ? dim0 : dim1;\n    }\n    return result;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}