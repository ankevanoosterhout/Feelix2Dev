{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { slice } from './slice';\n/**\n * Extracts a 2D slice from a 2D array starting at coordinates `begin` and\n * is of size `size`. See `slice` for details.\n */\n\nfunction slice2d_(x, begin, size) {\n  const $x = convertToTensor(x, 'x', 'slice2d');\n  util.assert($x.rank === 2, () => `slice2d expects a rank-2 tensor, but got a rank-${$x.rank} tensor`);\n  return slice($x, begin, size);\n}\n\nexport const slice2d = op({\n  slice2d_\n});","map":{"version":3,"names":["convertToTensor","util","op","slice","slice2d_","x","begin","size","$x","assert","rank","slice2d"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/slice2d.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { slice } from './slice';\n/**\n * Extracts a 2D slice from a 2D array starting at coordinates `begin` and\n * is of size `size`. See `slice` for details.\n */\nfunction slice2d_(x, begin, size) {\n    const $x = convertToTensor(x, 'x', 'slice2d');\n    util.assert($x.rank === 2, () => `slice2d expects a rank-2 tensor, but got a rank-${$x.rank} tensor`);\n    return slice($x, begin, size);\n}\nexport const slice2d = op({ slice2d_ });\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,eAAT,QAAgC,oBAAhC;AACA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AACA,SAASC,EAAT,QAAmB,aAAnB;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,CAAkBC,CAAlB,EAAqBC,KAArB,EAA4BC,IAA5B,EAAkC;EAC9B,MAAMC,EAAE,GAAGR,eAAe,CAACK,CAAD,EAAI,GAAJ,EAAS,SAAT,CAA1B;EACAJ,IAAI,CAACQ,MAAL,CAAYD,EAAE,CAACE,IAAH,KAAY,CAAxB,EAA2B,MAAO,mDAAkDF,EAAE,CAACE,IAAK,SAA5F;EACA,OAAOP,KAAK,CAACK,EAAD,EAAKF,KAAL,EAAYC,IAAZ,CAAZ;AACH;;AACD,OAAO,MAAMI,OAAO,GAAGT,EAAE,CAAC;EAAEE;AAAF,CAAD,CAAlB"},"metadata":{},"sourceType":"module"}