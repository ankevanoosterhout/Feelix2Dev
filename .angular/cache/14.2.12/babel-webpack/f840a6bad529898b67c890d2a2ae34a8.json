{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { kernel_impls, NonMaxSuppressionV4 } from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\nimport { assertNotComplex } from '../cpu_util';\nexport function nonMaxSuppressionV4(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    boxes,\n    scores\n  } = inputs;\n  const {\n    maxOutputSize,\n    iouThreshold,\n    scoreThreshold,\n    padToMaxOutputSize\n  } = attrs;\n  assertNotComplex(boxes, 'NonMaxSuppressionPadded');\n  const boxesVals = backend.data.get(boxes.dataId).values;\n  const scoresVals = backend.data.get(scores.dataId).values;\n  const {\n    selectedIndices,\n    validOutputs\n  } = nonMaxSuppressionV4Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);\n  return [backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices)), backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))];\n}\nexport const nonMaxSuppressionV4Config = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV4\n};","map":{"version":3,"names":["kernel_impls","NonMaxSuppressionV4","nonMaxSuppressionV4Impl","assertNotComplex","nonMaxSuppressionV4","args","inputs","backend","attrs","boxes","scores","maxOutputSize","iouThreshold","scoreThreshold","padToMaxOutputSize","boxesVals","data","get","dataId","values","scoresVals","selectedIndices","validOutputs","makeTensorInfo","length","Int32Array","nonMaxSuppressionV4Config","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/NonMaxSuppressionV4.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { kernel_impls, NonMaxSuppressionV4 } from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\nimport { assertNotComplex } from '../cpu_util';\nexport function nonMaxSuppressionV4(args) {\n    const { inputs, backend, attrs } = args;\n    const { boxes, scores } = inputs;\n    const { maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize } = attrs;\n    assertNotComplex(boxes, 'NonMaxSuppressionPadded');\n    const boxesVals = backend.data.get(boxes.dataId).values;\n    const scoresVals = backend.data.get(scores.dataId).values;\n    const { selectedIndices, validOutputs } = nonMaxSuppressionV4Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);\n    return [\n        backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n        backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))\n    ];\n}\nexport const nonMaxSuppressionV4Config = {\n    kernelName: NonMaxSuppressionV4,\n    backendName: 'cpu',\n    kernelFunc: nonMaxSuppressionV4\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,EAAuBC,mBAAvB,QAAkD,uBAAlD;AACA,MAAMC,uBAAuB,GAAGF,YAAY,CAACE,uBAA7C;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,OAAO,SAASC,mBAAT,CAA6BC,IAA7B,EAAmC;EACtC,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BH,IAAnC;EACA,MAAM;IAAEI,KAAF;IAASC;EAAT,IAAoBJ,MAA1B;EACA,MAAM;IAAEK,aAAF;IAAiBC,YAAjB;IAA+BC,cAA/B;IAA+CC;EAA/C,IAAsEN,KAA5E;EACAL,gBAAgB,CAACM,KAAD,EAAQ,yBAAR,CAAhB;EACA,MAAMM,SAAS,GAAGR,OAAO,CAACS,IAAR,CAAaC,GAAb,CAAiBR,KAAK,CAACS,MAAvB,EAA+BC,MAAjD;EACA,MAAMC,UAAU,GAAGb,OAAO,CAACS,IAAR,CAAaC,GAAb,CAAiBP,MAAM,CAACQ,MAAxB,EAAgCC,MAAnD;EACA,MAAM;IAAEE,eAAF;IAAmBC;EAAnB,IAAoCpB,uBAAuB,CAACa,SAAD,EAAYK,UAAZ,EAAwBT,aAAxB,EAAuCC,YAAvC,EAAqDC,cAArD,EAAqEC,kBAArE,CAAjE;EACA,OAAO,CACHP,OAAO,CAACgB,cAAR,CAAuB,CAACF,eAAe,CAACG,MAAjB,CAAvB,EAAiD,OAAjD,EAA0D,IAAIC,UAAJ,CAAeJ,eAAf,CAA1D,CADG,EAEHd,OAAO,CAACgB,cAAR,CAAuB,EAAvB,EAA2B,OAA3B,EAAoC,IAAIE,UAAJ,CAAe,CAACH,YAAD,CAAf,CAApC,CAFG,CAAP;AAIH;AACD,OAAO,MAAMI,yBAAyB,GAAG;EACrCC,UAAU,EAAE1B,mBADyB;EAErC2B,WAAW,EAAE,KAFwB;EAGrCC,UAAU,EAAEzB;AAHyB,CAAlC"},"metadata":{},"sourceType":"module"}