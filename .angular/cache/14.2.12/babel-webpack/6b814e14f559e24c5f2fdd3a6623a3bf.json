{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Note that the identifier globalNameSpace is scoped to this module, but will\n// always resolve to the same global object regardless of how the module is\n// resolved.\n// tslint:disable-next-line:no-any\nlet globalNameSpace; // tslint:disable-next-line:no-any\n\nexport function getGlobalNamespace() {\n  if (globalNameSpace == null) {\n    // tslint:disable-next-line:no-any\n    let ns;\n\n    if (typeof window !== 'undefined') {\n      ns = window;\n    } else if (typeof global !== 'undefined') {\n      ns = global;\n    } else if (typeof process !== 'undefined') {\n      ns = process;\n    } else if (typeof self !== 'undefined') {\n      ns = self;\n    } else {\n      throw new Error('Could not find a global object');\n    }\n\n    globalNameSpace = ns;\n  }\n\n  return globalNameSpace;\n} // tslint:disable-next-line:no-any\n\nfunction getGlobalMap() {\n  const ns = getGlobalNamespace();\n\n  if (ns._tfGlobals == null) {\n    ns._tfGlobals = new Map();\n  }\n\n  return ns._tfGlobals;\n}\n/**\n * Returns a globally accessible 'singleton' object.\n *\n * @param key the name of the object\n * @param init a function to initialize to initialize this object\n *             the first time it is fetched.\n */\n\n\nexport function getGlobal(key, init) {\n  const globalMap = getGlobalMap();\n\n  if (globalMap.has(key)) {\n    return globalMap.get(key);\n  } else {\n    const singleton = init();\n    globalMap.set(key, singleton);\n    return globalMap.get(key);\n  }\n}","map":{"version":3,"names":["globalNameSpace","getGlobalNamespace","ns","window","global","process","self","Error","getGlobalMap","_tfGlobals","Map","getGlobal","key","init","globalMap","has","get","singleton","set"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/global_util.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Note that the identifier globalNameSpace is scoped to this module, but will\n// always resolve to the same global object regardless of how the module is\n// resolved.\n// tslint:disable-next-line:no-any\nlet globalNameSpace;\n// tslint:disable-next-line:no-any\nexport function getGlobalNamespace() {\n    if (globalNameSpace == null) {\n        // tslint:disable-next-line:no-any\n        let ns;\n        if (typeof (window) !== 'undefined') {\n            ns = window;\n        }\n        else if (typeof (global) !== 'undefined') {\n            ns = global;\n        }\n        else if (typeof (process) !== 'undefined') {\n            ns = process;\n        }\n        else if (typeof (self) !== 'undefined') {\n            ns = self;\n        }\n        else {\n            throw new Error('Could not find a global object');\n        }\n        globalNameSpace = ns;\n    }\n    return globalNameSpace;\n}\n// tslint:disable-next-line:no-any\nfunction getGlobalMap() {\n    const ns = getGlobalNamespace();\n    if (ns._tfGlobals == null) {\n        ns._tfGlobals = new Map();\n    }\n    return ns._tfGlobals;\n}\n/**\n * Returns a globally accessible 'singleton' object.\n *\n * @param key the name of the object\n * @param init a function to initialize to initialize this object\n *             the first time it is fetched.\n */\nexport function getGlobal(key, init) {\n    const globalMap = getGlobalMap();\n    if (globalMap.has(key)) {\n        return globalMap.get(key);\n    }\n    else {\n        const singleton = init();\n        globalMap.set(key, singleton);\n        return globalMap.get(key);\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,eAAJ,C,CACA;;AACA,OAAO,SAASC,kBAAT,GAA8B;EACjC,IAAID,eAAe,IAAI,IAAvB,EAA6B;IACzB;IACA,IAAIE,EAAJ;;IACA,IAAI,OAAQC,MAAR,KAAoB,WAAxB,EAAqC;MACjCD,EAAE,GAAGC,MAAL;IACH,CAFD,MAGK,IAAI,OAAQC,MAAR,KAAoB,WAAxB,EAAqC;MACtCF,EAAE,GAAGE,MAAL;IACH,CAFI,MAGA,IAAI,OAAQC,OAAR,KAAqB,WAAzB,EAAsC;MACvCH,EAAE,GAAGG,OAAL;IACH,CAFI,MAGA,IAAI,OAAQC,IAAR,KAAkB,WAAtB,EAAmC;MACpCJ,EAAE,GAAGI,IAAL;IACH,CAFI,MAGA;MACD,MAAM,IAAIC,KAAJ,CAAU,gCAAV,CAAN;IACH;;IACDP,eAAe,GAAGE,EAAlB;EACH;;EACD,OAAOF,eAAP;AACH,C,CACD;;AACA,SAASQ,YAAT,GAAwB;EACpB,MAAMN,EAAE,GAAGD,kBAAkB,EAA7B;;EACA,IAAIC,EAAE,CAACO,UAAH,IAAiB,IAArB,EAA2B;IACvBP,EAAE,CAACO,UAAH,GAAgB,IAAIC,GAAJ,EAAhB;EACH;;EACD,OAAOR,EAAE,CAACO,UAAV;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASE,SAAT,CAAmBC,GAAnB,EAAwBC,IAAxB,EAA8B;EACjC,MAAMC,SAAS,GAAGN,YAAY,EAA9B;;EACA,IAAIM,SAAS,CAACC,GAAV,CAAcH,GAAd,CAAJ,EAAwB;IACpB,OAAOE,SAAS,CAACE,GAAV,CAAcJ,GAAd,CAAP;EACH,CAFD,MAGK;IACD,MAAMK,SAAS,GAAGJ,IAAI,EAAtB;IACAC,SAAS,CAACI,GAAV,CAAcN,GAAd,EAAmBK,SAAnB;IACA,OAAOH,SAAS,CAACE,GAAV,CAAcJ,GAAd,CAAP;EACH;AACJ"},"metadata":{},"sourceType":"module"}