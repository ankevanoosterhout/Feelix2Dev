{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Tensor } from './tensor';\nimport { upcastType } from './types';\nimport { assert } from './util';\nexport function makeTypesMatch(a, b) {\n  if (a.dtype === b.dtype) {\n    return [a, b];\n  }\n\n  const dtype = upcastType(a.dtype, b.dtype);\n  return [a.cast(dtype), b.cast(dtype)];\n}\nexport function assertTypesMatch(a, b) {\n  assert(a.dtype === b.dtype, () => `The dtypes of the first(${a.dtype}) and` + ` second(${b.dtype}) input must match`);\n}\nexport function isTensorInList(tensor, tensorList) {\n  return tensorList.some(x => x.id === tensor.id);\n}\n/**\n * Extracts any `Tensor`s found within the provided object.\n *\n * @param container an object that may be a `Tensor` or may directly contain\n *   `Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. In general it\n *   is safe to pass any object here, except that `Promise`s are not\n *   supported.\n * @returns An array of `Tensors` found within the passed object. If the\n *   argument is simply a `Tensor', a list containing that `Tensor` is\n *   returned. If the object is not a `Tensor` or does not\n *   contain `Tensors`, an empty list is returned.\n */\n\nexport function getTensorsInContainer(result) {\n  const list = [];\n  const seen = new Set();\n  walkTensorContainer(result, list, seen);\n  return list;\n}\n\nfunction walkTensorContainer(container, list, seen) {\n  if (container == null) {\n    return;\n  }\n\n  if (container instanceof Tensor) {\n    list.push(container);\n    return;\n  }\n\n  if (!isIterable(container)) {\n    return;\n  } // Iteration over keys works also for arrays.\n\n\n  const iterable = container;\n\n  for (const k in iterable) {\n    const val = iterable[k];\n\n    if (!seen.has(val)) {\n      seen.add(val);\n      walkTensorContainer(val, list, seen);\n    }\n  }\n} // tslint:disable-next-line:no-any\n\n\nfunction isIterable(obj) {\n  return Array.isArray(obj) || typeof obj === 'object';\n}","map":{"version":3,"names":["Tensor","upcastType","assert","makeTypesMatch","a","b","dtype","cast","assertTypesMatch","isTensorInList","tensor","tensorList","some","x","id","getTensorsInContainer","result","list","seen","Set","walkTensorContainer","container","push","isIterable","iterable","k","val","has","add","obj","Array","isArray"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/tensor_util.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Tensor } from './tensor';\nimport { upcastType } from './types';\nimport { assert } from './util';\nexport function makeTypesMatch(a, b) {\n    if (a.dtype === b.dtype) {\n        return [a, b];\n    }\n    const dtype = upcastType(a.dtype, b.dtype);\n    return [a.cast(dtype), b.cast(dtype)];\n}\nexport function assertTypesMatch(a, b) {\n    assert(a.dtype === b.dtype, () => `The dtypes of the first(${a.dtype}) and` +\n        ` second(${b.dtype}) input must match`);\n}\nexport function isTensorInList(tensor, tensorList) {\n    return tensorList.some(x => x.id === tensor.id);\n}\n/**\n * Extracts any `Tensor`s found within the provided object.\n *\n * @param container an object that may be a `Tensor` or may directly contain\n *   `Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. In general it\n *   is safe to pass any object here, except that `Promise`s are not\n *   supported.\n * @returns An array of `Tensors` found within the passed object. If the\n *   argument is simply a `Tensor', a list containing that `Tensor` is\n *   returned. If the object is not a `Tensor` or does not\n *   contain `Tensors`, an empty list is returned.\n */\nexport function getTensorsInContainer(result) {\n    const list = [];\n    const seen = new Set();\n    walkTensorContainer(result, list, seen);\n    return list;\n}\nfunction walkTensorContainer(container, list, seen) {\n    if (container == null) {\n        return;\n    }\n    if (container instanceof Tensor) {\n        list.push(container);\n        return;\n    }\n    if (!isIterable(container)) {\n        return;\n    }\n    // Iteration over keys works also for arrays.\n    const iterable = container;\n    for (const k in iterable) {\n        const val = iterable[k];\n        if (!seen.has(val)) {\n            seen.add(val);\n            walkTensorContainer(val, list, seen);\n        }\n    }\n}\n// tslint:disable-next-line:no-any\nfunction isIterable(obj) {\n    return Array.isArray(obj) || typeof obj === 'object';\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,UAAvB;AACA,SAASC,UAAT,QAA2B,SAA3B;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAO,SAASC,cAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA8B;EACjC,IAAID,CAAC,CAACE,KAAF,KAAYD,CAAC,CAACC,KAAlB,EAAyB;IACrB,OAAO,CAACF,CAAD,EAAIC,CAAJ,CAAP;EACH;;EACD,MAAMC,KAAK,GAAGL,UAAU,CAACG,CAAC,CAACE,KAAH,EAAUD,CAAC,CAACC,KAAZ,CAAxB;EACA,OAAO,CAACF,CAAC,CAACG,IAAF,CAAOD,KAAP,CAAD,EAAgBD,CAAC,CAACE,IAAF,CAAOD,KAAP,CAAhB,CAAP;AACH;AACD,OAAO,SAASE,gBAAT,CAA0BJ,CAA1B,EAA6BC,CAA7B,EAAgC;EACnCH,MAAM,CAACE,CAAC,CAACE,KAAF,KAAYD,CAAC,CAACC,KAAf,EAAsB,MAAO,2BAA0BF,CAAC,CAACE,KAAM,OAAnC,GAC7B,WAAUD,CAAC,CAACC,KAAM,oBADjB,CAAN;AAEH;AACD,OAAO,SAASG,cAAT,CAAwBC,MAAxB,EAAgCC,UAAhC,EAA4C;EAC/C,OAAOA,UAAU,CAACC,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASJ,MAAM,CAACI,EAArC,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,qBAAT,CAA+BC,MAA/B,EAAuC;EAC1C,MAAMC,IAAI,GAAG,EAAb;EACA,MAAMC,IAAI,GAAG,IAAIC,GAAJ,EAAb;EACAC,mBAAmB,CAACJ,MAAD,EAASC,IAAT,EAAeC,IAAf,CAAnB;EACA,OAAOD,IAAP;AACH;;AACD,SAASG,mBAAT,CAA6BC,SAA7B,EAAwCJ,IAAxC,EAA8CC,IAA9C,EAAoD;EAChD,IAAIG,SAAS,IAAI,IAAjB,EAAuB;IACnB;EACH;;EACD,IAAIA,SAAS,YAAYrB,MAAzB,EAAiC;IAC7BiB,IAAI,CAACK,IAAL,CAAUD,SAAV;IACA;EACH;;EACD,IAAI,CAACE,UAAU,CAACF,SAAD,CAAf,EAA4B;IACxB;EACH,CAV+C,CAWhD;;;EACA,MAAMG,QAAQ,GAAGH,SAAjB;;EACA,KAAK,MAAMI,CAAX,IAAgBD,QAAhB,EAA0B;IACtB,MAAME,GAAG,GAAGF,QAAQ,CAACC,CAAD,CAApB;;IACA,IAAI,CAACP,IAAI,CAACS,GAAL,CAASD,GAAT,CAAL,EAAoB;MAChBR,IAAI,CAACU,GAAL,CAASF,GAAT;MACAN,mBAAmB,CAACM,GAAD,EAAMT,IAAN,EAAYC,IAAZ,CAAnB;IACH;EACJ;AACJ,C,CACD;;;AACA,SAASK,UAAT,CAAoBM,GAApB,EAAyB;EACrB,OAAOC,KAAK,CAACC,OAAN,CAAcF,GAAd,KAAsB,OAAOA,GAAP,KAAe,QAA5C;AACH"},"metadata":{},"sourceType":"module"}