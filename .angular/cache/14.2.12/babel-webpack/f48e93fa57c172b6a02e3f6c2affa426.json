{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, util } from '@tensorflow/tfjs-core';\nexport var PackingScheme;\n\n(function (PackingScheme) {\n  /**\n   * All values in a single texel are densely packed without any constraints.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 4]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   010|011   020|021\n   * -------   -------   -------\n   * 002|003   012|013   022|023\n   *\n   * 100|101   110|111   120|121\n   * -------   -------   -------\n   * 102|103   112|113   122|123\n   *\n   */\n  PackingScheme[PackingScheme[\"DENSE\"] = 0] = \"DENSE\";\n  /**\n   * Single texels contain only values from the same batch, and from adjacent\n   * rows and columns.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 5]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   002|003   004|xxx   020|021   022|023   024|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   * 100|101   102|103   104|xxx   120|121   122|123   124|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   */\n\n  PackingScheme[PackingScheme[\"SHARED_BATCH\"] = 1] = \"SHARED_BATCH\";\n})(PackingScheme || (PackingScheme = {}));\n\nexport var TextureUsage;\n\n(function (TextureUsage) {\n  TextureUsage[TextureUsage[\"RENDER\"] = 0] = \"RENDER\";\n  TextureUsage[TextureUsage[\"UPLOAD\"] = 1] = \"UPLOAD\";\n  TextureUsage[TextureUsage[\"PIXELS\"] = 2] = \"PIXELS\";\n  TextureUsage[TextureUsage[\"DOWNLOAD\"] = 3] = \"DOWNLOAD\";\n})(TextureUsage || (TextureUsage = {}));\n\nexport var PhysicalTextureType;\n\n(function (PhysicalTextureType) {\n  PhysicalTextureType[PhysicalTextureType[\"UNPACKED_FLOAT16\"] = 0] = \"UNPACKED_FLOAT16\";\n  PhysicalTextureType[PhysicalTextureType[\"UNPACKED_FLOAT32\"] = 1] = \"UNPACKED_FLOAT32\";\n  PhysicalTextureType[PhysicalTextureType[\"PACKED_4X1_UNSIGNED_BYTE\"] = 2] = \"PACKED_4X1_UNSIGNED_BYTE\";\n  PhysicalTextureType[PhysicalTextureType[\"PACKED_2X2_FLOAT32\"] = 3] = \"PACKED_2X2_FLOAT32\";\n  PhysicalTextureType[PhysicalTextureType[\"PACKED_2X2_FLOAT16\"] = 4] = \"PACKED_2X2_FLOAT16\";\n})(PhysicalTextureType || (PhysicalTextureType = {}));\n\nexport function getUnpackedMatrixTextureShapeWidthHeight(rows, columns) {\n  return [columns, rows];\n}\nexport function getUnpackedArraySizeFromMatrixSize(matrixSize, channelsPerTexture) {\n  return matrixSize * channelsPerTexture;\n}\nexport function getColorMatrixTextureShapeWidthHeight(rows, columns) {\n  return [columns * 4, rows];\n}\n/**\n * Get shape for densely packed RGBA texture.\n */\n\nexport function getDenseTexShape(shape) {\n  const size = util.sizeFromShape(shape);\n  const texelsNeeded = Math.ceil(size / 4);\n  return util.sizeToSquarishShape(texelsNeeded);\n}\nexport function getMatrixSizeFromUnpackedArraySize(unpackedSize, channelsPerTexture) {\n  if (unpackedSize % channelsPerTexture !== 0) {\n    throw new Error(`unpackedSize (${unpackedSize}) must be a multiple of ` + `${channelsPerTexture}`);\n  }\n\n  return unpackedSize / channelsPerTexture;\n}\nexport function decodeMatrixFromUnpackedColorRGBAArray(unpackedArray, matrix, channels) {\n  const requiredSize = unpackedArray.length * channels / 4;\n\n  if (matrix.length < requiredSize) {\n    throw new Error(`matrix length (${matrix.length}) must be >= ${requiredSize}`);\n  }\n\n  let dst = 0;\n\n  for (let src = 0; src < unpackedArray.length; src += 4) {\n    for (let c = 0; c < channels; c++) {\n      matrix[dst++] = unpackedArray[src + c];\n    }\n  }\n}\nexport function getPackedMatrixTextureShapeWidthHeight(rows, columns) {\n  return [Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))];\n}\nexport function getPackedRGBAArraySizeFromMatrixShape(rows, columns) {\n  const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return w * h * 4;\n}\nexport function getTextureConfig( // tslint:disable-next-line:no-any\ngl, textureHalfFloatExtension) {\n  // tslint:disable-next-line:no-any\n  const glany = gl;\n  let internalFormatFloat;\n  let internalFormatHalfFloat;\n  let internalFormatPackedHalfFloat;\n  let internalFormatPackedFloat;\n  let textureFormatFloat;\n  let downloadTextureFormat;\n  let downloadUnpackNumChannels;\n  let defaultNumChannels;\n  let textureTypeHalfFloat;\n  let textureTypeFloat;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    internalFormatFloat = glany.R32F;\n    internalFormatHalfFloat = glany.R16F;\n    internalFormatPackedHalfFloat = glany.RGBA16F;\n    internalFormatPackedFloat = glany.RGBA32F;\n    textureFormatFloat = glany.RED;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 1;\n    textureTypeHalfFloat = glany.HALF_FLOAT;\n    textureTypeFloat = glany.FLOAT;\n    downloadTextureFormat = glany.RGBA8;\n  } else {\n    internalFormatFloat = gl.RGBA;\n    internalFormatHalfFloat = gl.RGBA;\n    internalFormatPackedHalfFloat = gl.RGBA;\n    internalFormatPackedFloat = glany.RGBA;\n    textureFormatFloat = gl.RGBA;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 4;\n    textureTypeHalfFloat = textureHalfFloatExtension != null ? textureHalfFloatExtension.HALF_FLOAT_OES : null;\n    textureTypeFloat = gl.FLOAT;\n    downloadTextureFormat = gl.RGBA;\n  }\n\n  return {\n    internalFormatFloat,\n    internalFormatHalfFloat,\n    internalFormatPackedHalfFloat,\n    internalFormatPackedFloat,\n    textureFormatFloat,\n    downloadTextureFormat,\n    downloadUnpackNumChannels,\n    defaultNumChannels,\n    textureTypeHalfFloat,\n    textureTypeFloat\n  };\n}","map":{"version":3,"names":["env","util","PackingScheme","TextureUsage","PhysicalTextureType","getUnpackedMatrixTextureShapeWidthHeight","rows","columns","getUnpackedArraySizeFromMatrixSize","matrixSize","channelsPerTexture","getColorMatrixTextureShapeWidthHeight","getDenseTexShape","shape","size","sizeFromShape","texelsNeeded","Math","ceil","sizeToSquarishShape","getMatrixSizeFromUnpackedArraySize","unpackedSize","Error","decodeMatrixFromUnpackedColorRGBAArray","unpackedArray","matrix","channels","requiredSize","length","dst","src","c","getPackedMatrixTextureShapeWidthHeight","max","getPackedRGBAArraySizeFromMatrixShape","w","h","getTextureConfig","gl","textureHalfFloatExtension","glany","internalFormatFloat","internalFormatHalfFloat","internalFormatPackedHalfFloat","internalFormatPackedFloat","textureFormatFloat","downloadTextureFormat","downloadUnpackNumChannels","defaultNumChannels","textureTypeHalfFloat","textureTypeFloat","getNumber","R32F","R16F","RGBA16F","RGBA32F","RED","HALF_FLOAT","FLOAT","RGBA8","RGBA","HALF_FLOAT_OES"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/tex_util.js"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, util } from '@tensorflow/tfjs-core';\nexport var PackingScheme;\n(function (PackingScheme) {\n    /**\n     * All values in a single texel are densely packed without any constraints.\n     *\n     * This is how the shader encodes a tensor with shape = [2, 3, 4]\n     * (indices are [batch, row, col]).\n     *\n     * 000|001   010|011   020|021\n     * -------   -------   -------\n     * 002|003   012|013   022|023\n     *\n     * 100|101   110|111   120|121\n     * -------   -------   -------\n     * 102|103   112|113   122|123\n     *\n     */\n    PackingScheme[PackingScheme[\"DENSE\"] = 0] = \"DENSE\";\n    /**\n     * Single texels contain only values from the same batch, and from adjacent\n     * rows and columns.\n     *\n     * This is how the shader encodes a tensor with shape = [2, 3, 5]\n     * (indices are [batch, row, col]).\n     *\n     * 000|001   002|003   004|xxx   020|021   022|023   024|xxx\n     * -------   -------   -------   -------   -------   -------\n     * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n     *\n     * 100|101   102|103   104|xxx   120|121   122|123   124|xxx\n     * -------   -------   -------   -------   -------   -------\n     * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n     *\n     */\n    PackingScheme[PackingScheme[\"SHARED_BATCH\"] = 1] = \"SHARED_BATCH\";\n})(PackingScheme || (PackingScheme = {}));\nexport var TextureUsage;\n(function (TextureUsage) {\n    TextureUsage[TextureUsage[\"RENDER\"] = 0] = \"RENDER\";\n    TextureUsage[TextureUsage[\"UPLOAD\"] = 1] = \"UPLOAD\";\n    TextureUsage[TextureUsage[\"PIXELS\"] = 2] = \"PIXELS\";\n    TextureUsage[TextureUsage[\"DOWNLOAD\"] = 3] = \"DOWNLOAD\";\n})(TextureUsage || (TextureUsage = {}));\nexport var PhysicalTextureType;\n(function (PhysicalTextureType) {\n    PhysicalTextureType[PhysicalTextureType[\"UNPACKED_FLOAT16\"] = 0] = \"UNPACKED_FLOAT16\";\n    PhysicalTextureType[PhysicalTextureType[\"UNPACKED_FLOAT32\"] = 1] = \"UNPACKED_FLOAT32\";\n    PhysicalTextureType[PhysicalTextureType[\"PACKED_4X1_UNSIGNED_BYTE\"] = 2] = \"PACKED_4X1_UNSIGNED_BYTE\";\n    PhysicalTextureType[PhysicalTextureType[\"PACKED_2X2_FLOAT32\"] = 3] = \"PACKED_2X2_FLOAT32\";\n    PhysicalTextureType[PhysicalTextureType[\"PACKED_2X2_FLOAT16\"] = 4] = \"PACKED_2X2_FLOAT16\";\n})(PhysicalTextureType || (PhysicalTextureType = {}));\nexport function getUnpackedMatrixTextureShapeWidthHeight(rows, columns) {\n    return [columns, rows];\n}\nexport function getUnpackedArraySizeFromMatrixSize(matrixSize, channelsPerTexture) {\n    return matrixSize * channelsPerTexture;\n}\nexport function getColorMatrixTextureShapeWidthHeight(rows, columns) {\n    return [columns * 4, rows];\n}\n/**\n * Get shape for densely packed RGBA texture.\n */\nexport function getDenseTexShape(shape) {\n    const size = util.sizeFromShape(shape);\n    const texelsNeeded = Math.ceil(size / 4);\n    return util.sizeToSquarishShape(texelsNeeded);\n}\nexport function getMatrixSizeFromUnpackedArraySize(unpackedSize, channelsPerTexture) {\n    if (unpackedSize % channelsPerTexture !== 0) {\n        throw new Error(`unpackedSize (${unpackedSize}) must be a multiple of ` +\n            `${channelsPerTexture}`);\n    }\n    return unpackedSize / channelsPerTexture;\n}\nexport function decodeMatrixFromUnpackedColorRGBAArray(unpackedArray, matrix, channels) {\n    const requiredSize = unpackedArray.length * channels / 4;\n    if (matrix.length < requiredSize) {\n        throw new Error(`matrix length (${matrix.length}) must be >= ${requiredSize}`);\n    }\n    let dst = 0;\n    for (let src = 0; src < unpackedArray.length; src += 4) {\n        for (let c = 0; c < channels; c++) {\n            matrix[dst++] = unpackedArray[src + c];\n        }\n    }\n}\nexport function getPackedMatrixTextureShapeWidthHeight(rows, columns) {\n    return [\n        Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))\n    ];\n}\nexport function getPackedRGBAArraySizeFromMatrixShape(rows, columns) {\n    const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    return w * h * 4;\n}\nexport function getTextureConfig(\n// tslint:disable-next-line:no-any\ngl, textureHalfFloatExtension) {\n    // tslint:disable-next-line:no-any\n    const glany = gl;\n    let internalFormatFloat;\n    let internalFormatHalfFloat;\n    let internalFormatPackedHalfFloat;\n    let internalFormatPackedFloat;\n    let textureFormatFloat;\n    let downloadTextureFormat;\n    let downloadUnpackNumChannels;\n    let defaultNumChannels;\n    let textureTypeHalfFloat;\n    let textureTypeFloat;\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n        internalFormatFloat = glany.R32F;\n        internalFormatHalfFloat = glany.R16F;\n        internalFormatPackedHalfFloat = glany.RGBA16F;\n        internalFormatPackedFloat = glany.RGBA32F;\n        textureFormatFloat = glany.RED;\n        downloadUnpackNumChannels = 4;\n        defaultNumChannels = 1;\n        textureTypeHalfFloat = glany.HALF_FLOAT;\n        textureTypeFloat = glany.FLOAT;\n        downloadTextureFormat = glany.RGBA8;\n    }\n    else {\n        internalFormatFloat = gl.RGBA;\n        internalFormatHalfFloat = gl.RGBA;\n        internalFormatPackedHalfFloat = gl.RGBA;\n        internalFormatPackedFloat = glany.RGBA;\n        textureFormatFloat = gl.RGBA;\n        downloadUnpackNumChannels = 4;\n        defaultNumChannels = 4;\n        textureTypeHalfFloat = textureHalfFloatExtension != null ?\n            textureHalfFloatExtension.HALF_FLOAT_OES :\n            null;\n        textureTypeFloat = gl.FLOAT;\n        downloadTextureFormat = gl.RGBA;\n    }\n    return {\n        internalFormatFloat,\n        internalFormatHalfFloat,\n        internalFormatPackedHalfFloat,\n        internalFormatPackedFloat,\n        textureFormatFloat,\n        downloadTextureFormat,\n        downloadUnpackNumChannels,\n        defaultNumChannels,\n        textureTypeHalfFloat,\n        textureTypeFloat\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}