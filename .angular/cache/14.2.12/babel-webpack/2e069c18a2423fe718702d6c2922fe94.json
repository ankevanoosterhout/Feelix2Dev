{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Pack, util } from '@tensorflow/tfjs-core';\nimport { concat } from './Concat';\nimport { expandDims } from './ExpandDims';\nexport function pack(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    axis\n  } = attrs;\n\n  if (inputs.length === 1) {\n    return expandDims({\n      inputs: {\n        input: inputs[0]\n      },\n      backend,\n      attrs: {\n        dim: axis\n      }\n    });\n  }\n\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n  inputs.forEach(t => {\n    util.assertShapesMatch(shape, t.shape, 'All tensors passed to stack must have matching shapes');\n    util.assert(dtype === t.dtype, () => 'All tensors passed to stack must have matching dtypes');\n  });\n  const intermediateTensorInfos = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT = expandDims({\n      inputs: {\n        input: t\n      },\n      backend,\n      attrs: {\n        dim: axis\n      }\n    });\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n  const result = concat({\n    inputs: expandedTensors,\n    backend,\n    attrs: {\n      axis\n    }\n  });\n  intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return result;\n}\nexport const packConfig = {\n  kernelName: Pack,\n  backendName: 'webgl',\n  kernelFunc: pack\n};","map":{"version":3,"names":["Pack","util","concat","expandDims","pack","args","inputs","backend","attrs","axis","length","input","dim","shape","dtype","forEach","t","assertShapesMatch","assert","intermediateTensorInfos","expandedTensors","map","expandedT","push","result","disposeIntermediateTensorInfo","packConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Pack.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Pack, util } from '@tensorflow/tfjs-core';\nimport { concat } from './Concat';\nimport { expandDims } from './ExpandDims';\nexport function pack(args) {\n    const { inputs, backend, attrs } = args;\n    const { axis } = attrs;\n    if (inputs.length === 1) {\n        return expandDims({ inputs: { input: inputs[0] }, backend, attrs: { dim: axis } });\n    }\n    const shape = inputs[0].shape;\n    const dtype = inputs[0].dtype;\n    inputs.forEach(t => {\n        util.assertShapesMatch(shape, t.shape, 'All tensors passed to stack must have matching shapes');\n        util.assert(dtype === t.dtype, () => 'All tensors passed to stack must have matching dtypes');\n    });\n    const intermediateTensorInfos = [];\n    const expandedTensors = inputs.map(t => {\n        const expandedT = expandDims({ inputs: { input: t }, backend, attrs: { dim: axis } });\n        intermediateTensorInfos.push(expandedT);\n        return expandedT;\n    });\n    const result = concat({ inputs: expandedTensors, backend, attrs: { axis } });\n    intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return result;\n}\nexport const packConfig = {\n    kernelName: Pack,\n    backendName: 'webgl',\n    kernelFunc: pack\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,IAAT,EAAeC,IAAf,QAA2B,uBAA3B;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,OAAO,SAASC,IAAT,CAAcC,IAAd,EAAoB;EACvB,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BH,IAAnC;EACA,MAAM;IAAEI;EAAF,IAAWD,KAAjB;;EACA,IAAIF,MAAM,CAACI,MAAP,KAAkB,CAAtB,EAAyB;IACrB,OAAOP,UAAU,CAAC;MAAEG,MAAM,EAAE;QAAEK,KAAK,EAAEL,MAAM,CAAC,CAAD;MAAf,CAAV;MAAgCC,OAAhC;MAAyCC,KAAK,EAAE;QAAEI,GAAG,EAAEH;MAAP;IAAhD,CAAD,CAAjB;EACH;;EACD,MAAMI,KAAK,GAAGP,MAAM,CAAC,CAAD,CAAN,CAAUO,KAAxB;EACA,MAAMC,KAAK,GAAGR,MAAM,CAAC,CAAD,CAAN,CAAUQ,KAAxB;EACAR,MAAM,CAACS,OAAP,CAAeC,CAAC,IAAI;IAChBf,IAAI,CAACgB,iBAAL,CAAuBJ,KAAvB,EAA8BG,CAAC,CAACH,KAAhC,EAAuC,uDAAvC;IACAZ,IAAI,CAACiB,MAAL,CAAYJ,KAAK,KAAKE,CAAC,CAACF,KAAxB,EAA+B,MAAM,uDAArC;EACH,CAHD;EAIA,MAAMK,uBAAuB,GAAG,EAAhC;EACA,MAAMC,eAAe,GAAGd,MAAM,CAACe,GAAP,CAAWL,CAAC,IAAI;IACpC,MAAMM,SAAS,GAAGnB,UAAU,CAAC;MAAEG,MAAM,EAAE;QAAEK,KAAK,EAAEK;MAAT,CAAV;MAAwBT,OAAxB;MAAiCC,KAAK,EAAE;QAAEI,GAAG,EAAEH;MAAP;IAAxC,CAAD,CAA5B;IACAU,uBAAuB,CAACI,IAAxB,CAA6BD,SAA7B;IACA,OAAOA,SAAP;EACH,CAJuB,CAAxB;EAKA,MAAME,MAAM,GAAGtB,MAAM,CAAC;IAAEI,MAAM,EAAEc,eAAV;IAA2Bb,OAA3B;IAAoCC,KAAK,EAAE;MAAEC;IAAF;EAA3C,CAAD,CAArB;EACAU,uBAAuB,CAACJ,OAAxB,CAAgCC,CAAC,IAAIT,OAAO,CAACkB,6BAAR,CAAsCT,CAAtC,CAArC;EACA,OAAOQ,MAAP;AACH;AACD,OAAO,MAAME,UAAU,GAAG;EACtBC,UAAU,EAAE3B,IADU;EAEtB4B,WAAW,EAAE,OAFS;EAGtBC,UAAU,EAAEzB;AAHU,CAAnB"},"metadata":{},"sourceType":"module"}