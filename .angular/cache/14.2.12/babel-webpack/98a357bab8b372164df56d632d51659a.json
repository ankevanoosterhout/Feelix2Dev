{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Please make sure the shaker key in makeShaderKey in gpgpu_math.ts is well\n// mapped if any shader source code is changed in this file.\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nconst {\n  getBroadcastDims\n} = backend_util;\nimport { getGlslDifferences } from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\nexport function makeShader(inputsInfo, outputShape, program) {\n  const prefixSnippets = [];\n  inputsInfo.forEach(x => {\n    const size = util.sizeFromShape(x.shapeInfo.logicalShape); // Snippet when we decided to upload the values as uniform.\n\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(`uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n    } else {\n      prefixSnippets.push(`uniform sampler2D ${x.name};`);\n      prefixSnippets.push(`uniform int offset${x.name};`);\n    }\n\n    if (program.enableShapeUniforms) {\n      const {\n        uniformShape\n      } = getUniformInfoFromShape(program.packedInputs, x.shapeInfo.logicalShape, x.shapeInfo.texShape);\n\n      switch (uniformShape.length) {\n        case 1:\n          prefixSnippets.push(`uniform int ${x.name}Shape;`);\n          break;\n\n        case 2:\n          prefixSnippets.push(`uniform ivec2 ${x.name}Shape;`);\n          break;\n\n        case 3:\n          prefixSnippets.push(`uniform ivec3 ${x.name}Shape;`);\n          break;\n\n        case 4:\n          prefixSnippets.push(`uniform ivec4 ${x.name}Shape;`);\n          break;\n\n        default:\n          break;\n      }\n\n      prefixSnippets.push(`uniform ivec2 ${x.name}TexShape;`);\n    }\n  });\n\n  if (program.enableShapeUniforms) {\n    switch (outputShape.logicalShape.length) {\n      case 1:\n        prefixSnippets.push(`uniform int outShape;`);\n        break;\n\n      case 2:\n        prefixSnippets.push(`uniform ivec2 outShape;`);\n        prefixSnippets.push(`uniform int outShapeStrides;`);\n        break;\n\n      case 3:\n        prefixSnippets.push(`uniform ivec3 outShape;`);\n        prefixSnippets.push(`uniform ivec2 outShapeStrides;`);\n        break;\n\n      case 4:\n        prefixSnippets.push(`uniform ivec4 outShape;`);\n        prefixSnippets.push(`uniform ivec3 outShapeStrides;`);\n        break;\n\n      default:\n        break;\n    }\n\n    prefixSnippets.push(`uniform ivec2 outTexShape;`);\n  }\n\n  if (program.customUniforms) {\n    program.customUniforms.forEach(d => {\n      prefixSnippets.push(`uniform ${d.type} ${d.name}${d.arrayIndex ? `[${d.arrayIndex}]` : ''};`);\n    });\n  }\n\n  const inputPrefixSnippet = prefixSnippets.join('\\n');\n  const inputSamplingSnippet = inputsInfo.map(x => getInputSamplingSnippet(x, outputShape, program.packedInputs, program.enableShapeUniforms)).join('\\n');\n  const outTexShape = outputShape.texShape;\n  const glsl = getGlslDifferences();\n  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  let outputSamplingSnippet;\n  let floatTextureSetOutputSnippet;\n  let shaderPrefix = getShaderPrefix(glsl);\n\n  if (outputShape.isPacked) {\n    outputSamplingSnippet = getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet = getOutputSamplingSnippet(outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n\n  if (program.packedInputs) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n\n  const source = [shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet, inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet, program.userCode].join('\\n');\n  return source;\n}\n\nfunction getSamplerFromInInfo(inInfo, enableShapeUniforms = false) {\n  const shape = inInfo.shapeInfo.logicalShape;\n\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo, enableShapeUniforms);\n\n    case 1:\n      return getSampler1D(inInfo, enableShapeUniforms);\n\n    case 2:\n      return getSampler2D(inInfo, enableShapeUniforms);\n\n    case 3:\n      return getSampler3D(inInfo, enableShapeUniforms);\n\n    case 4:\n      return getSampler4D(inInfo, enableShapeUniforms);\n\n    case 5:\n      return getSampler5D(inInfo);\n\n    case 6:\n      return getSampler6D(inInfo);\n\n    default:\n      throw new Error(`${shape.length}-D input sampling` + ` is not yet supported`);\n  }\n}\n\nfunction getPackedSamplerFromInInfo(inInfo, enableShapeUniforms) {\n  const shape = inInfo.shapeInfo.logicalShape;\n\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n\n    case 1:\n      return getPackedSampler1D(inInfo, enableShapeUniforms);\n\n    case 2:\n      return getPackedSampler2D(inInfo, enableShapeUniforms);\n\n    case 3:\n      return getPackedSampler3D(inInfo, enableShapeUniforms);\n\n    default:\n      return getPackedSamplerND(inInfo, enableShapeUniforms);\n  }\n}\n\nfunction getInputSamplingSnippet(inInfo, outShapeInfo, usesPackedTextures = false, enableShapeUniforms) {\n  let res = '';\n\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo, enableShapeUniforms);\n  } else {\n    res += getSamplerFromInInfo(inInfo, enableShapeUniforms);\n  }\n\n  const inShape = inInfo.shapeInfo.logicalShape;\n  const outShape = outShapeInfo.logicalShape;\n\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n\n  return res;\n}\n\nfunction getPackedOutputSamplingSnippet(outShape, outTexShape, enableShapeUniforms) {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n\n    case 1:\n      return getOutputPacked1DCoords(outShape, outTexShape, enableShapeUniforms);\n\n    case 2:\n      return getOutputPacked2DCoords(outShape, outTexShape, enableShapeUniforms);\n\n    case 3:\n      return getOutputPacked3DCoords(outShape, outTexShape, enableShapeUniforms);\n\n    default:\n      return getOutputPackedNDCoords(outShape, outTexShape, enableShapeUniforms);\n  }\n}\n\nfunction getOutputSamplingSnippet(outShape, outTexShape, enableShapeUniforms) {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n\n    case 1:\n      return getOutput1DCoords(outShape, outTexShape, enableShapeUniforms);\n\n    case 2:\n      return getOutput2DCoords(outShape, outTexShape, enableShapeUniforms);\n\n    case 3:\n      return getOutput3DCoords(outShape, outTexShape, enableShapeUniforms);\n\n    case 4:\n      return getOutput4DCoords(outShape, outTexShape, enableShapeUniforms);\n\n    case 5:\n      return getOutput5DCoords(outShape, outTexShape);\n\n    case 6:\n      return getOutput6DCoords(outShape, outTexShape);\n\n    default:\n      throw new Error(`${outShape.length}-D output sampling is not yet supported`);\n  }\n}\n\nfunction getFloatTextureSampleSnippet(glsl) {\n  return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\n\nfunction getFloatTextureSetRSnippet(glsl) {\n  return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\n\nfunction getFloatTextureSetRGBASnippet(glsl) {\n  return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\n\nfunction getShaderPrefix(glsl) {\n  const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n  return SHADER_PREFIX;\n}\n\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\n\nfunction getOutputScalarCoords() {\n  return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\n\nfunction getOutputPacked1DCoords(shape, texShape, enableShapeUniforms) {\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (packedTexShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n  }\n\n  if (packedTexShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  `;\n  }\n\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\n\nfunction getOutput1DCoords(shape, texShape, enableShapeUniforms) {\n  if (texShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n  }\n\n  if (texShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  `;\n  }\n\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\n\nfunction getOutputPacked3DCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n  }\n\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getOutput3DCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet = shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd'], shape);\n    return `\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${coordsFromIndexSnippet}\n    return ivec3(r, c, d);\n  }\n`;\n  }\n\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n\nfunction getOutputPackedNDCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  `;\n  }\n\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  let texelsInBatchN = texelsInBatch;\n  let batches = ``;\n  let coords = 'b, r, c';\n\n  for (let b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n    coords = `b${b}, ` + coords;\n  }\n\n  return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\n\nfunction getOutput4DCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet = shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd', 'd2'], shape);\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n  }\n\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2'], shape);\n  return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\n\nfunction getOutput5DCoords(shape, texShape) {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3'], shape);\n  return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\n\nfunction getOutput6DCoords(shape, texShape) {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n  return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\n\nfunction getOutputPacked2DCoords(shape, texShape, enableShapeUniforms) {\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    `;\n    }\n\n    return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      }\n    `;\n  } // texels needed to accommodate a logical row\n\n\n  const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n  }\n\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getOutput2DCoords(shape, texShape, enableShapeUniforms) {\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    `;\n    }\n\n    return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n  }\n\n  if (shape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n    }\n\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n  }\n\n  if (shape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n    }\n\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  `;\n  }\n\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getFlatOffsetUniformName(texName) {\n  return `offset${texName}`;\n}\n\nfunction getPackedSamplerScalar(inputInfo) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\n\nfunction getSamplerScalar(inputInfo, enableShapeUniforms) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    return `float ${funcName}() {return ${texName};}`;\n  }\n\n  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n\n  if (texNumR === 1 && texNumC === 1) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n  return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler1D(inputInfo, enableShapeUniforms) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const glsl = getGlslDifferences();\n\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler1D(inputInfo, enableShapeUniforms) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const tNumR = texShape[0];\n  const tNumC = texShape[1];\n\n  if (tNumC === 1 && tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n\n  if (tNumC === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / float(${texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (tNumR === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / float(${texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler2D(inputInfo, enableShapeUniforms) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const glsl = getGlslDifferences();\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const valuesPerRow = Math.ceil(shape[1] / 2);\n  return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler2D(inputInfo, enableShapeUniforms) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const offset = getFlatOffsetUniformName(texName);\n\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${texName}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${texName}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n      float ${funcName}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${texName}Shape[1] + col + ${offset};\n        vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\n\nfunction getPackedSampler3D(inputInfo, enableShapeUniforms) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (shape[0] === 1) {\n    const squeezedShape = shape.slice(1);\n    const keptDims = [1, 2];\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['b', 'row', 'col'];\n    return `\n        ${getPackedSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  const glsl = getGlslDifferences();\n\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n  const valuesPerRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n  return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler3D(inputInfo, enableShapeUniforms) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride0 = shape[1] * shape[2];\n  const stride1 = shape[2];\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col', 'depth'];\n    return `\n        ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        int stride1 = ${texName}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n  }\n\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${texName}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${texName}Shape[1] * ${texName}Shape[2];\n      int stride1 = ${texName}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${offset};\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);\n      return sampleTexture(${texName}, uv);\n    }\n    `;\n  }\n\n  return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\n\nfunction getPackedSamplerND(inputInfo, enableShapeUniforms) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    vec4 ${funcName}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${texName}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${texName}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${texName}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const rank = shape.length;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  let params = `int b, int row, int col`;\n  let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n\n  for (let b = 2; b < rank - 1; b++) {\n    params = `int b${b}, ` + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = `b${b} * ${texelsInBatch} + ` + index;\n  }\n\n  return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler4D(inputInfo, enableShapeUniforms) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride2 = shape[3];\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const stride2Str = `int stride2 = ${texName}Shape[3];`;\n  const stride1Str = `int stride1 = ${texName}Shape[2] * stride2;`;\n  const stride0Str = `int stride0 = ${texName}Shape[1] * stride1;`;\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        ${stride2Str}\n        ${stride1Str}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${texName}Shape[1] * ${texName}Shape[2], ${texName}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${stride2Str}\n      ${stride1Str}\n      ${stride0Str}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler5D(inputInfo) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride3 = shape[4];\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler6D(inputInfo) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  const stride4 = shape[5];\n  const stride3 = shape[4] * stride4;\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getUniformSampler(inputInfo) {\n  const texName = inputInfo.name;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n\n  if (inSize < 2) {\n    return `return ${texName};`;\n  }\n\n  return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\n\nfunction getPackedSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n  const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const type = getCoordsDataType(outRank);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n  }\n\n  let unpackedCoordsSnippet = '';\n\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n  }\n\n  let output = `return outputValue;`;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  const isInputScalar = inSize === 1;\n  const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  const isOutputScalar = outSize === 1;\n\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n    } else {\n      output = `\n        return vec4(outputValue.x);\n      `;\n    }\n  } else if (broadcastDims.length) {\n    const rows = inRank - 2;\n    const cols = inRank - 1;\n\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.x);`;\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = `return vec4(outputValue.x, outputValue.y, ` + `outputValue.x, outputValue.y);`;\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.xx, outputValue.zz);`;\n    }\n  }\n\n  return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\n\nfunction getSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const outTexShape = outShapeInfo.texShape;\n  const inTexShape = inputInfo.shapeInfo.texShape;\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank && inputInfo.shapeInfo.flatOffset == null && util.arraysEqual(inTexShape, outTexShape)) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n  }\n\n  const type = getCoordsDataType(outRank);\n  const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n  }\n\n  let unpackedCoordsSnippet = '';\n\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n  }\n\n  return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\n\nexport function getCoordsDataType(rank) {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\nexport function getUniformInfoFromShape(isPacked, shape, texShape) {\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n  const rank = shape.length;\n  const useSqueezePackedShape = isPacked && rank === 3 && shape[0] === 1;\n  const squeezeShape = useSqueezePackedShape ? shape.slice(1) : newShape;\n  const useSqueezeShape = !isPacked && rank > 1 && !util.arraysEqual(shape, texShape) && newShape.length < rank || useSqueezePackedShape;\n  const uniformShape = useSqueezeShape ? squeezeShape : shape;\n  return {\n    useSqueezeShape,\n    uniformShape,\n    keptDims\n  };\n}\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\n\nexport function squeezeInputInfo(inInfo, squeezedShape) {\n  // Deep copy.\n  const newInputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\n\nfunction getSqueezedParams(params, keptDims) {\n  return keptDims.map(d => params[d]).join(', ');\n}","map":{"version":3,"names":["backend_util","util","getBroadcastDims","getGlslDifferences","shader_util","makeShader","inputsInfo","outputShape","program","prefixSnippets","forEach","x","size","sizeFromShape","shapeInfo","logicalShape","isUniform","push","name","enableShapeUniforms","uniformShape","getUniformInfoFromShape","packedInputs","texShape","length","customUniforms","d","type","arrayIndex","inputPrefixSnippet","join","inputSamplingSnippet","map","getInputSamplingSnippet","outTexShape","glsl","floatTextureSampleSnippet","getFloatTextureSampleSnippet","outputSamplingSnippet","floatTextureSetOutputSnippet","shaderPrefix","getShaderPrefix","isPacked","getPackedOutputSamplingSnippet","getFloatTextureSetRGBASnippet","getOutputSamplingSnippet","getFloatTextureSetRSnippet","SHADER_PACKED_PREFIX","source","userCode","getSamplerFromInInfo","inInfo","shape","getSamplerScalar","getSampler1D","getSampler2D","getSampler3D","getSampler4D","getSampler5D","getSampler6D","Error","getPackedSamplerFromInInfo","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","outShapeInfo","usesPackedTextures","res","inShape","outShape","getPackedSamplerAtOutputCoords","getSamplerAtOutputCoords","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","getOutput1DCoords","getOutput2DCoords","getOutput3DCoords","getOutput4DCoords","getOutput5DCoords","getOutput6DCoords","texture2D","output","SHADER_PREFIX","version","varyingFs","defineOutput","defineSpecialNaN","defineSpecialInf","defineRound","SAMPLE_1D_SNIPPET","SAMPLE_2D_SNIPPET","SAMPLE_3D_SNIPPET","packedTexShape","Math","ceil","texelsInLogicalRow","texelsInBatch","coordsFromIndexSnippet","getOutputLogicalCoordinatesFromFlatIndexByUniform","getLogicalCoordinatesFromFlatIndex","texelsInBatchN","batches","coords","b","arraysEqual","getFlatOffsetUniformName","texName","inputInfo","funcName","charAt","toUpperCase","slice","texNumR","texNumC","offset","tNumR","tNumC","getUniformSampler","valuesPerRow","newShape","keptDims","squeezeShape","squeezedShape","newInputInfo","squeezeInputInfo","params","getSqueezedParams","stride0","stride1","flatOffset","rank","index","stride2","stride2Str","stride1Str","stride0Str","stride3","stride4","inSize","texFuncSnippet","inRank","outRank","broadcastDims","getCoordsDataType","rankDiff","coordsSnippet","fields","unpackedCoordsSnippet","s","i","isInputScalar","outSize","isOutputScalar","rows","cols","indexOf","inTexShape","useSqueezePackedShape","useSqueezeShape","JSON","parse","stringify"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Please make sure the shaker key in makeShaderKey in gpgpu_math.ts is well\n// mapped if any shader source code is changed in this file.\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nconst { getBroadcastDims } = backend_util;\nimport { getGlslDifferences } from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\nexport function makeShader(inputsInfo, outputShape, program) {\n    const prefixSnippets = [];\n    inputsInfo.forEach(x => {\n        const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n        // Snippet when we decided to upload the values as uniform.\n        if (x.shapeInfo.isUniform) {\n            prefixSnippets.push(`uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n        }\n        else {\n            prefixSnippets.push(`uniform sampler2D ${x.name};`);\n            prefixSnippets.push(`uniform int offset${x.name};`);\n        }\n        if (program.enableShapeUniforms) {\n            const { uniformShape } = getUniformInfoFromShape(program.packedInputs, x.shapeInfo.logicalShape, x.shapeInfo.texShape);\n            switch (uniformShape.length) {\n                case 1:\n                    prefixSnippets.push(`uniform int ${x.name}Shape;`);\n                    break;\n                case 2:\n                    prefixSnippets.push(`uniform ivec2 ${x.name}Shape;`);\n                    break;\n                case 3:\n                    prefixSnippets.push(`uniform ivec3 ${x.name}Shape;`);\n                    break;\n                case 4:\n                    prefixSnippets.push(`uniform ivec4 ${x.name}Shape;`);\n                    break;\n                default:\n                    break;\n            }\n            prefixSnippets.push(`uniform ivec2 ${x.name}TexShape;`);\n        }\n    });\n    if (program.enableShapeUniforms) {\n        switch (outputShape.logicalShape.length) {\n            case 1:\n                prefixSnippets.push(`uniform int outShape;`);\n                break;\n            case 2:\n                prefixSnippets.push(`uniform ivec2 outShape;`);\n                prefixSnippets.push(`uniform int outShapeStrides;`);\n                break;\n            case 3:\n                prefixSnippets.push(`uniform ivec3 outShape;`);\n                prefixSnippets.push(`uniform ivec2 outShapeStrides;`);\n                break;\n            case 4:\n                prefixSnippets.push(`uniform ivec4 outShape;`);\n                prefixSnippets.push(`uniform ivec3 outShapeStrides;`);\n                break;\n            default:\n                break;\n        }\n        prefixSnippets.push(`uniform ivec2 outTexShape;`);\n    }\n    if (program.customUniforms) {\n        program.customUniforms.forEach((d) => {\n            prefixSnippets.push(`uniform ${d.type} ${d.name}${d.arrayIndex ? `[${d.arrayIndex}]` : ''};`);\n        });\n    }\n    const inputPrefixSnippet = prefixSnippets.join('\\n');\n    const inputSamplingSnippet = inputsInfo\n        .map(x => getInputSamplingSnippet(x, outputShape, program.packedInputs, program.enableShapeUniforms))\n        .join('\\n');\n    const outTexShape = outputShape.texShape;\n    const glsl = getGlslDifferences();\n    const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n    let outputSamplingSnippet;\n    let floatTextureSetOutputSnippet;\n    let shaderPrefix = getShaderPrefix(glsl);\n    if (outputShape.isPacked) {\n        outputSamplingSnippet = getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n        floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n    }\n    else {\n        outputSamplingSnippet = getOutputSamplingSnippet(outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n        floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n    }\n    if (program.packedInputs) {\n        shaderPrefix += SHADER_PACKED_PREFIX;\n    }\n    const source = [\n        shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet,\n        inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet,\n        program.userCode\n    ].join('\\n');\n    return source;\n}\nfunction getSamplerFromInInfo(inInfo, enableShapeUniforms = false) {\n    const shape = inInfo.shapeInfo.logicalShape;\n    switch (shape.length) {\n        case 0:\n            return getSamplerScalar(inInfo, enableShapeUniforms);\n        case 1:\n            return getSampler1D(inInfo, enableShapeUniforms);\n        case 2:\n            return getSampler2D(inInfo, enableShapeUniforms);\n        case 3:\n            return getSampler3D(inInfo, enableShapeUniforms);\n        case 4:\n            return getSampler4D(inInfo, enableShapeUniforms);\n        case 5:\n            return getSampler5D(inInfo);\n        case 6:\n            return getSampler6D(inInfo);\n        default:\n            throw new Error(`${shape.length}-D input sampling` +\n                ` is not yet supported`);\n    }\n}\nfunction getPackedSamplerFromInInfo(inInfo, enableShapeUniforms) {\n    const shape = inInfo.shapeInfo.logicalShape;\n    switch (shape.length) {\n        case 0:\n            return getPackedSamplerScalar(inInfo);\n        case 1:\n            return getPackedSampler1D(inInfo, enableShapeUniforms);\n        case 2:\n            return getPackedSampler2D(inInfo, enableShapeUniforms);\n        case 3:\n            return getPackedSampler3D(inInfo, enableShapeUniforms);\n        default:\n            return getPackedSamplerND(inInfo, enableShapeUniforms);\n    }\n}\nfunction getInputSamplingSnippet(inInfo, outShapeInfo, usesPackedTextures = false, enableShapeUniforms) {\n    let res = '';\n    if (usesPackedTextures) {\n        res += getPackedSamplerFromInInfo(inInfo, enableShapeUniforms);\n    }\n    else {\n        res += getSamplerFromInInfo(inInfo, enableShapeUniforms);\n    }\n    const inShape = inInfo.shapeInfo.logicalShape;\n    const outShape = outShapeInfo.logicalShape;\n    if (inShape.length <= outShape.length) {\n        if (usesPackedTextures) {\n            res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n        }\n        else {\n            res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n        }\n    }\n    return res;\n}\nfunction getPackedOutputSamplingSnippet(outShape, outTexShape, enableShapeUniforms) {\n    switch (outShape.length) {\n        case 0:\n            return getOutputScalarCoords();\n        case 1:\n            return getOutputPacked1DCoords(outShape, outTexShape, enableShapeUniforms);\n        case 2:\n            return getOutputPacked2DCoords(outShape, outTexShape, enableShapeUniforms);\n        case 3:\n            return getOutputPacked3DCoords(outShape, outTexShape, enableShapeUniforms);\n        default:\n            return getOutputPackedNDCoords(outShape, outTexShape, enableShapeUniforms);\n    }\n}\nfunction getOutputSamplingSnippet(outShape, outTexShape, enableShapeUniforms) {\n    switch (outShape.length) {\n        case 0:\n            return getOutputScalarCoords();\n        case 1:\n            return getOutput1DCoords(outShape, outTexShape, enableShapeUniforms);\n        case 2:\n            return getOutput2DCoords(outShape, outTexShape, enableShapeUniforms);\n        case 3:\n            return getOutput3DCoords(outShape, outTexShape, enableShapeUniforms);\n        case 4:\n            return getOutput4DCoords(outShape, outTexShape, enableShapeUniforms);\n        case 5:\n            return getOutput5DCoords(outShape, outTexShape);\n        case 6:\n            return getOutput6DCoords(outShape, outTexShape);\n        default:\n            throw new Error(`${outShape.length}-D output sampling is not yet supported`);\n    }\n}\nfunction getFloatTextureSampleSnippet(glsl) {\n    return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\nfunction getFloatTextureSetRSnippet(glsl) {\n    return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\nfunction getFloatTextureSetRGBASnippet(glsl) {\n    return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\nfunction getShaderPrefix(glsl) {\n    const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n    return SHADER_PREFIX;\n}\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\nfunction getOutputScalarCoords() {\n    return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\nfunction getOutputPacked1DCoords(shape, texShape, enableShapeUniforms) {\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    if (packedTexShape[0] === 1) {\n        if (enableShapeUniforms) {\n            return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    `;\n        }\n        return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n    }\n    if (packedTexShape[1] === 1) {\n        if (enableShapeUniforms) {\n            return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    `;\n        }\n        return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n    }\n    if (enableShapeUniforms) {\n        return `\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  `;\n    }\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\nfunction getOutput1DCoords(shape, texShape, enableShapeUniforms) {\n    if (texShape[0] === 1) {\n        if (enableShapeUniforms) {\n            return `\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    `;\n        }\n        return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n    }\n    if (texShape[1] === 1) {\n        if (enableShapeUniforms) {\n            return `\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    `;\n        }\n        return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n    }\n    if (enableShapeUniforms) {\n        return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  `;\n    }\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\nfunction getOutputPacked3DCoords(shape, texShape, enableShapeUniforms) {\n    if (enableShapeUniforms) {\n        return `\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n    }\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\nfunction getOutput3DCoords(shape, texShape, enableShapeUniforms) {\n    if (enableShapeUniforms) {\n        const coordsFromIndexSnippet = shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd'], shape);\n        return `\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${coordsFromIndexSnippet}\n    return ivec3(r, c, d);\n  }\n`;\n    }\n    const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\nfunction getOutputPackedNDCoords(shape, texShape, enableShapeUniforms) {\n    if (enableShapeUniforms) {\n        // TODO: support 5d and 6d\n        return `\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  `;\n    }\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = ``;\n    let coords = 'b, r, c';\n    for (let b = 2; b < shape.length - 1; b++) {\n        texelsInBatchN *= shape[shape.length - b - 1];\n        batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n        coords = `b${b}, ` + coords;\n    }\n    return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\nfunction getOutput4DCoords(shape, texShape, enableShapeUniforms) {\n    if (enableShapeUniforms) {\n        const coordsFromIndexSnippet = shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd', 'd2'], shape);\n        return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n    }\n    const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2'], shape);\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\nfunction getOutput5DCoords(shape, texShape) {\n    const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3'], shape);\n    return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\nfunction getOutput6DCoords(shape, texShape) {\n    const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n    return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\nfunction getOutputPacked2DCoords(shape, texShape, enableShapeUniforms) {\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    if (util.arraysEqual(shape, texShape)) {\n        if (enableShapeUniforms) {\n            return `\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    `;\n        }\n        return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      }\n    `;\n    }\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    if (enableShapeUniforms) {\n        return `\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n    }\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\nfunction getOutput2DCoords(shape, texShape, enableShapeUniforms) {\n    if (util.arraysEqual(shape, texShape)) {\n        if (enableShapeUniforms) {\n            return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    `;\n        }\n        return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n    }\n    if (shape[1] === 1) {\n        if (enableShapeUniforms) {\n            return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n        }\n        return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n    }\n    if (shape[0] === 1) {\n        if (enableShapeUniforms) {\n            return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n        }\n        return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n    }\n    if (enableShapeUniforms) {\n        return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  `;\n    }\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\nfunction getFlatOffsetUniformName(texName) {\n    return `offset${texName}`;\n}\nfunction getPackedSamplerScalar(inputInfo) {\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const glsl = getGlslDifferences();\n    return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\nfunction getSamplerScalar(inputInfo, enableShapeUniforms) {\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    if (inputInfo.shapeInfo.isUniform) {\n        return `float ${funcName}() {return ${texName};}`;\n    }\n    const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n    if (texNumR === 1 && texNumC === 1) {\n        return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    if (enableShapeUniforms) {\n        return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n    return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getPackedSampler1D(inputInfo, enableShapeUniforms) {\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const texShape = inputInfo.shapeInfo.texShape;\n    const glsl = getGlslDifferences();\n    if (enableShapeUniforms) {\n        return `\n    vec4 ${funcName}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n    }\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler1D(inputInfo, enableShapeUniforms) {\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const texShape = inputInfo.shapeInfo.texShape;\n    const tNumR = texShape[0];\n    const tNumC = texShape[1];\n    if (tNumC === 1 && tNumR === 1) {\n        return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    if (tNumC === 1) {\n        if (enableShapeUniforms) {\n            return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / float(${texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n        }\n        return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    if (tNumR === 1) {\n        if (enableShapeUniforms) {\n            return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / float(${texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n        }\n        return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    if (enableShapeUniforms) {\n        return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getPackedSampler2D(inputInfo, enableShapeUniforms) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    const glsl = getGlslDifferences();\n    if (texShape != null && util.arraysEqual(shape, texShape)) {\n        if (enableShapeUniforms) {\n            return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n        }\n        return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n    }\n    if (enableShapeUniforms) {\n        return `\n    vec4 ${funcName}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n    }\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler2D(inputInfo, enableShapeUniforms) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const texShape = inputInfo.shapeInfo.texShape;\n    if (texShape != null && util.arraysEqual(shape, texShape)) {\n        if (enableShapeUniforms) {\n            return `\n      float ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n        }\n        const texNumR = texShape[0];\n        const texNumC = texShape[1];\n        return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n        const params = ['row', 'col'];\n        return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n    }\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    const offset = getFlatOffsetUniformName(texName);\n    if (texNumC === 1) {\n        // index is used directly as physical (no risk of float16 overflow).\n        if (enableShapeUniforms) {\n            return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${texName}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n        }\n        return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    if (texNumR === 1) {\n        // index is used directly as physical (no risk of float16 overflow).\n        if (enableShapeUniforms) {\n            return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${texName}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n        }\n        return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    if (enableShapeUniforms) {\n        return `\n      float ${funcName}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${texName}Shape[1] + col + ${offset};\n        vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\nfunction getPackedSampler3D(inputInfo, enableShapeUniforms) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const texShape = inputInfo.shapeInfo.texShape;\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    if (shape[0] === 1) {\n        const squeezedShape = shape.slice(1);\n        const keptDims = [1, 2];\n        const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n        const params = ['b', 'row', 'col'];\n        return `\n        ${getPackedSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n    }\n    const glsl = getGlslDifferences();\n    if (enableShapeUniforms) {\n        return `\n    vec4 ${funcName}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n    return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler3D(inputInfo, enableShapeUniforms) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n        const params = ['row', 'col', 'depth'];\n        return `\n        ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n    }\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    const flatOffset = inputInfo.shapeInfo.flatOffset;\n    if (texNumC === stride0 && flatOffset == null) {\n        // texC is used directly as physical (no risk of float16 overflow).\n        if (enableShapeUniforms) {\n            return `\n      float ${funcName}(int row, int col, int depth) {\n        int stride1 = ${texName}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n        }\n        return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n    }\n    if (texNumC === stride1 && flatOffset == null) {\n        // texR is used directly as physical (no risk of float16 overflow).\n        if (enableShapeUniforms) {\n            return `\n      float ${funcName}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${texName}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n        }\n        return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    if (enableShapeUniforms) {\n        return `\n    float ${funcName}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${texName}Shape[1] * ${texName}Shape[2];\n      int stride1 = ${texName}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${offset};\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);\n      return sampleTexture(${texName}, uv);\n    }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\nfunction getPackedSamplerND(inputInfo, enableShapeUniforms) {\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const glsl = getGlslDifferences();\n    if (enableShapeUniforms) {\n        // TODO: support 5d and 6d\n        return `\n    vec4 ${funcName}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${texName}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${texName}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${texName}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n    }\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const rank = shape.length;\n    const texShape = inputInfo.shapeInfo.texShape;\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = `int b, int row, int col`;\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n        params = `int b${b}, ` + params;\n        texelsInBatch *= shape[rank - b - 1];\n        index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler4D(inputInfo, enableShapeUniforms) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    if (newShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n        const params = ['row', 'col', 'depth', 'depth2'];\n        return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n    }\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const flatOffset = inputInfo.shapeInfo.flatOffset;\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    const stride2Str = `int stride2 = ${texName}Shape[3];`;\n    const stride1Str = `int stride1 = ${texName}Shape[2] * stride2;`;\n    const stride0Str = `int stride0 = ${texName}Shape[1] * stride1;`;\n    if (texNumC === stride0 && flatOffset == null) {\n        // texC is used directly as physical (no risk of float16 overflow).\n        if (enableShapeUniforms) {\n            return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        ${stride2Str}\n        ${stride1Str}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n        }\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    if (texNumC === stride2 && flatOffset == null) {\n        // texR is used directly as physical (no risk of float16 overflow).\n        if (enableShapeUniforms) {\n            return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${texName}Shape[1] * ${texName}Shape[2], ${texName}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n        }\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    if (enableShapeUniforms) {\n        return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${stride2Str}\n      ${stride1Str}\n      ${stride0Str}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler5D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    if (newShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n        const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n        return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n    }\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const flatOffset = inputInfo.shapeInfo.flatOffset;\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    if (texNumC === stride0 && flatOffset == null) {\n        // texC is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    if (texNumC === stride3 && flatOffset == null) {\n        // texR is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler6D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    if (newShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n        const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n        return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n    }\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const flatOffset = inputInfo.shapeInfo.flatOffset;\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    if (texNumC === stride0 && flatOffset == null) {\n        // texC is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    if (texNumC === stride4 && flatOffset == null) {\n        // texR is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getUniformSampler(inputInfo) {\n    const texName = inputInfo.name;\n    const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n    if (inSize < 2) {\n        return `return ${texName};`;\n    }\n    return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\nfunction getPackedSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n    const texName = inputInfo.name;\n    const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n    const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n    const inRank = inputInfo.shapeInfo.logicalShape.length;\n    const outRank = outShapeInfo.logicalShape.length;\n    const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet;\n    const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n    if (inRank === 0) {\n        coordsSnippet = '';\n    }\n    else if (outRank < 2 && broadcastDims.length >= 1) {\n        coordsSnippet = 'coords = 0;';\n    }\n    else {\n        coordsSnippet =\n            broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n                .join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n        unpackedCoordsSnippet = 'coords';\n    }\n    else {\n        unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n            .map((s, i) => `coords.${fields[i + rankDiff]}`)\n            .join(', ');\n    }\n    let output = `return outputValue;`;\n    const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n    const isInputScalar = inSize === 1;\n    const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n    const isOutputScalar = outSize === 1;\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n        output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n    }\n    else if (isInputScalar && !isOutputScalar) {\n        if (outRank === 1) {\n            output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n        }\n        else {\n            output = `\n        return vec4(outputValue.x);\n      `;\n        }\n    }\n    else if (broadcastDims.length) {\n        const rows = inRank - 2;\n        const cols = inRank - 1;\n        if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n            output = `return vec4(outputValue.x);`;\n        }\n        else if (broadcastDims.indexOf(rows) > -1) {\n            output = `return vec4(outputValue.x, outputValue.y, ` +\n                `outputValue.x, outputValue.y);`;\n        }\n        else if (broadcastDims.indexOf(cols) > -1) {\n            output = `return vec4(outputValue.xx, outputValue.zz);`;\n        }\n    }\n    return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\nfunction getSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n    const texName = inputInfo.name;\n    const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n    const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n    const outTexShape = outShapeInfo.texShape;\n    const inTexShape = inputInfo.shapeInfo.texShape;\n    const inRank = inputInfo.shapeInfo.logicalShape.length;\n    const outRank = outShapeInfo.logicalShape.length;\n    if (!inputInfo.shapeInfo.isUniform && inRank === outRank &&\n        inputInfo.shapeInfo.flatOffset == null &&\n        util.arraysEqual(inTexShape, outTexShape)) {\n        return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n    }\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet;\n    const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n    if (inRank === 0) {\n        coordsSnippet = '';\n    }\n    else if (outRank < 2 && broadcastDims.length >= 1) {\n        coordsSnippet = 'coords = 0;';\n    }\n    else {\n        coordsSnippet =\n            broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n                .join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n        unpackedCoordsSnippet = 'coords';\n    }\n    else {\n        unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n            .map((s, i) => `coords.${fields[i + rankDiff]}`)\n            .join(', ');\n    }\n    return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\nexport function getCoordsDataType(rank) {\n    if (rank <= 1) {\n        return 'int';\n    }\n    else if (rank === 2) {\n        return 'ivec2';\n    }\n    else if (rank === 3) {\n        return 'ivec3';\n    }\n    else if (rank === 4) {\n        return 'ivec4';\n    }\n    else if (rank === 5) {\n        return 'ivec5';\n    }\n    else if (rank === 6) {\n        return 'ivec6';\n    }\n    else {\n        throw Error(`GPU for rank ${rank} is not yet supported`);\n    }\n}\nexport function getUniformInfoFromShape(isPacked, shape, texShape) {\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    const rank = shape.length;\n    const useSqueezePackedShape = isPacked && rank === 3 && shape[0] === 1;\n    const squeezeShape = useSqueezePackedShape ? shape.slice(1) : newShape;\n    const useSqueezeShape = (!isPacked && rank > 1 && !util.arraysEqual(shape, texShape) &&\n        newShape.length < rank) ||\n        useSqueezePackedShape;\n    const uniformShape = useSqueezeShape ? squeezeShape : shape;\n    return { useSqueezeShape, uniformShape, keptDims };\n}\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nexport function squeezeInputInfo(inInfo, squeezedShape) {\n    // Deep copy.\n    const newInputInfo = JSON.parse(JSON.stringify(inInfo));\n    newInputInfo.shapeInfo.logicalShape = squeezedShape;\n    return newInputInfo;\n}\nfunction getSqueezedParams(params, keptDims) {\n    return keptDims.map(d => params[d]).join(', ');\n}\n"],"mappings":"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;AAKH;;AACD,SAASvC,0BAAT,CAAoCX,IAApC,EAA0C;EACtC,OAAQ;AACZ;AACA,QAAQA,IAAI,CAACmD,MAAO;AACpB;AACA,GAJI;AAKH;;AACD,SAAS1C,6BAAT,CAAuCT,IAAvC,EAA6C;EACzC,OAAQ;AACZ;AACA,QAAQA,IAAI,CAACmD,MAAO;AACpB;AACA,GAJI;AAKH;;AACD,SAAS7C,eAAT,CAAyBN,IAAzB,EAA+B;EAC3B,MAAMoD,aAAa,GAAI,GAAEpD,IAAI,CAACqD,OAAQ;AAC1C;AACA;AACA;AACA,MAAMrD,IAAI,CAACsD,SAAU;AACrB,MAAMtD,IAAI,CAACuD,YAAa;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMvD,IAAI,CAACwD,gBAAiB;AAC5B,MAAMxD,IAAI,CAACyD,gBAAiB;AAC5B,MAAMzD,IAAI,CAAC0D,WAAY;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAkB;AACxB,MAAMC,iBAAkB;AACxB,MAAMC,iBAAkB;AACxB,GA1DI;EA2DA,OAAOT,aAAP;AACH;;AACD,MAAMO,iBAAiB,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAZA;AAaA,MAAMC,iBAAiB,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;AASA,MAAMC,iBAAiB,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;AAUA,MAAMjD,oBAAoB,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAXA;;AAYA,SAAS2B,qBAAT,GAAiC;EAC7B,OAAQ;AACZ;AACA;AACA;AACA,GAJI;AAKH;;AACD,SAASC,uBAAT,CAAiCvB,KAAj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"},"metadata":{},"sourceType":"module"}