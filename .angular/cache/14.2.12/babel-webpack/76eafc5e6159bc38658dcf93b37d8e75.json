{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Multinomial } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Creates a `tf.Tensor` with values drawn from a multinomial distribution.\n *\n * ```js\n * const probs = tf.tensor([.75, .25]);\n * tf.multinomial(probs, 3).print();\n * ```\n *\n * @param logits 1D array with unnormalized log-probabilities, or\n *     2D array of shape `[batchSize, numOutcomes]`. See the `normalized`\n *     parameter.\n * @param numSamples Number of samples to draw for each row slice.\n * @param seed The seed number.\n * @param normalized Whether the provided `logits` are normalized true\n *     probabilities (sum to 1). Defaults to false.\n * @return 1D array of shape `[numSamples]`, or 2D array of shape\n *     `[batchSize, numSamples]`, depending on the rank of the input.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\n\nfunction multinomial_(logits, numSamples, seed, normalized = false) {\n  const $logits = convertToTensor(logits, 'logits', 'multinomial');\n  const numOutcomes = $logits.size;\n  const origRank = $logits.rank;\n\n  if (numOutcomes < 2) {\n    throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ` + `${numOutcomes}.`);\n  }\n\n  if (origRank > 2) {\n    throw new Error(`Rank of probabilities must be 1 or 2, but is ${origRank}`);\n  } // TODO(lina128): Investigate correct seed behavior. The code seems not allow\n  // setting see to 0.\n\n\n  seed = seed || Math.random(); // The kernel only accepts (and returns) rank 2 tensors.\n\n  const logits2D = origRank === 1 ? reshape($logits, [1, -1]) : $logits;\n  const inputs = {\n    logits: logits2D\n  };\n  const attrs = {\n    numSamples,\n    seed,\n    normalized\n  }; // tslint:disable-next-line: no-unnecessary-type-assertion\n\n  const res = ENGINE.runKernel(Multinomial, inputs, attrs); // tslint:disable-next-line:no-unnecessary-type-assertion\n\n  return origRank === 1 ? reshape(res, [res.size]) : res;\n}\n\nexport const multinomial = op({\n  multinomial_\n});","map":{"version":3,"names":["ENGINE","Multinomial","convertToTensor","op","reshape","multinomial_","logits","numSamples","seed","normalized","$logits","numOutcomes","size","origRank","rank","Error","Math","random","logits2D","inputs","attrs","res","runKernel","multinomial"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/multinomial.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Multinomial } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Creates a `tf.Tensor` with values drawn from a multinomial distribution.\n *\n * ```js\n * const probs = tf.tensor([.75, .25]);\n * tf.multinomial(probs, 3).print();\n * ```\n *\n * @param logits 1D array with unnormalized log-probabilities, or\n *     2D array of shape `[batchSize, numOutcomes]`. See the `normalized`\n *     parameter.\n * @param numSamples Number of samples to draw for each row slice.\n * @param seed The seed number.\n * @param normalized Whether the provided `logits` are normalized true\n *     probabilities (sum to 1). Defaults to false.\n * @return 1D array of shape `[numSamples]`, or 2D array of shape\n *     `[batchSize, numSamples]`, depending on the rank of the input.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\nfunction multinomial_(logits, numSamples, seed, normalized = false) {\n    const $logits = convertToTensor(logits, 'logits', 'multinomial');\n    const numOutcomes = $logits.size;\n    const origRank = $logits.rank;\n    if (numOutcomes < 2) {\n        throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ` +\n            `${numOutcomes}.`);\n    }\n    if (origRank > 2) {\n        throw new Error(`Rank of probabilities must be 1 or 2, but is ${origRank}`);\n    }\n    // TODO(lina128): Investigate correct seed behavior. The code seems not allow\n    // setting see to 0.\n    seed = seed || Math.random();\n    // The kernel only accepts (and returns) rank 2 tensors.\n    const logits2D = origRank === 1 ? reshape($logits, [1, -1]) : $logits;\n    const inputs = { logits: logits2D };\n    const attrs = { numSamples, seed, normalized };\n    // tslint:disable-next-line: no-unnecessary-type-assertion\n    const res = ENGINE.runKernel(Multinomial, inputs, attrs);\n    // tslint:disable-next-line:no-unnecessary-type-assertion\n    return origRank === 1 ? reshape(res, [res.size]) : res;\n}\nexport const multinomial = op({ multinomial_ });\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,WAAvB;AACA,SAASC,WAAT,QAA4B,iBAA5B;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,SAASC,EAAT,QAAmB,aAAnB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,YAAT,CAAsBC,MAAtB,EAA8BC,UAA9B,EAA0CC,IAA1C,EAAgDC,UAAU,GAAG,KAA7D,EAAoE;EAChE,MAAMC,OAAO,GAAGR,eAAe,CAACI,MAAD,EAAS,QAAT,EAAmB,aAAnB,CAA/B;EACA,MAAMK,WAAW,GAAGD,OAAO,CAACE,IAA5B;EACA,MAAMC,QAAQ,GAAGH,OAAO,CAACI,IAAzB;;EACA,IAAIH,WAAW,GAAG,CAAlB,EAAqB;IACjB,MAAM,IAAII,KAAJ,CAAW,8DAAD,GACX,GAAEJ,WAAY,GADb,CAAN;EAEH;;EACD,IAAIE,QAAQ,GAAG,CAAf,EAAkB;IACd,MAAM,IAAIE,KAAJ,CAAW,gDAA+CF,QAAS,EAAnE,CAAN;EACH,CAV+D,CAWhE;EACA;;;EACAL,IAAI,GAAGA,IAAI,IAAIQ,IAAI,CAACC,MAAL,EAAf,CAbgE,CAchE;;EACA,MAAMC,QAAQ,GAAGL,QAAQ,KAAK,CAAb,GAAiBT,OAAO,CAACM,OAAD,EAAU,CAAC,CAAD,EAAI,CAAC,CAAL,CAAV,CAAxB,GAA6CA,OAA9D;EACA,MAAMS,MAAM,GAAG;IAAEb,MAAM,EAAEY;EAAV,CAAf;EACA,MAAME,KAAK,GAAG;IAAEb,UAAF;IAAcC,IAAd;IAAoBC;EAApB,CAAd,CAjBgE,CAkBhE;;EACA,MAAMY,GAAG,GAAGrB,MAAM,CAACsB,SAAP,CAAiBrB,WAAjB,EAA8BkB,MAA9B,EAAsCC,KAAtC,CAAZ,CAnBgE,CAoBhE;;EACA,OAAOP,QAAQ,KAAK,CAAb,GAAiBT,OAAO,CAACiB,GAAD,EAAM,CAACA,GAAG,CAACT,IAAL,CAAN,CAAxB,GAA4CS,GAAnD;AACH;;AACD,OAAO,MAAME,WAAW,GAAGpB,EAAE,CAAC;EAAEE;AAAF,CAAD,CAAtB"},"metadata":{},"sourceType":"module"}