{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reshape, util } from '@tensorflow/tfjs-core';\nimport { packedReshape } from '../kernel_utils/reshape';\nimport { isReshapeFree } from '../webgl_util';\nexport function reshape(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    shape\n  } = attrs;\n  const webglBackend = backend;\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n  util.assert(xSize === $xSize, () => `The new shape (${$shape}) has ${$xSize} elements and the old ` + `shape (${x.shape}) has ${xSize} elements. The new shape and old ` + `shape must have the same number of elements.`);\n  const xTexData = webglBackend.texData.get(x.dataId);\n\n  if (xTexData.isPacked && !isReshapeFree(x.shape, $shape) && !(xTexData.texture !== null && isReshapeFree(xTexData.shape, $shape))) {\n    return packedReshape(x, $shape, webglBackend);\n  }\n\n  webglBackend.incRef(x.dataId);\n  return {\n    dataId: x.dataId,\n    shape: $shape,\n    dtype: x.dtype\n  };\n}\nexport const reshapeConfig = {\n  kernelName: Reshape,\n  backendName: 'webgl',\n  kernelFunc: reshape\n};","map":{"version":3,"names":["Reshape","util","packedReshape","isReshapeFree","reshape","args","inputs","backend","attrs","x","shape","webglBackend","xSize","sizeFromShape","$shape","inferFromImplicitShape","$xSize","assert","xTexData","texData","get","dataId","isPacked","texture","incRef","dtype","reshapeConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reshape, util } from '@tensorflow/tfjs-core';\nimport { packedReshape } from '../kernel_utils/reshape';\nimport { isReshapeFree } from '../webgl_util';\nexport function reshape(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { shape } = attrs;\n    const webglBackend = backend;\n    const xSize = util.sizeFromShape(x.shape);\n    const $shape = util.inferFromImplicitShape(shape, xSize);\n    const $xSize = util.sizeFromShape($shape);\n    util.assert(xSize === $xSize, () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n        `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n        `shape must have the same number of elements.`);\n    const xTexData = webglBackend.texData.get(x.dataId);\n    if (xTexData.isPacked && !isReshapeFree(x.shape, $shape) &&\n        !(xTexData.texture !== null && isReshapeFree(xTexData.shape, $shape))) {\n        return packedReshape(x, $shape, webglBackend);\n    }\n    webglBackend.incRef(x.dataId);\n    return { dataId: x.dataId, shape: $shape, dtype: x.dtype };\n}\nexport const reshapeConfig = {\n    kernelName: Reshape,\n    backendName: 'webgl',\n    kernelFunc: reshape\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAT,EAAkBC,IAAlB,QAA8B,uBAA9B;AACA,SAASC,aAAT,QAA8B,yBAA9B;AACA,SAASC,aAAT,QAA8B,eAA9B;AACA,OAAO,SAASC,OAAT,CAAiBC,IAAjB,EAAuB;EAC1B,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BH,IAAnC;EACA,MAAM;IAAEI;EAAF,IAAQH,MAAd;EACA,MAAM;IAAEI;EAAF,IAAYF,KAAlB;EACA,MAAMG,YAAY,GAAGJ,OAArB;EACA,MAAMK,KAAK,GAAGX,IAAI,CAACY,aAAL,CAAmBJ,CAAC,CAACC,KAArB,CAAd;EACA,MAAMI,MAAM,GAAGb,IAAI,CAACc,sBAAL,CAA4BL,KAA5B,EAAmCE,KAAnC,CAAf;EACA,MAAMI,MAAM,GAAGf,IAAI,CAACY,aAAL,CAAmBC,MAAnB,CAAf;EACAb,IAAI,CAACgB,MAAL,CAAYL,KAAK,KAAKI,MAAtB,EAA8B,MAAO,kBAAiBF,MAAO,SAAQE,MAAO,wBAAxC,GAC/B,UAASP,CAAC,CAACC,KAAM,SAAQE,KAAM,mCADA,GAE/B,8CAFL;EAGA,MAAMM,QAAQ,GAAGP,YAAY,CAACQ,OAAb,CAAqBC,GAArB,CAAyBX,CAAC,CAACY,MAA3B,CAAjB;;EACA,IAAIH,QAAQ,CAACI,QAAT,IAAqB,CAACnB,aAAa,CAACM,CAAC,CAACC,KAAH,EAAUI,MAAV,CAAnC,IACA,EAAEI,QAAQ,CAACK,OAAT,KAAqB,IAArB,IAA6BpB,aAAa,CAACe,QAAQ,CAACR,KAAV,EAAiBI,MAAjB,CAA5C,CADJ,EAC2E;IACvE,OAAOZ,aAAa,CAACO,CAAD,EAAIK,MAAJ,EAAYH,YAAZ,CAApB;EACH;;EACDA,YAAY,CAACa,MAAb,CAAoBf,CAAC,CAACY,MAAtB;EACA,OAAO;IAAEA,MAAM,EAAEZ,CAAC,CAACY,MAAZ;IAAoBX,KAAK,EAAEI,MAA3B;IAAmCW,KAAK,EAAEhB,CAAC,CAACgB;EAA5C,CAAP;AACH;AACD,OAAO,MAAMC,aAAa,GAAG;EACzBC,UAAU,EAAE3B,OADa;EAEzB4B,WAAW,EAAE,OAFY;EAGzBC,UAAU,EAAEzB;AAHa,CAAtB"},"metadata":{},"sourceType":"module"}