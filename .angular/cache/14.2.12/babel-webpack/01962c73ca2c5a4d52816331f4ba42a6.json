{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FusedBatchNorm, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function batchNorm(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    scale,\n    offset,\n    mean,\n    variance\n  } = inputs;\n  util.assert(mean.shape.length === variance.shape.length, () => 'Batch normalization gradient requires mean and variance to have ' + 'equal ranks.');\n  util.assert(offset == null || mean.shape.length === offset.shape.length, () => 'Batch normalization gradient requires mean and offset to have ' + 'equal ranks.');\n  util.assert(scale == null || mean.shape.length === scale.shape.length, () => 'Batch normalization gradient requires mean and scale to have ' + 'equal ranks.');\n  assertNotComplex([x, mean, variance, scale, offset], 'batchNorm');\n  let {\n    varianceEpsilon\n  } = attrs;\n\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const xVals = backend.data.get(x.dataId).values;\n  const mVals = backend.data.get(mean.dataId).values;\n  const varVals = backend.data.get(variance.dataId).values;\n  const sVals = scale ? backend.data.get(scale.dataId).values : new Float32Array([1]);\n  const offVals = offset ? backend.data.get(offset.dataId).values : new Float32Array([0]);\n  const outVals = new Float32Array(xVals.length);\n  const offValsLength = offVals.length;\n  const sValsLength = sVals.length;\n  const varValsLength = varVals.length;\n  const mValsLength = mVals.length;\n  let offi = 0;\n  let mi = 0;\n  let si = 0;\n  let vi = 0;\n\n  for (let i = 0; i < xVals.length; ++i) {\n    outVals[i] = offVals[offi++] + (xVals[i] - mVals[mi++]) * sVals[si++] / Math.sqrt(varVals[vi++] + varianceEpsilon);\n\n    if (offi >= offValsLength) {\n      offi = 0;\n    }\n\n    if (mi >= mValsLength) {\n      mi = 0;\n    }\n\n    if (si >= sValsLength) {\n      si = 0;\n    }\n\n    if (vi >= varValsLength) {\n      vi = 0;\n    }\n  }\n\n  return backend.makeTensorInfo(x.shape, x.dtype, outVals);\n}\nexport const batchNormConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'cpu',\n  kernelFunc: batchNorm\n};","map":{"version":3,"names":["FusedBatchNorm","util","assertNotComplex","batchNorm","args","inputs","backend","attrs","x","scale","offset","mean","variance","assert","shape","length","varianceEpsilon","xVals","data","get","dataId","values","mVals","varVals","sVals","Float32Array","offVals","outVals","offValsLength","sValsLength","varValsLength","mValsLength","offi","mi","si","vi","i","Math","sqrt","makeTensorInfo","dtype","batchNormConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/BatchNorm.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FusedBatchNorm, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function batchNorm(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, scale, offset, mean, variance } = inputs;\n    util.assert(mean.shape.length === variance.shape.length, () => 'Batch normalization gradient requires mean and variance to have ' +\n        'equal ranks.');\n    util.assert(offset == null || mean.shape.length === offset.shape.length, () => 'Batch normalization gradient requires mean and offset to have ' +\n        'equal ranks.');\n    util.assert(scale == null || mean.shape.length === scale.shape.length, () => 'Batch normalization gradient requires mean and scale to have ' +\n        'equal ranks.');\n    assertNotComplex([x, mean, variance, scale, offset], 'batchNorm');\n    let { varianceEpsilon } = attrs;\n    if (varianceEpsilon == null) {\n        varianceEpsilon = 0.001;\n    }\n    const xVals = backend.data.get(x.dataId).values;\n    const mVals = backend.data.get(mean.dataId).values;\n    const varVals = backend.data.get(variance.dataId).values;\n    const sVals = scale ? backend.data.get(scale.dataId).values :\n        new Float32Array([1]);\n    const offVals = offset ?\n        backend.data.get(offset.dataId).values :\n        new Float32Array([0]);\n    const outVals = new Float32Array(xVals.length);\n    const offValsLength = offVals.length;\n    const sValsLength = sVals.length;\n    const varValsLength = varVals.length;\n    const mValsLength = mVals.length;\n    let offi = 0;\n    let mi = 0;\n    let si = 0;\n    let vi = 0;\n    for (let i = 0; i < xVals.length; ++i) {\n        outVals[i] = offVals[offi++] +\n            (xVals[i] - mVals[mi++]) * sVals[si++] /\n                Math.sqrt(varVals[vi++] + varianceEpsilon);\n        if (offi >= offValsLength) {\n            offi = 0;\n        }\n        if (mi >= mValsLength) {\n            mi = 0;\n        }\n        if (si >= sValsLength) {\n            si = 0;\n        }\n        if (vi >= varValsLength) {\n            vi = 0;\n        }\n    }\n    return backend.makeTensorInfo(x.shape, x.dtype, outVals);\n}\nexport const batchNormConfig = {\n    kernelName: FusedBatchNorm,\n    backendName: 'cpu',\n    kernelFunc: batchNorm,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}