{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n// inspired by https://github.com/maxogden/filereader-stream\nimport { env, util } from '@tensorflow/tfjs-core';\nimport { ByteChunkIterator } from './byte_chunk_iterator';\n/**\n * Provide a stream of chunks from a File, Blob, or Uint8Array.\n * @param file The source File, Blob or Uint8Array.\n * @param options Optional settings controlling file reading.\n * @returns a lazy Iterator of Uint8Arrays containing sequential chunks of the\n *   input File, Blob or Uint8Array.\n */\n\nexport class FileChunkIterator extends ByteChunkIterator {\n  constructor(file, options = {}) {\n    super();\n    this.file = file;\n    this.options = options;\n    util.assert(file instanceof Uint8Array || (env().get('IS_BROWSER') ? file instanceof File || file instanceof Blob : false), () => 'FileChunkIterator only supports File, Blob and Uint8Array ' + 'right now.');\n    this.offset = options.offset || 0; // default 1MB chunk has tolerable perf on large files\n\n    this.chunkSize = options.chunkSize || 1024 * 1024;\n  }\n\n  summary() {\n    return `FileChunks ${this.file}`;\n  }\n\n  next() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.offset >= (_this.file instanceof Uint8Array ? _this.file.byteLength : _this.file.size)) {\n        return {\n          value: null,\n          done: true\n        };\n      }\n\n      const chunk = new Promise((resolve, reject) => {\n        const end = _this.offset + _this.chunkSize;\n\n        if (_this.file instanceof Uint8Array) {\n          // Note if end > this.uint8Array.byteLength, we just get a small last\n          // chunk.\n          resolve(new Uint8Array(_this.file.slice(_this.offset, end)));\n        } else {\n          // This branch assumes that this.file type is File or Blob, which\n          // means it is in the browser environment.\n          // TODO(soergel): is this a performance issue?\n          const fileReader = new FileReader();\n\n          fileReader.onload = event => {\n            let data = fileReader.result; // Not sure we can trust the return type of\n            // FileReader.readAsArrayBuffer See e.g.\n            // https://github.com/node-file-api/FileReader/issues/2\n\n            if (data instanceof ArrayBuffer) {\n              data = new Uint8Array(data);\n            }\n\n            if (!(data instanceof Uint8Array)) {\n              return reject(new TypeError('FileReader returned unknown type.'));\n            }\n\n            resolve(data);\n          };\n\n          fileReader.onabort = event => {\n            return reject(new Error('Aborted'));\n          };\n\n          fileReader.onerror = event => {\n            return reject(new Error(event.type));\n          }; // TODO(soergel): better handle onabort, onerror\n          // Note if end > this.file.size, we just get a small last chunk.\n\n\n          const slice = _this.file.slice(_this.offset, end); // We can't use readAsText here (even if we know the file is text)\n          // because the slice boundary may fall within a multi-byte character.\n\n\n          fileReader.readAsArrayBuffer(slice);\n        }\n\n        _this.offset = end;\n      });\n      return {\n        value: yield chunk,\n        done: false\n      };\n    })();\n  }\n\n}","map":{"version":3,"names":["env","util","ByteChunkIterator","FileChunkIterator","constructor","file","options","assert","Uint8Array","get","File","Blob","offset","chunkSize","summary","next","byteLength","size","value","done","chunk","Promise","resolve","reject","end","slice","fileReader","FileReader","onload","event","data","result","ArrayBuffer","TypeError","onabort","Error","onerror","type","readAsArrayBuffer"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-data/dist/iterators/file_chunk_iterator.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n// inspired by https://github.com/maxogden/filereader-stream\nimport { env, util } from '@tensorflow/tfjs-core';\nimport { ByteChunkIterator } from './byte_chunk_iterator';\n/**\n * Provide a stream of chunks from a File, Blob, or Uint8Array.\n * @param file The source File, Blob or Uint8Array.\n * @param options Optional settings controlling file reading.\n * @returns a lazy Iterator of Uint8Arrays containing sequential chunks of the\n *   input File, Blob or Uint8Array.\n */\nexport class FileChunkIterator extends ByteChunkIterator {\n    constructor(file, options = {}) {\n        super();\n        this.file = file;\n        this.options = options;\n        util.assert((file instanceof Uint8Array) ||\n            (env().get('IS_BROWSER') ?\n                (file instanceof File || file instanceof Blob) :\n                false), () => 'FileChunkIterator only supports File, Blob and Uint8Array ' +\n            'right now.');\n        this.offset = options.offset || 0;\n        // default 1MB chunk has tolerable perf on large files\n        this.chunkSize = options.chunkSize || 1024 * 1024;\n    }\n    summary() {\n        return `FileChunks ${this.file}`;\n    }\n    async next() {\n        if (this.offset >= ((this.file instanceof Uint8Array) ?\n            this.file.byteLength :\n            this.file.size)) {\n            return { value: null, done: true };\n        }\n        const chunk = new Promise((resolve, reject) => {\n            const end = this.offset + this.chunkSize;\n            if (this.file instanceof Uint8Array) {\n                // Note if end > this.uint8Array.byteLength, we just get a small last\n                // chunk.\n                resolve(new Uint8Array(this.file.slice(this.offset, end)));\n            }\n            else {\n                // This branch assumes that this.file type is File or Blob, which\n                // means it is in the browser environment.\n                // TODO(soergel): is this a performance issue?\n                const fileReader = new FileReader();\n                fileReader.onload = (event) => {\n                    let data = fileReader.result;\n                    // Not sure we can trust the return type of\n                    // FileReader.readAsArrayBuffer See e.g.\n                    // https://github.com/node-file-api/FileReader/issues/2\n                    if (data instanceof ArrayBuffer) {\n                        data = new Uint8Array(data);\n                    }\n                    if (!(data instanceof Uint8Array)) {\n                        return reject(new TypeError('FileReader returned unknown type.'));\n                    }\n                    resolve(data);\n                };\n                fileReader.onabort = (event) => {\n                    return reject(new Error('Aborted'));\n                };\n                fileReader.onerror = (event) => {\n                    return reject(new Error(event.type));\n                };\n                // TODO(soergel): better handle onabort, onerror\n                // Note if end > this.file.size, we just get a small last chunk.\n                const slice = this.file.slice(this.offset, end);\n                // We can't use readAsText here (even if we know the file is text)\n                // because the slice boundary may fall within a multi-byte character.\n                fileReader.readAsArrayBuffer(slice);\n            }\n            this.offset = end;\n        });\n        return { value: (await chunk), done: false };\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}