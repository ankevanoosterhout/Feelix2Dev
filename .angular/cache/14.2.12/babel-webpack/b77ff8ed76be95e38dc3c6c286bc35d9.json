{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { assert } from '../util_base';\nconst ARROW = '->';\nconst ARROW_REGEX = /->/g;\nconst COMMA = ',';\nconst ELLIPSIS = '...';\n/**\n * Parse an equation for einsum.\n *\n * @param equation The einsum equation (e.g., \"ij,jk->ik\").\n * @param numTensors Number of tensors provided along with `equation`. Used to\n *   check matching number of input tensors.\n * @returns An object consisting of the following fields:\n *   - allDims: all dimension names as strings.\n *   - summedDims: a list of all dimensions being summed over, as indices to\n *     the elements of `allDims`.\n *   - idDims: indices of the dimensions in each input tensor, as indices to\n *     the elements of `allDims.\n */\n\nexport function decodeEinsumEquation(equation, numTensors) {\n  equation = equation.replace(/\\s/g, ''); // Remove witespace in equation.\n\n  const numArrows = (equation.length - equation.replace(ARROW_REGEX, '').length) / ARROW.length;\n\n  if (numArrows < 1) {\n    throw new Error('Equations without an arrow are not supported.');\n  } else if (numArrows > 1) {\n    throw new Error(`Equation must contain exactly one arrow (\"${ARROW}\").`);\n  }\n\n  const [inputString, outputString] = equation.split(ARROW);\n  assert(inputString.indexOf(ELLIPSIS) === -1, () => `The ellipsis notation (\"${ELLIPSIS}\") is not supported yet.`);\n  const inputTerms = inputString.split(COMMA);\n  const numInputs = inputTerms.length;\n\n  if (numTensors !== numInputs) {\n    throw new Error(`Expected ${numInputs} input tensors, received ${numTensors}`);\n  }\n\n  if (numInputs > 2) {\n    throw new Error('Support for more than 2 input tensors is not implemented yet.');\n  }\n\n  const allDims = [];\n\n  for (let i = 0; i < outputString.length; ++i) {\n    const dimName = outputString[i];\n\n    if (!inputTerms.some(inputTerm => inputTerm.indexOf(dimName) !== -1)) {\n      throw new Error(`Output subscripts contain the label ${dimName} ` + `not present in the input subscripts.`);\n    }\n\n    if (allDims.indexOf(dimName) === -1) {\n      allDims.push(dimName);\n    }\n  }\n\n  for (let i = 0; i < inputString.length; ++i) {\n    const dimName = inputString[i];\n\n    if (allDims.indexOf(dimName) === -1 && dimName !== COMMA) {\n      allDims.push(dimName);\n    }\n  }\n\n  const idDims = new Array(inputTerms.length);\n\n  for (let i = 0; i < numInputs; ++i) {\n    if (new Set(inputTerms[i].split('')).size !== inputTerms[i].length) {\n      throw new Error(`Found duplicate axes in input component ${inputTerms[i]}. ` + `Support for duplicate axes in input is not implemented yet.`);\n    }\n\n    idDims[i] = [];\n\n    for (let j = 0; j < inputTerms[i].length; ++j) {\n      idDims[i].push(allDims.indexOf(inputTerms[i][j]));\n    }\n  }\n\n  const numDims = allDims.length; // Number of unique dimensions.\n\n  const numOutDims = outputString.length; // Number of output dimensions.\n\n  const summedDims = []; // Dimensions being summed over.\n\n  for (let i = numOutDims; i < numDims; ++i) {\n    summedDims.push(i);\n  }\n\n  return {\n    allDims,\n    summedDims,\n    idDims\n  };\n}\n/**\n * Get the permutation for a given input tensor.\n *\n * @param nDims Total number of dimension of all tensors involved in the einsum\n *   operation.\n * @param idDims Dimension indices involve in the tensor in question.\n * @returns An object consisting of the following fields:\n *   - permutationIndices: Indices to permute the axes of the tensor with.\n *   - expandDims: Indices to the dimension that need to be expanded from the\n *     tensor after permutation.\n */\n\nexport function getEinsumPermutation(nDims, idDims) {\n  let permutationIndices = new Array(nDims);\n  permutationIndices.fill(-1);\n\n  for (let i = 0; i < idDims.length; ++i) {\n    permutationIndices[idDims[i]] = i;\n  }\n\n  const expandDims = [];\n\n  for (let i = 0; i < nDims; ++i) {\n    if (permutationIndices[i] === -1) {\n      expandDims.push(i);\n    }\n  }\n\n  permutationIndices = permutationIndices.filter(d => d !== -1);\n  return {\n    permutationIndices,\n    expandDims\n  };\n}\n/**\n * Checks that the dimension sizes from different input tensors match the\n * equation.\n */\n\nexport function checkEinsumDimSizes(nDims, idDims, tensors) {\n  const dimSizes = new Array(nDims);\n\n  for (let i = 0; i < tensors.length; ++i) {\n    const shape = tensors[i].shape;\n\n    for (let j = 0; j < idDims[i].length; ++j) {\n      if (dimSizes[idDims[i][j]] === undefined) {\n        dimSizes[idDims[i][j]] = shape[j];\n      } else {\n        assert(dimSizes[idDims[i][j]] === shape[j], () => `Expected dimension ${dimSizes[idDims[i][j]]} at axis ${j} ` + `of input shaped ${JSON.stringify(shape)}, ` + `but got dimension ${shape[j]}`);\n      }\n    }\n  }\n}\n/**\n * Gets path of computation for einsum.\n *\n * @param summedDims indices to the dimensions being summed over.\n * @param idDims A look up table for the dimensions present in each input\n *     tensor. Each consituent array contains indices for the dimensions in the\n *     corresponding input tensor.\n *\n * @return A map with two fields:\n *   - path: The path of computation, with each element indicating the dimension\n *     being summed over after the element-wise multiplication in that step.\n *   - steps: With the same length as `path`. Each element contains the indices\n *     to the input tensors being used for element-wise multiplication in the\n *     corresponding step.\n */\n\nexport function getEinsumComputePath(summedDims, idDims) {\n  const path = summedDims;\n  const steps = [];\n  let nSteps = 0;\n\n  if (summedDims.length === 0) {\n    // Einsum that involes no summing: e.g., transpose and outer product.\n    path.push(-1);\n  }\n\n  nSteps = summedDims.length + 1;\n\n  for (let i = 0; i < nSteps; ++i) {\n    steps.push([]);\n  }\n\n  const computedTermIndices = [];\n\n  for (let i = 0; i < path.length; ++i) {\n    const summedDim = path[i];\n    const termIndices = findTermsWithDim(idDims, summedDim);\n\n    for (const termIndex of termIndices) {\n      if (computedTermIndices.indexOf(termIndex) === -1) {\n        steps[i].push(termIndex);\n        computedTermIndices.push(termIndex);\n      }\n    }\n  }\n\n  return {\n    path,\n    steps\n  };\n}\n/** Determines if an axes permutation is the identity permutation. */\n\nexport function isIdentityPermutation(perm) {\n  return perm.every((dim, index) => dim === index);\n}\n\nfunction findTermsWithDim(idDims, dim) {\n  const termIndices = [];\n\n  for (let i = 0; i < idDims.length; ++i) {\n    if (idDims[i].length === 0 || idDims[i].indexOf(dim) !== -1 || dim === -1) {\n      termIndices.push(i);\n    }\n  }\n\n  return termIndices;\n}","map":{"version":3,"names":["assert","ARROW","ARROW_REGEX","COMMA","ELLIPSIS","decodeEinsumEquation","equation","numTensors","replace","numArrows","length","Error","inputString","outputString","split","indexOf","inputTerms","numInputs","allDims","i","dimName","some","inputTerm","push","idDims","Array","Set","size","j","numDims","numOutDims","summedDims","getEinsumPermutation","nDims","permutationIndices","fill","expandDims","filter","d","checkEinsumDimSizes","tensors","dimSizes","shape","undefined","JSON","stringify","getEinsumComputePath","path","steps","nSteps","computedTermIndices","summedDim","termIndices","findTermsWithDim","termIndex","isIdentityPermutation","perm","every","dim","index"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/backends/einsum_util.js"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { assert } from '../util_base';\nconst ARROW = '->';\nconst ARROW_REGEX = /->/g;\nconst COMMA = ',';\nconst ELLIPSIS = '...';\n/**\n * Parse an equation for einsum.\n *\n * @param equation The einsum equation (e.g., \"ij,jk->ik\").\n * @param numTensors Number of tensors provided along with `equation`. Used to\n *   check matching number of input tensors.\n * @returns An object consisting of the following fields:\n *   - allDims: all dimension names as strings.\n *   - summedDims: a list of all dimensions being summed over, as indices to\n *     the elements of `allDims`.\n *   - idDims: indices of the dimensions in each input tensor, as indices to\n *     the elements of `allDims.\n */\nexport function decodeEinsumEquation(equation, numTensors) {\n    equation = equation.replace(/\\s/g, ''); // Remove witespace in equation.\n    const numArrows = (equation.length - equation.replace(ARROW_REGEX, '').length) /\n        ARROW.length;\n    if (numArrows < 1) {\n        throw new Error('Equations without an arrow are not supported.');\n    }\n    else if (numArrows > 1) {\n        throw new Error(`Equation must contain exactly one arrow (\"${ARROW}\").`);\n    }\n    const [inputString, outputString] = equation.split(ARROW);\n    assert(inputString.indexOf(ELLIPSIS) === -1, () => `The ellipsis notation (\"${ELLIPSIS}\") is not supported yet.`);\n    const inputTerms = inputString.split(COMMA);\n    const numInputs = inputTerms.length;\n    if (numTensors !== numInputs) {\n        throw new Error(`Expected ${numInputs} input tensors, received ${numTensors}`);\n    }\n    if (numInputs > 2) {\n        throw new Error('Support for more than 2 input tensors is not implemented yet.');\n    }\n    const allDims = [];\n    for (let i = 0; i < outputString.length; ++i) {\n        const dimName = outputString[i];\n        if (!inputTerms.some(inputTerm => inputTerm.indexOf(dimName) !== -1)) {\n            throw new Error(`Output subscripts contain the label ${dimName} ` +\n                `not present in the input subscripts.`);\n        }\n        if (allDims.indexOf(dimName) === -1) {\n            allDims.push(dimName);\n        }\n    }\n    for (let i = 0; i < inputString.length; ++i) {\n        const dimName = inputString[i];\n        if (allDims.indexOf(dimName) === -1 && dimName !== COMMA) {\n            allDims.push(dimName);\n        }\n    }\n    const idDims = new Array(inputTerms.length);\n    for (let i = 0; i < numInputs; ++i) {\n        if (new Set(inputTerms[i].split('')).size !== inputTerms[i].length) {\n            throw new Error(`Found duplicate axes in input component ${inputTerms[i]}. ` +\n                `Support for duplicate axes in input is not implemented yet.`);\n        }\n        idDims[i] = [];\n        for (let j = 0; j < inputTerms[i].length; ++j) {\n            idDims[i].push(allDims.indexOf(inputTerms[i][j]));\n        }\n    }\n    const numDims = allDims.length; // Number of unique dimensions.\n    const numOutDims = outputString.length; // Number of output dimensions.\n    const summedDims = []; // Dimensions being summed over.\n    for (let i = numOutDims; i < numDims; ++i) {\n        summedDims.push(i);\n    }\n    return { allDims, summedDims, idDims };\n}\n/**\n * Get the permutation for a given input tensor.\n *\n * @param nDims Total number of dimension of all tensors involved in the einsum\n *   operation.\n * @param idDims Dimension indices involve in the tensor in question.\n * @returns An object consisting of the following fields:\n *   - permutationIndices: Indices to permute the axes of the tensor with.\n *   - expandDims: Indices to the dimension that need to be expanded from the\n *     tensor after permutation.\n */\nexport function getEinsumPermutation(nDims, idDims) {\n    let permutationIndices = new Array(nDims);\n    permutationIndices.fill(-1);\n    for (let i = 0; i < idDims.length; ++i) {\n        permutationIndices[idDims[i]] = i;\n    }\n    const expandDims = [];\n    for (let i = 0; i < nDims; ++i) {\n        if (permutationIndices[i] === -1) {\n            expandDims.push(i);\n        }\n    }\n    permutationIndices = permutationIndices.filter(d => d !== -1);\n    return { permutationIndices, expandDims };\n}\n/**\n * Checks that the dimension sizes from different input tensors match the\n * equation.\n */\nexport function checkEinsumDimSizes(nDims, idDims, tensors) {\n    const dimSizes = new Array(nDims);\n    for (let i = 0; i < tensors.length; ++i) {\n        const shape = tensors[i].shape;\n        for (let j = 0; j < idDims[i].length; ++j) {\n            if (dimSizes[idDims[i][j]] === undefined) {\n                dimSizes[idDims[i][j]] = shape[j];\n            }\n            else {\n                assert(dimSizes[idDims[i][j]] === shape[j], () => `Expected dimension ${dimSizes[idDims[i][j]]} at axis ${j} ` +\n                    `of input shaped ${JSON.stringify(shape)}, ` +\n                    `but got dimension ${shape[j]}`);\n            }\n        }\n    }\n}\n/**\n * Gets path of computation for einsum.\n *\n * @param summedDims indices to the dimensions being summed over.\n * @param idDims A look up table for the dimensions present in each input\n *     tensor. Each consituent array contains indices for the dimensions in the\n *     corresponding input tensor.\n *\n * @return A map with two fields:\n *   - path: The path of computation, with each element indicating the dimension\n *     being summed over after the element-wise multiplication in that step.\n *   - steps: With the same length as `path`. Each element contains the indices\n *     to the input tensors being used for element-wise multiplication in the\n *     corresponding step.\n */\nexport function getEinsumComputePath(summedDims, idDims) {\n    const path = summedDims;\n    const steps = [];\n    let nSteps = 0;\n    if (summedDims.length === 0) {\n        // Einsum that involes no summing: e.g., transpose and outer product.\n        path.push(-1);\n    }\n    nSteps = summedDims.length + 1;\n    for (let i = 0; i < nSteps; ++i) {\n        steps.push([]);\n    }\n    const computedTermIndices = [];\n    for (let i = 0; i < path.length; ++i) {\n        const summedDim = path[i];\n        const termIndices = findTermsWithDim(idDims, summedDim);\n        for (const termIndex of termIndices) {\n            if (computedTermIndices.indexOf(termIndex) === -1) {\n                steps[i].push(termIndex);\n                computedTermIndices.push(termIndex);\n            }\n        }\n    }\n    return { path, steps };\n}\n/** Determines if an axes permutation is the identity permutation. */\nexport function isIdentityPermutation(perm) {\n    return perm.every((dim, index) => dim === index);\n}\nfunction findTermsWithDim(idDims, dim) {\n    const termIndices = [];\n    for (let i = 0; i < idDims.length; ++i) {\n        if (idDims[i].length === 0 || idDims[i].indexOf(dim) !== -1 || dim === -1) {\n            termIndices.push(i);\n        }\n    }\n    return termIndices;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}