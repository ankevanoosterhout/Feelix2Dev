{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { assert } from '../util';\n/**\n * Monitor Promise.all progress, fire onProgress callback function.\n *\n * @param promises Promise list going to be monitored\n * @param onProgress Callback function. Fired when a promise resolved.\n * @param startFraction Optional fraction start. Default to 0.\n * @param endFraction Optional fraction end. Default to 1.\n */\n\nexport function monitorPromisesProgress(promises, onProgress, startFraction, endFraction) {\n  checkPromises(promises);\n  startFraction = startFraction == null ? 0 : startFraction;\n  endFraction = endFraction == null ? 1 : endFraction;\n  checkFraction(startFraction, endFraction);\n  let resolvedPromise = 0;\n\n  const registerMonitor = promise => {\n    promise.then(value => {\n      const fraction = startFraction + ++resolvedPromise / promises.length * (endFraction - startFraction); // pass fraction as parameter to callback function.\n\n      onProgress(fraction);\n      return value;\n    });\n    return promise;\n  };\n\n  function checkPromises(promises) {\n    assert(promises != null && Array.isArray(promises) && promises.length > 0, () => 'promises must be a none empty array');\n  }\n\n  function checkFraction(startFraction, endFraction) {\n    assert(startFraction >= 0 && startFraction <= 1, () => `Progress fraction must be in range [0, 1], but ` + `got startFraction ${startFraction}`);\n    assert(endFraction >= 0 && endFraction <= 1, () => `Progress fraction must be in range [0, 1], but ` + `got endFraction ${endFraction}`);\n    assert(endFraction >= startFraction, () => `startFraction must be no more than endFraction, but ` + `got startFraction ${startFraction} and endFraction ` + `${endFraction}`);\n  }\n\n  return Promise.all(promises.map(registerMonitor));\n}","map":{"version":3,"names":["assert","monitorPromisesProgress","promises","onProgress","startFraction","endFraction","checkPromises","checkFraction","resolvedPromise","registerMonitor","promise","then","value","fraction","length","Array","isArray","Promise","all","map"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/io/progress.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { assert } from '../util';\n/**\n * Monitor Promise.all progress, fire onProgress callback function.\n *\n * @param promises Promise list going to be monitored\n * @param onProgress Callback function. Fired when a promise resolved.\n * @param startFraction Optional fraction start. Default to 0.\n * @param endFraction Optional fraction end. Default to 1.\n */\nexport function monitorPromisesProgress(promises, onProgress, startFraction, endFraction) {\n    checkPromises(promises);\n    startFraction = startFraction == null ? 0 : startFraction;\n    endFraction = endFraction == null ? 1 : endFraction;\n    checkFraction(startFraction, endFraction);\n    let resolvedPromise = 0;\n    const registerMonitor = (promise) => {\n        promise.then(value => {\n            const fraction = startFraction +\n                ++resolvedPromise / promises.length * (endFraction - startFraction);\n            // pass fraction as parameter to callback function.\n            onProgress(fraction);\n            return value;\n        });\n        return promise;\n    };\n    function checkPromises(promises) {\n        assert(promises != null && Array.isArray(promises) && promises.length > 0, () => 'promises must be a none empty array');\n    }\n    function checkFraction(startFraction, endFraction) {\n        assert(startFraction >= 0 && startFraction <= 1, () => `Progress fraction must be in range [0, 1], but ` +\n            `got startFraction ${startFraction}`);\n        assert(endFraction >= 0 && endFraction <= 1, () => `Progress fraction must be in range [0, 1], but ` +\n            `got endFraction ${endFraction}`);\n        assert(endFraction >= startFraction, () => `startFraction must be no more than endFraction, but ` +\n            `got startFraction ${startFraction} and endFraction ` +\n            `${endFraction}`);\n    }\n    return Promise.all(promises.map(registerMonitor));\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,SAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,uBAAT,CAAiCC,QAAjC,EAA2CC,UAA3C,EAAuDC,aAAvD,EAAsEC,WAAtE,EAAmF;EACtFC,aAAa,CAACJ,QAAD,CAAb;EACAE,aAAa,GAAGA,aAAa,IAAI,IAAjB,GAAwB,CAAxB,GAA4BA,aAA5C;EACAC,WAAW,GAAGA,WAAW,IAAI,IAAf,GAAsB,CAAtB,GAA0BA,WAAxC;EACAE,aAAa,CAACH,aAAD,EAAgBC,WAAhB,CAAb;EACA,IAAIG,eAAe,GAAG,CAAtB;;EACA,MAAMC,eAAe,GAAIC,OAAD,IAAa;IACjCA,OAAO,CAACC,IAAR,CAAaC,KAAK,IAAI;MAClB,MAAMC,QAAQ,GAAGT,aAAa,GAC1B,EAAEI,eAAF,GAAoBN,QAAQ,CAACY,MAA7B,IAAuCT,WAAW,GAAGD,aAArD,CADJ,CADkB,CAGlB;;MACAD,UAAU,CAACU,QAAD,CAAV;MACA,OAAOD,KAAP;IACH,CAND;IAOA,OAAOF,OAAP;EACH,CATD;;EAUA,SAASJ,aAAT,CAAuBJ,QAAvB,EAAiC;IAC7BF,MAAM,CAACE,QAAQ,IAAI,IAAZ,IAAoBa,KAAK,CAACC,OAAN,CAAcd,QAAd,CAApB,IAA+CA,QAAQ,CAACY,MAAT,GAAkB,CAAlE,EAAqE,MAAM,qCAA3E,CAAN;EACH;;EACD,SAASP,aAAT,CAAuBH,aAAvB,EAAsCC,WAAtC,EAAmD;IAC/CL,MAAM,CAACI,aAAa,IAAI,CAAjB,IAAsBA,aAAa,IAAI,CAAxC,EAA2C,MAAO,iDAAD,GAClD,qBAAoBA,aAAc,EADjC,CAAN;IAEAJ,MAAM,CAACK,WAAW,IAAI,CAAf,IAAoBA,WAAW,IAAI,CAApC,EAAuC,MAAO,iDAAD,GAC9C,mBAAkBA,WAAY,EAD7B,CAAN;IAEAL,MAAM,CAACK,WAAW,IAAID,aAAhB,EAA+B,MAAO,sDAAD,GACtC,qBAAoBA,aAAc,mBADI,GAEtC,GAAEC,WAAY,EAFb,CAAN;EAGH;;EACD,OAAOY,OAAO,CAACC,GAAR,CAAYhB,QAAQ,CAACiB,GAAT,CAAaV,eAAb,CAAZ,CAAP;AACH"},"metadata":{},"sourceType":"module"}