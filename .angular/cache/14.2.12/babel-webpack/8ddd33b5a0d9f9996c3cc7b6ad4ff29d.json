{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Concat, util } from '@tensorflow/tfjs-core';\nimport { concatImpl } from './Concat_impl';\nimport { identity } from './Identity';\nexport function concat(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    axis\n  } = attrs;\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n  const shapes = inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n  const outShape = backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  } // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n\n\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n\n  if ($inputs.length === 1) {\n    return identity({\n      inputs: {\n        x: $inputs[0]\n      },\n      backend\n    });\n  }\n\n  return concatImpl($inputs, $axis, backend);\n}\nexport const concatConfig = {\n  kernelName: Concat,\n  backendName: 'webgl',\n  kernelFunc: concat\n};","map":{"version":3,"names":["backend_util","Concat","util","concatImpl","identity","concat","args","inputs","backend","attrs","axis","$axis","parseAxisParam","shape","shapes","map","t","assertParamsConsistent","outShape","computeOutShape","sizeFromShape","makeTensorInfo","dtype","$inputs","filter","length","x","concatConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Concat.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Concat, util } from '@tensorflow/tfjs-core';\nimport { concatImpl } from './Concat_impl';\nimport { identity } from './Identity';\nexport function concat(args) {\n    const { inputs, backend, attrs } = args;\n    const { axis } = attrs;\n    const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n    const shapes = inputs.map(t => t.shape);\n    backend_util.assertParamsConsistent(shapes, $axis);\n    const outShape = backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n    if (util.sizeFromShape(outShape) === 0) {\n        return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n    }\n    // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n    const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n    if ($inputs.length === 1) {\n        return identity({ inputs: { x: $inputs[0] }, backend });\n    }\n    return concatImpl($inputs, $axis, backend);\n}\nexport const concatConfig = {\n    kernelName: Concat,\n    backendName: 'webgl',\n    kernelFunc: concat\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,EAAuBC,MAAvB,EAA+BC,IAA/B,QAA2C,uBAA3C;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,OAAO,SAASC,MAAT,CAAgBC,IAAhB,EAAsB;EACzB,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BH,IAAnC;EACA,MAAM;IAAEI;EAAF,IAAWD,KAAjB;EACA,MAAME,KAAK,GAAGT,IAAI,CAACU,cAAL,CAAoBF,IAApB,EAA0BH,MAAM,CAAC,CAAD,CAAN,CAAUM,KAApC,EAA2C,CAA3C,CAAd;EACA,MAAMC,MAAM,GAAGP,MAAM,CAACQ,GAAP,CAAWC,CAAC,IAAIA,CAAC,CAACH,KAAlB,CAAf;EACAb,YAAY,CAACiB,sBAAb,CAAoCH,MAApC,EAA4CH,KAA5C;EACA,MAAMO,QAAQ,GAAGlB,YAAY,CAACmB,eAAb,CAA6BZ,MAAM,CAACQ,GAAP,CAAWC,CAAC,IAAIA,CAAC,CAACH,KAAlB,CAA7B,EAAuDF,KAAvD,CAAjB;;EACA,IAAIT,IAAI,CAACkB,aAAL,CAAmBF,QAAnB,MAAiC,CAArC,EAAwC;IACpC,OAAOV,OAAO,CAACa,cAAR,CAAuBH,QAAvB,EAAiCX,MAAM,CAAC,CAAD,CAAN,CAAUe,KAA3C,EAAkD,EAAlD,CAAP;EACH,CATwB,CAUzB;;;EACA,MAAMC,OAAO,GAAGhB,MAAM,CAACiB,MAAP,CAAcR,CAAC,IAAId,IAAI,CAACkB,aAAL,CAAmBJ,CAAC,CAACH,KAArB,IAA8B,CAAjD,CAAhB;;EACA,IAAIU,OAAO,CAACE,MAAR,KAAmB,CAAvB,EAA0B;IACtB,OAAOrB,QAAQ,CAAC;MAAEG,MAAM,EAAE;QAAEmB,CAAC,EAAEH,OAAO,CAAC,CAAD;MAAZ,CAAV;MAA6Bf;IAA7B,CAAD,CAAf;EACH;;EACD,OAAOL,UAAU,CAACoB,OAAD,EAAUZ,KAAV,EAAiBH,OAAjB,CAAjB;AACH;AACD,OAAO,MAAMmB,YAAY,GAAG;EACxBC,UAAU,EAAE3B,MADY;EAExB4B,WAAW,EAAE,OAFW;EAGxBC,UAAU,EAAEzB;AAHY,CAArB"},"metadata":{},"sourceType":"module"}