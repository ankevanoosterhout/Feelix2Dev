{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Dilation2D, util } from '@tensorflow/tfjs-core';\nexport const dilation2DConfig = {\n  kernelName: Dilation2D,\n  backendName: 'cpu',\n  kernelFunc: ({\n    inputs,\n    backend,\n    attrs\n  }) => {\n    const {\n      x,\n      filter\n    } = inputs;\n    const {\n      strides,\n      pad,\n      dilations\n    } = attrs;\n    const cpuBackend = backend;\n    const xVals = cpuBackend.data.get(x.dataId).values;\n    const xRank = x.shape.length;\n    const filterVals = cpuBackend.data.get(filter.dataId).values;\n    const filterRank = filter.shape.length;\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } = backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC'\n    /* dataFormat */\n    , dilations);\n    const outSize = util.sizeFromShape(outShape);\n    const outRank = outShape.length;\n    const outputVals = util.getArrayFromDType(x.dtype, outSize); // Upsampling the input by fill in `dilation size - 1` values between each\n    // input value.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const xIndex = util.locToIndex([b, hIn, wIn, d], xRank, util.computeStrides(x.shape));\n                    const filterIndex = util.locToIndex([h, w, d], filterRank, util.computeStrides(filter.shape));\n                    const val = xVals[xIndex] + filterVals[filterIndex];\n\n                    if (val > curVal) {\n                      curVal = val;\n                    }\n                  }\n                }\n              }\n            }\n\n            const outputIndex = util.locToIndex([b, hOut, wOut, d], outRank, util.computeStrides(outShape));\n            outputVals[outputIndex] = curVal;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(util.toTypedArray(outputVals, x.dtype), outShape, x.dtype);\n    return {\n      dataId,\n      shape: outShape,\n      dtype: x.dtype\n    };\n  }\n};","map":{"version":3,"names":["backend_util","Dilation2D","util","dilation2DConfig","kernelName","backendName","kernelFunc","inputs","backend","attrs","x","filter","strides","pad","dilations","cpuBackend","xVals","data","get","dataId","values","xRank","shape","length","filterVals","filterRank","batchSize","inHeight","inWidth","inChannels","outHeight","outWidth","padInfo","strideHeight","strideWidth","filterHeight","filterWidth","dilationHeight","dilationWidth","outShape","computeDilation2DInfo","outSize","sizeFromShape","outRank","outputVals","getArrayFromDType","dtype","b","hOut","hBeg","top","wOut","wBeg","left","d","curVal","Number","MIN_SAFE_INTEGER","h","hIn","w","wIn","xIndex","locToIndex","computeStrides","filterIndex","val","outputIndex","write","toTypedArray"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Dilation2D.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Dilation2D, util } from '@tensorflow/tfjs-core';\nexport const dilation2DConfig = {\n    kernelName: Dilation2D,\n    backendName: 'cpu',\n    kernelFunc: ({ inputs, backend, attrs }) => {\n        const { x, filter } = inputs;\n        const { strides, pad, dilations } = attrs;\n        const cpuBackend = backend;\n        const xVals = cpuBackend.data.get(x.dataId).values;\n        const xRank = x.shape.length;\n        const filterVals = cpuBackend.data.get(filter.dataId).values;\n        const filterRank = filter.shape.length;\n        const { batchSize, inHeight, inWidth, inChannels, outHeight, outWidth, padInfo, strideHeight, strideWidth, filterHeight, filterWidth, dilationHeight, dilationWidth, outShape } = backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC' /* dataFormat */, dilations);\n        const outSize = util.sizeFromShape(outShape);\n        const outRank = outShape.length;\n        const outputVals = util.getArrayFromDType(x.dtype, outSize);\n        // Upsampling the input by fill in `dilation size - 1` values between each\n        // input value.\n        // This implementation follows the TF c++ implementation:\n        // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n        for (let b = 0; b < batchSize; ++b) {\n            for (let hOut = 0; hOut < outHeight; ++hOut) {\n                const hBeg = hOut * strideHeight - padInfo.top;\n                for (let wOut = 0; wOut < outWidth; ++wOut) {\n                    const wBeg = wOut * strideWidth - padInfo.left;\n                    for (let d = 0; d < inChannels; ++d) {\n                        let curVal = Number.MIN_SAFE_INTEGER;\n                        for (let h = 0; h < filterHeight; ++h) {\n                            const hIn = hBeg + h * dilationHeight;\n                            if (hIn >= 0 && hIn < inHeight) {\n                                for (let w = 0; w < filterWidth; ++w) {\n                                    const wIn = wBeg + w * dilationWidth;\n                                    if (wIn >= 0 && wIn < inWidth) {\n                                        const xIndex = util.locToIndex([b, hIn, wIn, d], xRank, util.computeStrides(x.shape));\n                                        const filterIndex = util.locToIndex([h, w, d], filterRank, util.computeStrides(filter.shape));\n                                        const val = xVals[xIndex] + filterVals[filterIndex];\n                                        if (val > curVal) {\n                                            curVal = val;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        const outputIndex = util.locToIndex([b, hOut, wOut, d], outRank, util.computeStrides(outShape));\n                        outputVals[outputIndex] = curVal;\n                    }\n                }\n            }\n        }\n        const dataId = cpuBackend.write(util.toTypedArray(outputVals, x.dtype), outShape, x.dtype);\n        return { dataId, shape: outShape, dtype: x.dtype };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}