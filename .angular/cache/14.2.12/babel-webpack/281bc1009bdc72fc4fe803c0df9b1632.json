{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, GatherV2, util, env } from '@tensorflow/tfjs-core';\nimport { GatherProgram } from '../gather_gpu';\nimport { gatherV2ImplCPU } from '../kernel_utils/shared';\nimport { reshape } from './Reshape';\nexport function gatherV2(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    indices\n  } = inputs;\n  const {\n    axis,\n    batchDims\n  } = attrs;\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n\n  if (env().get('DEBUG')) {\n    // In debug mode, throw error when any index is out of bound.\n    // Otherwise, just fill out of bounds with zeroes.\n    const indicesVals = backend.readSync(indices.dataId);\n    const axisDim = x.shape[parsedAxis];\n\n    for (let i = 0; i < indicesVals.length; ++i) {\n      const index = indicesVals[i];\n      util.assert(index <= axisDim - 1 && index >= 0, () => `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);\n    }\n  }\n\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(x, indices, parsedAxis, batchDims);\n  const indicesSize = util.sizeFromShape(indices.shape);\n  const toDispose = [];\n  const flattenX = reshape({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      shape: [shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize, shapeInfo.sliceSize]\n    }\n  });\n  const flattenIndex = reshape({\n    inputs: {\n      x: indices\n    },\n    backend,\n    attrs: {\n      shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]\n    }\n  });\n  toDispose.push(flattenX);\n  toDispose.push(flattenIndex);\n  const flattenOutputShape = [shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize, shapeInfo.sliceSize];\n\n  if (backend.shouldExecuteOnCPU([x, indices]) || x.dtype === 'string') {\n    const indicesBuf = backend.bufferSync(flattenIndex);\n    const xBuf = backend.bufferSync(flattenX);\n    const outBuf = gatherV2ImplCPU(xBuf, indicesBuf, flattenOutputShape);\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return backend.makeTensorInfo(shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n  }\n\n  const program = new GatherProgram(flattenX.shape, flattenOutputShape);\n  const res = backend.runWebGLProgram(program, [flattenX, flattenIndex], flattenX.dtype);\n  toDispose.push(res);\n  const reshaped = reshape({\n    inputs: {\n      x: res\n    },\n    backend,\n    attrs: {\n      shape: shapeInfo.outputShape\n    }\n  });\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return reshaped;\n}\nexport const gatherV2Config = {\n  kernelName: GatherV2,\n  backendName: 'webgl',\n  kernelFunc: gatherV2\n};","map":{"version":3,"names":["backend_util","GatherV2","util","env","GatherProgram","gatherV2ImplCPU","reshape","gatherV2","args","inputs","backend","attrs","x","indices","axis","batchDims","parsedAxis","parseAxisParam","shape","get","indicesVals","readSync","dataId","axisDim","i","length","index","assert","shapeInfo","segment_util","collectGatherOpShapeInfo","indicesSize","sizeFromShape","toDispose","flattenX","batchSize","outerSize","dimSize","sliceSize","flattenIndex","push","flattenOutputShape","shouldExecuteOnCPU","dtype","indicesBuf","bufferSync","xBuf","outBuf","forEach","t","disposeIntermediateTensorInfo","makeTensorInfo","outputShape","values","program","res","runWebGLProgram","reshaped","gatherV2Config","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/GatherV2.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, GatherV2, util, env } from '@tensorflow/tfjs-core';\nimport { GatherProgram } from '../gather_gpu';\nimport { gatherV2ImplCPU } from '../kernel_utils/shared';\nimport { reshape } from './Reshape';\nexport function gatherV2(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, indices } = inputs;\n    const { axis, batchDims } = attrs;\n    const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n    if (env().get('DEBUG')) {\n        // In debug mode, throw error when any index is out of bound.\n        // Otherwise, just fill out of bounds with zeroes.\n        const indicesVals = backend.readSync(indices.dataId);\n        const axisDim = x.shape[parsedAxis];\n        for (let i = 0; i < indicesVals.length; ++i) {\n            const index = indicesVals[i];\n            util.assert(index <= axisDim - 1 && index >= 0, () => `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);\n        }\n    }\n    const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(x, indices, parsedAxis, batchDims);\n    const indicesSize = util.sizeFromShape(indices.shape);\n    const toDispose = [];\n    const flattenX = reshape({\n        inputs: { x },\n        backend,\n        attrs: {\n            shape: [\n                shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n                shapeInfo.sliceSize\n            ]\n        }\n    });\n    const flattenIndex = reshape({\n        inputs: { x: indices },\n        backend,\n        attrs: { shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize] }\n    });\n    toDispose.push(flattenX);\n    toDispose.push(flattenIndex);\n    const flattenOutputShape = [\n        shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n        shapeInfo.sliceSize\n    ];\n    if (backend.shouldExecuteOnCPU([x, indices]) || x.dtype === 'string') {\n        const indicesBuf = backend.bufferSync(flattenIndex);\n        const xBuf = backend.bufferSync(flattenX);\n        const outBuf = gatherV2ImplCPU(xBuf, indicesBuf, flattenOutputShape);\n        toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n        return backend.makeTensorInfo(shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n    }\n    const program = new GatherProgram(flattenX.shape, flattenOutputShape);\n    const res = backend.runWebGLProgram(program, [flattenX, flattenIndex], flattenX.dtype);\n    toDispose.push(res);\n    const reshaped = reshape({ inputs: { x: res }, backend, attrs: { shape: shapeInfo.outputShape } });\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return reshaped;\n}\nexport const gatherV2Config = {\n    kernelName: GatherV2,\n    backendName: 'webgl',\n    kernelFunc: gatherV2\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}