{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class ScatterProgram {\n  constructor(updateSize, sliceDim, indicesRank, updatesRank, strides, shape, summingDupeIndex = true) {\n    this.variableNames = ['updates', 'indices', 'defaultValue'];\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    let indicesString = '';\n\n    if (indicesRank === 1) {\n      indicesString = 'i';\n    } else if (indicesRank === 2) {\n      indicesString = 'i, j';\n    }\n\n    const indicesSnippet = `getIndices(${indicesString})`;\n    let updatesString = '';\n\n    if (updatesRank === 1) {\n      updatesString = 'i';\n    } else if (updatesRank === 2) {\n      updatesString = 'i, coords[1]';\n    }\n\n    const updatesSnippet = `getUpdates(${updatesString})`;\n    const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${strides});\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${updateSize}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${sliceDim}; j++) {\n              int index = round(${indicesSnippet});\n              flattenedIndex += index * ${strideString};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${updatesSnippet};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `;\n  }\n\n}","map":{"version":3,"names":["getCoordsDataType","ScatterProgram","constructor","updateSize","sliceDim","indicesRank","updatesRank","strides","shape","summingDupeIndex","variableNames","outputShape","stridesType","length","dtype","indicesString","indicesSnippet","updatesString","updatesSnippet","strideString","userCode"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/scatter_gpu.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class ScatterProgram {\n    constructor(updateSize, sliceDim, indicesRank, updatesRank, strides, shape, summingDupeIndex = true) {\n        this.variableNames = ['updates', 'indices', 'defaultValue'];\n        this.outputShape = shape;\n        const stridesType = getCoordsDataType(strides.length);\n        const dtype = getCoordsDataType(shape.length);\n        let indicesString = '';\n        if (indicesRank === 1) {\n            indicesString = 'i';\n        }\n        else if (indicesRank === 2) {\n            indicesString = 'i, j';\n        }\n        const indicesSnippet = `getIndices(${indicesString})`;\n        let updatesString = '';\n        if (updatesRank === 1) {\n            updatesString = 'i';\n        }\n        else if (updatesRank === 2) {\n            updatesString = 'i, coords[1]';\n        }\n        const updatesSnippet = `getUpdates(${updatesString})`;\n        const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n        this.userCode = `\n        ${stridesType} strides = ${stridesType}(${strides});\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${updateSize}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${sliceDim}; j++) {\n              int index = round(${indicesSnippet});\n              flattenedIndex += index * ${strideString};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${updatesSnippet};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,iBAAT,QAAkC,mBAAlC;AACA,OAAO,MAAMC,cAAN,CAAqB;EACxBC,WAAW,CAACC,UAAD,EAAaC,QAAb,EAAuBC,WAAvB,EAAoCC,WAApC,EAAiDC,OAAjD,EAA0DC,KAA1D,EAAiEC,gBAAgB,GAAG,IAApF,EAA0F;IACjG,KAAKC,aAAL,GAAqB,CAAC,SAAD,EAAY,SAAZ,EAAuB,cAAvB,CAArB;IACA,KAAKC,WAAL,GAAmBH,KAAnB;IACA,MAAMI,WAAW,GAAGZ,iBAAiB,CAACO,OAAO,CAACM,MAAT,CAArC;IACA,MAAMC,KAAK,GAAGd,iBAAiB,CAACQ,KAAK,CAACK,MAAP,CAA/B;IACA,IAAIE,aAAa,GAAG,EAApB;;IACA,IAAIV,WAAW,KAAK,CAApB,EAAuB;MACnBU,aAAa,GAAG,GAAhB;IACH,CAFD,MAGK,IAAIV,WAAW,KAAK,CAApB,EAAuB;MACxBU,aAAa,GAAG,MAAhB;IACH;;IACD,MAAMC,cAAc,GAAI,cAAaD,aAAc,GAAnD;IACA,IAAIE,aAAa,GAAG,EAApB;;IACA,IAAIX,WAAW,KAAK,CAApB,EAAuB;MACnBW,aAAa,GAAG,GAAhB;IACH,CAFD,MAGK,IAAIX,WAAW,KAAK,CAApB,EAAuB;MACxBW,aAAa,GAAG,cAAhB;IACH;;IACD,MAAMC,cAAc,GAAI,cAAaD,aAAc,GAAnD;IACA,MAAME,YAAY,GAAGf,QAAQ,GAAG,CAAX,GAAe,YAAf,GAA8B,SAAnD;IACA,KAAKgB,QAAL,GAAiB;AACzB,UAAUR,WAAY,cAAaA,WAAY,IAAGL,OAAQ;AAC1D;AACA;AACA,YAAYO,KAAM;AAClB;AACA;AACA,gCAAgCX,UAAW;AAC3C;AACA,kCAAkCC,QAAS;AAC3C,kCAAkCY,cAAe;AACjD,0CAA0CG,YAAa;AACvD;AACA;AACA,uBAAuBD,cAAe;AACtC;AACA;AACA;AACA;AACA;AACA,OApBQ;EAqBH;;AA5CuB"},"metadata":{},"sourceType":"module"}