{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { _FusedMatMul } from '@tensorflow/tfjs-core';\nimport { applyActivation } from '../utils/fused_utils';\nimport { add } from './Add';\nimport { batchMatMul } from './BatchMatMul';\nexport function _fusedMatMul(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    a,\n    b,\n    bias,\n    preluActivationWeights\n  } = inputs;\n  const {\n    transposeA,\n    transposeB,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n  let current;\n  let addRes;\n  let activationRes;\n  const intermediates = [];\n  const matMulRes = batchMatMul({\n    inputs: {\n      a,\n      b\n    },\n    attrs: {\n      transposeA,\n      transposeB\n    },\n    backend\n  });\n  current = matMulRes;\n\n  if (bias) {\n    addRes = add({\n      inputs: {\n        a: current,\n        b: bias\n      },\n      backend\n    });\n    intermediates.push(current);\n    current = addRes;\n  }\n\n  if (activation) {\n    activationRes = applyActivation(backend, current, activation, preluActivationWeights, leakyreluAlpha);\n    intermediates.push(current);\n    current = activationRes;\n  }\n\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return current;\n}\nexport const _fusedMatMulConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'cpu',\n  kernelFunc: _fusedMatMul\n};","map":{"version":3,"names":["_FusedMatMul","applyActivation","add","batchMatMul","_fusedMatMul","args","inputs","backend","attrs","a","b","bias","preluActivationWeights","transposeA","transposeB","activation","leakyreluAlpha","current","addRes","activationRes","intermediates","matMulRes","push","i","disposeIntermediateTensorInfo","_fusedMatMulConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/_FusedMatMul.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { _FusedMatMul } from '@tensorflow/tfjs-core';\nimport { applyActivation } from '../utils/fused_utils';\nimport { add } from './Add';\nimport { batchMatMul } from './BatchMatMul';\nexport function _fusedMatMul(args) {\n    const { inputs, backend, attrs } = args;\n    const { a, b, bias, preluActivationWeights } = inputs;\n    const { transposeA, transposeB, activation, leakyreluAlpha } = attrs;\n    let current;\n    let addRes;\n    let activationRes;\n    const intermediates = [];\n    const matMulRes = batchMatMul({ inputs: { a, b }, attrs: { transposeA, transposeB }, backend });\n    current = matMulRes;\n    if (bias) {\n        addRes = add({ inputs: { a: current, b: bias }, backend });\n        intermediates.push(current);\n        current = addRes;\n    }\n    if (activation) {\n        activationRes = applyActivation(backend, current, activation, preluActivationWeights, leakyreluAlpha);\n        intermediates.push(current);\n        current = activationRes;\n    }\n    for (const i of intermediates) {\n        backend.disposeIntermediateTensorInfo(i);\n    }\n    return current;\n}\nexport const _fusedMatMulConfig = {\n    kernelName: _FusedMatMul,\n    backendName: 'cpu',\n    kernelFunc: _fusedMatMul,\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,QAA6B,uBAA7B;AACA,SAASC,eAAT,QAAgC,sBAAhC;AACA,SAASC,GAAT,QAAoB,OAApB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAO,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;EAC/B,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BH,IAAnC;EACA,MAAM;IAAEI,CAAF;IAAKC,CAAL;IAAQC,IAAR;IAAcC;EAAd,IAAyCN,MAA/C;EACA,MAAM;IAAEO,UAAF;IAAcC,UAAd;IAA0BC,UAA1B;IAAsCC;EAAtC,IAAyDR,KAA/D;EACA,IAAIS,OAAJ;EACA,IAAIC,MAAJ;EACA,IAAIC,aAAJ;EACA,MAAMC,aAAa,GAAG,EAAtB;EACA,MAAMC,SAAS,GAAGlB,WAAW,CAAC;IAAEG,MAAM,EAAE;MAAEG,CAAF;MAAKC;IAAL,CAAV;IAAoBF,KAAK,EAAE;MAAEK,UAAF;MAAcC;IAAd,CAA3B;IAAuDP;EAAvD,CAAD,CAA7B;EACAU,OAAO,GAAGI,SAAV;;EACA,IAAIV,IAAJ,EAAU;IACNO,MAAM,GAAGhB,GAAG,CAAC;MAAEI,MAAM,EAAE;QAAEG,CAAC,EAAEQ,OAAL;QAAcP,CAAC,EAAEC;MAAjB,CAAV;MAAmCJ;IAAnC,CAAD,CAAZ;IACAa,aAAa,CAACE,IAAd,CAAmBL,OAAnB;IACAA,OAAO,GAAGC,MAAV;EACH;;EACD,IAAIH,UAAJ,EAAgB;IACZI,aAAa,GAAGlB,eAAe,CAACM,OAAD,EAAUU,OAAV,EAAmBF,UAAnB,EAA+BH,sBAA/B,EAAuDI,cAAvD,CAA/B;IACAI,aAAa,CAACE,IAAd,CAAmBL,OAAnB;IACAA,OAAO,GAAGE,aAAV;EACH;;EACD,KAAK,MAAMI,CAAX,IAAgBH,aAAhB,EAA+B;IAC3Bb,OAAO,CAACiB,6BAAR,CAAsCD,CAAtC;EACH;;EACD,OAAON,OAAP;AACH;AACD,OAAO,MAAMQ,kBAAkB,GAAG;EAC9BC,UAAU,EAAE1B,YADkB;EAE9B2B,WAAW,EAAE,KAFiB;EAG9BC,UAAU,EAAExB;AAHkB,CAA3B"},"metadata":{},"sourceType":"module"}