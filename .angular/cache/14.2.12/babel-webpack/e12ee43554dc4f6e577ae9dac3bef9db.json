{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DepthToSpace, util } from '@tensorflow/tfjs-core';\nexport function depthToSpace(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    blockSize,\n    dataFormat\n  } = attrs;\n  util.assert(dataFormat === 'NHWC', () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${dataFormat}`);\n  const batchSize = x.shape[0];\n  const inputHeight = x.shape[1];\n  const inputWidth = x.shape[2];\n  const inputDepth = x.shape[3];\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n  const xValues = backend.data.get(x.dataId).values;\n  const result = new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n  let outputIdx = 0;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let h = 0; h < outputHeight; ++h) {\n      const inH = Math.floor(h / blockSize);\n      const offsetH = h % blockSize;\n\n      for (let w = 0; w < outputWidth; ++w) {\n        const inW = Math.floor(w / blockSize);\n        const offsetW = w % blockSize;\n        const offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n\n        for (let d = 0; d < outputDepth; ++d) {\n          const inD = d + offsetD;\n          const inputIdx = inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n          result[outputIdx++] = xValues[inputIdx];\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo([batchSize, outputHeight, outputWidth, outputDepth], x.dtype, result);\n}\nexport const depthToSpaceConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'cpu',\n  kernelFunc: depthToSpace\n};","map":{"version":3,"names":["DepthToSpace","util","depthToSpace","args","inputs","backend","attrs","x","blockSize","dataFormat","assert","batchSize","shape","inputHeight","inputWidth","inputDepth","outputHeight","outputWidth","outputDepth","xValues","data","get","dataId","values","result","Float32Array","outputIdx","b","h","inH","Math","floor","offsetH","w","inW","offsetW","offsetD","d","inD","inputIdx","makeTensorInfo","dtype","depthToSpaceConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/DepthToSpace.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DepthToSpace, util } from '@tensorflow/tfjs-core';\nexport function depthToSpace(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { blockSize, dataFormat } = attrs;\n    util.assert(dataFormat === 'NHWC', () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${dataFormat}`);\n    const batchSize = x.shape[0];\n    const inputHeight = x.shape[1];\n    const inputWidth = x.shape[2];\n    const inputDepth = x.shape[3];\n    const outputHeight = inputHeight * blockSize;\n    const outputWidth = inputWidth * blockSize;\n    const outputDepth = inputDepth / (blockSize * blockSize);\n    const xValues = backend.data.get(x.dataId).values;\n    const result = new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n    let outputIdx = 0;\n    for (let b = 0; b < batchSize; ++b) {\n        for (let h = 0; h < outputHeight; ++h) {\n            const inH = Math.floor(h / blockSize);\n            const offsetH = (h % blockSize);\n            for (let w = 0; w < outputWidth; ++w) {\n                const inW = Math.floor(w / blockSize);\n                const offsetW = (w % blockSize);\n                const offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n                for (let d = 0; d < outputDepth; ++d) {\n                    const inD = d + offsetD;\n                    const inputIdx = inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n                    result[outputIdx++] = xValues[inputIdx];\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo([batchSize, outputHeight, outputWidth, outputDepth], x.dtype, result);\n}\nexport const depthToSpaceConfig = {\n    kernelName: DepthToSpace,\n    backendName: 'cpu',\n    kernelFunc: depthToSpace\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}