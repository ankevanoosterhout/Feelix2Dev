{"ast":null,"code":"import { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { Reduction } from '../loss_ops_utils';\nimport { mul } from '../mul';\nimport { op } from '../operation';\nimport { scalar } from '../scalar';\nimport { sub } from '../sub';\nimport { sum } from '../sum';\nimport { computeWeightedLoss } from './compute_weighted_loss';\n/**\n * Computes the cosine distance loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param axis The dimension along which the cosine distance is computed.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\n\nfunction cosineDistance_(labels, predictions, axis, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n  const $labels = convertToTensor(labels, 'labels', 'cosineDistance');\n  const $predictions = convertToTensor(predictions, 'predictions', 'cosineDistance');\n  let $weights = null;\n\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'cosineDistance');\n  }\n\n  assertShapesMatch($labels.shape, $predictions.shape, 'Error in cosineDistance: ');\n  const one = scalar(1);\n  const losses = sub(one, sum(mul($labels, $predictions), axis, true));\n  return computeWeightedLoss(losses, $weights, reduction);\n}\n\nexport const cosineDistance = op({\n  cosineDistance_\n});","map":{"version":3,"names":["convertToTensor","assertShapesMatch","Reduction","mul","op","scalar","sub","sum","computeWeightedLoss","cosineDistance_","labels","predictions","axis","weights","reduction","SUM_BY_NONZERO_WEIGHTS","$labels","$predictions","$weights","shape","one","losses","cosineDistance"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/losses/cosine_distance.js"],"sourcesContent":["import { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { Reduction } from '../loss_ops_utils';\nimport { mul } from '../mul';\nimport { op } from '../operation';\nimport { scalar } from '../scalar';\nimport { sub } from '../sub';\nimport { sum } from '../sum';\nimport { computeWeightedLoss } from './compute_weighted_loss';\n/**\n * Computes the cosine distance loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param axis The dimension along which the cosine distance is computed.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction cosineDistance_(labels, predictions, axis, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    const $labels = convertToTensor(labels, 'labels', 'cosineDistance');\n    const $predictions = convertToTensor(predictions, 'predictions', 'cosineDistance');\n    let $weights = null;\n    if (weights != null) {\n        $weights = convertToTensor(weights, 'weights', 'cosineDistance');\n    }\n    assertShapesMatch($labels.shape, $predictions.shape, 'Error in cosineDistance: ');\n    const one = scalar(1);\n    const losses = sub(one, sum(mul($labels, $predictions), axis, true));\n    return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const cosineDistance = op({ cosineDistance_ });\n"],"mappings":"AAAA,SAASA,eAAT,QAAgC,uBAAhC;AACA,SAASC,iBAAT,QAAkC,YAAlC;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,SAASC,EAAT,QAAmB,cAAnB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,SAASC,mBAAT,QAAoC,yBAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,eAAT,CAAyBC,MAAzB,EAAiCC,WAAjC,EAA8CC,IAA9C,EAAoDC,OAApD,EAA6DC,SAAS,GAAGZ,SAAS,CAACa,sBAAnF,EAA2G;EACvG,MAAMC,OAAO,GAAGhB,eAAe,CAACU,MAAD,EAAS,QAAT,EAAmB,gBAAnB,CAA/B;EACA,MAAMO,YAAY,GAAGjB,eAAe,CAACW,WAAD,EAAc,aAAd,EAA6B,gBAA7B,CAApC;EACA,IAAIO,QAAQ,GAAG,IAAf;;EACA,IAAIL,OAAO,IAAI,IAAf,EAAqB;IACjBK,QAAQ,GAAGlB,eAAe,CAACa,OAAD,EAAU,SAAV,EAAqB,gBAArB,CAA1B;EACH;;EACDZ,iBAAiB,CAACe,OAAO,CAACG,KAAT,EAAgBF,YAAY,CAACE,KAA7B,EAAoC,2BAApC,CAAjB;EACA,MAAMC,GAAG,GAAGf,MAAM,CAAC,CAAD,CAAlB;EACA,MAAMgB,MAAM,GAAGf,GAAG,CAACc,GAAD,EAAMb,GAAG,CAACJ,GAAG,CAACa,OAAD,EAAUC,YAAV,CAAJ,EAA6BL,IAA7B,EAAmC,IAAnC,CAAT,CAAlB;EACA,OAAOJ,mBAAmB,CAACa,MAAD,EAASH,QAAT,EAAmBJ,SAAnB,CAA1B;AACH;;AACD,OAAO,MAAMQ,cAAc,GAAGlB,EAAE,CAAC;EAAEK;AAAF,CAAD,CAAzB"},"metadata":{},"sourceType":"module"}