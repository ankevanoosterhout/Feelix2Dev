{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ReduceProgram {\n  constructor(reduceInfo, reduceType) {\n    this.variableNames = ['x'];\n    const {\n      windowSize,\n      batchSize,\n      inSize,\n      outSize\n    } = reduceInfo;\n    this.outputShape = [batchSize, outSize];\n    let initializationValue = '0.0';\n    let compareOp = ``;\n\n    if (reduceType === 'prod') {\n      initializationValue = '1.0';\n    } else if (reduceType === 'min') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '1.0 / 1e-20';\n      compareOp = `min`;\n    } else if (reduceType === 'max') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n      compareOp = `max`;\n    }\n\n    let returnValue = `${reduceType}(${reduceType}(${reduceType}(` + 'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n\n    if (reduceType === 'sum') {\n      returnValue = `sumValue`;\n    } else if (reduceType === 'prod') {\n      returnValue = `prodValue`;\n    } else if (reduceType === 'all') {\n      returnValue = `allValue`;\n    } else if (reduceType === 'any') {\n      returnValue = `anyValue`;\n    }\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n    let updateSnippet = `\n      if (${reduceType === 'sum'}) {\n        sumValue += dot(values, ones);\n      } else if (${reduceType === 'prod'}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n        if (${reduceType === 'min'} || ${reduceType === 'max'}) {\n          minMaxValue = ${compareOp}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `;\n    let vecType = `vec4`;\n\n    if (reduceType === 'all') {\n      initializationValue = '1.0';\n      updateSnippet = `\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    } else if (reduceType === 'any') {\n      initializationValue = '0.0';\n      updateSnippet = `\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    }\n\n    let checkOutOfBounds = '';\n\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        vec4 minMaxValue = vec4(${initializationValue});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n\n}","map":{"version":3,"names":["ReduceProgram","constructor","reduceInfo","reduceType","variableNames","windowSize","batchSize","inSize","outSize","outputShape","initializationValue","compareOp","returnValue","windowSizeNearestVec4","Math","floor","windowSizeVec4Remainder","updateSnippet","vecType","checkOutOfBounds","userCode"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/reduce_gpu.js"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ReduceProgram {\n    constructor(reduceInfo, reduceType) {\n        this.variableNames = ['x'];\n        const { windowSize, batchSize, inSize, outSize } = reduceInfo;\n        this.outputShape = [batchSize, outSize];\n        let initializationValue = '0.0';\n        let compareOp = ``;\n        if (reduceType === 'prod') {\n            initializationValue = '1.0';\n        }\n        else if (reduceType === 'min') {\n            // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n            initializationValue = '1.0 / 1e-20';\n            compareOp = `min`;\n        }\n        else if (reduceType === 'max') {\n            // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n            initializationValue = '-1.0 / 1e-20';\n            compareOp = `max`;\n        }\n        let returnValue = `${reduceType}(${reduceType}(${reduceType}(` +\n            'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n        if (reduceType === 'sum') {\n            returnValue = `sumValue`;\n        }\n        else if (reduceType === 'prod') {\n            returnValue = `prodValue`;\n        }\n        else if (reduceType === 'all') {\n            returnValue = `allValue`;\n        }\n        else if (reduceType === 'any') {\n            returnValue = `anyValue`;\n        }\n        const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n        const windowSizeVec4Remainder = windowSize % 4;\n        let updateSnippet = `\n      if (${reduceType === 'sum'}) {\n        sumValue += dot(values, ones);\n      } else if (${reduceType === 'prod'}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n        if (${reduceType === 'min'} || ${reduceType === 'max'}) {\n          minMaxValue = ${compareOp}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `;\n        let vecType = `vec4`;\n        if (reduceType === 'all') {\n            initializationValue = '1.0';\n            updateSnippet = `\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      `;\n            vecType = `bvec4`;\n        }\n        else if (reduceType === 'any') {\n            initializationValue = '0.0';\n            updateSnippet = `\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      `;\n            vecType = `bvec4`;\n        }\n        let checkOutOfBounds = '';\n        if (inSize % windowSize > 0) {\n            checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n        }\n        this.userCode = `\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        vec4 minMaxValue = vec4(${initializationValue});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}