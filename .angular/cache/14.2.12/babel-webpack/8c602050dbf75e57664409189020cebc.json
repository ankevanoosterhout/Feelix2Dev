{"ast":null,"code":"import { Joint } from '../core/Joint.js';\nimport { Link } from '../core/Link.js';\nimport { Goal } from '../core/Goal.js'; // Takes a list of interconnected frames and serializes them into a non cyclic json representation\n\nexport function serialize(frames) {\n  const map = new Map();\n  const info = []; // Create the initial frame list along with a joint -> index map\n\n  for (let i = 0, l = frames.length; i < l; i++) {\n    const frame = frames[i];\n    const {\n      name,\n      dof,\n      dofValues,\n      dofTarget,\n      dofRestPose,\n      minDoFLimit,\n      maxDoFLimit,\n      targetSet,\n      restPoseSet,\n      position,\n      quaternion,\n      isClosure\n    } = frame;\n    let type = 'Link';\n\n    if (frame.isGoal) {\n      type = 'Goal';\n    } else if (frame.isJoint) {\n      type = 'Joint';\n    }\n\n    const res = {\n      dof: dof ? dof.slice() : null,\n      dofValues: dofValues ? dofValues.slice() : null,\n      dofTarget: dofTarget ? dofTarget.slice() : null,\n      dofRestPose: dofRestPose ? dofRestPose.slice() : null,\n      minDoFLimit: minDoFLimit ? minDoFLimit.slice() : null,\n      maxDoFLimit: maxDoFLimit ? maxDoFLimit.slice() : null,\n      targetSet,\n      restPoseSet,\n      isClosure,\n      name,\n      position: position.slice(),\n      quaternion: quaternion.slice(),\n      children: null,\n      closureJoints: null,\n      child: null,\n      type\n    };\n    info.push(res);\n    map.set(frame, i);\n  } // Create the child and parent index references.\n\n\n  for (let i = 0, l = frames.length; i < l; i++) {\n    const inf = info[i];\n    const frame = frames[i];\n    inf.children = frame.children.map(c => map.get(c));\n\n    if (frame.isLink) {\n      inf.closureJoints = frame.closureJoints.map(c => map.get(c));\n    }\n\n    if (frame.isJoint && frame.child) {\n      inf.child = map.get(frame.child);\n    }\n\n    if (frame.parent) {\n      inf.parent = map.get(frame.parent);\n    } else {\n      inf.parent = null;\n    }\n  }\n\n  return info;\n} // Deserialize the serialized representation of the graph\n\nexport function deserialize(data) {\n  // Create joints / links for every serialized version\n  const frames = data.map(d => {\n    const {\n      type,\n      name,\n      position,\n      quaternion,\n      dof,\n      dofValues,\n      dofTarget,\n      dofRestPose,\n      minDoFLimit,\n      maxDoFLimit,\n      targetSet,\n      restPoseSet,\n      isClosure\n    } = d;\n    let frame;\n\n    switch (type) {\n      case 'Goal':\n      case 'Joint':\n        frame = type === 'Goal' ? new Goal() : new Joint();\n        frame.setDoF(...dof);\n        frame.dofValues.set(dofValues);\n        frame.dofTarget.set(dofTarget);\n        frame.dofRestPose.set(dofRestPose);\n        frame.minDoFLimit.set(minDoFLimit);\n        frame.maxDoFLimit.set(maxDoFLimit);\n        frame.targetSet = targetSet;\n        frame.restPoseSet = restPoseSet;\n        frame.isClosure = isClosure;\n        break;\n\n      case 'Link':\n        frame = new Link();\n        break;\n    }\n\n    frame.name = name;\n    frame.position.set(position);\n    frame.quaternion.set(quaternion);\n    return frame;\n  }); // set the parent and child from the maps\n\n  for (let i = 0; i < frames.length; i++) {\n    const frame = frames[i];\n    const info = data[i];\n    frame.parent = frames[info.parent] || null;\n    frame.children.push(...info.children.map(i => frames[i]));\n    frame.setMatrixNeedsUpdate();\n\n    if (frame.isLink) {\n      frame.closureJoints.push(...info.closureJoints.map(i => frames[i]));\n    }\n\n    if (frame.isJoint) {\n      frame.child = info.child !== null ? frames[info.child] : null;\n      frame.setMatrixDoFNeedsUpdate();\n    }\n  }\n\n  return frames;\n}","map":{"version":3,"names":["Joint","Link","Goal","serialize","frames","map","Map","info","i","l","length","frame","name","dof","dofValues","dofTarget","dofRestPose","minDoFLimit","maxDoFLimit","targetSet","restPoseSet","position","quaternion","isClosure","type","isGoal","isJoint","res","slice","children","closureJoints","child","push","set","inf","c","get","isLink","parent","deserialize","data","d","setDoF","setMatrixNeedsUpdate","setMatrixDoFNeedsUpdate"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/closed-chain-ik/src/worker/serialize.js"],"sourcesContent":["import { Joint } from '../core/Joint.js';\r\nimport { Link } from '../core/Link.js';\r\nimport { Goal } from '../core/Goal.js';\r\n\r\n// Takes a list of interconnected frames and serializes them into a non cyclic json representation\r\nexport function serialize( frames ) {\r\n\r\n\tconst map = new Map();\r\n\tconst info = [];\r\n\r\n\t// Create the initial frame list along with a joint -> index map\r\n\tfor ( let i = 0, l = frames.length; i < l; i ++ ) {\r\n\r\n\t\tconst frame = frames[ i ];\r\n\r\n\t\tconst {\r\n\t\t\tname,\r\n\t\t\tdof,\r\n\t\t\tdofValues,\r\n\t\t\tdofTarget,\r\n\t\t\tdofRestPose,\r\n\t\t\tminDoFLimit,\r\n\t\t\tmaxDoFLimit,\r\n\t\t\ttargetSet,\r\n\t\t\trestPoseSet,\r\n\t\t\tposition,\r\n\t\t\tquaternion,\r\n\t\t\tisClosure,\r\n\t\t} = frame;\r\n\r\n\t\tlet type = 'Link';\r\n\t\tif ( frame.isGoal ) {\r\n\r\n\t\t\ttype = 'Goal';\r\n\r\n\t\t} else if ( frame.isJoint ) {\r\n\r\n\t\t\ttype = 'Joint';\r\n\r\n\t\t}\r\n\r\n\t\tconst res = {\r\n\t\t\tdof: dof ? dof.slice() : null,\r\n\t\t\tdofValues: dofValues ? dofValues.slice() : null,\r\n\t\t\tdofTarget: dofTarget ? dofTarget.slice() : null,\r\n\t\t\tdofRestPose: dofRestPose ? dofRestPose.slice() : null,\r\n\t\t\tminDoFLimit: minDoFLimit ? minDoFLimit.slice() : null,\r\n\t\t\tmaxDoFLimit: maxDoFLimit ? maxDoFLimit.slice() : null,\r\n\t\t\ttargetSet,\r\n\t\t\trestPoseSet,\r\n\t\t\tisClosure,\r\n\r\n\t\t\tname,\r\n\t\t\tposition: position.slice(),\r\n\t\t\tquaternion: quaternion.slice(),\r\n\t\t\tchildren: null,\r\n\t\t\tclosureJoints: null,\r\n\t\t\tchild: null,\r\n\t\t\ttype,\r\n\t\t};\r\n\r\n\t\tinfo.push( res );\r\n\t\tmap.set( frame, i );\r\n\r\n\t}\r\n\r\n\t// Create the child and parent index references.\r\n\tfor ( let i = 0, l = frames.length; i < l; i ++ ) {\r\n\r\n\t\tconst inf = info[ i ];\r\n\t\tconst frame = frames[ i ];\r\n\t\tinf.children = frame.children.map( c => map.get( c ) );\r\n\t\tif ( frame.isLink ) {\r\n\r\n\t\t\tinf.closureJoints = frame.closureJoints.map( c => map.get( c ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( frame.isJoint && frame.child ) {\r\n\r\n\t\t\tinf.child = map.get( frame.child );\r\n\r\n\t\t}\r\n\r\n\t\tif ( frame.parent ) {\r\n\r\n\t\t\tinf.parent = map.get( frame.parent );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tinf.parent = null;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn info;\r\n\r\n}\r\n\r\n// Deserialize the serialized representation of the graph\r\nexport function deserialize( data ) {\r\n\r\n\t// Create joints / links for every serialized version\r\n\tconst frames =\r\n\t\tdata.map( d => {\r\n\r\n\t\t\tconst {\r\n\t\t\t\ttype,\r\n\t\t\t\tname,\r\n\t\t\t\tposition,\r\n\t\t\t\tquaternion,\r\n\r\n\t\t\t\tdof,\r\n\t\t\t\tdofValues,\r\n\t\t\t\tdofTarget,\r\n\t\t\t\tdofRestPose,\r\n\t\t\t\tminDoFLimit,\r\n\t\t\t\tmaxDoFLimit,\r\n\t\t\t\ttargetSet,\r\n\t\t\t\trestPoseSet,\r\n\t\t\t\tisClosure,\r\n\t\t\t} = d;\r\n\r\n\t\t\tlet frame;\r\n\t\t\tswitch ( type ) {\r\n\r\n\t\t\t\tcase 'Goal':\r\n\t\t\t\tcase 'Joint':\r\n\t\t\t\t\tframe = type === 'Goal' ? new Goal() : new Joint();\r\n\r\n\t\t\t\t\tframe.setDoF( ...dof );\r\n\t\t\t\t\tframe.dofValues.set( dofValues );\r\n\t\t\t\t\tframe.dofTarget.set( dofTarget );\r\n\t\t\t\t\tframe.dofRestPose.set( dofRestPose );\r\n\t\t\t\t\tframe.minDoFLimit.set( minDoFLimit );\r\n\t\t\t\t\tframe.maxDoFLimit.set( maxDoFLimit );\r\n\r\n\t\t\t\t\tframe.targetSet = targetSet;\r\n\t\t\t\t\tframe.restPoseSet = restPoseSet;\r\n\t\t\t\t\tframe.isClosure = isClosure;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'Link':\r\n\t\t\t\t\tframe = new Link();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tframe.name = name;\r\n\t\t\tframe.position.set( position );\r\n\t\t\tframe.quaternion.set( quaternion );\r\n\t\t\treturn frame;\r\n\r\n\t\t} );\r\n\r\n\t// set the parent and child from the maps\r\n\tfor ( let i = 0; i < frames.length; i ++ ) {\r\n\r\n\t\tconst frame = frames[ i ];\r\n\t\tconst info = data[ i ];\r\n\r\n\t\tframe.parent = frames[ info.parent ] || null;\r\n\t\tframe.children.push( ...info.children.map( i => frames[ i ] ) );\r\n\t\tframe.setMatrixNeedsUpdate();\r\n\r\n\t\tif ( frame.isLink ) {\r\n\r\n\t\t\tframe.closureJoints.push( ...info.closureJoints.map( i => frames[ i ] ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( frame.isJoint ) {\r\n\r\n\t\t\tframe.child = info.child !== null ? frames[ info.child ] : null;\r\n\t\t\tframe.setMatrixDoFNeedsUpdate();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn frames;\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}