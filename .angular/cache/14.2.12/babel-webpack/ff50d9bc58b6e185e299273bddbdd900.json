{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { useShapeUniforms } from './gpgpu_math';\nexport class Im2ColPackedProgram {\n  constructor(outputShape, convInfo) {\n    this.variableNames = ['A'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.customUniforms = [{\n      name: 'inputShape',\n      type: 'ivec4'\n    }, {\n      name: 'pad',\n      type: 'ivec2'\n    }, {\n      name: 'stride',\n      type: 'ivec2'\n    }, {\n      name: 'dilation',\n      type: 'ivec2'\n    }, {\n      name: 'inChannels',\n      type: 'int'\n    }, {\n      name: 'itemsPerBlockRow',\n      type: 'int'\n    }, {\n      name: 'outWidth',\n      type: 'int'\n    }];\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const {\n      dataFormat\n    } = convInfo;\n    const glsl = getGlslDifferences();\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const boundsCheckingSnippet = this.enableShapeUniforms ? 'if(blockIndex < outShape[2] && pos < outShape[1]) {' : `if(blockIndex < ${outputShape[2]} && pos < ${outputShape[1]}) {`;\n    let unrolled = ``;\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        unrolled += `\n          blockIndex = rc.z + ${col};\n          pos = rc.y + ${row};\n\n          ${boundsCheckingSnippet}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${rowDim}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${colDim}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${isChannelsLast}) {\n                  innerDims = vec2(d1, ch);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;\n      }\n    }\n\n    this.userCode = `\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${unrolled}\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n\n}","map":{"version":3,"names":["getGlslDifferences","useShapeUniforms","Im2ColPackedProgram","constructor","outputShape","convInfo","variableNames","packedInputs","packedOutput","customUniforms","name","type","enableShapeUniforms","length","dataFormat","glsl","isChannelsLast","rowDim","colDim","boundsCheckingSnippet","unrolled","row","col","userCode","output"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/im2col_packed_gpu.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { useShapeUniforms } from './gpgpu_math';\nexport class Im2ColPackedProgram {\n    constructor(outputShape, convInfo) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.customUniforms = [\n            { name: 'inputShape', type: 'ivec4' },\n            { name: 'pad', type: 'ivec2' },\n            { name: 'stride', type: 'ivec2' },\n            { name: 'dilation', type: 'ivec2' },\n            { name: 'inChannels', type: 'int' },\n            { name: 'itemsPerBlockRow', type: 'int' },\n            { name: 'outWidth', type: 'int' },\n        ];\n        this.outputShape = outputShape;\n        this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n        const { dataFormat } = convInfo;\n        const glsl = getGlslDifferences();\n        const isChannelsLast = dataFormat === 'channelsLast';\n        const rowDim = isChannelsLast ? 1 : 2;\n        const colDim = isChannelsLast ? 2 : 3;\n        const boundsCheckingSnippet = this.enableShapeUniforms ?\n            'if(blockIndex < outShape[2] && pos < outShape[1]) {' :\n            `if(blockIndex < ${outputShape[2]} && pos < ${outputShape[1]}) {`;\n        let unrolled = ``;\n        for (let row = 0; row <= 1; row++) {\n            for (let col = 0; col <= 1; col++) {\n                unrolled += `\n          blockIndex = rc.z + ${col};\n          pos = rc.y + ${row};\n\n          ${boundsCheckingSnippet}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${rowDim}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${colDim}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${isChannelsLast}) {\n                  innerDims = vec2(d1, ch);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;\n            }\n        }\n        this.userCode = `\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${unrolled}\n\n        ${glsl.output} = result;\n      }\n    `;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,kBAAT,QAAmC,gBAAnC;AACA,SAASC,gBAAT,QAAiC,cAAjC;AACA,OAAO,MAAMC,mBAAN,CAA0B;EAC7BC,WAAW,CAACC,WAAD,EAAcC,QAAd,EAAwB;IAC/B,KAAKC,aAAL,GAAqB,CAAC,GAAD,CAArB;IACA,KAAKC,YAAL,GAAoB,IAApB;IACA,KAAKC,YAAL,GAAoB,IAApB;IACA,KAAKC,cAAL,GAAsB,CAClB;MAAEC,IAAI,EAAE,YAAR;MAAsBC,IAAI,EAAE;IAA5B,CADkB,EAElB;MAAED,IAAI,EAAE,KAAR;MAAeC,IAAI,EAAE;IAArB,CAFkB,EAGlB;MAAED,IAAI,EAAE,QAAR;MAAkBC,IAAI,EAAE;IAAxB,CAHkB,EAIlB;MAAED,IAAI,EAAE,UAAR;MAAoBC,IAAI,EAAE;IAA1B,CAJkB,EAKlB;MAAED,IAAI,EAAE,YAAR;MAAsBC,IAAI,EAAE;IAA5B,CALkB,EAMlB;MAAED,IAAI,EAAE,kBAAR;MAA4BC,IAAI,EAAE;IAAlC,CANkB,EAOlB;MAAED,IAAI,EAAE,UAAR;MAAoBC,IAAI,EAAE;IAA1B,CAPkB,CAAtB;IASA,KAAKP,WAAL,GAAmBA,WAAnB;IACA,KAAKQ,mBAAL,GAA2BX,gBAAgB,CAAC,KAAKG,WAAL,CAAiBS,MAAlB,CAA3C;IACA,MAAM;MAAEC;IAAF,IAAiBT,QAAvB;IACA,MAAMU,IAAI,GAAGf,kBAAkB,EAA/B;IACA,MAAMgB,cAAc,GAAGF,UAAU,KAAK,cAAtC;IACA,MAAMG,MAAM,GAAGD,cAAc,GAAG,CAAH,GAAO,CAApC;IACA,MAAME,MAAM,GAAGF,cAAc,GAAG,CAAH,GAAO,CAApC;IACA,MAAMG,qBAAqB,GAAG,KAAKP,mBAAL,GAC1B,qDAD0B,GAEzB,mBAAkBR,WAAW,CAAC,CAAD,CAAI,aAAYA,WAAW,CAAC,CAAD,CAAI,KAFjE;IAGA,IAAIgB,QAAQ,GAAI,EAAhB;;IACA,KAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,IAAI,CAAzB,EAA4BA,GAAG,EAA/B,EAAmC;MAC/B,KAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,IAAI,CAAzB,EAA4BA,GAAG,EAA/B,EAAmC;QAC/BF,QAAQ,IAAK;AAC7B,gCAAgCE,GAAI;AACpC,yBAAyBD,GAAI;AAC7B;AACA,YAAYF,qBAAsB;AAClC;AACA;AACA;AACA,iCAAiCF,MAAO;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmCC,MAAO;AAC1C;AACA;AACA;AACA,sBAAsBF,cAAe;AACrC;AACA,2BAA2BK,GAAG,GAAG,CAAN,GAAUC,GAAI;AACzC;AACA;AACA;AACA;AACA,2BAA2BD,GAAG,GAAG,CAAN,GAAUC,GAAI;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,SAlCgB;MAmCH;IACJ;;IACD,KAAKC,QAAL,GAAiB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAUH,QAAS;AACnB;AACA,UAAUL,IAAI,CAACS,MAAO;AACtB;AACA,KAbQ;EAcH;;AA9E4B"},"metadata":{},"sourceType":"module"}