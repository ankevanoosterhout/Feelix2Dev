{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { AddN } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Adds a list of `tf.Tensor`s element-wise, each with the same shape and dtype.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * const c = tf.tensor1d([5, 6]);\n *\n * tf.addN([a, b, c]).print();\n * ```\n * @param tensors A list of tensors with the same shape and dtype.\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\n\nfunction addN_(tensors) {\n  util.assert(Array.isArray(tensors), () => 'The argument passed to tf.addN() must be a list of tensors');\n  util.assert(tensors.length >= 1, () => `Must pass at least one tensor to tf.addN(), but got ` + `${tensors.length}`);\n  const $tensors = tensors.map((t, i) => convertToTensor(t, `tensors${i}`, 'addN'));\n  const firstTensor = $tensors[0];\n  $tensors.forEach(t => {\n    if (t.dtype !== firstTensor.dtype) {\n      throw new Error('All tensors passed to tf.addN() must have the same dtype');\n    }\n  });\n  $tensors.forEach(t => {\n    if (!util.arraysEqual(t.shape, firstTensor.shape)) {\n      throw new Error('All tensors passed to tf.addN() must have the same shape');\n    }\n  });\n  const inputs = $tensors;\n  return ENGINE.runKernel(AddN, inputs);\n}\n\nexport const addN = op({\n  addN_\n});","map":{"version":3,"names":["ENGINE","AddN","convertToTensor","util","op","addN_","tensors","assert","Array","isArray","length","$tensors","map","t","i","firstTensor","forEach","dtype","Error","arraysEqual","shape","inputs","runKernel","addN"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/add_n.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { AddN } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Adds a list of `tf.Tensor`s element-wise, each with the same shape and dtype.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * const c = tf.tensor1d([5, 6]);\n *\n * tf.addN([a, b, c]).print();\n * ```\n * @param tensors A list of tensors with the same shape and dtype.\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction addN_(tensors) {\n    util.assert(Array.isArray(tensors), () => 'The argument passed to tf.addN() must be a list of tensors');\n    util.assert(tensors.length >= 1, () => `Must pass at least one tensor to tf.addN(), but got ` +\n        `${tensors.length}`);\n    const $tensors = tensors.map((t, i) => convertToTensor(t, `tensors${i}`, 'addN'));\n    const firstTensor = $tensors[0];\n    $tensors.forEach(t => {\n        if (t.dtype !== firstTensor.dtype) {\n            throw new Error('All tensors passed to tf.addN() must have the same dtype');\n        }\n    });\n    $tensors.forEach(t => {\n        if (!util.arraysEqual(t.shape, firstTensor.shape)) {\n            throw new Error('All tensors passed to tf.addN() must have the same shape');\n        }\n    });\n    const inputs = $tensors;\n    return ENGINE.runKernel(AddN, inputs);\n}\nexport const addN = op({ addN_ });\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,WAAvB;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AACA,SAASC,EAAT,QAAmB,aAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,KAAT,CAAeC,OAAf,EAAwB;EACpBH,IAAI,CAACI,MAAL,CAAYC,KAAK,CAACC,OAAN,CAAcH,OAAd,CAAZ,EAAoC,MAAM,4DAA1C;EACAH,IAAI,CAACI,MAAL,CAAYD,OAAO,CAACI,MAAR,IAAkB,CAA9B,EAAiC,MAAO,sDAAD,GAClC,GAAEJ,OAAO,CAACI,MAAO,EADtB;EAEA,MAAMC,QAAQ,GAAGL,OAAO,CAACM,GAAR,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAUZ,eAAe,CAACW,CAAD,EAAK,UAASC,CAAE,EAAhB,EAAmB,MAAnB,CAArC,CAAjB;EACA,MAAMC,WAAW,GAAGJ,QAAQ,CAAC,CAAD,CAA5B;EACAA,QAAQ,CAACK,OAAT,CAAiBH,CAAC,IAAI;IAClB,IAAIA,CAAC,CAACI,KAAF,KAAYF,WAAW,CAACE,KAA5B,EAAmC;MAC/B,MAAM,IAAIC,KAAJ,CAAU,0DAAV,CAAN;IACH;EACJ,CAJD;EAKAP,QAAQ,CAACK,OAAT,CAAiBH,CAAC,IAAI;IAClB,IAAI,CAACV,IAAI,CAACgB,WAAL,CAAiBN,CAAC,CAACO,KAAnB,EAA0BL,WAAW,CAACK,KAAtC,CAAL,EAAmD;MAC/C,MAAM,IAAIF,KAAJ,CAAU,0DAAV,CAAN;IACH;EACJ,CAJD;EAKA,MAAMG,MAAM,GAAGV,QAAf;EACA,OAAOX,MAAM,CAACsB,SAAP,CAAiBrB,IAAjB,EAAuBoB,MAAvB,CAAP;AACH;;AACD,OAAO,MAAME,IAAI,GAAGnB,EAAE,CAAC;EAAEC;AAAF,CAAD,CAAf"},"metadata":{},"sourceType":"module"}