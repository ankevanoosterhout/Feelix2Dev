{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\n/**\n * Example shader code for\n * `mirrorPad(tf.tensor1d([1, 2, 3], 'int32'), [[2, 2]], 'reflect')`\n * ```\n *    const int start = int(2);\n *    const int end = int(5);\n *\n *    void main() {\n *       int outputLoc = getOutputCoords();\n *       vec4 result = vec4(0.);\n *\n *       int rc = outputLoc;\n *\n *       int source = rc;\n *       if (source < start) {\n *         source = start * 2 - source - 0;\n *       } else if (source >= end) {\n *         source = (end - 1) * 2 - source + 0;\n *       }\n *       source -= start;\n *\n *       result[0] = getChannel(getX(source), source);\n *       rc += 1;\n *       if(rc < 6) {\n *          int source = rc;\n *          if (source < start) {\n *            source = start * 2 - source - 0;\n *          } else if (source >= end) {\n *            source = (end - 1) * 2 - source + 0;\n *          }\n *          source -= start;\n *\n *         result[1] = getChannel(getX(source), source);\n *       }\n *\n *       setOutput(result);\n *     }\n * ```\n */\n\nexport class MirrorPadPackedProgram {\n  constructor(xShape, paddings, mode) {\n    this.variableNames = ['x'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outputShape = paddings.map((p, i) => p[0]\n    /* beforePad */\n    + xShape[i] + p[1]\n    /* afterPad */\n    );\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims = rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n    const offset = mode === 'reflect' ? 0 : 1;\n    let mainLoop = '';\n\n    if (rank === 1) {\n      const padSetup = `\n        ${dtype} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${offset};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${offset};\n        }\n        source -= start;\n      `;\n      mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    } else {\n      const padSetup = `\n        ${dtype} source = rc;\n        ${dtype} lt = ${dtype}(lessThan(source, start));\n        ${dtype} gte = ${dtype}(greaterThanEqual(source, end));\n        ${dtype} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${offset}) +\n                gte * ((end - 1) * 2 - source + ${offset});\n        source -= start;\n      `;\n      mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n        rc = outputLoc;\n        ${coords[rank - 2]} += 1;\n        if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {\n          ${padSetup}\n          result[2] = getChannel(getX(${source.join()}), ${innerDims});\n          ${coords[rank - 1]} += 1;\n          if(${cLimit}) {\n            ${padSetup}\n            result[3] = getChannel(getX(${source.join()}), ${innerDims});\n          }\n        }\n      `;\n    }\n\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n\n}","map":{"version":3,"names":["getChannels","getCoordsDataType","MirrorPadPackedProgram","constructor","xShape","paddings","mode","variableNames","packedInputs","packedOutput","outputShape","map","p","i","rank","length","dtype","start","join","end","coords","source","cLimit","innerDims","slice","offset","mainLoop","padSetup","userCode"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/mirror_pad_packed_gpu.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\n/**\n * Example shader code for\n * `mirrorPad(tf.tensor1d([1, 2, 3], 'int32'), [[2, 2]], 'reflect')`\n * ```\n *    const int start = int(2);\n *    const int end = int(5);\n *\n *    void main() {\n *       int outputLoc = getOutputCoords();\n *       vec4 result = vec4(0.);\n *\n *       int rc = outputLoc;\n *\n *       int source = rc;\n *       if (source < start) {\n *         source = start * 2 - source - 0;\n *       } else if (source >= end) {\n *         source = (end - 1) * 2 - source + 0;\n *       }\n *       source -= start;\n *\n *       result[0] = getChannel(getX(source), source);\n *       rc += 1;\n *       if(rc < 6) {\n *          int source = rc;\n *          if (source < start) {\n *            source = start * 2 - source - 0;\n *          } else if (source >= end) {\n *            source = (end - 1) * 2 - source + 0;\n *          }\n *          source -= start;\n *\n *         result[1] = getChannel(getX(source), source);\n *       }\n *\n *       setOutput(result);\n *     }\n * ```\n */\nexport class MirrorPadPackedProgram {\n    constructor(xShape, paddings, mode) {\n        this.variableNames = ['x'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n        const rank = xShape.length;\n        const dtype = getCoordsDataType(rank);\n        const start = paddings.map(p => p[0]).join(',');\n        const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n        const coords = getChannels('rc', rank);\n        const source = getChannels('source', rank);\n        const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n        const innerDims = rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n        const offset = mode === 'reflect' ? 0 : 1;\n        let mainLoop = '';\n        if (rank === 1) {\n            const padSetup = `\n        ${dtype} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${offset};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${offset};\n        }\n        source -= start;\n      `;\n            mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n        }\n        else {\n            const padSetup = `\n        ${dtype} source = rc;\n        ${dtype} lt = ${dtype}(lessThan(source, start));\n        ${dtype} gte = ${dtype}(greaterThanEqual(source, end));\n        ${dtype} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${offset}) +\n                gte * ((end - 1) * 2 - source + ${offset});\n        source -= start;\n      `;\n            mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n        rc = outputLoc;\n        ${coords[rank - 2]} += 1;\n        if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {\n          ${padSetup}\n          result[2] = getChannel(getX(${source.join()}), ${innerDims});\n          ${coords[rank - 1]} += 1;\n          if(${cLimit}) {\n            ${padSetup}\n            result[3] = getChannel(getX(${source.join()}), ${innerDims});\n          }\n        }\n      `;\n        }\n        this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}