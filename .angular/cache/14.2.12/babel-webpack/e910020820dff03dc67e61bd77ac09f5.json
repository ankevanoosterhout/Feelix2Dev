{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { PadV2, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function padV2(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    paddings,\n    constantValue\n  } = attrs;\n  assertNotComplex(x, 'pad');\n  const outShape = paddings.map((p, i) => p[0]\n  /* beforePad */\n  + x.shape[i] + p[1]\n  /* afterPad */\n  );\n  const start = paddings.map(p => p[0]);\n  const xVals = backend.data.get(x.dataId).values;\n  const xSize = util.sizeFromShape(x.shape);\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals = util.getTypedArrayFromDType(x.dtype, resultSize);\n\n  if (constantValue !== 0) {\n    resVals.fill(constantValue);\n  }\n\n  for (let i = 0; i < xSize; i++) {\n    const coords = util.indexToLoc(i, xRank, xStrides);\n    const outCoords = coords.map((c, i) => c + start[i]);\n    const outIndex = util.locToIndex(outCoords, resultRank, resultStrides);\n    resVals[outIndex] = xVals[i];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n  return {\n    dataId: outId,\n    shape: outShape,\n    dtype: x.dtype\n  };\n}\nexport const padV2Config = {\n  kernelName: PadV2,\n  backendName: 'cpu',\n  kernelFunc: padV2\n};","map":{"version":3,"names":["PadV2","util","assertNotComplex","padV2","args","inputs","backend","attrs","x","paddings","constantValue","outShape","map","p","i","shape","start","xVals","data","get","dataId","values","xSize","sizeFromShape","xRank","length","xStrides","computeStrides","resultSize","resultRank","resultStrides","resVals","getTypedArrayFromDType","dtype","fill","coords","indexToLoc","outCoords","c","outIndex","locToIndex","outId","write","padV2Config","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/PadV2.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { PadV2, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function padV2(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { paddings, constantValue } = attrs;\n    assertNotComplex(x, 'pad');\n    const outShape = paddings.map((p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n    const start = paddings.map(p => p[0]);\n    const xVals = backend.data.get(x.dataId).values;\n    const xSize = util.sizeFromShape(x.shape);\n    const xRank = x.shape.length;\n    const xStrides = util.computeStrides(x.shape);\n    const resultSize = util.sizeFromShape(outShape);\n    const resultRank = outShape.length;\n    const resultStrides = util.computeStrides(outShape);\n    const resVals = util.getTypedArrayFromDType(x.dtype, resultSize);\n    if (constantValue !== 0) {\n        resVals.fill(constantValue);\n    }\n    for (let i = 0; i < xSize; i++) {\n        const coords = util.indexToLoc(i, xRank, xStrides);\n        const outCoords = coords.map((c, i) => c + start[i]);\n        const outIndex = util.locToIndex(outCoords, resultRank, resultStrides);\n        resVals[outIndex] = xVals[i];\n    }\n    const outId = backend.write(resVals, outShape, x.dtype);\n    return { dataId: outId, shape: outShape, dtype: x.dtype };\n}\nexport const padV2Config = {\n    kernelName: PadV2,\n    backendName: 'cpu',\n    kernelFunc: padV2\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,KAAT,EAAgBC,IAAhB,QAA4B,uBAA5B;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,OAAO,SAASC,KAAT,CAAeC,IAAf,EAAqB;EACxB,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BH,IAAnC;EACA,MAAM;IAAEI;EAAF,IAAQH,MAAd;EACA,MAAM;IAAEI,QAAF;IAAYC;EAAZ,IAA8BH,KAApC;EACAL,gBAAgB,CAACM,CAAD,EAAI,KAAJ,CAAhB;EACA,MAAMG,QAAQ,GAAGF,QAAQ,CAACG,GAAT,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAAC,CAAD;EAAI;EAAL,EAAuBL,CAAC,CAACO,KAAF,CAAQD,CAAR,CAAvB,GAAoCD,CAAC,CAAC,CAAD;EAAI;EAAhE,CAAjB;EACA,MAAMG,KAAK,GAAGP,QAAQ,CAACG,GAAT,CAAaC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAnB,CAAd;EACA,MAAMI,KAAK,GAAGX,OAAO,CAACY,IAAR,CAAaC,GAAb,CAAiBX,CAAC,CAACY,MAAnB,EAA2BC,MAAzC;EACA,MAAMC,KAAK,GAAGrB,IAAI,CAACsB,aAAL,CAAmBf,CAAC,CAACO,KAArB,CAAd;EACA,MAAMS,KAAK,GAAGhB,CAAC,CAACO,KAAF,CAAQU,MAAtB;EACA,MAAMC,QAAQ,GAAGzB,IAAI,CAAC0B,cAAL,CAAoBnB,CAAC,CAACO,KAAtB,CAAjB;EACA,MAAMa,UAAU,GAAG3B,IAAI,CAACsB,aAAL,CAAmBZ,QAAnB,CAAnB;EACA,MAAMkB,UAAU,GAAGlB,QAAQ,CAACc,MAA5B;EACA,MAAMK,aAAa,GAAG7B,IAAI,CAAC0B,cAAL,CAAoBhB,QAApB,CAAtB;EACA,MAAMoB,OAAO,GAAG9B,IAAI,CAAC+B,sBAAL,CAA4BxB,CAAC,CAACyB,KAA9B,EAAqCL,UAArC,CAAhB;;EACA,IAAIlB,aAAa,KAAK,CAAtB,EAAyB;IACrBqB,OAAO,CAACG,IAAR,CAAaxB,aAAb;EACH;;EACD,KAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,KAApB,EAA2BR,CAAC,EAA5B,EAAgC;IAC5B,MAAMqB,MAAM,GAAGlC,IAAI,CAACmC,UAAL,CAAgBtB,CAAhB,EAAmBU,KAAnB,EAA0BE,QAA1B,CAAf;IACA,MAAMW,SAAS,GAAGF,MAAM,CAACvB,GAAP,CAAW,CAAC0B,CAAD,EAAIxB,CAAJ,KAAUwB,CAAC,GAAGtB,KAAK,CAACF,CAAD,CAA9B,CAAlB;IACA,MAAMyB,QAAQ,GAAGtC,IAAI,CAACuC,UAAL,CAAgBH,SAAhB,EAA2BR,UAA3B,EAAuCC,aAAvC,CAAjB;IACAC,OAAO,CAACQ,QAAD,CAAP,GAAoBtB,KAAK,CAACH,CAAD,CAAzB;EACH;;EACD,MAAM2B,KAAK,GAAGnC,OAAO,CAACoC,KAAR,CAAcX,OAAd,EAAuBpB,QAAvB,EAAiCH,CAAC,CAACyB,KAAnC,CAAd;EACA,OAAO;IAAEb,MAAM,EAAEqB,KAAV;IAAiB1B,KAAK,EAAEJ,QAAxB;IAAkCsB,KAAK,EAAEzB,CAAC,CAACyB;EAA3C,CAAP;AACH;AACD,OAAO,MAAMU,WAAW,GAAG;EACvBC,UAAU,EAAE5C,KADW;EAEvB6C,WAAW,EAAE,KAFU;EAGvBC,UAAU,EAAE3C;AAHW,CAApB"},"metadata":{},"sourceType":"module"}