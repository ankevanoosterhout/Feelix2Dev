{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, Multiply } from '@tensorflow/tfjs-core';\nimport * as binaryop_complex_gpu from '../binaryop_complex_gpu';\nimport { BinaryOpComplexProgram } from '../binaryop_complex_gpu';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nimport { multiplyImplCPU as cpuMultiply } from '../kernel_utils/shared';\nimport { complex } from './Complex';\nconst MUL = 'return a * b;';\nexport function multiply(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    a,\n    b\n  } = inputs;\n  const dtype = backend_util.upcastType(a.dtype, b.dtype);\n\n  if (a.dtype === 'complex64') {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n    const realProgram = new BinaryOpComplexProgram(binaryop_complex_gpu.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);\n    const imagProgram = new BinaryOpComplexProgram(binaryop_complex_gpu.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);\n    const inputs = [{\n      dataId: aData.complexTensorInfos.real.dataId,\n      dtype: aData.complexTensorInfos.real.dtype,\n      shape: a.shape\n    }, {\n      dataId: aData.complexTensorInfos.imag.dataId,\n      dtype: aData.complexTensorInfos.imag.dtype,\n      shape: a.shape\n    }, {\n      dataId: bData.complexTensorInfos.real.dataId,\n      dtype: bData.complexTensorInfos.real.dtype,\n      shape: b.shape\n    }, {\n      dataId: bData.complexTensorInfos.imag.dataId,\n      dtype: bData.complexTensorInfos.imag.dtype,\n      shape: b.shape\n    }];\n    const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n    const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n    const complexOutput = complex({\n      inputs: {\n        real: realPart,\n        imag: imagPart\n      },\n      backend\n    });\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(imagPart); // TODO(annxingyuan): CPU forwarding for complex inputs.\n\n    return complexOutput;\n  }\n\n  if (backend.shouldExecuteOnCPU([a, b])) {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n    const [outValues, outShape] = cpuMultiply(a.shape, b.shape, aData.values, bData.values, dtype);\n    const out = backend.makeTensorInfo(outShape, dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n    return out;\n  }\n\n  let program;\n\n  if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n    program = new BinaryOpPackedProgram(MUL, a.shape, b.shape);\n  } else {\n    program = new BinaryOpProgram(MUL, a.shape, b.shape);\n  }\n\n  return backend.runWebGLProgram(program, [a, b], dtype);\n}\nexport const multiplyConfig = {\n  kernelName: Multiply,\n  backendName: 'webgl',\n  kernelFunc: multiply\n};","map":{"version":3,"names":["backend_util","env","Multiply","binaryop_complex_gpu","BinaryOpComplexProgram","BinaryOpProgram","BinaryOpPackedProgram","multiplyImplCPU","cpuMultiply","complex","MUL","multiply","args","inputs","backend","a","b","dtype","upcastType","aData","texData","get","dataId","bData","realProgram","COMPLEX_MULTIPLY","REAL","shape","imagProgram","IMAG","complexTensorInfos","real","imag","realPart","runWebGLProgram","imagPart","complexOutput","disposeIntermediateTensorInfo","shouldExecuteOnCPU","outValues","outShape","values","out","makeTensorInfo","outData","program","getBool","multiplyConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Multiply.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, Multiply } from '@tensorflow/tfjs-core';\nimport * as binaryop_complex_gpu from '../binaryop_complex_gpu';\nimport { BinaryOpComplexProgram } from '../binaryop_complex_gpu';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nimport { multiplyImplCPU as cpuMultiply } from '../kernel_utils/shared';\nimport { complex } from './Complex';\nconst MUL = 'return a * b;';\nexport function multiply(args) {\n    const { inputs, backend } = args;\n    const { a, b } = inputs;\n    const dtype = backend_util.upcastType(a.dtype, b.dtype);\n    if (a.dtype === 'complex64') {\n        const aData = backend.texData.get(a.dataId);\n        const bData = backend.texData.get(b.dataId);\n        const realProgram = new BinaryOpComplexProgram(binaryop_complex_gpu.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);\n        const imagProgram = new BinaryOpComplexProgram(binaryop_complex_gpu.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);\n        const inputs = [\n            {\n                dataId: aData.complexTensorInfos.real.dataId,\n                dtype: aData.complexTensorInfos.real.dtype,\n                shape: a.shape\n            },\n            {\n                dataId: aData.complexTensorInfos.imag.dataId,\n                dtype: aData.complexTensorInfos.imag.dtype,\n                shape: a.shape\n            },\n            {\n                dataId: bData.complexTensorInfos.real.dataId,\n                dtype: bData.complexTensorInfos.real.dtype,\n                shape: b.shape\n            },\n            {\n                dataId: bData.complexTensorInfos.imag.dataId,\n                dtype: bData.complexTensorInfos.imag.dtype,\n                shape: b.shape\n            }\n        ];\n        const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n        const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n        const complexOutput = complex({ inputs: { real: realPart, imag: imagPart }, backend });\n        backend.disposeIntermediateTensorInfo(realPart);\n        backend.disposeIntermediateTensorInfo(imagPart);\n        // TODO(annxingyuan): CPU forwarding for complex inputs.\n        return complexOutput;\n    }\n    if (backend.shouldExecuteOnCPU([a, b])) {\n        const aData = backend.texData.get(a.dataId);\n        const bData = backend.texData.get(b.dataId);\n        const [outValues, outShape] = cpuMultiply(a.shape, b.shape, aData.values, bData.values, dtype);\n        const out = backend.makeTensorInfo(outShape, dtype);\n        const outData = backend.texData.get(out.dataId);\n        outData.values = outValues;\n        return out;\n    }\n    let program;\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n        program = new BinaryOpPackedProgram(MUL, a.shape, b.shape);\n    }\n    else {\n        program = new BinaryOpProgram(MUL, a.shape, b.shape);\n    }\n    return backend.runWebGLProgram(program, [a, b], dtype);\n}\nexport const multiplyConfig = {\n    kernelName: Multiply,\n    backendName: 'webgl',\n    kernelFunc: multiply\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}