{"ast":null,"code":"import { mat4, quat, vec3 } from 'gl-matrix';\nimport { quaternionSquaredDistance } from './utils/quaternion.js';\nimport { RAD2DEG } from './utils/constants.js';\nconst tempInverse = new Float32Array(16);\nconst tempMatrix = new Float32Array(16);\nconst tempQuat = new Float32Array(4);\nconst tempPos = new Float32Array(3);\nconst sharedTraversedChildren = new Set();\nconst sharedTraverseArray = [];\nlet traverseVariablesInUse = false;\nexport class Frame {\n  constructor() {\n    this.name = '';\n    this.quaternion = new Float32Array([0, 0, 0, 1]);\n    this.position = new Float32Array(3);\n    this.matrix = new Float32Array(16);\n    mat4.identity(this.matrix);\n    this.matrixWorld = new Float32Array(16);\n    mat4.identity(this.matrixWorld);\n    this.matrixNeedsUpdate = false;\n    this.matrixWorldNeedsUpdate = false;\n    this.parent = null;\n    this.children = [];\n  }\n\n  setPosition(...args) {\n    const position = this.position;\n\n    if (vec3.sqrDist(position, args) > 1e-10) {\n      position[0] = args[0];\n      position[1] = args[1];\n      position[2] = args[2];\n      this.setMatrixNeedsUpdate();\n    }\n  }\n\n  setEuler(x, y, z) {\n    quat.fromEuler(tempQuat, x * RAD2DEG, y * RAD2DEG, z * RAD2DEG);\n    this.setQuaternion(...tempQuat);\n  }\n\n  setQuaternion(...args) {\n    const quaternion = this.quaternion;\n\n    if (quaternionSquaredDistance(quaternion, args) > 1e-10) {\n      quaternion[0] = args[0];\n      quaternion[1] = args[1];\n      quaternion[2] = args[2];\n      quaternion[3] = args[3];\n      this.setMatrixNeedsUpdate();\n    }\n  }\n\n  setWorldPosition(x, y, z) {\n    const parent = this.parent;\n    tempPos[0] = x;\n    tempPos[1] = y;\n    tempPos[2] = z;\n\n    if (parent) {\n      parent.updateMatrixWorld();\n      mat4.invert(tempInverse, parent.matrixWorld);\n      vec3.transformMat4(tempPos, tempPos, tempInverse);\n    }\n\n    this.setPosition(...tempPos);\n  }\n\n  setWorldEuler(x, y, z) {\n    quat.fromEuler(tempQuat, x * RAD2DEG, y * RAD2DEG, z * RAD2DEG);\n    this.setWorldQuaternion(...tempQuat);\n  }\n\n  setWorldQuaternion(x, y, z, w) {\n    const parent = this;\n    tempQuat[0] = x;\n    tempQuat[1] = y;\n    tempQuat[2] = z;\n    tempQuat[3] = w;\n\n    if (parent) {\n      parent.updateMatrixWorld();\n      mat4.invert(tempInverse, parent.matrixWorld);\n      mat4.fromQuat(tempMatrix, tempQuat);\n      mat4.multiply(tempMatrix, tempInverse, tempMatrix);\n      mat4.getRotation(tempQuat, tempMatrix);\n    }\n\n    this.setQuaternion(...tempQuat);\n  }\n\n  getWorldPosition(arr) {\n    this.updateMatrixWorld();\n    mat4.getTranslation(arr, this.matrixWorld);\n  }\n\n  getWorldQuaternion(arr) {\n    this.updateMatrixWorld();\n    mat4.getRotation(arr, this.matrixWorld);\n  }\n\n  traverseParents(cb) {\n    // Use the shared variables if they're not already in use to avoid\n    // memory allocation\n    let traversedChildren;\n    const originalVariablesInUse = traverseVariablesInUse;\n\n    if (traverseVariablesInUse) {\n      traversedChildren = new Set();\n    } else {\n      traversedChildren = sharedTraversedChildren;\n      traversedChildren.clear();\n    }\n\n    traverseVariablesInUse = true;\n    let curr = this.parent;\n\n    while (curr) {\n      if (traversedChildren.has(curr)) {\n        break;\n      }\n\n      const stop = cb(curr);\n\n      if (stop) {\n        return;\n      }\n\n      traversedChildren.add(curr);\n      curr = curr.parent;\n    }\n\n    traverseVariablesInUse = originalVariablesInUse;\n    traversedChildren.clear();\n  }\n\n  traverse(cb) {\n    // Use the shared variables if they're not already in use to avoid\n    // memory allocation\n    const originalVariablesInUse = traverseVariablesInUse;\n    let traversedChildren;\n    let stack;\n\n    if (traverseVariablesInUse) {\n      traversedChildren = new Set();\n      stack = [this];\n    } else {\n      traversedChildren = sharedTraversedChildren;\n      traversedChildren.clear();\n      stack = sharedTraverseArray;\n      stack[0] = this;\n    }\n\n    traverseVariablesInUse = true;\n    let i = 0;\n    let tot = 1;\n\n    while (i < tot) {\n      const curr = stack[i];\n      const stop = cb(curr);\n\n      if (!stop) {\n        const children = curr.children;\n\n        for (let c = 0, l = children.length; c < l; c++) {\n          const child = children[c];\n\n          if (traversedChildren.has(child)) {\n            continue;\n          } else {\n            traversedChildren.add(child);\n            stack[tot] = child;\n            tot++;\n          }\n        }\n      }\n\n      i++;\n    }\n\n    traverseVariablesInUse = originalVariablesInUse;\n    traversedChildren.clear();\n    stack.fill(null);\n  }\n\n  find(cb) {\n    let result = null;\n    this.traverse(c => {\n      if (result) {\n        return true;\n      } else if (cb(c)) {\n        result = c;\n        return true;\n      }\n    });\n    return result;\n  }\n\n  addChild(child) {\n    if (child.parent) {\n      throw new Error('Frame: Added child must not already have a parent.');\n    }\n\n    if (child === this) {\n      throw new Error('Frame: Frame cannot be added as a child to itself.');\n    }\n\n    this.traverseParents(p => {\n      if (p === child) {\n        throw new Error('Frame: Added child is an ancestor of this Frame. Use Joint.makeClosure instead.');\n      }\n    });\n    child.parent = this;\n    this.children.push(child);\n    child.setMatrixWorldNeedsUpdate();\n  }\n\n  removeChild(child) {\n    if (child.parent !== this) {\n      throw new Error('Frame: Child to be removed is not a child of this Frame.');\n    }\n\n    const index = this.children.indexOf(child);\n    this.children.splice(index, 1);\n    child.parent = null;\n    child.setMatrixWorldNeedsUpdate();\n  }\n\n  attachChild(child) {\n    this.updateMatrixWorld();\n    child.updateMatrixWorld();\n    this.addChild(child);\n    mat4.invert(tempInverse, this.matrixWorld);\n    mat4.multiply(child.matrix, tempInverse, child.matrixWorld);\n    mat4.getTranslation(child.position, child.matrix);\n    mat4.getRotation(child.quaternion, child.matrix);\n  }\n\n  detachChild(child) {\n    this.updateMatrixWorld();\n    child.updateMatrixWorld();\n    this.removeChild(child);\n    mat4.copy(child.matrix, child.matrixWorld);\n    mat4.getTranslation(child.position, child.matrix);\n    mat4.getRotation(child.quaternion, child.matrix);\n  }\n\n  computeMatrixWorld() {\n    if (this.parent) {\n      mat4.multiply(this.matrixWorld, this.parent.matrixWorld, this.matrix);\n    } else {\n      mat4.copy(this.matrixWorld, this.matrix);\n    }\n  }\n\n  setMatrixNeedsUpdate() {\n    if (this.matrixNeedsUpdate === false) {\n      this.matrixNeedsUpdate = true;\n      this.setMatrixWorldNeedsUpdate();\n    }\n  }\n\n  setMatrixWorldNeedsUpdate() {\n    this.traverse(c => {\n      if (c.matrixWorldNeedsUpdate) {\n        return true;\n      }\n\n      c.matrixWorldNeedsUpdate = true;\n      return false;\n    });\n  }\n\n  updateMatrix() {\n    if (this.matrixNeedsUpdate) {\n      mat4.fromRotationTranslation(this.matrix, this.quaternion, this.position);\n      this.matrixNeedsUpdate = false;\n    }\n  }\n\n  updateMatrixWorld(updateChildren = false) {\n    const {\n      parent\n    } = this;\n\n    if (this.matrixWorldNeedsUpdate) {\n      // Climb the parent chain and update parent matrices\n      if (parent && parent.matrixWorldNeedsUpdate) {\n        parent.updateMatrixWorld(false);\n      } // Update this matrix\n\n\n      this.updateMatrix(); // Update this matrix world and dirty children\n\n      this.computeMatrixWorld();\n      this.matrixWorldNeedsUpdate = false;\n    } // Update child matrices\n\n\n    if (updateChildren) {\n      this.traverse(c => {\n        if (this !== c) {\n          c.updateMatrixWorld(false);\n        }\n      });\n    }\n  }\n\n}","map":{"version":3,"names":["mat4","quat","vec3","quaternionSquaredDistance","RAD2DEG","tempInverse","Float32Array","tempMatrix","tempQuat","tempPos","sharedTraversedChildren","Set","sharedTraverseArray","traverseVariablesInUse","Frame","constructor","name","quaternion","position","matrix","identity","matrixWorld","matrixNeedsUpdate","matrixWorldNeedsUpdate","parent","children","setPosition","args","sqrDist","setMatrixNeedsUpdate","setEuler","x","y","z","fromEuler","setQuaternion","setWorldPosition","updateMatrixWorld","invert","transformMat4","setWorldEuler","setWorldQuaternion","w","fromQuat","multiply","getRotation","getWorldPosition","arr","getTranslation","getWorldQuaternion","traverseParents","cb","traversedChildren","originalVariablesInUse","clear","curr","has","stop","add","traverse","stack","i","tot","c","l","length","child","fill","find","result","addChild","Error","p","push","setMatrixWorldNeedsUpdate","removeChild","index","indexOf","splice","attachChild","detachChild","copy","computeMatrixWorld","updateMatrix","fromRotationTranslation","updateChildren"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/closed-chain-ik/src/core/Frame.js"],"sourcesContent":["import { mat4, quat, vec3 } from 'gl-matrix';\r\nimport { quaternionSquaredDistance } from './utils/quaternion.js';\r\nimport { RAD2DEG } from './utils/constants.js';\r\n\r\nconst tempInverse = new Float32Array( 16 );\r\nconst tempMatrix = new Float32Array( 16 );\r\nconst tempQuat = new Float32Array( 4 );\r\nconst tempPos = new Float32Array( 3 );\r\nconst sharedTraversedChildren = new Set();\r\nconst sharedTraverseArray = [];\r\nlet traverseVariablesInUse = false;\r\n\r\nexport class Frame {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.name = '';\r\n\r\n\t\tthis.quaternion = new Float32Array( [ 0, 0, 0, 1 ] );\r\n\t\tthis.position = new Float32Array( 3 );\r\n\r\n\t\tthis.matrix = new Float32Array( 16 );\r\n\t\tmat4.identity( this.matrix );\r\n\r\n\t\tthis.matrixWorld = new Float32Array( 16 );\r\n\t\tmat4.identity( this.matrixWorld );\r\n\r\n\t\tthis.matrixNeedsUpdate = false;\r\n\t\tthis.matrixWorldNeedsUpdate = false;\r\n\r\n\t\tthis.parent = null;\r\n\t\tthis.children = [];\r\n\r\n\t}\r\n\r\n\tsetPosition( ...args ) {\r\n\r\n\t\tconst position = this.position;\r\n\r\n\t\tif ( vec3.sqrDist( position, args ) > 1e-10 ) {\r\n\r\n\t\t\tposition[ 0 ] = args[ 0 ];\r\n\t\t\tposition[ 1 ] = args[ 1 ];\r\n\t\t\tposition[ 2 ] = args[ 2 ];\r\n\t\t\tthis.setMatrixNeedsUpdate();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetEuler( x, y, z ) {\r\n\r\n\t\tquat.fromEuler( tempQuat, x * RAD2DEG, y * RAD2DEG, z * RAD2DEG );\r\n\t\tthis.setQuaternion( ...tempQuat );\r\n\r\n\t}\r\n\r\n\tsetQuaternion( ...args ) {\r\n\r\n\t\tconst quaternion = this.quaternion;\r\n\t\tif ( quaternionSquaredDistance( quaternion, args ) > 1e-10 ) {\r\n\r\n\t\t\tquaternion[ 0 ] = args[ 0 ];\r\n\t\t\tquaternion[ 1 ] = args[ 1 ];\r\n\t\t\tquaternion[ 2 ] = args[ 2 ];\r\n\t\t\tquaternion[ 3 ] = args[ 3 ];\r\n\t\t\tthis.setMatrixNeedsUpdate();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetWorldPosition( x, y, z ) {\r\n\r\n\t\tconst parent = this.parent;\r\n\r\n\t\ttempPos[ 0 ] = x;\r\n\t\ttempPos[ 1 ] = y;\r\n\t\ttempPos[ 2 ] = z;\r\n\r\n\t\tif ( parent ) {\r\n\r\n\t\t\tparent.updateMatrixWorld();\r\n\t\t\tmat4.invert( tempInverse, parent.matrixWorld );\r\n\t\t\tvec3.transformMat4( tempPos, tempPos, tempInverse );\r\n\r\n\t\t}\r\n\r\n\t\tthis.setPosition( ...tempPos );\r\n\r\n\t}\r\n\r\n\tsetWorldEuler( x, y, z ) {\r\n\r\n\t\tquat.fromEuler( tempQuat, x * RAD2DEG, y * RAD2DEG, z * RAD2DEG );\r\n\t\tthis.setWorldQuaternion( ...tempQuat );\r\n\r\n\t}\r\n\r\n\tsetWorldQuaternion( x, y, z, w ) {\r\n\r\n\t\tconst parent = this;\r\n\r\n\t\ttempQuat[ 0 ] = x;\r\n\t\ttempQuat[ 1 ] = y;\r\n\t\ttempQuat[ 2 ] = z;\r\n\t\ttempQuat[ 3 ] = w;\r\n\r\n\t\tif ( parent ) {\r\n\r\n\t\t\tparent.updateMatrixWorld();\r\n\t\t\tmat4.invert( tempInverse, parent.matrixWorld );\r\n\t\t\tmat4.fromQuat( tempMatrix, tempQuat );\r\n\t\t\tmat4.multiply( tempMatrix, tempInverse, tempMatrix );\r\n\t\t\tmat4.getRotation( tempQuat, tempMatrix );\r\n\r\n\t\t}\r\n\r\n\t\tthis.setQuaternion( ...tempQuat );\r\n\r\n\t}\r\n\r\n\tgetWorldPosition( arr ) {\r\n\r\n\t\tthis.updateMatrixWorld();\r\n\t\tmat4.getTranslation( arr, this.matrixWorld );\r\n\r\n\t}\r\n\r\n\tgetWorldQuaternion( arr ) {\r\n\r\n\t\tthis.updateMatrixWorld();\r\n\t\tmat4.getRotation( arr, this.matrixWorld );\r\n\r\n\t}\r\n\r\n\ttraverseParents( cb ) {\r\n\r\n\t\t// Use the shared variables if they're not already in use to avoid\r\n\t\t// memory allocation\r\n\t\tlet traversedChildren;\r\n\t\tconst originalVariablesInUse = traverseVariablesInUse;\r\n\t\tif ( traverseVariablesInUse ) {\r\n\r\n\t\t\ttraversedChildren = new Set();\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttraversedChildren = sharedTraversedChildren;\r\n\t\t\ttraversedChildren.clear();\r\n\r\n\t\t}\r\n\r\n\t\ttraverseVariablesInUse = true;\r\n\r\n\t\tlet curr = this.parent;\r\n\t\twhile ( curr ) {\r\n\r\n\t\t\tif ( traversedChildren.has( curr ) ) {\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst stop = cb( curr );\r\n\t\t\tif ( stop ) {\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttraversedChildren.add( curr );\r\n\t\t\tcurr = curr.parent;\r\n\r\n\t\t}\r\n\r\n\t\ttraverseVariablesInUse = originalVariablesInUse;\r\n\t\ttraversedChildren.clear();\r\n\r\n\t}\r\n\r\n\ttraverse( cb ) {\r\n\r\n\t\t// Use the shared variables if they're not already in use to avoid\r\n\t\t// memory allocation\r\n\t\tconst originalVariablesInUse = traverseVariablesInUse;\r\n\t\tlet traversedChildren;\r\n\t\tlet stack;\r\n\t\tif ( traverseVariablesInUse ) {\r\n\r\n\t\t\ttraversedChildren = new Set();\r\n\t\t\tstack = [ this ];\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttraversedChildren = sharedTraversedChildren;\r\n\t\t\ttraversedChildren.clear();\r\n\r\n\t\t\tstack = sharedTraverseArray;\r\n\t\t\tstack[ 0 ] = this;\r\n\r\n\t\t}\r\n\r\n\t\ttraverseVariablesInUse = true;\r\n\r\n\t\tlet i = 0;\r\n\t\tlet tot = 1;\r\n\t\twhile ( i < tot ) {\r\n\r\n\t\t\tconst curr = stack[ i ];\r\n\t\t\tconst stop = cb( curr );\r\n\t\t\tif ( ! stop ) {\r\n\r\n\t\t\t\tconst children = curr.children;\r\n\t\t\t\tfor ( let c = 0, l = children.length; c < l; c ++ ) {\r\n\r\n\t\t\t\t\tconst child = children[ c ];\r\n\t\t\t\t\tif ( traversedChildren.has( child ) ) {\r\n\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\ttraversedChildren.add( child );\r\n\t\t\t\t\t\tstack[ tot ] = child;\r\n\t\t\t\t\t\ttot ++;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\ti ++;\r\n\r\n\t\t}\r\n\r\n\t\ttraverseVariablesInUse = originalVariablesInUse;\r\n\t\ttraversedChildren.clear();\r\n\t\tstack.fill( null );\r\n\r\n\t}\r\n\r\n\tfind( cb ) {\r\n\r\n\t\tlet result = null;\r\n\t\tthis.traverse( c => {\r\n\r\n\t\t\tif ( result ) {\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t} else if ( cb( c ) ) {\r\n\r\n\t\t\t\tresult = c;\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\taddChild( child ) {\r\n\r\n\t\tif ( child.parent ) {\r\n\r\n\t\t\tthrow new Error( 'Frame: Added child must not already have a parent.' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( child === this ) {\r\n\r\n\t\t\tthrow new Error( 'Frame: Frame cannot be added as a child to itself.' );\r\n\r\n\t\t}\r\n\r\n\t\tthis.traverseParents( p => {\r\n\r\n\t\t\tif ( p === child ) {\r\n\r\n\t\t\t\tthrow new Error( 'Frame: Added child is an ancestor of this Frame. Use Joint.makeClosure instead.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t\tchild.parent = this;\r\n\t\tthis.children.push( child );\r\n\r\n\t\tchild.setMatrixWorldNeedsUpdate();\r\n\r\n\t}\r\n\r\n\tremoveChild( child ) {\r\n\r\n\t\tif ( child.parent !== this ) {\r\n\r\n\t\t\tthrow new Error( 'Frame: Child to be removed is not a child of this Frame.' );\r\n\r\n\t\t}\r\n\r\n\t\tconst index = this.children.indexOf( child );\r\n\r\n\t\tthis.children.splice( index, 1 );\r\n\t\tchild.parent = null;\r\n\r\n\t\tchild.setMatrixWorldNeedsUpdate();\r\n\r\n\t}\r\n\r\n\tattachChild( child ) {\r\n\r\n\t\tthis.updateMatrixWorld();\r\n\t\tchild.updateMatrixWorld();\r\n\r\n\t\tthis.addChild( child );\r\n\r\n\t\tmat4.invert( tempInverse, this.matrixWorld );\r\n\t\tmat4.multiply( child.matrix, tempInverse, child.matrixWorld );\r\n\t\tmat4.getTranslation( child.position, child.matrix );\r\n\t\tmat4.getRotation( child.quaternion, child.matrix );\r\n\r\n\t}\r\n\r\n\tdetachChild( child ) {\r\n\r\n\t\tthis.updateMatrixWorld();\r\n\t\tchild.updateMatrixWorld();\r\n\r\n\t\tthis.removeChild( child );\r\n\r\n\t\tmat4.copy( child.matrix, child.matrixWorld );\r\n\t\tmat4.getTranslation( child.position, child.matrix );\r\n\t\tmat4.getRotation( child.quaternion, child.matrix );\r\n\r\n\t}\r\n\r\n\tcomputeMatrixWorld() {\r\n\r\n\t\tif ( this.parent ) {\r\n\r\n\t\t\tmat4.multiply( this.matrixWorld, this.parent.matrixWorld, this.matrix );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmat4.copy( this.matrixWorld, this.matrix );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetMatrixNeedsUpdate() {\r\n\r\n\t\tif ( this.matrixNeedsUpdate === false ) {\r\n\r\n\t\t\tthis.matrixNeedsUpdate = true;\r\n\t\t\tthis.setMatrixWorldNeedsUpdate();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetMatrixWorldNeedsUpdate() {\r\n\r\n\t\tthis.traverse( c => {\r\n\r\n\t\t\tif ( c.matrixWorldNeedsUpdate ) {\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tc.matrixWorldNeedsUpdate = true;\r\n\t\t\treturn false;\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tupdateMatrix() {\r\n\r\n\t\tif ( this.matrixNeedsUpdate ) {\r\n\r\n\t\t\tmat4.fromRotationTranslation( this.matrix, this.quaternion, this.position );\r\n\t\t\tthis.matrixNeedsUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdateMatrixWorld( updateChildren = false ) {\r\n\r\n\t\tconst { parent } = this;\r\n\r\n\t\tif ( this.matrixWorldNeedsUpdate ) {\r\n\r\n\t\t\t// Climb the parent chain and update parent matrices\r\n\t\t\tif ( parent && parent.matrixWorldNeedsUpdate ) {\r\n\r\n\t\t\t\tparent.updateMatrixWorld( false );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Update this matrix\r\n\t\t\tthis.updateMatrix();\r\n\r\n\t\t\t// Update this matrix world and dirty children\r\n\t\t\tthis.computeMatrixWorld();\r\n\t\t\tthis.matrixWorldNeedsUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\t// Update child matrices\r\n\t\tif ( updateChildren ) {\r\n\r\n\t\t\tthis.traverse( c => {\r\n\r\n\t\t\t\tif ( this !== c ) {\r\n\r\n\t\t\t\t\tc.updateMatrixWorld( false );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}