{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LRN, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function lRN(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    depthRadius,\n    bias,\n    alpha,\n    beta\n  } = attrs;\n  assertNotComplex(x, 'LRN');\n  const channels = x.shape[3];\n  const maxD = channels - 1;\n  const xValues = backend.data.get(x.dataId).values;\n  const size = util.sizeFromShape(x.shape);\n  const result = new Float32Array(size);\n\n  function sumAcrossChannels(offset) {\n    const currentChannel = offset % channels;\n    let beginSumOffset = offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n    const endSumOffset = offset - currentChannel + Math.min(currentChannel + depthRadius, maxD);\n    let sum = 0.0;\n\n    for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n      const z = xValues[beginSumOffset];\n      sum += z * z;\n    }\n\n    return sum;\n  }\n\n  for (let offset = 0; offset < size; offset++) {\n    const sum = sumAcrossChannels(offset);\n    const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n    result[offset] = val;\n  }\n\n  return backend.makeTensorInfo(x.shape, x.dtype, result);\n} // tslint:disable-next-line: variable-name\n\nexport const LRNConfig = {\n  kernelName: LRN,\n  backendName: 'cpu',\n  kernelFunc: lRN\n};","map":{"version":3,"names":["LRN","util","assertNotComplex","lRN","args","inputs","backend","attrs","x","depthRadius","bias","alpha","beta","channels","shape","maxD","xValues","data","get","dataId","values","size","sizeFromShape","result","Float32Array","sumAcrossChannels","offset","currentChannel","beginSumOffset","Math","max","endSumOffset","min","sum","z","val","pow","makeTensorInfo","dtype","LRNConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LRN.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LRN, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function lRN(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { depthRadius, bias, alpha, beta } = attrs;\n    assertNotComplex(x, 'LRN');\n    const channels = x.shape[3];\n    const maxD = channels - 1;\n    const xValues = backend.data.get(x.dataId).values;\n    const size = util.sizeFromShape(x.shape);\n    const result = new Float32Array(size);\n    function sumAcrossChannels(offset) {\n        const currentChannel = offset % channels;\n        let beginSumOffset = offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n        const endSumOffset = offset - currentChannel + Math.min(currentChannel + depthRadius, maxD);\n        let sum = 0.0;\n        for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n            const z = xValues[beginSumOffset];\n            sum += z * z;\n        }\n        return sum;\n    }\n    for (let offset = 0; offset < size; offset++) {\n        const sum = sumAcrossChannels(offset);\n        const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n        result[offset] = val;\n    }\n    return backend.makeTensorInfo(x.shape, x.dtype, result);\n}\n// tslint:disable-next-line: variable-name\nexport const LRNConfig = {\n    kernelName: LRN,\n    backendName: 'cpu',\n    kernelFunc: lRN\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,GAAT,EAAcC,IAAd,QAA0B,uBAA1B;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,OAAO,SAASC,GAAT,CAAaC,IAAb,EAAmB;EACtB,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BH,IAAnC;EACA,MAAM;IAAEI;EAAF,IAAQH,MAAd;EACA,MAAM;IAAEI,WAAF;IAAeC,IAAf;IAAqBC,KAArB;IAA4BC;EAA5B,IAAqCL,KAA3C;EACAL,gBAAgB,CAACM,CAAD,EAAI,KAAJ,CAAhB;EACA,MAAMK,QAAQ,GAAGL,CAAC,CAACM,KAAF,CAAQ,CAAR,CAAjB;EACA,MAAMC,IAAI,GAAGF,QAAQ,GAAG,CAAxB;EACA,MAAMG,OAAO,GAAGV,OAAO,CAACW,IAAR,CAAaC,GAAb,CAAiBV,CAAC,CAACW,MAAnB,EAA2BC,MAA3C;EACA,MAAMC,IAAI,GAAGpB,IAAI,CAACqB,aAAL,CAAmBd,CAAC,CAACM,KAArB,CAAb;EACA,MAAMS,MAAM,GAAG,IAAIC,YAAJ,CAAiBH,IAAjB,CAAf;;EACA,SAASI,iBAAT,CAA2BC,MAA3B,EAAmC;IAC/B,MAAMC,cAAc,GAAGD,MAAM,GAAGb,QAAhC;IACA,IAAIe,cAAc,GAAGF,MAAM,GAAGC,cAAT,GAA0BE,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYH,cAAc,GAAGlB,WAA7B,CAA/C;IACA,MAAMsB,YAAY,GAAGL,MAAM,GAAGC,cAAT,GAA0BE,IAAI,CAACG,GAAL,CAASL,cAAc,GAAGlB,WAA1B,EAAuCM,IAAvC,CAA/C;IACA,IAAIkB,GAAG,GAAG,GAAV;;IACA,OAAOL,cAAc,IAAIG,YAAzB,EAAuCH,cAAc,EAArD,EAAyD;MACrD,MAAMM,CAAC,GAAGlB,OAAO,CAACY,cAAD,CAAjB;MACAK,GAAG,IAAIC,CAAC,GAAGA,CAAX;IACH;;IACD,OAAOD,GAAP;EACH;;EACD,KAAK,IAAIP,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAGL,IAA9B,EAAoCK,MAAM,EAA1C,EAA8C;IAC1C,MAAMO,GAAG,GAAGR,iBAAiB,CAACC,MAAD,CAA7B;IACA,MAAMS,GAAG,GAAGnB,OAAO,CAACU,MAAD,CAAP,GAAkBG,IAAI,CAACO,GAAL,CAAS1B,IAAI,GAAGC,KAAK,GAAGsB,GAAxB,EAA6B,CAACrB,IAA9B,CAA9B;IACAW,MAAM,CAACG,MAAD,CAAN,GAAiBS,GAAjB;EACH;;EACD,OAAO7B,OAAO,CAAC+B,cAAR,CAAuB7B,CAAC,CAACM,KAAzB,EAAgCN,CAAC,CAAC8B,KAAlC,EAAyCf,MAAzC,CAAP;AACH,C,CACD;;AACA,OAAO,MAAMgB,SAAS,GAAG;EACrBC,UAAU,EAAExC,GADS;EAErByC,WAAW,EAAE,KAFQ;EAGrBC,UAAU,EAAEvC;AAHS,CAAlB"},"metadata":{},"sourceType":"module"}