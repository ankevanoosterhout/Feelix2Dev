{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Cumsum, upcastType, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transpose } from './Transpose';\nexport function cumsum(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis,\n    exclusive,\n    reverse\n  } = attrs;\n  assertNotComplex(x, 'cumsum');\n  const permutation = backend_util.getAxesPermutation([axis], x.shape.length);\n  let $x = x;\n\n  if (permutation != null) {\n    $x = transpose({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        perm: permutation\n      }\n    });\n  }\n\n  const permutedAxis = backend_util.getInnerMostAxes(1, x.shape.length)[0];\n\n  if (permutedAxis !== $x.shape.length - 1) {\n    throw new Error(`backend.cumsum in CPU expects an inner-most ` + `axis=${$x.shape.length - 1} but got axis=${permutedAxis}`);\n  }\n\n  const resultDtype = upcastType($x.dtype, 'int32');\n  const vals = util.makeZerosTypedArray(util.sizeFromShape($x.shape), resultDtype);\n  const aVals = backend.data.get($x.dataId).values;\n  const finalDim = $x.shape[$x.shape.length - 1];\n  const indexAdjuster = reverse ? (i, j) => i + finalDim - j - 1 : (i, j) => i + j;\n\n  for (let i = 0; i < aVals.length; i += finalDim) {\n    for (let j = 0; j < finalDim; j++) {\n      const idx = indexAdjuster(i, j);\n\n      if (j === 0) {\n        vals[idx] = exclusive ? 0 : aVals[idx];\n      } else {\n        const prevIdx = indexAdjuster(i, j - 1);\n        vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] : aVals[idx] + vals[prevIdx];\n      }\n    }\n  }\n\n  const result = backend.makeTensorInfo($x.shape, resultDtype, vals);\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose({\n      inputs: {\n        x: result\n      },\n      backend,\n      attrs: {\n        perm: reversePermutation\n      }\n    });\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo($x);\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\nexport const cumsumConfig = {\n  kernelName: Cumsum,\n  backendName: 'cpu',\n  kernelFunc: cumsum\n};","map":{"version":3,"names":["backend_util","Cumsum","upcastType","util","assertNotComplex","transpose","cumsum","args","inputs","backend","attrs","x","axis","exclusive","reverse","permutation","getAxesPermutation","shape","length","$x","perm","permutedAxis","getInnerMostAxes","Error","resultDtype","dtype","vals","makeZerosTypedArray","sizeFromShape","aVals","data","get","dataId","values","finalDim","indexAdjuster","i","j","idx","prevIdx","result","makeTensorInfo","reversePermutation","getUndoAxesPermutation","reverseTransposedResult","disposeIntermediateTensorInfo","cumsumConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Cumsum.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Cumsum, upcastType, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transpose } from './Transpose';\nexport function cumsum(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, exclusive, reverse } = attrs;\n    assertNotComplex(x, 'cumsum');\n    const permutation = backend_util.getAxesPermutation([axis], x.shape.length);\n    let $x = x;\n    if (permutation != null) {\n        $x = transpose({ inputs: { x }, backend, attrs: { perm: permutation } });\n    }\n    const permutedAxis = backend_util.getInnerMostAxes(1, x.shape.length)[0];\n    if (permutedAxis !== $x.shape.length - 1) {\n        throw new Error(`backend.cumsum in CPU expects an inner-most ` +\n            `axis=${$x.shape.length - 1} but got axis=${permutedAxis}`);\n    }\n    const resultDtype = upcastType($x.dtype, 'int32');\n    const vals = util.makeZerosTypedArray(util.sizeFromShape($x.shape), resultDtype);\n    const aVals = backend.data.get($x.dataId).values;\n    const finalDim = $x.shape[$x.shape.length - 1];\n    const indexAdjuster = reverse ?\n        (i, j) => i + finalDim - j - 1 :\n        (i, j) => i + j;\n    for (let i = 0; i < aVals.length; i += finalDim) {\n        for (let j = 0; j < finalDim; j++) {\n            const idx = indexAdjuster(i, j);\n            if (j === 0) {\n                vals[idx] = exclusive ? 0 : aVals[idx];\n            }\n            else {\n                const prevIdx = indexAdjuster(i, j - 1);\n                vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] :\n                    aVals[idx] + vals[prevIdx];\n            }\n        }\n    }\n    const result = backend.makeTensorInfo($x.shape, resultDtype, vals);\n    if (permutation != null) {\n        const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n        const reverseTransposedResult = transpose({ inputs: { x: result }, backend, attrs: { perm: reversePermutation } });\n        backend.disposeIntermediateTensorInfo(result);\n        backend.disposeIntermediateTensorInfo($x);\n        return reverseTransposedResult;\n    }\n    return result;\n}\nexport const cumsumConfig = {\n    kernelName: Cumsum,\n    backendName: 'cpu',\n    kernelFunc: cumsum\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,EAAuBC,MAAvB,EAA+BC,UAA/B,EAA2CC,IAA3C,QAAuD,uBAAvD;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAO,SAASC,MAAT,CAAgBC,IAAhB,EAAsB;EACzB,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BH,IAAnC;EACA,MAAM;IAAEI;EAAF,IAAQH,MAAd;EACA,MAAM;IAAEI,IAAF;IAAQC,SAAR;IAAmBC;EAAnB,IAA+BJ,KAArC;EACAN,gBAAgB,CAACO,CAAD,EAAI,QAAJ,CAAhB;EACA,MAAMI,WAAW,GAAGf,YAAY,CAACgB,kBAAb,CAAgC,CAACJ,IAAD,CAAhC,EAAwCD,CAAC,CAACM,KAAF,CAAQC,MAAhD,CAApB;EACA,IAAIC,EAAE,GAAGR,CAAT;;EACA,IAAII,WAAW,IAAI,IAAnB,EAAyB;IACrBI,EAAE,GAAGd,SAAS,CAAC;MAAEG,MAAM,EAAE;QAAEG;MAAF,CAAV;MAAiBF,OAAjB;MAA0BC,KAAK,EAAE;QAAEU,IAAI,EAAEL;MAAR;IAAjC,CAAD,CAAd;EACH;;EACD,MAAMM,YAAY,GAAGrB,YAAY,CAACsB,gBAAb,CAA8B,CAA9B,EAAiCX,CAAC,CAACM,KAAF,CAAQC,MAAzC,EAAiD,CAAjD,CAArB;;EACA,IAAIG,YAAY,KAAKF,EAAE,CAACF,KAAH,CAASC,MAAT,GAAkB,CAAvC,EAA0C;IACtC,MAAM,IAAIK,KAAJ,CAAW,8CAAD,GACX,QAAOJ,EAAE,CAACF,KAAH,CAASC,MAAT,GAAkB,CAAE,iBAAgBG,YAAa,EADvD,CAAN;EAEH;;EACD,MAAMG,WAAW,GAAGtB,UAAU,CAACiB,EAAE,CAACM,KAAJ,EAAW,OAAX,CAA9B;EACA,MAAMC,IAAI,GAAGvB,IAAI,CAACwB,mBAAL,CAAyBxB,IAAI,CAACyB,aAAL,CAAmBT,EAAE,CAACF,KAAtB,CAAzB,EAAuDO,WAAvD,CAAb;EACA,MAAMK,KAAK,GAAGpB,OAAO,CAACqB,IAAR,CAAaC,GAAb,CAAiBZ,EAAE,CAACa,MAApB,EAA4BC,MAA1C;EACA,MAAMC,QAAQ,GAAGf,EAAE,CAACF,KAAH,CAASE,EAAE,CAACF,KAAH,CAASC,MAAT,GAAkB,CAA3B,CAAjB;EACA,MAAMiB,aAAa,GAAGrB,OAAO,GACzB,CAACsB,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGF,QAAJ,GAAeG,CAAf,GAAmB,CADJ,GAEzB,CAACD,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAFlB;;EAGA,KAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,KAAK,CAACX,MAA1B,EAAkCkB,CAAC,IAAIF,QAAvC,EAAiD;IAC7C,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,QAApB,EAA8BG,CAAC,EAA/B,EAAmC;MAC/B,MAAMC,GAAG,GAAGH,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAAzB;;MACA,IAAIA,CAAC,KAAK,CAAV,EAAa;QACTX,IAAI,CAACY,GAAD,CAAJ,GAAYzB,SAAS,GAAG,CAAH,GAAOgB,KAAK,CAACS,GAAD,CAAjC;MACH,CAFD,MAGK;QACD,MAAMC,OAAO,GAAGJ,aAAa,CAACC,CAAD,EAAIC,CAAC,GAAG,CAAR,CAA7B;QACAX,IAAI,CAACY,GAAD,CAAJ,GAAYzB,SAAS,GAAGgB,KAAK,CAACU,OAAD,CAAL,GAAiBb,IAAI,CAACa,OAAD,CAAxB,GACjBV,KAAK,CAACS,GAAD,CAAL,GAAaZ,IAAI,CAACa,OAAD,CADrB;MAEH;IACJ;EACJ;;EACD,MAAMC,MAAM,GAAG/B,OAAO,CAACgC,cAAR,CAAuBtB,EAAE,CAACF,KAA1B,EAAiCO,WAAjC,EAA8CE,IAA9C,CAAf;;EACA,IAAIX,WAAW,IAAI,IAAnB,EAAyB;IACrB,MAAM2B,kBAAkB,GAAG1C,YAAY,CAAC2C,sBAAb,CAAoC5B,WAApC,CAA3B;IACA,MAAM6B,uBAAuB,GAAGvC,SAAS,CAAC;MAAEG,MAAM,EAAE;QAAEG,CAAC,EAAE6B;MAAL,CAAV;MAAyB/B,OAAzB;MAAkCC,KAAK,EAAE;QAAEU,IAAI,EAAEsB;MAAR;IAAzC,CAAD,CAAzC;IACAjC,OAAO,CAACoC,6BAAR,CAAsCL,MAAtC;IACA/B,OAAO,CAACoC,6BAAR,CAAsC1B,EAAtC;IACA,OAAOyB,uBAAP;EACH;;EACD,OAAOJ,MAAP;AACH;AACD,OAAO,MAAMM,YAAY,GAAG;EACxBC,UAAU,EAAE9C,MADY;EAExB+C,WAAW,EAAE,KAFW;EAGxBC,UAAU,EAAE3C;AAHY,CAArB"},"metadata":{},"sourceType":"module"}