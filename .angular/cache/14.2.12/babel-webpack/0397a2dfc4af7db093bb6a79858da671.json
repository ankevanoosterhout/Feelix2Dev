{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class RotateProgram {\n  constructor(imageShape, fillValue) {\n    this.variableNames = ['Image'];\n    this.outputShape = [];\n    this.customUniforms = [{\n      name: 'params',\n      type: 'vec4'\n    }];\n    const imageHeight = imageShape[1];\n    const imageWidth = imageShape[2];\n    this.outputShape = imageShape;\n    let fillSnippet = '';\n\n    if (typeof fillValue === 'number') {\n      fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;\n    } else {\n      fillSnippet = `\n        vec3 fill = vec3(${fillValue.join(',')});\n        float outputValue = fill[coords[3]];`;\n    }\n\n    this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${fillSnippet}\n          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${imageHeight}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n\n}","map":{"version":3,"names":["RotateProgram","constructor","imageShape","fillValue","variableNames","outputShape","customUniforms","name","type","imageHeight","imageWidth","fillSnippet","toFixed","join","userCode"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/rotate_gpu.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class RotateProgram {\n    constructor(imageShape, fillValue) {\n        this.variableNames = ['Image'];\n        this.outputShape = [];\n        this.customUniforms = [{ name: 'params', type: 'vec4' }];\n        const imageHeight = imageShape[1];\n        const imageWidth = imageShape[2];\n        this.outputShape = imageShape;\n        let fillSnippet = '';\n        if (typeof fillValue === 'number') {\n            fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;\n        }\n        else {\n            fillSnippet = `\n        vec3 fill = vec3(${fillValue.join(',')});\n        float outputValue = fill[coords[3]];`;\n        }\n        this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${fillSnippet}\n          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${imageHeight}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,aAAN,CAAoB;EACvBC,WAAW,CAACC,UAAD,EAAaC,SAAb,EAAwB;IAC/B,KAAKC,aAAL,GAAqB,CAAC,OAAD,CAArB;IACA,KAAKC,WAAL,GAAmB,EAAnB;IACA,KAAKC,cAAL,GAAsB,CAAC;MAAEC,IAAI,EAAE,QAAR;MAAkBC,IAAI,EAAE;IAAxB,CAAD,CAAtB;IACA,MAAMC,WAAW,GAAGP,UAAU,CAAC,CAAD,CAA9B;IACA,MAAMQ,UAAU,GAAGR,UAAU,CAAC,CAAD,CAA7B;IACA,KAAKG,WAAL,GAAmBH,UAAnB;IACA,IAAIS,WAAW,GAAG,EAAlB;;IACA,IAAI,OAAOR,SAAP,KAAqB,QAAzB,EAAmC;MAC/BQ,WAAW,GAAI,uBAAsBR,SAAS,CAACS,OAAV,CAAkB,CAAlB,CAAqB,GAA1D;IACH,CAFD,MAGK;MACDD,WAAW,GAAI;AAC3B,2BAA2BR,SAAS,CAACU,IAAV,CAAe,GAAf,CAAoB;AAC/C,6CAFY;IAGH;;IACD,KAAKC,QAAL,GAAiB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAYH,WAAY;AACxB,uCAAuCD,UAAW,+BAA8BD,WAAY;AAC5F;AACA;AACA;AACA;AACA,KAjBQ;EAkBH;;AAnCsB"},"metadata":{},"sourceType":"module"}