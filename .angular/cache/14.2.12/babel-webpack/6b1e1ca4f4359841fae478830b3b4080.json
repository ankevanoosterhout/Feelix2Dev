{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Shuffles the array in-place using Fisher-Yates algorithm.\n *\n * ```js\n * const a = [1, 2, 3, 4, 5];\n * tf.util.shuffle(a);\n * console.log(a);\n * ```\n *\n * @param array The array to shuffle in-place.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n// tslint:disable-next-line:no-any\nexport function shuffle(array) {\n  let counter = array.length;\n  let index = 0; // While there are elements in the array\n\n  while (counter > 0) {\n    // Pick a random index\n    index = Math.random() * counter | 0; // Decrease counter by 1\n\n    counter--; // And swap the last element with it\n\n    swap(array, counter, index);\n  }\n}\n/**\n * Shuffles two arrays in-place the same way using Fisher-Yates algorithm.\n *\n * ```js\n * const a = [1,2,3,4,5];\n * const b = [11,22,33,44,55];\n * tf.util.shuffleCombo(a, b);\n * console.log(a, b);\n * ```\n *\n * @param array The first array to shuffle in-place.\n * @param array2 The second array to shuffle in-place with the same permutation\n *     as the first array.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n\nexport function shuffleCombo( // tslint:disable-next-line:no-any\narray, // tslint:disable-next-line:no-any\narray2) {\n  if (array.length !== array2.length) {\n    throw new Error(`Array sizes must match to be shuffled together ` + `First array length was ${array.length}` + `Second array length was ${array2.length}`);\n  }\n\n  let counter = array.length;\n  let index = 0; // While there are elements in the array\n\n  while (counter > 0) {\n    // Pick a random index\n    index = Math.random() * counter | 0; // Decrease counter by 1\n\n    counter--; // And swap the last element of each array with it\n\n    swap(array, counter, index);\n    swap(array2, counter, index);\n  }\n}\n/** Clamps a value to a specified range. */\n\nexport function clamp(min, x, max) {\n  return Math.max(min, Math.min(x, max));\n}\nexport function nearestLargerEven(val) {\n  return val % 2 === 0 ? val : val + 1;\n}\nexport function swap(object, left, right) {\n  const temp = object[left];\n  object[left] = object[right];\n  object[right] = temp;\n}\nexport function sum(arr) {\n  let sum = 0;\n\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n\n  return sum;\n}\n/**\n * Returns a sample from a uniform [a, b) distribution.\n *\n * @param a The minimum support (inclusive).\n * @param b The maximum support (exclusive).\n * @return A pseudorandom number on the half-open interval [a,b).\n */\n\nexport function randUniform(a, b) {\n  const r = Math.random();\n  return b * r + (1 - r) * a;\n}\n/** Returns the squared Euclidean distance between two vectors. */\n\nexport function distSquared(a, b) {\n  let result = 0;\n\n  for (let i = 0; i < a.length; i++) {\n    const diff = Number(a[i]) - Number(b[i]);\n    result += diff * diff;\n  }\n\n  return result;\n}\n/**\n * Asserts that the expression is true. Otherwise throws an error with the\n * provided message.\n *\n * ```js\n * const x = 2;\n * tf.util.assert(x === 2, 'x is not 2');\n * ```\n *\n * @param expr The expression to assert (as a boolean).\n * @param msg A function that returns the message to report when throwing an\n *     error. We use a function for performance reasons.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n\nexport function assert(expr, msg) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\nexport function assertShapesMatch(shapeA, shapeB, errorMessagePrefix = '') {\n  assert(arraysEqual(shapeA, shapeB), () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n}\nexport function assertNonNull(a) {\n  assert(a != null, () => `The input to the tensor constructor must be a non-null value.`);\n} // NOTE: We explicitly type out what T extends instead of any so that\n// util.flatten on a nested array of number doesn't try to infer T as a\n// number[][], causing us to explicitly type util.flatten<number>().\n\n/**\n *  Flattens an arbitrarily nested array.\n *\n * ```js\n * const a = [[1, 2], [3, 4], [5, [6, [7]]]];\n * const flat = tf.util.flatten(a);\n * console.log(flat);\n * ```\n *\n *  @param arr The nested array to flatten.\n *  @param result The destination array which holds the elements.\n *  @param skipTypedArray If true, avoids flattening the typed arrays. Defaults\n *      to false.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n\nexport function flatten(arr, result = [], skipTypedArray = false) {\n  if (result == null) {\n    result = [];\n  }\n\n  if (Array.isArray(arr) || isTypedArray(arr) && !skipTypedArray) {\n    for (let i = 0; i < arr.length; ++i) {\n      flatten(arr[i], result, skipTypedArray);\n    }\n  } else {\n    result.push(arr);\n  }\n\n  return result;\n}\n/**\n * Returns the size (number of elements) of the tensor given its shape.\n *\n * ```js\n * const shape = [3, 4, 2];\n * const size = tf.util.sizeFromShape(shape);\n * console.log(size);\n * ```\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n\nexport function sizeFromShape(shape) {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n\n  let size = shape[0];\n\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n\n  return size;\n}\nexport function isScalarShape(shape) {\n  return shape.length === 0;\n}\nexport function arraysEqual(n1, n2) {\n  if (n1 === n2) {\n    return true;\n  }\n\n  if (n1 == null || n2 == null) {\n    return false;\n  }\n\n  if (n1.length !== n2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < n1.length; i++) {\n    if (n1[i] !== n2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function isInt(a) {\n  return a % 1 === 0;\n}\nexport function tanh(x) {\n  // tslint:disable-next-line:no-any\n  if (Math.tanh != null) {\n    // tslint:disable-next-line:no-any\n    return Math.tanh(x);\n  }\n\n  if (x === Infinity) {\n    return 1;\n  } else if (x === -Infinity) {\n    return -1;\n  } else {\n    const e2x = Math.exp(2 * x);\n    return (e2x - 1) / (e2x + 1);\n  }\n}\nexport function sizeToSquarishShape(size) {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\n/**\n * Creates a new array with randomized indices to a given quantity.\n *\n * ```js\n * const randomTen = tf.util.createShuffledIndices(10);\n * console.log(randomTen);\n * ```\n *\n * @param number Quantity of how many shuffled indices to create.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n\nexport function createShuffledIndices(n) {\n  const shuffledIndices = new Uint32Array(n);\n\n  for (let i = 0; i < n; ++i) {\n    shuffledIndices[i] = i;\n  }\n\n  shuffle(shuffledIndices);\n  return shuffledIndices;\n}\nexport function rightPad(a, size) {\n  if (size <= a.length) {\n    return a;\n  }\n\n  return a + ' '.repeat(size - a.length);\n}\nexport function repeatedTry(checkFn, delayFn = counter => 0, maxCounter, scheduleFn = setTimeout) {\n  return new Promise((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n\n      scheduleFn(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n/**\n * Given the full size of the array and a shape that may contain -1 as the\n * implicit dimension, returns the inferred shape where -1 is replaced.\n * E.g. For shape=[2, -1, 3] and size=24, it will return [2, 4, 3].\n *\n * @param shape The shape, which may contain -1 in some dimension.\n * @param size The full size (number of elements) of the array.\n * @return The inferred shape where -1 is replaced with the inferred size.\n */\n\nexport function inferFromImplicitShape(shape, size) {\n  let shapeProd = 1;\n  let implicitIdx = -1;\n\n  for (let i = 0; i < shape.length; ++i) {\n    if (shape[i] >= 0) {\n      shapeProd *= shape[i];\n    } else if (shape[i] === -1) {\n      if (implicitIdx !== -1) {\n        throw Error(`Shapes can only have 1 implicit size. ` + `Found -1 at dim ${implicitIdx} and dim ${i}`);\n      }\n\n      implicitIdx = i;\n    } else if (shape[i] < 0) {\n      throw Error(`Shapes can not be < 0. Found ${shape[i]} at dim ${i}`);\n    }\n  }\n\n  if (implicitIdx === -1) {\n    if (size > 0 && size !== shapeProd) {\n      throw Error(`Size(${size}) must match the product of shape ${shape}`);\n    }\n\n    return shape;\n  }\n\n  if (shapeProd === 0) {\n    throw Error(`Cannot infer the missing size in [${shape}] when ` + `there are 0 elements`);\n  }\n\n  if (size % shapeProd !== 0) {\n    throw Error(`The implicit shape can't be a fractional number. ` + `Got ${size} / ${shapeProd}`);\n  }\n\n  const newShape = shape.slice();\n  newShape[implicitIdx] = size / shapeProd;\n  return newShape;\n}\nexport function parseAxisParam(axis, shape) {\n  const rank = shape.length; // Normalize input\n\n  axis = axis == null ? shape.map((s, i) => i) : [].concat(axis); // Check for valid range\n\n  assert(axis.every(ax => ax >= -rank && ax < rank), () => `All values in axis param must be in range [-${rank}, ${rank}) but ` + `got axis ${axis}`); // Check for only integers\n\n  assert(axis.every(ax => isInt(ax)), () => `All values in axis param must be integers but ` + `got axis ${axis}`); // Handle negative axis.\n\n  return axis.map(a => a < 0 ? rank + a : a);\n}\n/** Reduces the shape by removing all dimensions of shape 1. */\n\nexport function squeezeShape(shape, axis) {\n  const newShape = [];\n  const keptDims = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = axis == null || isEmptyArray ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n\n  return {\n    newShape,\n    keptDims\n  };\n}\nexport function getTypedArrayFromDType(dtype, size) {\n  let values = null;\n\n  if (dtype == null || dtype === 'float32') {\n    values = new Float32Array(size);\n  } else if (dtype === 'int32') {\n    values = new Int32Array(size);\n  } else if (dtype === 'bool') {\n    values = new Uint8Array(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n\n  return values;\n}\nexport function getArrayFromDType(dtype, size) {\n  let values = null;\n\n  if (dtype == null || dtype === 'float32') {\n    values = new Float32Array(size);\n  } else if (dtype === 'int32') {\n    values = new Int32Array(size);\n  } else if (dtype === 'bool') {\n    values = new Uint8Array(size);\n  } else if (dtype === 'string') {\n    values = new Array(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n\n  return values;\n}\nexport function checkConversionForErrors(vals, dtype) {\n  for (let i = 0; i < vals.length; i++) {\n    const num = vals[i];\n\n    if (isNaN(num) || !isFinite(num)) {\n      throw Error(`A tensor of type ${dtype} being uploaded contains ${num}.`);\n    }\n  }\n}\n/** Returns true if the dtype is valid. */\n\nexport function isValidDtype(dtype) {\n  return dtype === 'bool' || dtype === 'complex64' || dtype === 'float32' || dtype === 'int32' || dtype === 'string';\n}\n/**\n * Returns true if the new type can't encode the old type without loss of\n * precision.\n */\n\nexport function hasEncodingLoss(oldType, newType) {\n  if (newType === 'complex64') {\n    return false;\n  }\n\n  if (newType === 'float32' && oldType !== 'complex64') {\n    return false;\n  }\n\n  if (newType === 'int32' && oldType !== 'float32' && oldType !== 'complex64') {\n    return false;\n  }\n\n  if (newType === 'bool' && oldType === 'bool') {\n    return false;\n  }\n\n  return true;\n}\nexport function isTypedArray(a) {\n  return a instanceof Float32Array || a instanceof Int32Array || a instanceof Uint8Array || a instanceof Uint8ClampedArray;\n}\nexport function bytesPerElement(dtype) {\n  if (dtype === 'float32' || dtype === 'int32') {\n    return 4;\n  } else if (dtype === 'complex64') {\n    return 8;\n  } else if (dtype === 'bool') {\n    return 1;\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n/**\n * Returns the approximate number of bytes allocated in the string array - 2\n * bytes per character. Computing the exact bytes for a native string in JS\n * is not possible since it depends on the encoding of the html page that\n * serves the website.\n */\n\nexport function bytesFromStringArray(arr) {\n  if (arr == null) {\n    return 0;\n  }\n\n  let bytes = 0;\n  arr.forEach(x => bytes += x.length);\n  return bytes;\n}\n/** Returns true if the value is a string. */\n\nexport function isString(value) {\n  return typeof value === 'string' || value instanceof String;\n}\nexport function isBoolean(value) {\n  return typeof value === 'boolean';\n}\nexport function isNumber(value) {\n  return typeof value === 'number';\n}\nexport function inferDtype(values) {\n  if (Array.isArray(values)) {\n    return inferDtype(values[0]);\n  }\n\n  if (values instanceof Float32Array) {\n    return 'float32';\n  } else if (values instanceof Int32Array || values instanceof Uint8Array || values instanceof Uint8ClampedArray) {\n    return 'int32';\n  } else if (isNumber(values)) {\n    return 'float32';\n  } else if (isString(values)) {\n    return 'string';\n  } else if (isBoolean(values)) {\n    return 'bool';\n  }\n\n  return 'float32';\n}\nexport function isFunction(f) {\n  return !!(f && f.constructor && f.call && f.apply);\n}\nexport function nearestDivisor(size, start) {\n  for (let i = start; i < size; ++i) {\n    if (size % i === 0) {\n      return i;\n    }\n  }\n\n  return size;\n}\nexport function computeStrides(shape) {\n  const rank = shape.length;\n\n  if (rank < 2) {\n    return [];\n  } // Last dimension has implicit stride of 1, thus having D-1 (instead of D)\n  // strides.\n\n\n  const strides = new Array(rank - 1);\n  strides[rank - 2] = shape[rank - 1];\n\n  for (let i = rank - 3; i >= 0; --i) {\n    strides[i] = strides[i + 1] * shape[i + 1];\n  }\n\n  return strides;\n}\n\nfunction createNestedArray(offset, shape, a, isComplex = false) {\n  const ret = new Array();\n\n  if (shape.length === 1) {\n    const d = shape[0] * (isComplex ? 2 : 1);\n\n    for (let i = 0; i < d; i++) {\n      ret[i] = a[offset + i];\n    }\n  } else {\n    const d = shape[0];\n    const rest = shape.slice(1);\n    const len = rest.reduce((acc, c) => acc * c) * (isComplex ? 2 : 1);\n\n    for (let i = 0; i < d; i++) {\n      ret[i] = createNestedArray(offset + i * len, rest, a, isComplex);\n    }\n  }\n\n  return ret;\n} // Provide a nested array of TypedArray in given shape.\n\n\nexport function toNestedArray(shape, a, isComplex = false) {\n  if (shape.length === 0) {\n    // Scalar type should return a single number.\n    return a[0];\n  }\n\n  const size = shape.reduce((acc, c) => acc * c) * (isComplex ? 2 : 1);\n\n  if (size === 0) {\n    // A tensor with shape zero should be turned into empty list.\n    return [];\n  }\n\n  if (size !== a.length) {\n    throw new Error(`[${shape}] does not match the input size ${a.length}${isComplex ? ' for a complex tensor' : ''}.`);\n  }\n\n  return createNestedArray(0, shape, a, isComplex);\n}\nexport function makeOnesTypedArray(size, dtype) {\n  const array = makeZerosTypedArray(size, dtype);\n\n  for (let i = 0; i < array.length; i++) {\n    array[i] = 1;\n  }\n\n  return array;\n}\nexport function makeZerosTypedArray(size, dtype) {\n  if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n    return new Float32Array(size);\n  } else if (dtype === 'int32') {\n    return new Int32Array(size);\n  } else if (dtype === 'bool') {\n    return new Uint8Array(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n}\n/**\n * Make nested `TypedArray` filled with zeros.\n * @param shape The shape information for the nested array.\n * @param dtype dtype of the array element.\n */\n\nexport function makeZerosNestedTypedArray(shape, dtype) {\n  const size = shape.reduce((prev, curr) => prev * curr, 1);\n\n  if (dtype == null || dtype === 'float32') {\n    return toNestedArray(shape, new Float32Array(size));\n  } else if (dtype === 'int32') {\n    return toNestedArray(shape, new Int32Array(size));\n  } else if (dtype === 'bool') {\n    return toNestedArray(shape, new Uint8Array(size));\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n}\nexport function assertNonNegativeIntegerDimensions(shape) {\n  shape.forEach(dimSize => {\n    assert(Number.isInteger(dimSize) && dimSize >= 0, () => `Tensor must have a shape comprised of positive integers but got ` + `shape [${shape}].`);\n  });\n}\n/**\n * Computes flat index for a given location (multidimentionsal index) in a\n * Tensor/multidimensional array.\n *\n * @param locs Location in the tensor.\n * @param rank Rank of the tensor.\n * @param strides Tensor strides.\n */\n\nexport function locToIndex(locs, rank, strides) {\n  if (rank === 0) {\n    return 0;\n  } else if (rank === 1) {\n    return locs[0];\n  }\n\n  let index = locs[locs.length - 1];\n\n  for (let i = 0; i < locs.length - 1; ++i) {\n    index += strides[i] * locs[i];\n  }\n\n  return index;\n}\n/**\n * Computes the location (multidimensional index) in a\n * tensor/multidimentional array for a given flat index.\n *\n * @param index Index in flat array.\n * @param rank Rank of tensor.\n * @param strides Strides of tensor.\n */\n\nexport function indexToLoc(index, rank, strides) {\n  if (rank === 0) {\n    return [];\n  } else if (rank === 1) {\n    return [index];\n  }\n\n  const locs = new Array(rank);\n\n  for (let i = 0; i < locs.length - 1; ++i) {\n    locs[i] = Math.floor(index / strides[i]);\n    index -= locs[i] * strides[i];\n  }\n\n  locs[locs.length - 1] = index;\n  return locs;\n}\n/**\n * This method asserts whether an object is a Promise instance.\n * @param object\n */\n// tslint:disable-next-line: no-any\n\nexport function isPromise(object) {\n  //  We chose to not use 'obj instanceOf Promise' for two reasons:\n  //  1. It only reliably works for es6 Promise, not other Promise\n  //  implementations.\n  //  2. It doesn't work with framework that uses zone.js. zone.js monkey\n  //  patch the async calls, so it is possible the obj (patched) is\n  //  comparing to a pre-patched Promise.\n  return object && object.then && typeof object.then === 'function';\n}","map":{"version":3,"names":["shuffle","array","counter","length","index","Math","random","swap","shuffleCombo","array2","Error","clamp","min","x","max","nearestLargerEven","val","object","left","right","temp","sum","arr","i","randUniform","a","b","r","distSquared","result","diff","Number","assert","expr","msg","assertShapesMatch","shapeA","shapeB","errorMessagePrefix","arraysEqual","assertNonNull","flatten","skipTypedArray","Array","isArray","isTypedArray","push","sizeFromShape","shape","size","isScalarShape","n1","n2","isInt","tanh","Infinity","e2x","exp","sizeToSquarishShape","width","ceil","sqrt","createShuffledIndices","n","shuffledIndices","Uint32Array","rightPad","repeat","repeatedTry","checkFn","delayFn","maxCounter","scheduleFn","setTimeout","Promise","resolve","reject","tryCount","tryFn","nextBackoff","inferFromImplicitShape","shapeProd","implicitIdx","newShape","slice","parseAxisParam","axis","rank","map","s","concat","every","ax","squeezeShape","keptDims","isEmptyArray","axes","sort","j","getTypedArrayFromDType","dtype","values","Float32Array","Int32Array","Uint8Array","getArrayFromDType","checkConversionForErrors","vals","num","isNaN","isFinite","isValidDtype","hasEncodingLoss","oldType","newType","Uint8ClampedArray","bytesPerElement","bytesFromStringArray","bytes","forEach","isString","value","String","isBoolean","isNumber","inferDtype","isFunction","f","constructor","call","apply","nearestDivisor","start","computeStrides","strides","createNestedArray","offset","isComplex","ret","d","rest","len","reduce","acc","c","toNestedArray","makeOnesTypedArray","makeZerosTypedArray","makeZerosNestedTypedArray","prev","curr","assertNonNegativeIntegerDimensions","dimSize","isInteger","locToIndex","locs","indexToLoc","floor","isPromise","then"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/util_base.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Shuffles the array in-place using Fisher-Yates algorithm.\n *\n * ```js\n * const a = [1, 2, 3, 4, 5];\n * tf.util.shuffle(a);\n * console.log(a);\n * ```\n *\n * @param array The array to shuffle in-place.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n// tslint:disable-next-line:no-any\nexport function shuffle(array) {\n    let counter = array.length;\n    let index = 0;\n    // While there are elements in the array\n    while (counter > 0) {\n        // Pick a random index\n        index = (Math.random() * counter) | 0;\n        // Decrease counter by 1\n        counter--;\n        // And swap the last element with it\n        swap(array, counter, index);\n    }\n}\n/**\n * Shuffles two arrays in-place the same way using Fisher-Yates algorithm.\n *\n * ```js\n * const a = [1,2,3,4,5];\n * const b = [11,22,33,44,55];\n * tf.util.shuffleCombo(a, b);\n * console.log(a, b);\n * ```\n *\n * @param array The first array to shuffle in-place.\n * @param array2 The second array to shuffle in-place with the same permutation\n *     as the first array.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function shuffleCombo(\n// tslint:disable-next-line:no-any\narray, \n// tslint:disable-next-line:no-any\narray2) {\n    if (array.length !== array2.length) {\n        throw new Error(`Array sizes must match to be shuffled together ` +\n            `First array length was ${array.length}` +\n            `Second array length was ${array2.length}`);\n    }\n    let counter = array.length;\n    let index = 0;\n    // While there are elements in the array\n    while (counter > 0) {\n        // Pick a random index\n        index = (Math.random() * counter) | 0;\n        // Decrease counter by 1\n        counter--;\n        // And swap the last element of each array with it\n        swap(array, counter, index);\n        swap(array2, counter, index);\n    }\n}\n/** Clamps a value to a specified range. */\nexport function clamp(min, x, max) {\n    return Math.max(min, Math.min(x, max));\n}\nexport function nearestLargerEven(val) {\n    return val % 2 === 0 ? val : val + 1;\n}\nexport function swap(object, left, right) {\n    const temp = object[left];\n    object[left] = object[right];\n    object[right] = temp;\n}\nexport function sum(arr) {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n/**\n * Returns a sample from a uniform [a, b) distribution.\n *\n * @param a The minimum support (inclusive).\n * @param b The maximum support (exclusive).\n * @return A pseudorandom number on the half-open interval [a,b).\n */\nexport function randUniform(a, b) {\n    const r = Math.random();\n    return (b * r) + (1 - r) * a;\n}\n/** Returns the squared Euclidean distance between two vectors. */\nexport function distSquared(a, b) {\n    let result = 0;\n    for (let i = 0; i < a.length; i++) {\n        const diff = Number(a[i]) - Number(b[i]);\n        result += diff * diff;\n    }\n    return result;\n}\n/**\n * Asserts that the expression is true. Otherwise throws an error with the\n * provided message.\n *\n * ```js\n * const x = 2;\n * tf.util.assert(x === 2, 'x is not 2');\n * ```\n *\n * @param expr The expression to assert (as a boolean).\n * @param msg A function that returns the message to report when throwing an\n *     error. We use a function for performance reasons.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function assert(expr, msg) {\n    if (!expr) {\n        throw new Error(typeof msg === 'string' ? msg : msg());\n    }\n}\nexport function assertShapesMatch(shapeA, shapeB, errorMessagePrefix = '') {\n    assert(arraysEqual(shapeA, shapeB), () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n}\nexport function assertNonNull(a) {\n    assert(a != null, () => `The input to the tensor constructor must be a non-null value.`);\n}\n// NOTE: We explicitly type out what T extends instead of any so that\n// util.flatten on a nested array of number doesn't try to infer T as a\n// number[][], causing us to explicitly type util.flatten<number>().\n/**\n *  Flattens an arbitrarily nested array.\n *\n * ```js\n * const a = [[1, 2], [3, 4], [5, [6, [7]]]];\n * const flat = tf.util.flatten(a);\n * console.log(flat);\n * ```\n *\n *  @param arr The nested array to flatten.\n *  @param result The destination array which holds the elements.\n *  @param skipTypedArray If true, avoids flattening the typed arrays. Defaults\n *      to false.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function flatten(arr, result = [], skipTypedArray = false) {\n    if (result == null) {\n        result = [];\n    }\n    if (Array.isArray(arr) || isTypedArray(arr) && !skipTypedArray) {\n        for (let i = 0; i < arr.length; ++i) {\n            flatten(arr[i], result, skipTypedArray);\n        }\n    }\n    else {\n        result.push(arr);\n    }\n    return result;\n}\n/**\n * Returns the size (number of elements) of the tensor given its shape.\n *\n * ```js\n * const shape = [3, 4, 2];\n * const size = tf.util.sizeFromShape(shape);\n * console.log(size);\n * ```\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function sizeFromShape(shape) {\n    if (shape.length === 0) {\n        // Scalar.\n        return 1;\n    }\n    let size = shape[0];\n    for (let i = 1; i < shape.length; i++) {\n        size *= shape[i];\n    }\n    return size;\n}\nexport function isScalarShape(shape) {\n    return shape.length === 0;\n}\nexport function arraysEqual(n1, n2) {\n    if (n1 === n2) {\n        return true;\n    }\n    if (n1 == null || n2 == null) {\n        return false;\n    }\n    if (n1.length !== n2.length) {\n        return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n        if (n1[i] !== n2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function isInt(a) {\n    return a % 1 === 0;\n}\nexport function tanh(x) {\n    // tslint:disable-next-line:no-any\n    if (Math.tanh != null) {\n        // tslint:disable-next-line:no-any\n        return Math.tanh(x);\n    }\n    if (x === Infinity) {\n        return 1;\n    }\n    else if (x === -Infinity) {\n        return -1;\n    }\n    else {\n        const e2x = Math.exp(2 * x);\n        return (e2x - 1) / (e2x + 1);\n    }\n}\nexport function sizeToSquarishShape(size) {\n    const width = Math.ceil(Math.sqrt(size));\n    return [width, Math.ceil(size / width)];\n}\n/**\n * Creates a new array with randomized indices to a given quantity.\n *\n * ```js\n * const randomTen = tf.util.createShuffledIndices(10);\n * console.log(randomTen);\n * ```\n *\n * @param number Quantity of how many shuffled indices to create.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function createShuffledIndices(n) {\n    const shuffledIndices = new Uint32Array(n);\n    for (let i = 0; i < n; ++i) {\n        shuffledIndices[i] = i;\n    }\n    shuffle(shuffledIndices);\n    return shuffledIndices;\n}\nexport function rightPad(a, size) {\n    if (size <= a.length) {\n        return a;\n    }\n    return a + ' '.repeat(size - a.length);\n}\nexport function repeatedTry(checkFn, delayFn = (counter) => 0, maxCounter, scheduleFn = setTimeout) {\n    return new Promise((resolve, reject) => {\n        let tryCount = 0;\n        const tryFn = () => {\n            if (checkFn()) {\n                resolve();\n                return;\n            }\n            tryCount++;\n            const nextBackoff = delayFn(tryCount);\n            if (maxCounter != null && tryCount >= maxCounter) {\n                reject();\n                return;\n            }\n            scheduleFn(tryFn, nextBackoff);\n        };\n        tryFn();\n    });\n}\n/**\n * Given the full size of the array and a shape that may contain -1 as the\n * implicit dimension, returns the inferred shape where -1 is replaced.\n * E.g. For shape=[2, -1, 3] and size=24, it will return [2, 4, 3].\n *\n * @param shape The shape, which may contain -1 in some dimension.\n * @param size The full size (number of elements) of the array.\n * @return The inferred shape where -1 is replaced with the inferred size.\n */\nexport function inferFromImplicitShape(shape, size) {\n    let shapeProd = 1;\n    let implicitIdx = -1;\n    for (let i = 0; i < shape.length; ++i) {\n        if (shape[i] >= 0) {\n            shapeProd *= shape[i];\n        }\n        else if (shape[i] === -1) {\n            if (implicitIdx !== -1) {\n                throw Error(`Shapes can only have 1 implicit size. ` +\n                    `Found -1 at dim ${implicitIdx} and dim ${i}`);\n            }\n            implicitIdx = i;\n        }\n        else if (shape[i] < 0) {\n            throw Error(`Shapes can not be < 0. Found ${shape[i]} at dim ${i}`);\n        }\n    }\n    if (implicitIdx === -1) {\n        if (size > 0 && size !== shapeProd) {\n            throw Error(`Size(${size}) must match the product of shape ${shape}`);\n        }\n        return shape;\n    }\n    if (shapeProd === 0) {\n        throw Error(`Cannot infer the missing size in [${shape}] when ` +\n            `there are 0 elements`);\n    }\n    if (size % shapeProd !== 0) {\n        throw Error(`The implicit shape can't be a fractional number. ` +\n            `Got ${size} / ${shapeProd}`);\n    }\n    const newShape = shape.slice();\n    newShape[implicitIdx] = size / shapeProd;\n    return newShape;\n}\nexport function parseAxisParam(axis, shape) {\n    const rank = shape.length;\n    // Normalize input\n    axis = axis == null ? shape.map((s, i) => i) : [].concat(axis);\n    // Check for valid range\n    assert(axis.every(ax => ax >= -rank && ax < rank), () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n        `got axis ${axis}`);\n    // Check for only integers\n    assert(axis.every(ax => isInt(ax)), () => `All values in axis param must be integers but ` +\n        `got axis ${axis}`);\n    // Handle negative axis.\n    return axis.map(a => a < 0 ? rank + a : a);\n}\n/** Reduces the shape by removing all dimensions of shape 1. */\nexport function squeezeShape(shape, axis) {\n    const newShape = [];\n    const keptDims = [];\n    const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n    const axes = (axis == null || isEmptyArray) ?\n        null :\n        parseAxisParam(axis, shape).sort();\n    let j = 0;\n    for (let i = 0; i < shape.length; ++i) {\n        if (axes != null) {\n            if (axes[j] === i && shape[i] !== 1) {\n                throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n            }\n            if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n                newShape.push(shape[i]);\n                keptDims.push(i);\n            }\n            if (axes[j] <= i) {\n                j++;\n            }\n        }\n        if (shape[i] !== 1) {\n            newShape.push(shape[i]);\n            keptDims.push(i);\n        }\n    }\n    return { newShape, keptDims };\n}\nexport function getTypedArrayFromDType(dtype, size) {\n    let values = null;\n    if (dtype == null || dtype === 'float32') {\n        values = new Float32Array(size);\n    }\n    else if (dtype === 'int32') {\n        values = new Int32Array(size);\n    }\n    else if (dtype === 'bool') {\n        values = new Uint8Array(size);\n    }\n    else {\n        throw new Error(`Unknown data type ${dtype}`);\n    }\n    return values;\n}\nexport function getArrayFromDType(dtype, size) {\n    let values = null;\n    if (dtype == null || dtype === 'float32') {\n        values = new Float32Array(size);\n    }\n    else if (dtype === 'int32') {\n        values = new Int32Array(size);\n    }\n    else if (dtype === 'bool') {\n        values = new Uint8Array(size);\n    }\n    else if (dtype === 'string') {\n        values = new Array(size);\n    }\n    else {\n        throw new Error(`Unknown data type ${dtype}`);\n    }\n    return values;\n}\nexport function checkConversionForErrors(vals, dtype) {\n    for (let i = 0; i < vals.length; i++) {\n        const num = vals[i];\n        if (isNaN(num) || !isFinite(num)) {\n            throw Error(`A tensor of type ${dtype} being uploaded contains ${num}.`);\n        }\n    }\n}\n/** Returns true if the dtype is valid. */\nexport function isValidDtype(dtype) {\n    return dtype === 'bool' || dtype === 'complex64' || dtype === 'float32' ||\n        dtype === 'int32' || dtype === 'string';\n}\n/**\n * Returns true if the new type can't encode the old type without loss of\n * precision.\n */\nexport function hasEncodingLoss(oldType, newType) {\n    if (newType === 'complex64') {\n        return false;\n    }\n    if (newType === 'float32' && oldType !== 'complex64') {\n        return false;\n    }\n    if (newType === 'int32' && oldType !== 'float32' && oldType !== 'complex64') {\n        return false;\n    }\n    if (newType === 'bool' && oldType === 'bool') {\n        return false;\n    }\n    return true;\n}\nexport function isTypedArray(a) {\n    return a instanceof Float32Array || a instanceof Int32Array ||\n        a instanceof Uint8Array || a instanceof Uint8ClampedArray;\n}\nexport function bytesPerElement(dtype) {\n    if (dtype === 'float32' || dtype === 'int32') {\n        return 4;\n    }\n    else if (dtype === 'complex64') {\n        return 8;\n    }\n    else if (dtype === 'bool') {\n        return 1;\n    }\n    else {\n        throw new Error(`Unknown dtype ${dtype}`);\n    }\n}\n/**\n * Returns the approximate number of bytes allocated in the string array - 2\n * bytes per character. Computing the exact bytes for a native string in JS\n * is not possible since it depends on the encoding of the html page that\n * serves the website.\n */\nexport function bytesFromStringArray(arr) {\n    if (arr == null) {\n        return 0;\n    }\n    let bytes = 0;\n    arr.forEach(x => bytes += x.length);\n    return bytes;\n}\n/** Returns true if the value is a string. */\nexport function isString(value) {\n    return typeof value === 'string' || value instanceof String;\n}\nexport function isBoolean(value) {\n    return typeof value === 'boolean';\n}\nexport function isNumber(value) {\n    return typeof value === 'number';\n}\nexport function inferDtype(values) {\n    if (Array.isArray(values)) {\n        return inferDtype(values[0]);\n    }\n    if (values instanceof Float32Array) {\n        return 'float32';\n    }\n    else if (values instanceof Int32Array || values instanceof Uint8Array ||\n        values instanceof Uint8ClampedArray) {\n        return 'int32';\n    }\n    else if (isNumber(values)) {\n        return 'float32';\n    }\n    else if (isString(values)) {\n        return 'string';\n    }\n    else if (isBoolean(values)) {\n        return 'bool';\n    }\n    return 'float32';\n}\nexport function isFunction(f) {\n    return !!(f && f.constructor && f.call && f.apply);\n}\nexport function nearestDivisor(size, start) {\n    for (let i = start; i < size; ++i) {\n        if (size % i === 0) {\n            return i;\n        }\n    }\n    return size;\n}\nexport function computeStrides(shape) {\n    const rank = shape.length;\n    if (rank < 2) {\n        return [];\n    }\n    // Last dimension has implicit stride of 1, thus having D-1 (instead of D)\n    // strides.\n    const strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n        strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    return strides;\n}\nfunction createNestedArray(offset, shape, a, isComplex = false) {\n    const ret = new Array();\n    if (shape.length === 1) {\n        const d = shape[0] * (isComplex ? 2 : 1);\n        for (let i = 0; i < d; i++) {\n            ret[i] = a[offset + i];\n        }\n    }\n    else {\n        const d = shape[0];\n        const rest = shape.slice(1);\n        const len = rest.reduce((acc, c) => acc * c) * (isComplex ? 2 : 1);\n        for (let i = 0; i < d; i++) {\n            ret[i] = createNestedArray(offset + i * len, rest, a, isComplex);\n        }\n    }\n    return ret;\n}\n// Provide a nested array of TypedArray in given shape.\nexport function toNestedArray(shape, a, isComplex = false) {\n    if (shape.length === 0) {\n        // Scalar type should return a single number.\n        return a[0];\n    }\n    const size = shape.reduce((acc, c) => acc * c) * (isComplex ? 2 : 1);\n    if (size === 0) {\n        // A tensor with shape zero should be turned into empty list.\n        return [];\n    }\n    if (size !== a.length) {\n        throw new Error(`[${shape}] does not match the input size ${a.length}${isComplex ? ' for a complex tensor' : ''}.`);\n    }\n    return createNestedArray(0, shape, a, isComplex);\n}\nexport function makeOnesTypedArray(size, dtype) {\n    const array = makeZerosTypedArray(size, dtype);\n    for (let i = 0; i < array.length; i++) {\n        array[i] = 1;\n    }\n    return array;\n}\nexport function makeZerosTypedArray(size, dtype) {\n    if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n        return new Float32Array(size);\n    }\n    else if (dtype === 'int32') {\n        return new Int32Array(size);\n    }\n    else if (dtype === 'bool') {\n        return new Uint8Array(size);\n    }\n    else {\n        throw new Error(`Unknown data type ${dtype}`);\n    }\n}\n/**\n * Make nested `TypedArray` filled with zeros.\n * @param shape The shape information for the nested array.\n * @param dtype dtype of the array element.\n */\nexport function makeZerosNestedTypedArray(shape, dtype) {\n    const size = shape.reduce((prev, curr) => prev * curr, 1);\n    if (dtype == null || dtype === 'float32') {\n        return toNestedArray(shape, new Float32Array(size));\n    }\n    else if (dtype === 'int32') {\n        return toNestedArray(shape, new Int32Array(size));\n    }\n    else if (dtype === 'bool') {\n        return toNestedArray(shape, new Uint8Array(size));\n    }\n    else {\n        throw new Error(`Unknown data type ${dtype}`);\n    }\n}\nexport function assertNonNegativeIntegerDimensions(shape) {\n    shape.forEach(dimSize => {\n        assert(Number.isInteger(dimSize) && dimSize >= 0, () => `Tensor must have a shape comprised of positive integers but got ` +\n            `shape [${shape}].`);\n    });\n}\n/**\n * Computes flat index for a given location (multidimentionsal index) in a\n * Tensor/multidimensional array.\n *\n * @param locs Location in the tensor.\n * @param rank Rank of the tensor.\n * @param strides Tensor strides.\n */\nexport function locToIndex(locs, rank, strides) {\n    if (rank === 0) {\n        return 0;\n    }\n    else if (rank === 1) {\n        return locs[0];\n    }\n    let index = locs[locs.length - 1];\n    for (let i = 0; i < locs.length - 1; ++i) {\n        index += strides[i] * locs[i];\n    }\n    return index;\n}\n/**\n * Computes the location (multidimensional index) in a\n * tensor/multidimentional array for a given flat index.\n *\n * @param index Index in flat array.\n * @param rank Rank of tensor.\n * @param strides Strides of tensor.\n */\nexport function indexToLoc(index, rank, strides) {\n    if (rank === 0) {\n        return [];\n    }\n    else if (rank === 1) {\n        return [index];\n    }\n    const locs = new Array(rank);\n    for (let i = 0; i < locs.length - 1; ++i) {\n        locs[i] = Math.floor(index / strides[i]);\n        index -= locs[i] * strides[i];\n    }\n    locs[locs.length - 1] = index;\n    return locs;\n}\n/**\n * This method asserts whether an object is a Promise instance.\n * @param object\n */\n// tslint:disable-next-line: no-any\nexport function isPromise(object) {\n    //  We chose to not use 'obj instanceOf Promise' for two reasons:\n    //  1. It only reliably works for es6 Promise, not other Promise\n    //  implementations.\n    //  2. It doesn't work with framework that uses zone.js. zone.js monkey\n    //  patch the async calls, so it is possible the obj (patched) is\n    //  comparing to a pre-patched Promise.\n    return object && object.then && typeof object.then === 'function';\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}