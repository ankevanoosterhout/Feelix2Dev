{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2D, env } from '@tensorflow/tfjs-core';\nimport { Conv2DProgram } from '../conv_gpu';\nimport { Conv2DPackedProgram } from '../conv_packed_gpu';\nimport { conv2dByMatMul, conv2dWithIm2Row } from './Conv2D_impl';\nimport { reshape } from './Reshape';\nexport function conv2d(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode\n  } = attrs;\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false\n  /* depthwise */\n  , $dataFormat);\n  let out;\n\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 && convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 && convInfo.strideHeight === 1 && convInfo.strideWidth === 1 && (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({\n      x,\n      filter,\n      convInfo,\n      backend\n    });\n  } else if (convInfo.strideWidth <= 2 && $dataFormat === 'channelsLast' && env().getBool('WEBGL_EXP_CONV')) {\n    const program = new Conv2DPackedProgram(convInfo);\n    const customValues = [[convInfo.padInfo.top, convInfo.padInfo.left], [convInfo.strideHeight, convInfo.strideWidth], [convInfo.dilationHeight, convInfo.dilationWidth], [convInfo.inHeight, convInfo.inWidth]];\n    out = backend.runWebGLProgram(program, [x, filter], 'float32', customValues);\n  } else if (env().getBool('WEBGL_CONV_IM2COL')) {\n    out = conv2dWithIm2Row({\n      x,\n      filter,\n      convInfo,\n      backend\n    });\n  } else {\n    const program = new Conv2DProgram(convInfo);\n    out = backend.runWebGLProgram(program, [x, filter], 'float32');\n  }\n\n  const outReshaped = reshape({\n    inputs: {\n      x: out\n    },\n    backend,\n    attrs: {\n      shape: convInfo.outShape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(out);\n  return outReshaped;\n}\nexport const conv2DConfig = {\n  kernelName: Conv2D,\n  backendName: 'webgl',\n  kernelFunc: conv2d\n};","map":{"version":3,"names":["backend_util","Conv2D","env","Conv2DProgram","Conv2DPackedProgram","conv2dByMatMul","conv2dWithIm2Row","reshape","conv2d","args","inputs","backend","attrs","x","filter","strides","pad","dataFormat","dilations","dimRoundingMode","$dataFormat","convertConv2DDataFormat","convInfo","computeConv2DInfo","shape","out","filterHeight","filterWidth","dilationHeight","dilationWidth","strideHeight","strideWidth","padInfo","type","getBool","program","customValues","top","left","inHeight","inWidth","runWebGLProgram","outReshaped","outShape","disposeIntermediateTensorInfo","conv2DConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2D.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2D, env } from '@tensorflow/tfjs-core';\nimport { Conv2DProgram } from '../conv_gpu';\nimport { Conv2DPackedProgram } from '../conv_packed_gpu';\nimport { conv2dByMatMul, conv2dWithIm2Row } from './Conv2D_impl';\nimport { reshape } from './Reshape';\nexport function conv2d(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter } = inputs;\n    const { strides, pad, dataFormat, dilations, dimRoundingMode } = attrs;\n    const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n    const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false /* depthwise */, $dataFormat);\n    let out;\n    if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n        convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n        convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n        (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n        out = conv2dByMatMul({ x, filter, convInfo, backend });\n    }\n    else if (convInfo.strideWidth <= 2 && $dataFormat === 'channelsLast'\n        && env().getBool('WEBGL_EXP_CONV')) {\n        const program = new Conv2DPackedProgram(convInfo);\n        const customValues = [\n            [convInfo.padInfo.top, convInfo.padInfo.left],\n            [convInfo.strideHeight, convInfo.strideWidth],\n            [convInfo.dilationHeight, convInfo.dilationWidth],\n            [convInfo.inHeight, convInfo.inWidth]\n        ];\n        out =\n            backend.runWebGLProgram(program, [x, filter], 'float32', customValues);\n    }\n    else if (env().getBool('WEBGL_CONV_IM2COL')) {\n        out = conv2dWithIm2Row({ x, filter, convInfo, backend });\n    }\n    else {\n        const program = new Conv2DProgram(convInfo);\n        out = backend.runWebGLProgram(program, [x, filter], 'float32');\n    }\n    const outReshaped = reshape({ inputs: { x: out }, backend, attrs: { shape: convInfo.outShape } });\n    backend.disposeIntermediateTensorInfo(out);\n    return outReshaped;\n}\nexport const conv2DConfig = {\n    kernelName: Conv2D,\n    backendName: 'webgl',\n    kernelFunc: conv2d,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}