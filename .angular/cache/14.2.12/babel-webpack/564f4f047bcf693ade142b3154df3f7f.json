{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n  switch (node.op) {\n    case 'Cast':\n      {\n        return [ops.cast(getParamValue('x', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n      }\n\n    case 'ExpandDims':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        return [ops.expandDims(getParamValue('x', node, tensorMap, context), axis)];\n      }\n\n    case 'Squeeze':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        return [ops.squeeze(getParamValue('x', node, tensorMap, context), axis)];\n      }\n\n    case 'Reshape':\n      {\n        return [ops.reshape(getParamValue('x', node, tensorMap, context), getParamValue('shape', node, tensorMap, context))];\n      }\n\n    case 'MirrorPad':\n      {\n        return [ops.mirrorPad(getParamValue('x', node, tensorMap, context), getParamValue('padding', node, tensorMap, context), getParamValue('mode', node, tensorMap, context))];\n      }\n\n    case 'PadV2':\n    case 'Pad':\n      {\n        return [ops.pad(getParamValue('x', node, tensorMap, context), getParamValue('padding', node, tensorMap, context), getParamValue('constantValue', node, tensorMap, context))];\n      }\n\n    case 'SpaceToBatchND':\n      {\n        const blockShape = getParamValue('blockShape', node, tensorMap, context);\n        const paddings = getParamValue('paddings', node, tensorMap, context);\n        return [ops.spaceToBatchND(getParamValue('x', node, tensorMap, context), blockShape, paddings)];\n      }\n\n    case 'BatchToSpaceND':\n      {\n        const blockShape = getParamValue('blockShape', node, tensorMap, context);\n        const crops = getParamValue('crops', node, tensorMap, context);\n        return [ops.batchToSpaceND(getParamValue('x', node, tensorMap, context), blockShape, crops)];\n      }\n\n    case 'DepthToSpace':\n      {\n        const blockSize = getParamValue('blockSize', node, tensorMap, context);\n        const dataFormat = getParamValue('dataFormat', node, tensorMap, context).toUpperCase();\n        return [ops.depthToSpace(getParamValue('x', node, tensorMap, context), blockSize, dataFormat)];\n      }\n\n    case 'BroadcastTo':\n      {\n        return [ops.broadcastTo(getParamValue('x', node, tensorMap, context), getParamValue('shape', node, tensorMap, context))];\n      }\n\n    case 'BroadcastArgs':\n      {\n        return [ops.broadcastArgs(getParamValue('s0', node, tensorMap, context), getParamValue('s1', node, tensorMap, context))];\n      }\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'transformation';","map":{"version":3,"names":["tfOps","getParamValue","executeOp","node","tensorMap","context","ops","op","cast","axis","expandDims","squeeze","reshape","mirrorPad","pad","blockShape","paddings","spaceToBatchND","crops","batchToSpaceND","blockSize","dataFormat","toUpperCase","depthToSpace","broadcastTo","broadcastArgs","TypeError","CATEGORY"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/transformation_executor.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'Cast': {\n            return [ops.cast(getParamValue('x', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n        }\n        case 'ExpandDims': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            return [ops.expandDims(getParamValue('x', node, tensorMap, context), axis)];\n        }\n        case 'Squeeze': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            return [ops.squeeze(getParamValue('x', node, tensorMap, context), axis)];\n        }\n        case 'Reshape': {\n            return [ops.reshape(getParamValue('x', node, tensorMap, context), getParamValue('shape', node, tensorMap, context))];\n        }\n        case 'MirrorPad': {\n            return [ops.mirrorPad(getParamValue('x', node, tensorMap, context), getParamValue('padding', node, tensorMap, context), getParamValue('mode', node, tensorMap, context))];\n        }\n        case 'PadV2':\n        case 'Pad': {\n            return [ops.pad(getParamValue('x', node, tensorMap, context), getParamValue('padding', node, tensorMap, context), getParamValue('constantValue', node, tensorMap, context))];\n        }\n        case 'SpaceToBatchND': {\n            const blockShape = getParamValue('blockShape', node, tensorMap, context);\n            const paddings = getParamValue('paddings', node, tensorMap, context);\n            return [ops.spaceToBatchND(getParamValue('x', node, tensorMap, context), blockShape, paddings)];\n        }\n        case 'BatchToSpaceND': {\n            const blockShape = getParamValue('blockShape', node, tensorMap, context);\n            const crops = getParamValue('crops', node, tensorMap, context);\n            return [ops.batchToSpaceND(getParamValue('x', node, tensorMap, context), blockShape, crops)];\n        }\n        case 'DepthToSpace': {\n            const blockSize = getParamValue('blockSize', node, tensorMap, context);\n            const dataFormat = getParamValue('dataFormat', node, tensorMap, context).toUpperCase();\n            return [ops.depthToSpace(getParamValue('x', node, tensorMap, context), blockSize, dataFormat)];\n        }\n        case 'BroadcastTo': {\n            return [ops.broadcastTo(getParamValue('x', node, tensorMap, context), getParamValue('shape', node, tensorMap, context))];\n        }\n        case 'BroadcastArgs': {\n            return [ops.broadcastArgs(getParamValue('s0', node, tensorMap, context), getParamValue('s1', node, tensorMap, context))];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'transformation';\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}