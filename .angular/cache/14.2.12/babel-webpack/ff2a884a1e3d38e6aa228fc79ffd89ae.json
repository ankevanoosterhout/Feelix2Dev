{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { ResizeNearestNeighbor } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\n/**\n * NearestNeighbor resize a batch of 3D images to a new shape.\n *\n * @param images The images, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param size The new shape `[newHeight, newWidth]` to resize the\n *     images to. Each channel is resized individually.\n * @param alignCorners Defaults to False. If true, rescale\n *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4\n *     corners of images and resized images. If false, rescale by\n *     `new_height / height`. Treat similarly the width dimension.\n * @param halfPixelCenters Defaults to `false`. Whether to assume pixels are of\n *      half the actual dimensions, and yield more accurate resizes. This flag\n *      would also make the floating point coordinates of the top left pixel\n *      0.5, 0.5.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\n\nfunction resizeNearestNeighbor_(images, size, alignCorners = false, halfPixelCenters = false) {\n  const $images = convertToTensor(images, 'images', 'resizeNearestNeighbor');\n  util.assert($images.rank === 3 || $images.rank === 4, () => `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got ` + `rank ${$images.rank}.`);\n  util.assert(size.length === 2, () => `Error in resizeNearestNeighbor: new shape must 2D, but got shape ` + `${size}.`);\n  util.assert($images.dtype === 'float32' || $images.dtype === 'int32', () => '`images` must have `int32` or `float32` as dtype');\n  util.assert(halfPixelCenters === false || alignCorners === false, () => `Error in resizeNearestNeighbor: If halfPixelCenters is true, ` + `alignCorners must be false.`);\n  let batchImages = $images;\n  let reshapedTo4D = false;\n\n  if ($images.rank === 3) {\n    reshapedTo4D = true;\n    batchImages = reshape($images, [1, $images.shape[0], $images.shape[1], $images.shape[2]]);\n  }\n\n  const [] = size;\n  const inputs = {\n    images: batchImages\n  };\n  const attrs = {\n    alignCorners,\n    halfPixelCenters,\n    size\n  }; // tslint:disable-next-line: no-unnecessary-type-assertion\n\n  const res = ENGINE.runKernel(ResizeNearestNeighbor, inputs, attrs);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n\n  return res;\n}\n\nexport const resizeNearestNeighbor = op({\n  resizeNearestNeighbor_\n});","map":{"version":3,"names":["ENGINE","ResizeNearestNeighbor","convertToTensor","util","op","reshape","resizeNearestNeighbor_","images","size","alignCorners","halfPixelCenters","$images","assert","rank","length","dtype","batchImages","reshapedTo4D","shape","inputs","attrs","res","runKernel","resizeNearestNeighbor"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/image/resize_nearest_neighbor.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { ResizeNearestNeighbor } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\n/**\n * NearestNeighbor resize a batch of 3D images to a new shape.\n *\n * @param images The images, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param size The new shape `[newHeight, newWidth]` to resize the\n *     images to. Each channel is resized individually.\n * @param alignCorners Defaults to False. If true, rescale\n *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4\n *     corners of images and resized images. If false, rescale by\n *     `new_height / height`. Treat similarly the width dimension.\n * @param halfPixelCenters Defaults to `false`. Whether to assume pixels are of\n *      half the actual dimensions, and yield more accurate resizes. This flag\n *      would also make the floating point coordinates of the top left pixel\n *      0.5, 0.5.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction resizeNearestNeighbor_(images, size, alignCorners = false, halfPixelCenters = false) {\n    const $images = convertToTensor(images, 'images', 'resizeNearestNeighbor');\n    util.assert($images.rank === 3 || $images.rank === 4, () => `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got ` +\n        `rank ${$images.rank}.`);\n    util.assert(size.length === 2, () => `Error in resizeNearestNeighbor: new shape must 2D, but got shape ` +\n        `${size}.`);\n    util.assert($images.dtype === 'float32' || $images.dtype === 'int32', () => '`images` must have `int32` or `float32` as dtype');\n    util.assert(halfPixelCenters === false || alignCorners === false, () => `Error in resizeNearestNeighbor: If halfPixelCenters is true, ` +\n        `alignCorners must be false.`);\n    let batchImages = $images;\n    let reshapedTo4D = false;\n    if ($images.rank === 3) {\n        reshapedTo4D = true;\n        batchImages = reshape($images, [1, $images.shape[0], $images.shape[1], $images.shape[2]]);\n    }\n    const [] = size;\n    const inputs = { images: batchImages };\n    const attrs = { alignCorners, halfPixelCenters, size };\n    // tslint:disable-next-line: no-unnecessary-type-assertion\n    const res = ENGINE.runKernel(ResizeNearestNeighbor, inputs, attrs);\n    if (reshapedTo4D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n    }\n    return res;\n}\nexport const resizeNearestNeighbor = op({ resizeNearestNeighbor_ });\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,cAAvB;AACA,SAASC,qBAAT,QAAsC,oBAAtC;AACA,SAASC,eAAT,QAAgC,uBAAhC;AACA,OAAO,KAAKC,IAAZ,MAAsB,YAAtB;AACA,SAASC,EAAT,QAAmB,cAAnB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,sBAAT,CAAgCC,MAAhC,EAAwCC,IAAxC,EAA8CC,YAAY,GAAG,KAA7D,EAAoEC,gBAAgB,GAAG,KAAvF,EAA8F;EAC1F,MAAMC,OAAO,GAAGT,eAAe,CAACK,MAAD,EAAS,QAAT,EAAmB,uBAAnB,CAA/B;EACAJ,IAAI,CAACS,MAAL,CAAYD,OAAO,CAACE,IAAR,KAAiB,CAAjB,IAAsBF,OAAO,CAACE,IAAR,KAAiB,CAAnD,EAAsD,MAAO,iEAAD,GACvD,QAAOF,OAAO,CAACE,IAAK,GADzB;EAEAV,IAAI,CAACS,MAAL,CAAYJ,IAAI,CAACM,MAAL,KAAgB,CAA5B,EAA+B,MAAO,mEAAD,GAChC,GAAEN,IAAK,GADZ;EAEAL,IAAI,CAACS,MAAL,CAAYD,OAAO,CAACI,KAAR,KAAkB,SAAlB,IAA+BJ,OAAO,CAACI,KAAR,KAAkB,OAA7D,EAAsE,MAAM,kDAA5E;EACAZ,IAAI,CAACS,MAAL,CAAYF,gBAAgB,KAAK,KAArB,IAA8BD,YAAY,KAAK,KAA3D,EAAkE,MAAO,+DAAD,GACnE,6BADL;EAEA,IAAIO,WAAW,GAAGL,OAAlB;EACA,IAAIM,YAAY,GAAG,KAAnB;;EACA,IAAIN,OAAO,CAACE,IAAR,KAAiB,CAArB,EAAwB;IACpBI,YAAY,GAAG,IAAf;IACAD,WAAW,GAAGX,OAAO,CAACM,OAAD,EAAU,CAAC,CAAD,EAAIA,OAAO,CAACO,KAAR,CAAc,CAAd,CAAJ,EAAsBP,OAAO,CAACO,KAAR,CAAc,CAAd,CAAtB,EAAwCP,OAAO,CAACO,KAAR,CAAc,CAAd,CAAxC,CAAV,CAArB;EACH;;EACD,MAAM,KAAKV,IAAX;EACA,MAAMW,MAAM,GAAG;IAAEZ,MAAM,EAAES;EAAV,CAAf;EACA,MAAMI,KAAK,GAAG;IAAEX,YAAF;IAAgBC,gBAAhB;IAAkCF;EAAlC,CAAd,CAjB0F,CAkB1F;;EACA,MAAMa,GAAG,GAAGrB,MAAM,CAACsB,SAAP,CAAiBrB,qBAAjB,EAAwCkB,MAAxC,EAAgDC,KAAhD,CAAZ;;EACA,IAAIH,YAAJ,EAAkB;IACd,OAAOZ,OAAO,CAACgB,GAAD,EAAM,CAACA,GAAG,CAACH,KAAJ,CAAU,CAAV,CAAD,EAAeG,GAAG,CAACH,KAAJ,CAAU,CAAV,CAAf,EAA6BG,GAAG,CAACH,KAAJ,CAAU,CAAV,CAA7B,CAAN,CAAd;EACH;;EACD,OAAOG,GAAP;AACH;;AACD,OAAO,MAAME,qBAAqB,GAAGnB,EAAE,CAAC;EAAEE;AAAF,CAAD,CAAhC"},"metadata":{},"sourceType":"module"}