{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DepthToSpace } from '@tensorflow/tfjs-core';\nimport { DepthToSpaceProgram } from '../depth_to_space_gpu';\nexport function depthToSpace(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    blockSize,\n    dataFormat\n  } = attrs;\n  const batchSize = x.shape[0];\n  const inputHeight = dataFormat === 'NHWC' ? x.shape[1] : x.shape[2];\n  const inputWidth = dataFormat === 'NHWC' ? x.shape[2] : x.shape[3];\n  const inputDepth = dataFormat === 'NHWC' ? x.shape[3] : x.shape[1];\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n  const outputShape = dataFormat === 'NHWC' ? [batchSize, outputHeight, outputWidth, outputDepth] : [batchSize, outputDepth, outputHeight, outputWidth];\n  const program = new DepthToSpaceProgram(outputShape, blockSize, dataFormat);\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\nexport const depthToSpaceConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'webgl',\n  kernelFunc: depthToSpace\n};","map":{"version":3,"names":["DepthToSpace","DepthToSpaceProgram","depthToSpace","args","inputs","backend","attrs","x","blockSize","dataFormat","batchSize","shape","inputHeight","inputWidth","inputDepth","outputHeight","outputWidth","outputDepth","outputShape","program","runWebGLProgram","dtype","depthToSpaceConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DepthToSpace.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DepthToSpace } from '@tensorflow/tfjs-core';\nimport { DepthToSpaceProgram } from '../depth_to_space_gpu';\nexport function depthToSpace(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { blockSize, dataFormat } = attrs;\n    const batchSize = x.shape[0];\n    const inputHeight = (dataFormat === 'NHWC') ? x.shape[1] : x.shape[2];\n    const inputWidth = (dataFormat === 'NHWC') ? x.shape[2] : x.shape[3];\n    const inputDepth = (dataFormat === 'NHWC') ? x.shape[3] : x.shape[1];\n    const outputHeight = inputHeight * blockSize;\n    const outputWidth = inputWidth * blockSize;\n    const outputDepth = inputDepth / (blockSize * blockSize);\n    const outputShape = (dataFormat === 'NHWC') ?\n        [batchSize, outputHeight, outputWidth, outputDepth] :\n        [batchSize, outputDepth, outputHeight, outputWidth];\n    const program = new DepthToSpaceProgram(outputShape, blockSize, dataFormat);\n    return backend.runWebGLProgram(program, [x], x.dtype);\n}\nexport const depthToSpaceConfig = {\n    kernelName: DepthToSpace,\n    backendName: 'webgl',\n    kernelFunc: depthToSpace\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,QAA6B,uBAA7B;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,OAAO,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;EAC/B,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BH,IAAnC;EACA,MAAM;IAAEI;EAAF,IAAQH,MAAd;EACA,MAAM;IAAEI,SAAF;IAAaC;EAAb,IAA4BH,KAAlC;EACA,MAAMI,SAAS,GAAGH,CAAC,CAACI,KAAF,CAAQ,CAAR,CAAlB;EACA,MAAMC,WAAW,GAAIH,UAAU,KAAK,MAAhB,GAA0BF,CAAC,CAACI,KAAF,CAAQ,CAAR,CAA1B,GAAuCJ,CAAC,CAACI,KAAF,CAAQ,CAAR,CAA3D;EACA,MAAME,UAAU,GAAIJ,UAAU,KAAK,MAAhB,GAA0BF,CAAC,CAACI,KAAF,CAAQ,CAAR,CAA1B,GAAuCJ,CAAC,CAACI,KAAF,CAAQ,CAAR,CAA1D;EACA,MAAMG,UAAU,GAAIL,UAAU,KAAK,MAAhB,GAA0BF,CAAC,CAACI,KAAF,CAAQ,CAAR,CAA1B,GAAuCJ,CAAC,CAACI,KAAF,CAAQ,CAAR,CAA1D;EACA,MAAMI,YAAY,GAAGH,WAAW,GAAGJ,SAAnC;EACA,MAAMQ,WAAW,GAAGH,UAAU,GAAGL,SAAjC;EACA,MAAMS,WAAW,GAAGH,UAAU,IAAIN,SAAS,GAAGA,SAAhB,CAA9B;EACA,MAAMU,WAAW,GAAIT,UAAU,KAAK,MAAhB,GAChB,CAACC,SAAD,EAAYK,YAAZ,EAA0BC,WAA1B,EAAuCC,WAAvC,CADgB,GAEhB,CAACP,SAAD,EAAYO,WAAZ,EAAyBF,YAAzB,EAAuCC,WAAvC,CAFJ;EAGA,MAAMG,OAAO,GAAG,IAAIlB,mBAAJ,CAAwBiB,WAAxB,EAAqCV,SAArC,EAAgDC,UAAhD,CAAhB;EACA,OAAOJ,OAAO,CAACe,eAAR,CAAwBD,OAAxB,EAAiC,CAACZ,CAAD,CAAjC,EAAsCA,CAAC,CAACc,KAAxC,CAAP;AACH;AACD,OAAO,MAAMC,kBAAkB,GAAG;EAC9BC,UAAU,EAAEvB,YADkB;EAE9BwB,WAAW,EAAE,OAFiB;EAG9BC,UAAU,EAAEvB;AAHkB,CAA3B"},"metadata":{},"sourceType":"module"}