{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AddN, env, upcastType } from '@tensorflow/tfjs-core';\nimport { AddNProgram } from '../addn_gpu';\nimport { AddNPackedProgram } from '../addn_packed_gpu';\nimport { identity } from './Identity';\nexport function addN(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const tensors = inputs;\n\n  if (tensors.length === 1) {\n    return identity({\n      inputs: {\n        x: tensors[0]\n      },\n      backend\n    });\n  } // Limit the number of uploaded textures for optimization.\n\n\n  if (tensors.length > env().get('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n    const midIndex = Math.floor(tensors.length / 2);\n    const leftSide = addN({\n      inputs: tensors.slice(0, midIndex),\n      backend\n    });\n    const rightSide = addN({\n      inputs: tensors.slice(midIndex),\n      backend\n    });\n    return addN({\n      inputs: [leftSide, rightSide],\n      backend\n    });\n  }\n\n  const dtype = tensors.map(t => t.dtype).reduce((d1, d2) => upcastType(d1, d2));\n  const shapes = tensors.map(t => t.shape); // We can make sure shapes are identical in op level.\n\n  const usePackedOp = env().getBool('WEBGL_PACK');\n  const program = usePackedOp ? new AddNPackedProgram(tensors[0].shape, shapes) : new AddNProgram(tensors[0].shape, shapes);\n  return backend.runWebGLProgram(program, tensors, dtype);\n}\nexport const addNConfig = {\n  kernelName: AddN,\n  backendName: 'webgl',\n  kernelFunc: addN\n};","map":{"version":3,"names":["AddN","env","upcastType","AddNProgram","AddNPackedProgram","identity","addN","args","inputs","backend","tensors","length","x","get","midIndex","Math","floor","leftSide","slice","rightSide","dtype","map","t","reduce","d1","d2","shapes","shape","usePackedOp","getBool","program","runWebGLProgram","addNConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AddN.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AddN, env, upcastType } from '@tensorflow/tfjs-core';\nimport { AddNProgram } from '../addn_gpu';\nimport { AddNPackedProgram } from '../addn_packed_gpu';\nimport { identity } from './Identity';\nexport function addN(args) {\n    const { inputs, backend } = args;\n    const tensors = inputs;\n    if (tensors.length === 1) {\n        return identity({ inputs: { x: tensors[0] }, backend });\n    }\n    // Limit the number of uploaded textures for optimization.\n    if (tensors.length > env().get('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n        const midIndex = Math.floor(tensors.length / 2);\n        const leftSide = addN({ inputs: tensors.slice(0, midIndex), backend });\n        const rightSide = addN({ inputs: tensors.slice(midIndex), backend });\n        return addN({ inputs: [leftSide, rightSide], backend });\n    }\n    const dtype = tensors.map(t => t.dtype).reduce((d1, d2) => upcastType(d1, d2));\n    const shapes = tensors.map(t => t.shape);\n    // We can make sure shapes are identical in op level.\n    const usePackedOp = env().getBool('WEBGL_PACK');\n    const program = usePackedOp ?\n        new AddNPackedProgram(tensors[0].shape, shapes) :\n        new AddNProgram(tensors[0].shape, shapes);\n    return backend.runWebGLProgram(program, tensors, dtype);\n}\nexport const addNConfig = {\n    kernelName: AddN,\n    backendName: 'webgl',\n    kernelFunc: addN\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,UAApB,QAAsC,uBAAtC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,iBAAT,QAAkC,oBAAlC;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,OAAO,SAASC,IAAT,CAAcC,IAAd,EAAoB;EACvB,MAAM;IAAEC,MAAF;IAAUC;EAAV,IAAsBF,IAA5B;EACA,MAAMG,OAAO,GAAGF,MAAhB;;EACA,IAAIE,OAAO,CAACC,MAAR,KAAmB,CAAvB,EAA0B;IACtB,OAAON,QAAQ,CAAC;MAAEG,MAAM,EAAE;QAAEI,CAAC,EAAEF,OAAO,CAAC,CAAD;MAAZ,CAAV;MAA6BD;IAA7B,CAAD,CAAf;EACH,CALsB,CAMvB;;;EACA,IAAIC,OAAO,CAACC,MAAR,GAAiBV,GAAG,GAAGY,GAAN,CAAU,8BAAV,CAArB,EAAgE;IAC5D,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWN,OAAO,CAACC,MAAR,GAAiB,CAA5B,CAAjB;IACA,MAAMM,QAAQ,GAAGX,IAAI,CAAC;MAAEE,MAAM,EAAEE,OAAO,CAACQ,KAAR,CAAc,CAAd,EAAiBJ,QAAjB,CAAV;MAAsCL;IAAtC,CAAD,CAArB;IACA,MAAMU,SAAS,GAAGb,IAAI,CAAC;MAAEE,MAAM,EAAEE,OAAO,CAACQ,KAAR,CAAcJ,QAAd,CAAV;MAAmCL;IAAnC,CAAD,CAAtB;IACA,OAAOH,IAAI,CAAC;MAAEE,MAAM,EAAE,CAACS,QAAD,EAAWE,SAAX,CAAV;MAAiCV;IAAjC,CAAD,CAAX;EACH;;EACD,MAAMW,KAAK,GAAGV,OAAO,CAACW,GAAR,CAAYC,CAAC,IAAIA,CAAC,CAACF,KAAnB,EAA0BG,MAA1B,CAAiC,CAACC,EAAD,EAAKC,EAAL,KAAYvB,UAAU,CAACsB,EAAD,EAAKC,EAAL,CAAvD,CAAd;EACA,MAAMC,MAAM,GAAGhB,OAAO,CAACW,GAAR,CAAYC,CAAC,IAAIA,CAAC,CAACK,KAAnB,CAAf,CAduB,CAevB;;EACA,MAAMC,WAAW,GAAG3B,GAAG,GAAG4B,OAAN,CAAc,YAAd,CAApB;EACA,MAAMC,OAAO,GAAGF,WAAW,GACvB,IAAIxB,iBAAJ,CAAsBM,OAAO,CAAC,CAAD,CAAP,CAAWiB,KAAjC,EAAwCD,MAAxC,CADuB,GAEvB,IAAIvB,WAAJ,CAAgBO,OAAO,CAAC,CAAD,CAAP,CAAWiB,KAA3B,EAAkCD,MAAlC,CAFJ;EAGA,OAAOjB,OAAO,CAACsB,eAAR,CAAwBD,OAAxB,EAAiCpB,OAAjC,EAA0CU,KAA1C,CAAP;AACH;AACD,OAAO,MAAMY,UAAU,GAAG;EACtBC,UAAU,EAAEjC,IADU;EAEtBkC,WAAW,EAAE,OAFS;EAGtBC,UAAU,EAAE7B;AAHU,CAAnB"},"metadata":{},"sourceType":"module"}