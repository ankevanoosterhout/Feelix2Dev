{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class ConcatPackedProgram {\n  constructor(shapes, axis) {\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outputShape = [];\n    this.outputShape = backend_util.computeOutShape(shapes, axis);\n    const shape = this.outputShape;\n    const rank = shape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n    const offsets = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][axis];\n\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][axis];\n    }\n\n    const channel = channels[axis];\n    const lastChannels = channels.slice(-2);\n    const allChannels = channels.join();\n    let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getT0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1]; // Note: the >= comparison below may seem unnecessary given the check\n      // above but is needed to workaround branch execution issues on some\n      // devices. It makes all the conditions exclusive without relying on\n      // execution order.\n\n      getValueSnippet += `\n        if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n          return getChannel(\n            getT${i}(${shiftedChannels(channels, channel, shift)}),\n            vec2(${shiftedChannels(lastChannels, channel, shift)}));\n        }`;\n    }\n\n    const lastIndex = offsets.length;\n    const shift = offsets[offsets.length - 1];\n    getValueSnippet += `\n        return getChannel(\n          getT${lastIndex}(${shiftedChannels(channels, channel, shift)}),\n          vec2(${shiftedChannels(lastChannels, channel, shift)}));`;\n    this.userCode = `\n      float getValue(${channels.map(x => 'int ' + x)}) {\n        ${getValueSnippet}\n      }\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n        if (${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.g = getValue(${coords});\n        }\n\n        ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]}) {\n          result.a = getValue(${coords});\n        }\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]} &&\n            ${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.b = getValue(${coords});\n        }\n        setOutput(result);\n      }\n    `;\n  }\n\n}\n/**\n * Return an expression for coordinates into a vector where a given channel\n * will be offset by [shift].\n *\n * @param channels the channels to consider\n * @param channel the channel we want shifted\n * @param shift  the amount to subtract from the channel.\n *\n * @returns a string of the form 'x, y-[shift], z' where any one channel can\n * have the shift applied.\n */\n\nfunction shiftedChannels(channels, channel, shift) {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n}","map":{"version":3,"names":["backend_util","getChannels","getCoordsDataType","ConcatPackedProgram","constructor","shapes","axis","packedInputs","packedOutput","outputShape","computeOutShape","shape","rank","length","dtype","coords","channels","slice","variableNames","map","_","i","offsets","Array","channel","lastChannels","allChannels","join","getValueSnippet","shift","shiftedChannels","lastIndex","userCode","x","channelIdx","indexOf","res","c","idx"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/concat_packed_gpu.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class ConcatPackedProgram {\n    constructor(shapes, axis) {\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = [];\n        this.outputShape = backend_util.computeOutShape(shapes, axis);\n        const shape = this.outputShape;\n        const rank = shape.length;\n        const dtype = getCoordsDataType(rank);\n        const coords = getChannels('coords', rank);\n        const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n        this.variableNames = shapes.map((_, i) => `T${i}`);\n        const offsets = new Array(shapes.length - 1);\n        offsets[0] = shapes[0][axis];\n        for (let i = 1; i < offsets.length; i++) {\n            offsets[i] = offsets[i - 1] + shapes[i][axis];\n        }\n        const channel = channels[axis];\n        const lastChannels = channels.slice(-2);\n        const allChannels = channels.join();\n        let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getT0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n        for (let i = 1; i < offsets.length; i++) {\n            const shift = offsets[i - 1];\n            // Note: the >= comparison below may seem unnecessary given the check\n            // above but is needed to workaround branch execution issues on some\n            // devices. It makes all the conditions exclusive without relying on\n            // execution order.\n            getValueSnippet += `\n        if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n          return getChannel(\n            getT${i}(${shiftedChannels(channels, channel, shift)}),\n            vec2(${shiftedChannels(lastChannels, channel, shift)}));\n        }`;\n        }\n        const lastIndex = offsets.length;\n        const shift = offsets[offsets.length - 1];\n        getValueSnippet += `\n        return getChannel(\n          getT${lastIndex}(${shiftedChannels(channels, channel, shift)}),\n          vec2(${shiftedChannels(lastChannels, channel, shift)}));`;\n        this.userCode = `\n      float getValue(${channels.map(x => 'int ' + x)}) {\n        ${getValueSnippet}\n      }\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n        if (${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.g = getValue(${coords});\n        }\n\n        ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]}) {\n          result.a = getValue(${coords});\n        }\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]} &&\n            ${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.b = getValue(${coords});\n        }\n        setOutput(result);\n      }\n    `;\n    }\n}\n/**\n * Return an expression for coordinates into a vector where a given channel\n * will be offset by [shift].\n *\n * @param channels the channels to consider\n * @param channel the channel we want shifted\n * @param shift  the amount to subtract from the channel.\n *\n * @returns a string of the form 'x, y-[shift], z' where any one channel can\n * have the shift applied.\n */\nfunction shiftedChannels(channels, channel, shift) {\n    const channelIdx = channels.indexOf(channel);\n    const res = channels.map((c, idx) => {\n        if (idx === channelIdx) {\n            return `${c} - ${shift}`;\n        }\n        else {\n            return c;\n        }\n    });\n    return res.join();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}