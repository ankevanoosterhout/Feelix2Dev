{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from './environment';\nimport * as base from './util_base';\nexport * from './util_base';\nexport * from './hash_util';\n/**\n * Create typed array for scalar value. Used for storing in `DataStorage`.\n */\n\nexport function createScalarValue(value, dtype) {\n  if (dtype === 'string') {\n    return encodeString(value);\n  }\n\n  return toTypedArray([value], dtype);\n}\n\nfunction noConversionNeeded(a, dtype) {\n  return a instanceof Float32Array && dtype === 'float32' || a instanceof Int32Array && dtype === 'int32' || a instanceof Uint8Array && dtype === 'bool';\n}\n\nexport function toTypedArray(a, dtype) {\n  if (dtype === 'string') {\n    throw new Error('Cannot convert a string[] to a TypedArray');\n  }\n\n  if (Array.isArray(a)) {\n    a = base.flatten(a);\n  }\n\n  if (env().getBool('DEBUG')) {\n    base.checkConversionForErrors(a, dtype);\n  }\n\n  if (noConversionNeeded(a, dtype)) {\n    return a;\n  }\n\n  if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n    return new Float32Array(a);\n  } else if (dtype === 'int32') {\n    return new Int32Array(a);\n  } else if (dtype === 'bool') {\n    const bool = new Uint8Array(a.length);\n\n    for (let i = 0; i < bool.length; ++i) {\n      if (Math.round(a[i]) !== 0) {\n        bool[i] = 1;\n      }\n    }\n\n    return bool;\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n}\n/**\n * Returns the current high-resolution time in milliseconds relative to an\n * arbitrary time in the past. It works across different platforms (node.js,\n * browsers).\n *\n * ```js\n * console.log(tf.util.now());\n * ```\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n\nexport function now() {\n  return env().platform.now();\n}\n/**\n * Returns a platform-specific implementation of\n * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n *\n * If `fetch` is defined on the global object (`window`, `process`, etc.),\n * `tf.util.fetch` returns that function.\n *\n * If not, `tf.util.fetch` returns a platform-specific solution.\n *\n * ```js\n * const resource = await tf.util.fetch('https://unpkg.com/@tensorflow/tfjs');\n * // handle response\n * ```\n *\n * @doc {heading: 'Util'}\n */\n\nexport function fetch(path, requestInits) {\n  return env().platform.fetch(path, requestInits);\n}\n/**\n * Encodes the provided string into bytes using the provided encoding scheme.\n *\n * @param s The string to encode.\n * @param encoding The encoding scheme. Defaults to utf-8.\n *\n * @doc {heading: 'Util'}\n */\n\nexport function encodeString(s, encoding = 'utf-8') {\n  encoding = encoding || 'utf-8';\n  return env().platform.encode(s, encoding);\n}\n/**\n * Decodes the provided bytes into a string using the provided encoding scheme.\n * @param bytes The bytes to decode.\n *\n * @param encoding The encoding scheme. Defaults to utf-8.\n *\n * @doc {heading: 'Util'}\n */\n\nexport function decodeString(bytes, encoding = 'utf-8') {\n  encoding = encoding || 'utf-8';\n  return env().platform.decode(bytes, encoding);\n}","map":{"version":3,"names":["env","base","createScalarValue","value","dtype","encodeString","toTypedArray","noConversionNeeded","a","Float32Array","Int32Array","Uint8Array","Error","Array","isArray","flatten","getBool","checkConversionForErrors","bool","length","i","Math","round","now","platform","fetch","path","requestInits","s","encoding","encode","decodeString","bytes","decode"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/util.js"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from './environment';\nimport * as base from './util_base';\nexport * from './util_base';\nexport * from './hash_util';\n/**\n * Create typed array for scalar value. Used for storing in `DataStorage`.\n */\nexport function createScalarValue(value, dtype) {\n    if (dtype === 'string') {\n        return encodeString(value);\n    }\n    return toTypedArray([value], dtype);\n}\nfunction noConversionNeeded(a, dtype) {\n    return (a instanceof Float32Array && dtype === 'float32') ||\n        (a instanceof Int32Array && dtype === 'int32') ||\n        (a instanceof Uint8Array && dtype === 'bool');\n}\nexport function toTypedArray(a, dtype) {\n    if (dtype === 'string') {\n        throw new Error('Cannot convert a string[] to a TypedArray');\n    }\n    if (Array.isArray(a)) {\n        a = base.flatten(a);\n    }\n    if (env().getBool('DEBUG')) {\n        base.checkConversionForErrors(a, dtype);\n    }\n    if (noConversionNeeded(a, dtype)) {\n        return a;\n    }\n    if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n        return new Float32Array(a);\n    }\n    else if (dtype === 'int32') {\n        return new Int32Array(a);\n    }\n    else if (dtype === 'bool') {\n        const bool = new Uint8Array(a.length);\n        for (let i = 0; i < bool.length; ++i) {\n            if (Math.round(a[i]) !== 0) {\n                bool[i] = 1;\n            }\n        }\n        return bool;\n    }\n    else {\n        throw new Error(`Unknown data type ${dtype}`);\n    }\n}\n/**\n * Returns the current high-resolution time in milliseconds relative to an\n * arbitrary time in the past. It works across different platforms (node.js,\n * browsers).\n *\n * ```js\n * console.log(tf.util.now());\n * ```\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function now() {\n    return env().platform.now();\n}\n/**\n * Returns a platform-specific implementation of\n * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n *\n * If `fetch` is defined on the global object (`window`, `process`, etc.),\n * `tf.util.fetch` returns that function.\n *\n * If not, `tf.util.fetch` returns a platform-specific solution.\n *\n * ```js\n * const resource = await tf.util.fetch('https://unpkg.com/@tensorflow/tfjs');\n * // handle response\n * ```\n *\n * @doc {heading: 'Util'}\n */\nexport function fetch(path, requestInits) {\n    return env().platform.fetch(path, requestInits);\n}\n/**\n * Encodes the provided string into bytes using the provided encoding scheme.\n *\n * @param s The string to encode.\n * @param encoding The encoding scheme. Defaults to utf-8.\n *\n * @doc {heading: 'Util'}\n */\nexport function encodeString(s, encoding = 'utf-8') {\n    encoding = encoding || 'utf-8';\n    return env().platform.encode(s, encoding);\n}\n/**\n * Decodes the provided bytes into a string using the provided encoding scheme.\n * @param bytes The bytes to decode.\n *\n * @param encoding The encoding scheme. Defaults to utf-8.\n *\n * @doc {heading: 'Util'}\n */\nexport function decodeString(bytes, encoding = 'utf-8') {\n    encoding = encoding || 'utf-8';\n    return env().platform.decode(bytes, encoding);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}