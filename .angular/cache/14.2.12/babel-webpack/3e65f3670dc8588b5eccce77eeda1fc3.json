{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { dispose } from '../../globals';\nimport { assert } from '../../util';\nimport { clone } from '../clone';\nimport { concat } from '../concat';\nimport { div } from '../div';\nimport { eye } from '../eye';\nimport { greater } from '../greater';\nimport { matMul } from '../mat_mul';\nimport { mul } from '../mul';\nimport { neg } from '../neg';\nimport { norm } from '../norm';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\nimport { slice } from '../slice';\nimport { stack } from '../stack';\nimport { sub } from '../sub';\nimport { tensor2d } from '../tensor2d';\nimport { transpose } from '../transpose';\nimport { unstack } from '../unstack';\nimport { where } from '../where';\n/**\n * Compute QR decomposition of m-by-n matrix using Householder transformation.\n *\n * Implementation based on\n *   [http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf]\n * (http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf)\n *\n * ```js\n * const a = tf.tensor2d([[1, 2], [3, 4]]);\n * let [q, r] = tf.linalg.qr(a);\n * console.log('Q');\n * q.print();\n * console.log('R');\n * r.print();\n * console.log('Orthogonalized');\n * q.dot(q.transpose()).print()  // should be nearly the identity matrix.\n * console.log('Reconstructed');\n * q.dot(r).print(); // should be nearly [[1, 2], [3, 4]];\n * ```\n *\n * @param x The `tf.Tensor` to be QR-decomposed. Must have rank >= 2. Suppose\n *   it has the shape `[..., M, N]`.\n * @param fullMatrices An optional boolean parameter. Defaults to `false`.\n *   If `true`, compute full-sized `Q`. If `false` (the default),\n *   compute only the leading N columns of `Q` and `R`.\n * @returns An `Array` of two `tf.Tensor`s: `[Q, R]`. `Q` is a unitary matrix,\n *   i.e., its columns all have unit norm and are mutually orthogonal.\n *   If `M >= N`,\n *     If `fullMatrices` is `false` (default),\n *       - `Q` has a shape of `[..., M, N]`,\n *       - `R` has a shape of `[..., N, N]`.\n *     If `fullMatrices` is `true` (default),\n *       - `Q` has a shape of `[..., M, M]`,\n *       - `R` has a shape of `[..., M, N]`.\n *   If `M < N`,\n *     - `Q` has a shape of `[..., M, M]`,\n *     - `R` has a shape of `[..., M, N]`.\n * @throws If the rank of `x` is less than 2.\n *\n * @doc {heading:'Operations',\n *       subheading:'Linear Algebra',\n *       namespace:'linalg'}\n */\n\nfunction qr_(x, fullMatrices = false) {\n  assert(x.rank >= 2, () => `qr() requires input tensor to have a rank >= 2, but got rank ${x.rank}`);\n\n  if (x.rank === 2) {\n    return qr2d(x, fullMatrices);\n  } else {\n    // Rank > 2.\n    // TODO(cais): Below we split the input into individual 2D tensors,\n    //   perform QR decomposition on them and then stack the results back\n    //   together. We should explore whether this can be parallelized.\n    const outerDimsProd = x.shape.slice(0, x.shape.length - 2).reduce((value, prev) => value * prev);\n    const x2ds = unstack(reshape(x, [outerDimsProd, x.shape[x.shape.length - 2], x.shape[x.shape.length - 1]]), 0);\n    const q2ds = [];\n    const r2ds = [];\n    x2ds.forEach(x2d => {\n      const [q2d, r2d] = qr2d(x2d, fullMatrices);\n      q2ds.push(q2d);\n      r2ds.push(r2d);\n    });\n    const q = reshape(stack(q2ds, 0), x.shape);\n    const r = reshape(stack(r2ds, 0), x.shape);\n    return [q, r];\n  }\n}\n\nfunction qr2d(x, fullMatrices = false) {\n  return ENGINE.tidy(() => {\n    assert(x.shape.length === 2, () => `qr2d() requires a 2D Tensor, but got a ${x.shape.length}D Tensor.`);\n    const m = x.shape[0];\n    const n = x.shape[1];\n    let q = eye(m); // Orthogonal transform so far.\n\n    let r = clone(x); // Transformed matrix so far.\n\n    const one2D = tensor2d([[1]], [1, 1]);\n    let w = clone(one2D);\n    const iters = m >= n ? n : m;\n\n    for (let j = 0; j < iters; ++j) {\n      // This tidy within the for-loop ensures we clean up temporary\n      // tensors as soon as they are no longer needed.\n      const rTemp = r;\n      const wTemp = w;\n      const qTemp = q;\n      [w, r, q] = ENGINE.tidy(() => {\n        // Find H = I - tau * w * w', to put zeros below R(j, j).\n        const rjEnd1 = slice(r, [j, j], [m - j, 1]);\n        const normX = norm(rjEnd1);\n        const rjj = slice(r, [j, j], [1, 1]); // The sign() function returns 0 on 0, which causes division by zero.\n\n        const s = where(greater(rjj, 0), tensor2d([[-1]]), tensor2d([[1]]));\n        const u1 = sub(rjj, mul(s, normX));\n        const wPre = div(rjEnd1, u1);\n\n        if (wPre.shape[0] === 1) {\n          w = clone(one2D);\n        } else {\n          w = concat([one2D, slice(wPre, [1, 0], [wPre.shape[0] - 1, wPre.shape[1]])], 0);\n        }\n\n        const tau = neg(div(matMul(s, u1), normX)); // -- R := HR, Q := QH.\n\n        const rjEndAll = slice(r, [j, 0], [m - j, n]);\n        const tauTimesW = mul(tau, w);\n        const wT = transpose(w);\n\n        if (j === 0) {\n          r = sub(rjEndAll, matMul(tauTimesW, matMul(wT, rjEndAll)));\n        } else {\n          const rTimesTau = sub(rjEndAll, matMul(tauTimesW, matMul(wT, rjEndAll)));\n          r = concat([slice(r, [0, 0], [j, n]), rTimesTau], 0);\n        }\n\n        const tawTimesWT = transpose(tauTimesW);\n        const qAllJEnd = slice(q, [0, j], [m, q.shape[1] - j]);\n\n        if (j === 0) {\n          q = sub(qAllJEnd, matMul(matMul(qAllJEnd, w), tawTimesWT));\n        } else {\n          const qTimesTau = sub(qAllJEnd, matMul(matMul(qAllJEnd, w), tawTimesWT));\n          q = concat([slice(q, [0, 0], [m, j]), qTimesTau], 1);\n        }\n\n        return [w, r, q];\n      });\n      dispose([rTemp, wTemp, qTemp]);\n    }\n\n    if (!fullMatrices && m > n) {\n      q = slice(q, [0, 0], [m, n]);\n      r = slice(r, [0, 0], [n, n]);\n    }\n\n    return [q, r];\n  });\n}\n\nexport const qr = op({\n  qr_\n});","map":{"version":3,"names":["ENGINE","dispose","assert","clone","concat","div","eye","greater","matMul","mul","neg","norm","op","reshape","slice","stack","sub","tensor2d","transpose","unstack","where","qr_","x","fullMatrices","rank","qr2d","outerDimsProd","shape","length","reduce","value","prev","x2ds","q2ds","r2ds","forEach","x2d","q2d","r2d","push","q","r","tidy","m","n","one2D","w","iters","j","rTemp","wTemp","qTemp","rjEnd1","normX","rjj","s","u1","wPre","tau","rjEndAll","tauTimesW","wT","rTimesTau","tawTimesWT","qAllJEnd","qTimesTau","qr"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/linalg/qr.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { dispose } from '../../globals';\nimport { assert } from '../../util';\nimport { clone } from '../clone';\nimport { concat } from '../concat';\nimport { div } from '../div';\nimport { eye } from '../eye';\nimport { greater } from '../greater';\nimport { matMul } from '../mat_mul';\nimport { mul } from '../mul';\nimport { neg } from '../neg';\nimport { norm } from '../norm';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\nimport { slice } from '../slice';\nimport { stack } from '../stack';\nimport { sub } from '../sub';\nimport { tensor2d } from '../tensor2d';\nimport { transpose } from '../transpose';\nimport { unstack } from '../unstack';\nimport { where } from '../where';\n/**\n * Compute QR decomposition of m-by-n matrix using Householder transformation.\n *\n * Implementation based on\n *   [http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf]\n * (http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf)\n *\n * ```js\n * const a = tf.tensor2d([[1, 2], [3, 4]]);\n * let [q, r] = tf.linalg.qr(a);\n * console.log('Q');\n * q.print();\n * console.log('R');\n * r.print();\n * console.log('Orthogonalized');\n * q.dot(q.transpose()).print()  // should be nearly the identity matrix.\n * console.log('Reconstructed');\n * q.dot(r).print(); // should be nearly [[1, 2], [3, 4]];\n * ```\n *\n * @param x The `tf.Tensor` to be QR-decomposed. Must have rank >= 2. Suppose\n *   it has the shape `[..., M, N]`.\n * @param fullMatrices An optional boolean parameter. Defaults to `false`.\n *   If `true`, compute full-sized `Q`. If `false` (the default),\n *   compute only the leading N columns of `Q` and `R`.\n * @returns An `Array` of two `tf.Tensor`s: `[Q, R]`. `Q` is a unitary matrix,\n *   i.e., its columns all have unit norm and are mutually orthogonal.\n *   If `M >= N`,\n *     If `fullMatrices` is `false` (default),\n *       - `Q` has a shape of `[..., M, N]`,\n *       - `R` has a shape of `[..., N, N]`.\n *     If `fullMatrices` is `true` (default),\n *       - `Q` has a shape of `[..., M, M]`,\n *       - `R` has a shape of `[..., M, N]`.\n *   If `M < N`,\n *     - `Q` has a shape of `[..., M, M]`,\n *     - `R` has a shape of `[..., M, N]`.\n * @throws If the rank of `x` is less than 2.\n *\n * @doc {heading:'Operations',\n *       subheading:'Linear Algebra',\n *       namespace:'linalg'}\n */\nfunction qr_(x, fullMatrices = false) {\n    assert(x.rank >= 2, () => `qr() requires input tensor to have a rank >= 2, but got rank ${x.rank}`);\n    if (x.rank === 2) {\n        return qr2d(x, fullMatrices);\n    }\n    else {\n        // Rank > 2.\n        // TODO(cais): Below we split the input into individual 2D tensors,\n        //   perform QR decomposition on them and then stack the results back\n        //   together. We should explore whether this can be parallelized.\n        const outerDimsProd = x.shape.slice(0, x.shape.length - 2)\n            .reduce((value, prev) => value * prev);\n        const x2ds = unstack(reshape(x, [\n            outerDimsProd, x.shape[x.shape.length - 2],\n            x.shape[x.shape.length - 1]\n        ]), 0);\n        const q2ds = [];\n        const r2ds = [];\n        x2ds.forEach(x2d => {\n            const [q2d, r2d] = qr2d(x2d, fullMatrices);\n            q2ds.push(q2d);\n            r2ds.push(r2d);\n        });\n        const q = reshape(stack(q2ds, 0), x.shape);\n        const r = reshape(stack(r2ds, 0), x.shape);\n        return [q, r];\n    }\n}\nfunction qr2d(x, fullMatrices = false) {\n    return ENGINE.tidy(() => {\n        assert(x.shape.length === 2, () => `qr2d() requires a 2D Tensor, but got a ${x.shape.length}D Tensor.`);\n        const m = x.shape[0];\n        const n = x.shape[1];\n        let q = eye(m); // Orthogonal transform so far.\n        let r = clone(x); // Transformed matrix so far.\n        const one2D = tensor2d([[1]], [1, 1]);\n        let w = clone(one2D);\n        const iters = m >= n ? n : m;\n        for (let j = 0; j < iters; ++j) {\n            // This tidy within the for-loop ensures we clean up temporary\n            // tensors as soon as they are no longer needed.\n            const rTemp = r;\n            const wTemp = w;\n            const qTemp = q;\n            [w, r, q] = ENGINE.tidy(() => {\n                // Find H = I - tau * w * w', to put zeros below R(j, j).\n                const rjEnd1 = slice(r, [j, j], [m - j, 1]);\n                const normX = norm(rjEnd1);\n                const rjj = slice(r, [j, j], [1, 1]);\n                // The sign() function returns 0 on 0, which causes division by zero.\n                const s = where(greater(rjj, 0), tensor2d([[-1]]), tensor2d([[1]]));\n                const u1 = sub(rjj, mul(s, normX));\n                const wPre = div(rjEnd1, u1);\n                if (wPre.shape[0] === 1) {\n                    w = clone(one2D);\n                }\n                else {\n                    w = concat([\n                        one2D,\n                        slice(wPre, [1, 0], [wPre.shape[0] - 1, wPre.shape[1]])\n                    ], 0);\n                }\n                const tau = neg(div(matMul(s, u1), normX));\n                // -- R := HR, Q := QH.\n                const rjEndAll = slice(r, [j, 0], [m - j, n]);\n                const tauTimesW = mul(tau, w);\n                const wT = transpose(w);\n                if (j === 0) {\n                    r = sub(rjEndAll, matMul(tauTimesW, matMul(wT, rjEndAll)));\n                }\n                else {\n                    const rTimesTau = sub(rjEndAll, matMul(tauTimesW, matMul(wT, rjEndAll)));\n                    r = concat([slice(r, [0, 0], [j, n]), rTimesTau], 0);\n                }\n                const tawTimesWT = transpose(tauTimesW);\n                const qAllJEnd = slice(q, [0, j], [m, q.shape[1] - j]);\n                if (j === 0) {\n                    q = sub(qAllJEnd, matMul(matMul(qAllJEnd, w), tawTimesWT));\n                }\n                else {\n                    const qTimesTau = sub(qAllJEnd, matMul(matMul(qAllJEnd, w), tawTimesWT));\n                    q = concat([slice(q, [0, 0], [m, j]), qTimesTau], 1);\n                }\n                return [w, r, q];\n            });\n            dispose([rTemp, wTemp, qTemp]);\n        }\n        if (!fullMatrices && m > n) {\n            q = slice(q, [0, 0], [m, n]);\n            r = slice(r, [0, 0], [n, n]);\n        }\n        return [q, r];\n    });\n}\nexport const qr = op({ qr_ });\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,cAAvB;AACA,SAASC,OAAT,QAAwB,eAAxB;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,SAASC,IAAT,QAAqB,SAArB;AACA,SAASC,EAAT,QAAmB,cAAnB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,GAAT,CAAaC,CAAb,EAAgBC,YAAY,GAAG,KAA/B,EAAsC;EAClCrB,MAAM,CAACoB,CAAC,CAACE,IAAF,IAAU,CAAX,EAAc,MAAO,gEAA+DF,CAAC,CAACE,IAAK,EAA3F,CAAN;;EACA,IAAIF,CAAC,CAACE,IAAF,KAAW,CAAf,EAAkB;IACd,OAAOC,IAAI,CAACH,CAAD,EAAIC,YAAJ,CAAX;EACH,CAFD,MAGK;IACD;IACA;IACA;IACA;IACA,MAAMG,aAAa,GAAGJ,CAAC,CAACK,KAAF,CAAQb,KAA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"},"metadata":{},"sourceType":"module"}