{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPool3DGrad } from '@tensorflow/tfjs-core';\nimport { MaxPool3DBackpropProgram } from '../max_pool_backprop_gpu';\nimport { Pool3DProgram } from '../pool_gpu';\nexport function maxPool3DGrad(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    input\n  } = inputs;\n  const x = input;\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  const dilations = [1, 1, 1];\n  const convInfo = backend_util.computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n  const maxPool3dPositionsProgram = new Pool3DProgram(convInfo, 'max', true\n  /* get positions */\n  );\n  const maxPool3dPositions = backend.runWebGLProgram(maxPool3dPositionsProgram, [x], x.dtype);\n  const maxPoolBackpropProgram = new MaxPool3DBackpropProgram(convInfo);\n  const result = backend.runWebGLProgram(maxPoolBackpropProgram, [dy, maxPool3dPositions], x.dtype);\n  backend.disposeIntermediateTensorInfo(maxPool3dPositions);\n  return result;\n}\nexport const maxPool3DGradConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'webgl',\n  kernelFunc: maxPool3DGrad\n};","map":{"version":3,"names":["backend_util","MaxPool3DGrad","MaxPool3DBackpropProgram","Pool3DProgram","maxPool3DGrad","args","inputs","backend","attrs","dy","input","x","filterSize","strides","pad","dimRoundingMode","dilations","convInfo","computePool3DInfo","shape","maxPool3dPositionsProgram","maxPool3dPositions","runWebGLProgram","dtype","maxPoolBackpropProgram","result","disposeIntermediateTensorInfo","maxPool3DGradConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPool3DGrad.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPool3DGrad } from '@tensorflow/tfjs-core';\nimport { MaxPool3DBackpropProgram } from '../max_pool_backprop_gpu';\nimport { Pool3DProgram } from '../pool_gpu';\nexport function maxPool3DGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, input } = inputs;\n    const x = input;\n    const { filterSize, strides, pad, dimRoundingMode } = attrs;\n    const dilations = [1, 1, 1];\n    const convInfo = backend_util.computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n    const maxPool3dPositionsProgram = new Pool3DProgram(convInfo, 'max', true /* get positions */);\n    const maxPool3dPositions = backend.runWebGLProgram(maxPool3dPositionsProgram, [x], x.dtype);\n    const maxPoolBackpropProgram = new MaxPool3DBackpropProgram(convInfo);\n    const result = backend.runWebGLProgram(maxPoolBackpropProgram, [dy, maxPool3dPositions], x.dtype);\n    backend.disposeIntermediateTensorInfo(maxPool3dPositions);\n    return result;\n}\nexport const maxPool3DGradConfig = {\n    kernelName: MaxPool3DGrad,\n    backendName: 'webgl',\n    kernelFunc: maxPool3DGrad\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,uBAA5C;AACA,SAASC,wBAAT,QAAyC,0BAAzC;AACA,SAASC,aAAT,QAA8B,aAA9B;AACA,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;EAChC,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BH,IAAnC;EACA,MAAM;IAAEI,EAAF;IAAMC;EAAN,IAAgBJ,MAAtB;EACA,MAAMK,CAAC,GAAGD,KAAV;EACA,MAAM;IAAEE,UAAF;IAAcC,OAAd;IAAuBC,GAAvB;IAA4BC;EAA5B,IAAgDP,KAAtD;EACA,MAAMQ,SAAS,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAlB;EACA,MAAMC,QAAQ,GAAGjB,YAAY,CAACkB,iBAAb,CAA+BP,CAAC,CAACQ,KAAjC,EAAwCP,UAAxC,EAAoDC,OAApD,EAA6DG,SAA7D,EAAwEF,GAAxE,EAA6EC,eAA7E,CAAjB;EACA,MAAMK,yBAAyB,GAAG,IAAIjB,aAAJ,CAAkBc,QAAlB,EAA4B,KAA5B,EAAmC;EAAK;EAAxC,CAAlC;EACA,MAAMI,kBAAkB,GAAGd,OAAO,CAACe,eAAR,CAAwBF,yBAAxB,EAAmD,CAACT,CAAD,CAAnD,EAAwDA,CAAC,CAACY,KAA1D,CAA3B;EACA,MAAMC,sBAAsB,GAAG,IAAItB,wBAAJ,CAA6Be,QAA7B,CAA/B;EACA,MAAMQ,MAAM,GAAGlB,OAAO,CAACe,eAAR,CAAwBE,sBAAxB,EAAgD,CAACf,EAAD,EAAKY,kBAAL,CAAhD,EAA0EV,CAAC,CAACY,KAA5E,CAAf;EACAhB,OAAO,CAACmB,6BAAR,CAAsCL,kBAAtC;EACA,OAAOI,MAAP;AACH;AACD,OAAO,MAAME,mBAAmB,GAAG;EAC/BC,UAAU,EAAE3B,aADmB;EAE/B4B,WAAW,EAAE,OAFkB;EAG/BC,UAAU,EAAE1B;AAHmB,CAA5B"},"metadata":{},"sourceType":"module"}