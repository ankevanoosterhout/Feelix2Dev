{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv3DBackpropInputV2, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv3DBackpropInputV2(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    filter\n  } = inputs;\n  const {\n    pad,\n    strides,\n    inputShape\n  } = attrs;\n  assertNotComplex([dy], 'conv3dBackpropInputV2');\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n  const convInfo = backend_util.computeConv3DInfo(inputShape, filter.shape, strides, 1\n  /* dilations */\n  , pad);\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2, dxS3] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values;\n  const [fltS0, fltS1, fltS2, fltS3] = filterStrides;\n  const {\n    batchSize,\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inDepth,\n    inHeight,\n    inWidth,\n    outChannels,\n    outDepth,\n    outHeight,\n    outWidth,\n    strideDepth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const frontPad = filterDepth - 1 - convInfo.padInfo.front;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      // Frames of depth\n      for (let xF = 0; xF < inDepth; ++xF) {\n        const xFCorner = xF - frontPad;\n        const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));\n        const yFMax = Math.min(outDepth, (filterDepth + xFCorner) / strideDepth); // Rows as per standard 2d matrix notation\n\n        for (let xR = 0; xR < inHeight; ++xR) {\n          const xRCorner = xR - topPad;\n          const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n          const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight); // Columns as per standard 2d matrix notation\n\n          for (let xC = 0; xC < inWidth; ++xC) {\n            const xCCorner = xC - leftPad;\n            const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n            const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n            let dotProd = 0;\n\n            for (let yF = xFMin; yF < yFMax; ++yF) {\n              const wF = yF * strideDepth - xFCorner;\n\n              for (let yR = xRMin; yR < yRMax; ++yR) {\n                const wR = yR * strideHeight - xRCorner;\n\n                for (let yC = xCMin; yC < yCMax; ++yC) {\n                  const wC = yC * strideWidth - xCCorner;\n                  const dyOffset = dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;\n                  const fltOffset = fltS0 * (filterDepth - 1 - wF) + fltS1 * (filterHeight - 1 - wR) + fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;\n\n                  for (let d2 = 0; d2 < outChannels; ++d2) {\n                    const pixel = dyValues[dyOffset + d2];\n                    const weight = fltValues[fltOffset + d2];\n                    dotProd += pixel * weight;\n                  }\n                }\n              }\n            }\n\n            dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] = dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const conv3DBackpropInputV2Config = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropInputV2\n};","map":{"version":3,"names":["backend_util","Conv3DBackpropInputV2","TensorBuffer","util","assertNotComplex","conv3DBackpropInputV2","args","inputs","backend","attrs","dy","filter","pad","strides","inputShape","dyStrides","computeStrides","shape","filterStrides","convInfo","computeConv3DInfo","dx","inShape","dxValues","values","dxS0","dxS1","dxS2","dxS3","dyValues","data","get","dataId","dyS0","dyS1","dyS2","dyS3","fltValues","fltS0","fltS1","fltS2","fltS3","batchSize","filterDepth","filterHeight","filterWidth","inChannels","inDepth","inHeight","inWidth","outChannels","outDepth","outHeight","outWidth","strideDepth","strideHeight","strideWidth","frontPad","padInfo","front","topPad","top","leftPad","left","b","d1","xF","xFCorner","xFMin","Math","max","ceil","yFMax","min","xR","xRCorner","xRMin","yRMax","xC","xCCorner","xCMin","yCMax","dotProd","yF","wF","yR","wR","yC","wC","dyOffset","fltOffset","d2","pixel","weight","makeTensorInfo","dtype","conv3DBackpropInputV2Config","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Conv3DBackpropInputV2.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv3DBackpropInputV2, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv3DBackpropInputV2(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, filter } = inputs;\n    const { pad, strides, inputShape } = attrs;\n    assertNotComplex([dy], 'conv3dBackpropInputV2');\n    const dyStrides = util.computeStrides(dy.shape);\n    const filterStrides = util.computeStrides(filter.shape);\n    const convInfo = backend_util.computeConv3DInfo(inputShape, filter.shape, strides, 1 /* dilations */, pad);\n    const dx = new TensorBuffer(convInfo.inShape, 'float32');\n    const dxValues = dx.values;\n    const [dxS0, dxS1, dxS2, dxS3] = dx.strides;\n    const dyValues = backend.data.get(dy.dataId).values;\n    const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n    const fltValues = backend.data.get(filter.dataId).values;\n    const [fltS0, fltS1, fltS2, fltS3] = filterStrides;\n    const { batchSize, filterDepth, filterHeight, filterWidth, inChannels, inDepth, inHeight, inWidth, outChannels, outDepth, outHeight, outWidth, strideDepth, strideHeight, strideWidth } = convInfo;\n    const frontPad = filterDepth - 1 - convInfo.padInfo.front;\n    const topPad = filterHeight - 1 - convInfo.padInfo.top;\n    const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n    for (let b = 0; b < batchSize; ++b) {\n        for (let d1 = 0; d1 < inChannels; ++d1) {\n            // Frames of depth\n            for (let xF = 0; xF < inDepth; ++xF) {\n                const xFCorner = xF - frontPad;\n                const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));\n                const yFMax = Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);\n                // Rows as per standard 2d matrix notation\n                for (let xR = 0; xR < inHeight; ++xR) {\n                    const xRCorner = xR - topPad;\n                    const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n                    const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n                    // Columns as per standard 2d matrix notation\n                    for (let xC = 0; xC < inWidth; ++xC) {\n                        const xCCorner = xC - leftPad;\n                        const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n                        const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n                        let dotProd = 0;\n                        for (let yF = xFMin; yF < yFMax; ++yF) {\n                            const wF = yF * strideDepth - xFCorner;\n                            for (let yR = xRMin; yR < yRMax; ++yR) {\n                                const wR = yR * strideHeight - xRCorner;\n                                for (let yC = xCMin; yC < yCMax; ++yC) {\n                                    const wC = yC * strideWidth - xCCorner;\n                                    const dyOffset = dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;\n                                    const fltOffset = fltS0 * (filterDepth - 1 - wF) +\n                                        fltS1 * (filterHeight - 1 - wR) +\n                                        fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;\n                                    for (let d2 = 0; d2 < outChannels; ++d2) {\n                                        const pixel = dyValues[dyOffset + d2];\n                                        const weight = fltValues[fltOffset + d2];\n                                        dotProd += pixel * weight;\n                                    }\n                                }\n                            }\n                        }\n                        dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] =\n                            dotProd;\n                    }\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const conv3DBackpropInputV2Config = {\n    kernelName: Conv3DBackpropInputV2,\n    backendName: 'cpu',\n    kernelFunc: conv3DBackpropInputV2\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}