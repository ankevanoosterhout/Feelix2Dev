{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Mean, util } from '@tensorflow/tfjs-core';\nimport { meanImpl } from './Mean_impl';\nimport { transposeImpl, transposeImplCPU } from './Transpose_impl';\nexport const meanConfig = {\n  kernelName: Mean,\n  backendName: 'webgl',\n  kernelFunc: ({\n    inputs,\n    attrs,\n    backend\n  }) => {\n    const {\n      x\n    } = inputs;\n    const {\n      keepDims,\n      axis\n    } = attrs;\n    const webglBackend = backend;\n    const xRank = x.shape.length;\n    const origAxes = util.parseAxisParam(axis, x.shape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    const meanInputIsTransposed = permutedAxes != null;\n    const shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([x]);\n    const intermediates = [];\n    let meanInput = x;\n\n    if (meanInputIsTransposed) {\n      if (shouldExecuteOnCPU) {\n        const xTexData = webglBackend.texData.get(meanInput.dataId);\n        const values = xTexData.values;\n        const newShape = new Array(xRank);\n\n        for (let i = 0; i < newShape.length; i++) {\n          newShape[i] = x.shape[permutedAxes[i]];\n        }\n\n        const meanInputValues = transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n        meanInput = webglBackend.makeTensorInfo(newShape, x.dtype);\n        const meanInputData = webglBackend.texData.get(meanInput.dataId);\n        meanInputData.values = meanInputValues;\n      } else {\n        meanInput = transposeImpl(x, permutedAxes, webglBackend);\n      }\n\n      intermediates.push(meanInput);\n      axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n\n    backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n    const [meanOutShape, reduceShape] = backend_util.computeOutAndReduceShapes(meanInput.shape, axes);\n    let outShape = meanOutShape;\n\n    if (keepDims) {\n      // rather than reshape at the end, set the target shape here.\n      outShape = backend_util.expandShapeToKeepDim(meanOutShape, origAxes);\n    }\n\n    const out = meanImpl(meanInput, reduceShape, outShape, webglBackend);\n\n    for (const i of intermediates) {\n      webglBackend.disposeIntermediateTensorInfo(i);\n    }\n\n    return out;\n  }\n};","map":{"version":3,"names":["backend_util","Mean","util","meanImpl","transposeImpl","transposeImplCPU","meanConfig","kernelName","backendName","kernelFunc","inputs","attrs","backend","x","keepDims","axis","webglBackend","xRank","shape","length","origAxes","parseAxisParam","axes","permutedAxes","getAxesPermutation","meanInputIsTransposed","shouldExecuteOnCPU","intermediates","meanInput","xTexData","texData","get","dataId","values","newShape","Array","i","meanInputValues","dtype","makeTensorInfo","meanInputData","push","getInnerMostAxes","assertAxesAreInnerMostDims","meanOutShape","reduceShape","computeOutAndReduceShapes","outShape","expandShapeToKeepDim","out","disposeIntermediateTensorInfo"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Mean.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Mean, util } from '@tensorflow/tfjs-core';\nimport { meanImpl } from './Mean_impl';\nimport { transposeImpl, transposeImplCPU } from './Transpose_impl';\nexport const meanConfig = {\n    kernelName: Mean,\n    backendName: 'webgl',\n    kernelFunc: ({ inputs, attrs, backend }) => {\n        const { x } = inputs;\n        const { keepDims, axis } = attrs;\n        const webglBackend = backend;\n        const xRank = x.shape.length;\n        const origAxes = util.parseAxisParam(axis, x.shape);\n        let axes = origAxes;\n        const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n        const meanInputIsTransposed = permutedAxes != null;\n        const shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([x]);\n        const intermediates = [];\n        let meanInput = x;\n        if (meanInputIsTransposed) {\n            if (shouldExecuteOnCPU) {\n                const xTexData = webglBackend.texData.get(meanInput.dataId);\n                const values = xTexData.values;\n                const newShape = new Array(xRank);\n                for (let i = 0; i < newShape.length; i++) {\n                    newShape[i] = x.shape[permutedAxes[i]];\n                }\n                const meanInputValues = transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n                meanInput = webglBackend.makeTensorInfo(newShape, x.dtype);\n                const meanInputData = webglBackend.texData.get(meanInput.dataId);\n                meanInputData.values = meanInputValues;\n            }\n            else {\n                meanInput = transposeImpl(x, permutedAxes, webglBackend);\n            }\n            intermediates.push(meanInput);\n            axes = backend_util.getInnerMostAxes(axes.length, xRank);\n        }\n        backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n        const [meanOutShape, reduceShape] = backend_util.computeOutAndReduceShapes(meanInput.shape, axes);\n        let outShape = meanOutShape;\n        if (keepDims) {\n            // rather than reshape at the end, set the target shape here.\n            outShape = backend_util.expandShapeToKeepDim(meanOutShape, origAxes);\n        }\n        const out = meanImpl(meanInput, reduceShape, outShape, webglBackend);\n        for (const i of intermediates) {\n            webglBackend.disposeIntermediateTensorInfo(i);\n        }\n        return out;\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}