{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { MaxPoolWithArgmax } from '@tensorflow/tfjs-core';\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxPoolWithArgmaxImpl } from './MaxPoolWithArgmax_impl';\nexport const maxPoolWithArgmaxConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'cpu',\n  kernelFunc: ({\n    inputs,\n    attrs,\n    backend\n  }) => {\n    const {\n      x\n    } = inputs;\n    const {\n      filterSize,\n      strides,\n      pad,\n      includeBatchInIndex\n    } = attrs;\n    const cpuBackend = backend;\n    assertNotComplex(x, 'MaxPoolWithArgmax');\n    const values = cpuBackend.data.get(x.dataId).values;\n    const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, [1, 1], pad);\n    const [pooled, indexes] = maxPoolWithArgmaxImpl(values, x.shape, x.dtype, includeBatchInIndex, convInfo);\n    const pooledDataId = cpuBackend.write(pooled, convInfo.outShape, x.dtype);\n    const indexesDataId = cpuBackend.write(indexes, convInfo.outShape, x.dtype);\n    return [{\n      dataId: pooledDataId,\n      shape: convInfo.outShape,\n      dtype: x.dtype\n    }, {\n      dataId: indexesDataId,\n      shape: convInfo.outShape,\n      dtype: 'int32'\n    }];\n  }\n};","map":{"version":3,"names":["MaxPoolWithArgmax","backend_util","assertNotComplex","maxPoolWithArgmaxImpl","maxPoolWithArgmaxConfig","kernelName","backendName","kernelFunc","inputs","attrs","backend","x","filterSize","strides","pad","includeBatchInIndex","cpuBackend","values","data","get","dataId","convInfo","computePool2DInfo","shape","pooled","indexes","dtype","pooledDataId","write","outShape","indexesDataId"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/MaxPoolWithArgmax.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { MaxPoolWithArgmax } from '@tensorflow/tfjs-core';\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxPoolWithArgmaxImpl } from './MaxPoolWithArgmax_impl';\nexport const maxPoolWithArgmaxConfig = {\n    kernelName: MaxPoolWithArgmax,\n    backendName: 'cpu',\n    kernelFunc: ({ inputs, attrs, backend }) => {\n        const { x } = inputs;\n        const { filterSize, strides, pad, includeBatchInIndex } = attrs;\n        const cpuBackend = backend;\n        assertNotComplex(x, 'MaxPoolWithArgmax');\n        const values = cpuBackend.data.get(x.dataId).values;\n        const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, [1, 1], pad);\n        const [pooled, indexes] = maxPoolWithArgmaxImpl(values, x.shape, x.dtype, includeBatchInIndex, convInfo);\n        const pooledDataId = cpuBackend.write(pooled, convInfo.outShape, x.dtype);\n        const indexesDataId = cpuBackend.write(indexes, convInfo.outShape, x.dtype);\n        return [\n            { dataId: pooledDataId, shape: convInfo.outShape, dtype: x.dtype },\n            { dataId: indexesDataId, shape: convInfo.outShape, dtype: 'int32' }\n        ];\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,iBAAT,QAAkC,uBAAlC;AACA,SAASC,YAAT,QAA6B,uBAA7B;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,SAASC,qBAAT,QAAsC,0BAAtC;AACA,OAAO,MAAMC,uBAAuB,GAAG;EACnCC,UAAU,EAAEL,iBADuB;EAEnCM,WAAW,EAAE,KAFsB;EAGnCC,UAAU,EAAE,CAAC;IAAEC,MAAF;IAAUC,KAAV;IAAiBC;EAAjB,CAAD,KAAgC;IACxC,MAAM;MAAEC;IAAF,IAAQH,MAAd;IACA,MAAM;MAAEI,UAAF;MAAcC,OAAd;MAAuBC,GAAvB;MAA4BC;IAA5B,IAAoDN,KAA1D;IACA,MAAMO,UAAU,GAAGN,OAAnB;IACAR,gBAAgB,CAACS,CAAD,EAAI,mBAAJ,CAAhB;IACA,MAAMM,MAAM,GAAGD,UAAU,CAACE,IAAX,CAAgBC,GAAhB,CAAoBR,CAAC,CAACS,MAAtB,EAA8BH,MAA7C;IACA,MAAMI,QAAQ,GAAGpB,YAAY,CAACqB,iBAAb,CAA+BX,CAAC,CAACY,KAAjC,EAAwCX,UAAxC,EAAoDC,OAApD,EAA6D,CAAC,CAAD,EAAI,CAAJ,CAA7D,EAAqEC,GAArE,CAAjB;IACA,MAAM,CAACU,MAAD,EAASC,OAAT,IAAoBtB,qBAAqB,CAACc,MAAD,EAASN,CAAC,CAACY,KAAX,EAAkBZ,CAAC,CAACe,KAApB,EAA2BX,mBAA3B,EAAgDM,QAAhD,CAA/C;IACA,MAAMM,YAAY,GAAGX,UAAU,CAACY,KAAX,CAAiBJ,MAAjB,EAAyBH,QAAQ,CAACQ,QAAlC,EAA4ClB,CAAC,CAACe,KAA9C,CAArB;IACA,MAAMI,aAAa,GAAGd,UAAU,CAACY,KAAX,CAAiBH,OAAjB,EAA0BJ,QAAQ,CAACQ,QAAnC,EAA6ClB,CAAC,CAACe,KAA/C,CAAtB;IACA,OAAO,CACH;MAAEN,MAAM,EAAEO,YAAV;MAAwBJ,KAAK,EAAEF,QAAQ,CAACQ,QAAxC;MAAkDH,KAAK,EAAEf,CAAC,CAACe;IAA3D,CADG,EAEH;MAAEN,MAAM,EAAEU,aAAV;MAAyBP,KAAK,EAAEF,QAAQ,CAACQ,QAAzC;MAAmDH,KAAK,EAAE;IAA1D,CAFG,CAAP;EAIH;AAjBkC,CAAhC"},"metadata":{},"sourceType":"module"}