{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class PadProgram {\n  constructor(xShape, paddings, constantValue) {\n    this.variableNames = ['x'];\n    this.customUniforms = [{\n      name: 'value',\n      type: 'float'\n    }];\n    this.outputShape = paddings.map((p, i) => p[0]\n    /* beforePad */\n    + xShape[i] + p[1]\n    /* afterPad */\n    );\n    const rank = xShape.length;\n    const type = getCoordsDataType(rank);\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `;\n      return;\n    }\n\n    this.userCode = `\n      ${type} start = ${type}(${start});\n      ${type} end = ${type}(${end});\n\n      void main() {\n        ${type} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${type} coords = outC - start;\n          setOutput(getX(${unpackedCoords}));\n        }\n      }\n    `;\n  }\n\n}","map":{"version":3,"names":["getCoordsDataType","PadProgram","constructor","xShape","paddings","constantValue","variableNames","customUniforms","name","type","outputShape","map","p","i","rank","length","start","join","end","unpackedCoords","slice","userCode"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/pad_gpu.js"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class PadProgram {\n    constructor(xShape, paddings, constantValue) {\n        this.variableNames = ['x'];\n        this.customUniforms = [{ name: 'value', type: 'float' }];\n        this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n        const rank = xShape.length;\n        const type = getCoordsDataType(rank);\n        const start = paddings.map(p => p[0]).join(',');\n        const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n        const unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n        if (rank === 1) {\n            this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `;\n            return;\n        }\n        this.userCode = `\n      ${type} start = ${type}(${start});\n      ${type} end = ${type}(${end});\n\n      void main() {\n        ${type} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${type} coords = outC - start;\n          setOutput(getX(${unpackedCoords}));\n        }\n      }\n    `;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,iBAAT,QAAkC,mBAAlC;AACA,OAAO,MAAMC,UAAN,CAAiB;EACpBC,WAAW,CAACC,MAAD,EAASC,QAAT,EAAmBC,aAAnB,EAAkC;IACzC,KAAKC,aAAL,GAAqB,CAAC,GAAD,CAArB;IACA,KAAKC,cAAL,GAAsB,CAAC;MAAEC,IAAI,EAAE,OAAR;MAAiBC,IAAI,EAAE;IAAvB,CAAD,CAAtB;IACA,KAAKC,WAAL,GAAmBN,QAAQ,CAACO,GAAT,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAAC,CAAD;IAAI;IAAL,EAAuBT,MAAM,CAACU,CAAD,CAA7B,GAAmCD,CAAC,CAAC,CAAD;IAAI;IAA/D,CAAnB;IACA,MAAME,IAAI,GAAGX,MAAM,CAACY,MAApB;IACA,MAAMN,IAAI,GAAGT,iBAAiB,CAACc,IAAD,CAA9B;IACA,MAAME,KAAK,GAAGZ,QAAQ,CAACO,GAAT,CAAaC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAnB,EAAwBK,IAAxB,CAA6B,GAA7B,CAAd;IACA,MAAMC,GAAG,GAAGd,QAAQ,CAACO,GAAT,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAAC,CAAD,CAAD,GAAOT,MAAM,CAACU,CAAD,CAApC,EAAyCI,IAAzC,CAA8C,GAA9C,CAAZ;IACA,MAAME,cAAc,GAAG,CAAC,WAAD,EAAc,WAAd,EAA2B,WAA3B,EAAwC,WAAxC,EAAqDC,KAArD,CAA2D,CAA3D,EAA8DN,IAA9D,CAAvB;;IACA,IAAIA,IAAI,KAAK,CAAb,EAAgB;MACZ,KAAKO,QAAL,GAAiB;AAC7B,sBAAsBL,KAAM;AAC5B,oBAAoBE,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAZY;MAaA;IACH;;IACD,KAAKG,QAAL,GAAiB;AACzB,QAAQZ,IAAK,YAAWA,IAAK,IAAGO,KAAM;AACtC,QAAQP,IAAK,UAASA,IAAK,IAAGS,GAAI;AAClC;AACA;AACA,UAAUT,IAAK;AACf;AACA;AACA;AACA,YAAYA,IAAK;AACjB,2BAA2BU,cAAe;AAC1C;AACA;AACA,KAbQ;EAcH;;AAxCmB"},"metadata":{},"sourceType":"module"}