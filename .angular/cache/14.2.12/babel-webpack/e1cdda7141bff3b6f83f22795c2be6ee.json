{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport class MeanProgram {\n  constructor(reduceInfo, divisor) {\n    this.variableNames = ['x'];\n    const {\n      windowSize,\n      batchSize,\n      inSize,\n      outSize\n    } = reduceInfo;\n    this.outputShape = [batchSize, outSize];\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n    let updateSnippet = `sumValue += dot(values, ones);`;\n\n    if (divisor != null) {\n      const denominator = 1 / divisor;\n      updateSnippet = `sumValue += dot(values * ${util.isInt(denominator) ? denominator.toPrecision(2) : denominator}, ones);`;\n    }\n\n    let checkOutOfBounds = '';\n\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return 0.0;\n        }\n      `;\n    }\n\n    this.userCode = `\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${updateSnippet}\n        }\n        setOutput(sumValue);\n      }\n    `;\n  }\n\n}","map":{"version":3,"names":["util","MeanProgram","constructor","reduceInfo","divisor","variableNames","windowSize","batchSize","inSize","outSize","outputShape","windowSizeNearestVec4","Math","floor","windowSizeVec4Remainder","updateSnippet","denominator","isInt","toPrecision","checkOutOfBounds","userCode"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/mean_gpu.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport class MeanProgram {\n    constructor(reduceInfo, divisor) {\n        this.variableNames = ['x'];\n        const { windowSize, batchSize, inSize, outSize } = reduceInfo;\n        this.outputShape = [batchSize, outSize];\n        const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n        const windowSizeVec4Remainder = windowSize % 4;\n        let updateSnippet = `sumValue += dot(values, ones);`;\n        if (divisor != null) {\n            const denominator = 1 / divisor;\n            updateSnippet = `sumValue += dot(values * ${util.isInt(denominator) ? denominator.toPrecision(2) :\n                denominator}, ones);`;\n        }\n        let checkOutOfBounds = '';\n        if (inSize % windowSize > 0) {\n            checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return 0.0;\n        }\n      `;\n        }\n        this.userCode = `\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${updateSnippet}\n        }\n        setOutput(sumValue);\n      }\n    `;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,IAAT,QAAqB,uBAArB;AACA,OAAO,MAAMC,WAAN,CAAkB;EACrBC,WAAW,CAACC,UAAD,EAAaC,OAAb,EAAsB;IAC7B,KAAKC,aAAL,GAAqB,CAAC,GAAD,CAArB;IACA,MAAM;MAAEC,UAAF;MAAcC,SAAd;MAAyBC,MAAzB;MAAiCC;IAAjC,IAA6CN,UAAnD;IACA,KAAKO,WAAL,GAAmB,CAACH,SAAD,EAAYE,OAAZ,CAAnB;IACA,MAAME,qBAAqB,GAAGC,IAAI,CAACC,KAAL,CAAWP,UAAU,GAAG,CAAxB,IAA6B,CAA3D;IACA,MAAMQ,uBAAuB,GAAGR,UAAU,GAAG,CAA7C;IACA,IAAIS,aAAa,GAAI,gCAArB;;IACA,IAAIX,OAAO,IAAI,IAAf,EAAqB;MACjB,MAAMY,WAAW,GAAG,IAAIZ,OAAxB;MACAW,aAAa,GAAI,4BAA2Bf,IAAI,CAACiB,KAAL,CAAWD,WAAX,IAA0BA,WAAW,CAACE,WAAZ,CAAwB,CAAxB,CAA1B,GACxCF,WAAY,UADhB;IAEH;;IACD,IAAIG,gBAAgB,GAAG,EAAvB;;IACA,IAAIX,MAAM,GAAGF,UAAT,GAAsB,CAA1B,EAA6B;MACzBa,gBAAgB,GAAI;AAChC,oCAAoCX,MAAO;AAC3C;AACA;AACA,OAJY;IAKH;;IACD,KAAKY,QAAL,GAAiB;AACzB;AACA;AACA;AACA,UAAUD,gBAAiB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkCb,UAAW;AAC7C;AACA;AACA;AACA,8BAA8BK,qBAAsB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAYI,aAAc;AAC1B;AACA;AACA,iCAAiCJ,qBAAsB;AACvD,cAAcG,uBAAuB,KAAK,CAAE;AAC5C;AACA;AACA,YAAYC,aAAc;AAC1B,qBAAqBD,uBAAuB,KAAK,CAAE;AACnD;AACA;AACA;AACA;AACA,YAAYC,aAAc;AAC1B,qBAAqBD,uBAAuB,KAAK,CAAE;AACnD;AACA;AACA;AACA;AACA;AACA,YAAYC,aAAc;AAC1B;AACA;AACA;AACA,KAjDQ;EAkDH;;AAvEoB"},"metadata":{},"sourceType":"module"}