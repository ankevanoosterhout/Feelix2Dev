{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Sum, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { zeros } from '../utils/zeros_impl';\nimport { cast } from './Cast';\nimport { identity } from './Identity';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function sum(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis,\n    keepDims\n  } = attrs;\n  assertNotComplex(x, 'sum');\n  let $x;\n\n  if (x.dtype === 'bool') {\n    $x = cast({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        dtype: 'int32'\n      }\n    });\n  } else {\n    $x = identity({\n      inputs: {\n        x\n      },\n      backend\n    });\n  }\n\n  const xRank = $x.shape.length;\n  const axes = util.parseAxisParam(axis, $x.shape);\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n  let reductionAxes = axes;\n  let permutedX = $x;\n\n  if (permutation != null) {\n    permutedX = transpose({\n      inputs: {\n        x: $x\n      },\n      backend,\n      attrs: {\n        perm: permutation\n      }\n    });\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('sum', reductionAxes, permutedX.shape.length);\n  const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(permutedX.shape, reductionAxes);\n  const resultDtype = backend_util.upcastType(permutedX.dtype, 'int32');\n  let result = zeros(backend, outShape, resultDtype);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = backend.data.get(result.dataId).values;\n  const aVals = backend.data.get(permutedX.dataId).values;\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let sum = 0;\n\n    for (let j = 0; j < reduceSize; ++j) {\n      sum += aVals[offset + j];\n    }\n\n    vals[i] = sum;\n  }\n\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(result.shape, axes);\n    const oldResult = result;\n    result = reshape({\n      inputs: {\n        x: result\n      },\n      backend,\n      attrs: {\n        shape: newShape\n      }\n    });\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  backend.disposeIntermediateTensorInfo($x);\n\n  if (permutation != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return result;\n}\nexport const sumConfig = {\n  kernelName: Sum,\n  backendName: 'cpu',\n  kernelFunc: sum\n};","map":{"version":3,"names":["backend_util","Sum","util","assertNotComplex","zeros","cast","identity","reshape","transpose","sum","args","inputs","backend","attrs","x","axis","keepDims","$x","dtype","xRank","shape","length","axes","parseAxisParam","permutation","getAxesPermutation","reductionAxes","permutedX","perm","getInnerMostAxes","assertAxesAreInnerMostDims","outShape","reduceShape","computeOutAndReduceShapes","resultDtype","upcastType","result","reduceSize","sizeFromShape","vals","data","get","dataId","values","aVals","i","offset","j","newShape","expandShapeToKeepDim","oldResult","disposeIntermediateTensorInfo","sumConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sum.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Sum, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { zeros } from '../utils/zeros_impl';\nimport { cast } from './Cast';\nimport { identity } from './Identity';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function sum(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    assertNotComplex(x, 'sum');\n    let $x;\n    if (x.dtype === 'bool') {\n        $x = cast({ inputs: { x }, backend, attrs: { dtype: 'int32' } });\n    }\n    else {\n        $x = identity({ inputs: { x }, backend });\n    }\n    const xRank = $x.shape.length;\n    const axes = util.parseAxisParam(axis, $x.shape);\n    const permutation = backend_util.getAxesPermutation(axes, xRank);\n    let reductionAxes = axes;\n    let permutedX = $x;\n    if (permutation != null) {\n        permutedX =\n            transpose({ inputs: { x: $x }, backend, attrs: { perm: permutation } });\n        reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n    }\n    backend_util.assertAxesAreInnerMostDims('sum', reductionAxes, permutedX.shape.length);\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(permutedX.shape, reductionAxes);\n    const resultDtype = backend_util.upcastType(permutedX.dtype, 'int32');\n    let result = zeros(backend, outShape, resultDtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = backend.data.get(result.dataId).values;\n    const aVals = backend.data.get(permutedX.dataId).values;\n    for (let i = 0; i < vals.length; ++i) {\n        const offset = i * reduceSize;\n        let sum = 0;\n        for (let j = 0; j < reduceSize; ++j) {\n            sum += aVals[offset + j];\n        }\n        vals[i] = sum;\n    }\n    if (keepDims) {\n        const newShape = backend_util.expandShapeToKeepDim(result.shape, axes);\n        const oldResult = result;\n        result = reshape({ inputs: { x: result }, backend, attrs: { shape: newShape } });\n        backend.disposeIntermediateTensorInfo(oldResult);\n    }\n    backend.disposeIntermediateTensorInfo($x);\n    if (permutation != null) {\n        backend.disposeIntermediateTensorInfo(permutedX);\n    }\n    return result;\n}\nexport const sumConfig = {\n    kernelName: Sum,\n    backendName: 'cpu',\n    kernelFunc: sum\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,EAAuBC,GAAvB,EAA4BC,IAA5B,QAAwC,uBAAxC;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,SAASC,KAAT,QAAsB,qBAAtB;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAO,SAASC,GAAT,CAAaC,IAAb,EAAmB;EACtB,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BH,IAAnC;EACA,MAAM;IAAEI;EAAF,IAAQH,MAAd;EACA,MAAM;IAAEI,IAAF;IAAQC;EAAR,IAAqBH,KAA3B;EACAV,gBAAgB,CAACW,CAAD,EAAI,KAAJ,CAAhB;EACA,IAAIG,EAAJ;;EACA,IAAIH,CAAC,CAACI,KAAF,KAAY,MAAhB,EAAwB;IACpBD,EAAE,GAAGZ,IAAI,CAAC;MAAEM,MAAM,EAAE;QAAEG;MAAF,CAAV;MAAiBF,OAAjB;MAA0BC,KAAK,EAAE;QAAEK,KAAK,EAAE;MAAT;IAAjC,CAAD,CAAT;EACH,CAFD,MAGK;IACDD,EAAE,GAAGX,QAAQ,CAAC;MAAEK,MAAM,EAAE;QAAEG;MAAF,CAAV;MAAiBF;IAAjB,CAAD,CAAb;EACH;;EACD,MAAMO,KAAK,GAAGF,EAAE,CAACG,KAAH,CAASC,MAAvB;EACA,MAAMC,IAAI,GAAGpB,IAAI,CAACqB,cAAL,CAAoBR,IAApB,EAA0BE,EAAE,CAACG,KAA7B,CAAb;EACA,MAAMI,WAAW,GAAGxB,YAAY,CAACyB,kBAAb,CAAgCH,IAAhC,EAAsCH,KAAtC,CAApB;EACA,IAAIO,aAAa,GAAGJ,IAApB;EACA,IAAIK,SAAS,GAAGV,EAAhB;;EACA,IAAIO,WAAW,IAAI,IAAnB,EAAyB;IACrBG,SAAS,GACLnB,SAAS,CAAC;MAAEG,MAAM,EAAE;QAAEG,CAAC,EAAEG;MAAL,CAAV;MAAqBL,OAArB;MAA8BC,KAAK,EAAE;QAAEe,IAAI,EAAEJ;MAAR;IAArC,CAAD,CADb;IAEAE,aAAa,GAAG1B,YAAY,CAAC6B,gBAAb,CAA8BH,aAAa,CAACL,MAA5C,EAAoDF,KAApD,CAAhB;EACH;;EACDnB,YAAY,CAAC8B,0BAAb,CAAwC,KAAxC,EAA+CJ,aAA/C,EAA8DC,SAAS,CAACP,KAAV,CAAgBC,MAA9E;EACA,MAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BhC,YAAY,CAACiC,yBAAb,CAAuCN,SAAS,CAACP,KAAjD,EAAwDM,aAAxD,CAAhC;EACA,MAAMQ,WAAW,GAAGlC,YAAY,CAACmC,UAAb,CAAwBR,SAAS,CAACT,KAAlC,EAAyC,OAAzC,CAApB;EACA,IAAIkB,MAAM,GAAGhC,KAAK,CAACQ,OAAD,EAAUmB,QAAV,EAAoBG,WAApB,CAAlB;EACA,MAAMG,UAAU,GAAGnC,IAAI,CAACoC,aAAL,CAAmBN,WAAnB,CAAnB;EACA,MAAMO,IAAI,GAAG3B,OAAO,CAAC4B,IAAR,CAAaC,GAAb,CAAiBL,MAAM,CAACM,MAAxB,EAAgCC,MAA7C;EACA,MAAMC,KAAK,GAAGhC,OAAO,CAAC4B,IAAR,CAAaC,GAAb,CAAiBd,SAAS,CAACe,MAA3B,EAAmCC,MAAjD;;EACA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,IAAI,CAAClB,MAAzB,EAAiC,EAAEwB,CAAnC,EAAsC;IAClC,MAAMC,MAAM,GAAGD,CAAC,GAAGR,UAAnB;IACA,IAAI5B,GAAG,GAAG,CAAV;;IACA,KAAK,IAAIsC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,UAApB,EAAgC,EAAEU,CAAlC,EAAqC;MACjCtC,GAAG,IAAImC,KAAK,CAACE,MAAM,GAAGC,CAAV,CAAZ;IACH;;IACDR,IAAI,CAACM,CAAD,CAAJ,GAAUpC,GAAV;EACH;;EACD,IAAIO,QAAJ,EAAc;IACV,MAAMgC,QAAQ,GAAGhD,YAAY,CAACiD,oBAAb,CAAkCb,MAAM,CAAChB,KAAzC,EAAgDE,IAAhD,CAAjB;IACA,MAAM4B,SAAS,GAAGd,MAAlB;IACAA,MAAM,GAAG7B,OAAO,CAAC;MAAEI,MAAM,EAAE;QAAEG,CAAC,EAAEsB;MAAL,CAAV;MAAyBxB,OAAzB;MAAkCC,KAAK,EAAE;QAAEO,KAAK,EAAE4B;MAAT;IAAzC,CAAD,CAAhB;IACApC,OAAO,CAACuC,6BAAR,CAAsCD,SAAtC;EACH;;EACDtC,OAAO,CAACuC,6BAAR,CAAsClC,EAAtC;;EACA,IAAIO,WAAW,IAAI,IAAnB,EAAyB;IACrBZ,OAAO,CAACuC,6BAAR,CAAsCxB,SAAtC;EACH;;EACD,OAAOS,MAAP;AACH;AACD,OAAO,MAAMgB,SAAS,GAAG;EACrBC,UAAU,EAAEpD,GADS;EAErBqD,WAAW,EAAE,KAFQ;EAGrBC,UAAU,EAAE9C;AAHS,CAAlB"},"metadata":{},"sourceType":"module"}