{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNativeBackpropInput, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function depthwiseConv2dNativeBackpropInput(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    filter\n  } = inputs;\n  const {\n    strides,\n    dilations,\n    pad,\n    dimRoundingMode,\n    inputShape\n  } = attrs;\n  assertNotComplex([dy, filter], 'depthwiseConv2DNativeBackpropInput');\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n  const convInfo = backend_util.computeConv2DInfo(inputShape, filter.shape, strides, dilations, pad, dimRoundingMode, true\n  /* depthwise */\n  );\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values;\n  const [dyS0, dyS1, dyS2] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n  const chMul = outChannels / inChannels;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n          let dotProd = 0;\n\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) + fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let dm = 0; dm < chMul; ++dm) {\n                const d2 = d1 * chMul + dm;\n                const pixel = dyValues[dyOffset + d2];\n                const weight = fltValues[fltOffset + dm];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n\n          dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const depthwiseConv2dNativeBackpropInputConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropInput\n};","map":{"version":3,"names":["backend_util","DepthwiseConv2dNativeBackpropInput","TensorBuffer","util","assertNotComplex","depthwiseConv2dNativeBackpropInput","args","inputs","backend","attrs","dy","filter","strides","dilations","pad","dimRoundingMode","inputShape","dyStrides","computeStrides","shape","filterStrides","convInfo","computeConv2DInfo","dx","inShape","dxValues","values","dxS0","dxS1","dxS2","dyValues","data","get","dataId","dyS0","dyS1","dyS2","fltValues","fltS0","fltS1","fltS2","batchSize","filterHeight","filterWidth","inChannels","inHeight","inWidth","outChannels","outHeight","outWidth","strideHeight","strideWidth","topPad","padInfo","top","leftPad","left","chMul","b","d1","xR","xRCorner","xRMin","Math","max","ceil","yRMax","min","xC","xCCorner","xCMin","yCMax","dotProd","yR","wR","yC","wC","dyOffset","fltOffset","dm","d2","pixel","weight","makeTensorInfo","dtype","depthwiseConv2dNativeBackpropInputConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/DepthwiseConv2dNativeBackpropInput.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNativeBackpropInput, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function depthwiseConv2dNativeBackpropInput(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, filter } = inputs;\n    const { strides, dilations, pad, dimRoundingMode, inputShape } = attrs;\n    assertNotComplex([dy, filter], 'depthwiseConv2DNativeBackpropInput');\n    const dyStrides = util.computeStrides(dy.shape);\n    const filterStrides = util.computeStrides(filter.shape);\n    const convInfo = backend_util.computeConv2DInfo(inputShape, filter.shape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);\n    const dx = new TensorBuffer(convInfo.inShape, 'float32');\n    const dxValues = dx.values;\n    const [dxS0, dxS1, dxS2] = dx.strides;\n    const dyValues = backend.data.get(dy.dataId).values;\n    const [dyS0, dyS1, dyS2] = dyStrides;\n    const fltValues = backend.data.get(filter.dataId).values;\n    const [fltS0, fltS1, fltS2] = filterStrides;\n    const { batchSize, filterHeight, filterWidth, inChannels, inHeight, inWidth, outChannels, outHeight, outWidth, strideHeight, strideWidth } = convInfo;\n    const topPad = filterHeight - 1 - convInfo.padInfo.top;\n    const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n    const chMul = outChannels / inChannels;\n    for (let b = 0; b < batchSize; ++b) {\n        for (let d1 = 0; d1 < inChannels; ++d1) {\n            for (let xR = 0; xR < inHeight; ++xR) {\n                const xRCorner = xR - topPad;\n                const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n                const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n                for (let xC = 0; xC < inWidth; ++xC) {\n                    const xCCorner = xC - leftPad;\n                    const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n                    const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n                    let dotProd = 0;\n                    for (let yR = xRMin; yR < yRMax; ++yR) {\n                        const wR = yR * strideHeight - xRCorner;\n                        for (let yC = xCMin; yC < yCMax; ++yC) {\n                            const wC = yC * strideWidth - xCCorner;\n                            const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n                            const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                                fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n                            for (let dm = 0; dm < chMul; ++dm) {\n                                const d2 = d1 * chMul + dm;\n                                const pixel = dyValues[dyOffset + d2];\n                                const weight = fltValues[fltOffset + dm];\n                                dotProd += pixel * weight;\n                            }\n                        }\n                    }\n                    dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const depthwiseConv2dNativeBackpropInputConfig = {\n    kernelName: DepthwiseConv2dNativeBackpropInput,\n    backendName: 'cpu',\n    kernelFunc: depthwiseConv2dNativeBackpropInput\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}