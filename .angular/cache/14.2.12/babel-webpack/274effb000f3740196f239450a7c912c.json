{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FusedBatchNorm } from '../kernel_names';\nimport { add } from '../ops/add';\nimport { getReductionAxes } from '../ops/broadcast_util';\nimport { mul } from '../ops/mul';\nimport { reshape } from '../ops/reshape';\nimport { rsqrt } from '../ops/rsqrt';\nimport { scalar } from '../ops/scalar';\nimport { sub } from '../ops/sub';\nimport { sum } from '../ops/sum';\nimport { tile } from '../ops/tile';\nexport const fusedBatchNormGradConfig = {\n  kernelName: FusedBatchNorm,\n  inputsToSave: ['x', 'mean', 'variance', 'scale'],\n  gradFunc: (dy, saved, attrs) => {\n    const {\n      varianceEpsilon\n    } = attrs;\n    const [x, mean, variance, scale] = saved;\n    const scaleValue = scale == null ? scalar(1) : scale;\n    const reductionAxes = getReductionAxes(mean.shape, x.shape);\n    const tileShape = [];\n\n    if (mean.rank === 1) {\n      for (let i = 0; i < x.shape.length - 1; ++i) {\n        tileShape.push(x.shape[i]);\n      }\n\n      tileShape.push(1);\n    }\n\n    const xMinusMean = sub(x, mean);\n    const dyTimesScaleValue = mul(dy, scaleValue);\n    const oneOverSqrtVariance = rsqrt(add(variance, scalar(varianceEpsilon)));\n    const minusHalfRCube = mul(mul(mul(oneOverSqrtVariance, oneOverSqrtVariance), oneOverSqrtVariance), scalar(-0.5));\n\n    const derX = () => {\n      if (mean.rank === 1) {\n        return reshape(mul(mul(dy, tile(reshape(oneOverSqrtVariance, [1, 1, 1, mean.shape[0]]), tileShape)), scaleValue), x.shape);\n      } else {\n        return reshape(mul(mul(dy, oneOverSqrtVariance), scaleValue), x.shape);\n      }\n    };\n\n    const derMean = () => {\n      let meanDer = mul(mul(oneOverSqrtVariance, scalar(-1)), dyTimesScaleValue);\n\n      if (mean.rank === 1) {\n        meanDer = sum(meanDer, reductionAxes);\n      }\n\n      return reshape(meanDer, mean.shape);\n    };\n\n    const derVariance = () => {\n      let varianceDer = mul(mul(minusHalfRCube, xMinusMean), dyTimesScaleValue);\n\n      if (mean.rank === 1) {\n        varianceDer = sum(varianceDer, reductionAxes);\n      }\n\n      return reshape(varianceDer, mean.shape);\n    };\n\n    const derScale = () => {\n      const xMinusMean2TimesRsqrt = mul(xMinusMean, oneOverSqrtVariance);\n      let scaleDer = mul(dy, xMinusMean2TimesRsqrt);\n\n      if (mean.rank === 1) {\n        scaleDer = sum(scaleDer, reductionAxes);\n      }\n\n      return reshape(scaleDer, mean.shape);\n    };\n\n    const derOffset = () => {\n      let offsetDer = dy;\n\n      if (mean.rank === 1) {\n        offsetDer = sum(offsetDer, reductionAxes);\n      }\n\n      return reshape(offsetDer, mean.shape);\n    };\n\n    return {\n      x: derX,\n      mean: derMean,\n      variance: derVariance,\n      scale: derScale,\n      offset: derOffset\n    };\n  }\n};","map":{"version":3,"names":["FusedBatchNorm","add","getReductionAxes","mul","reshape","rsqrt","scalar","sub","sum","tile","fusedBatchNormGradConfig","kernelName","inputsToSave","gradFunc","dy","saved","attrs","varianceEpsilon","x","mean","variance","scale","scaleValue","reductionAxes","shape","tileShape","rank","i","length","push","xMinusMean","dyTimesScaleValue","oneOverSqrtVariance","minusHalfRCube","derX","derMean","meanDer","derVariance","varianceDer","derScale","xMinusMean2TimesRsqrt","scaleDer","derOffset","offsetDer","offset"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/gradients/FusedBatchNorm_grad.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FusedBatchNorm } from '../kernel_names';\nimport { add } from '../ops/add';\nimport { getReductionAxes } from '../ops/broadcast_util';\nimport { mul } from '../ops/mul';\nimport { reshape } from '../ops/reshape';\nimport { rsqrt } from '../ops/rsqrt';\nimport { scalar } from '../ops/scalar';\nimport { sub } from '../ops/sub';\nimport { sum } from '../ops/sum';\nimport { tile } from '../ops/tile';\nexport const fusedBatchNormGradConfig = {\n    kernelName: FusedBatchNorm,\n    inputsToSave: ['x', 'mean', 'variance', 'scale'],\n    gradFunc: (dy, saved, attrs) => {\n        const { varianceEpsilon } = attrs;\n        const [x, mean, variance, scale] = saved;\n        const scaleValue = scale == null ? scalar(1) : scale;\n        const reductionAxes = getReductionAxes(mean.shape, x.shape);\n        const tileShape = [];\n        if (mean.rank === 1) {\n            for (let i = 0; i < x.shape.length - 1; ++i) {\n                tileShape.push(x.shape[i]);\n            }\n            tileShape.push(1);\n        }\n        const xMinusMean = sub(x, mean);\n        const dyTimesScaleValue = mul(dy, scaleValue);\n        const oneOverSqrtVariance = rsqrt(add(variance, scalar(varianceEpsilon)));\n        const minusHalfRCube = mul(mul(mul(oneOverSqrtVariance, oneOverSqrtVariance), oneOverSqrtVariance), scalar(-0.5));\n        const derX = () => {\n            if (mean.rank === 1) {\n                return reshape(mul(mul(dy, tile(reshape(oneOverSqrtVariance, [1, 1, 1, mean.shape[0]]), tileShape)), scaleValue), x.shape);\n            }\n            else {\n                return reshape(mul(mul(dy, oneOverSqrtVariance), scaleValue), x.shape);\n            }\n        };\n        const derMean = () => {\n            let meanDer = mul(mul(oneOverSqrtVariance, scalar(-1)), dyTimesScaleValue);\n            if (mean.rank === 1) {\n                meanDer = sum(meanDer, reductionAxes);\n            }\n            return reshape(meanDer, mean.shape);\n        };\n        const derVariance = () => {\n            let varianceDer = mul(mul(minusHalfRCube, xMinusMean), dyTimesScaleValue);\n            if (mean.rank === 1) {\n                varianceDer = sum(varianceDer, reductionAxes);\n            }\n            return reshape(varianceDer, mean.shape);\n        };\n        const derScale = () => {\n            const xMinusMean2TimesRsqrt = mul(xMinusMean, oneOverSqrtVariance);\n            let scaleDer = mul(dy, xMinusMean2TimesRsqrt);\n            if (mean.rank === 1) {\n                scaleDer = sum(scaleDer, reductionAxes);\n            }\n            return reshape(scaleDer, mean.shape);\n        };\n        const derOffset = () => {\n            let offsetDer = dy;\n            if (mean.rank === 1) {\n                offsetDer = sum(offsetDer, reductionAxes);\n            }\n            return reshape(offsetDer, mean.shape);\n        };\n        return {\n            x: derX,\n            mean: derMean,\n            variance: derVariance,\n            scale: derScale,\n            offset: derOffset\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}