{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LRNGrad, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function lRNGrad(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    y,\n    dy\n  } = inputs;\n  const {\n    depthRadius,\n    bias,\n    alpha,\n    beta\n  } = attrs;\n  assertNotComplex(dy, 'LRNGrad');\n  const dySize = util.sizeFromShape(dy.shape);\n  const channels = dy.shape[3];\n  const dyValues = backend.data.get(dy.dataId).values;\n  const xValues = backend.data.get(x.dataId).values;\n  const yValues = backend.data.get(y.dataId).values;\n  const result = new Float32Array(dySize);\n  const size = dySize;\n\n  for (let offset = 0; offset < size; offset++) {\n    const currentChannel = offset % channels;\n    const depthBegin = offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n    const depthEnd = offset - currentChannel + Math.min(channels, currentChannel + depthRadius + 1);\n    let norm = 0;\n\n    for (let k = depthBegin; k < depthEnd; k++) {\n      norm += Math.pow(xValues[k], 2);\n    }\n\n    norm = alpha * norm + bias;\n\n    for (let k = depthBegin; k < depthEnd; k++) {\n      let dyi = -2 * alpha * beta * xValues[k] * yValues[offset] / norm;\n\n      if (offset === k) {\n        dyi += Math.pow(norm, -beta);\n      }\n\n      dyi *= dyValues[offset];\n      result[k] += dyi;\n    }\n  }\n\n  return backend.makeTensorInfo(dy.shape, x.dtype, result);\n} // tslint:disable-next-line: variable-name\n\nexport const LRNGradConfig = {\n  kernelName: LRNGrad,\n  backendName: 'cpu',\n  kernelFunc: lRNGrad\n};","map":{"version":3,"names":["LRNGrad","util","assertNotComplex","lRNGrad","args","inputs","backend","attrs","x","y","dy","depthRadius","bias","alpha","beta","dySize","sizeFromShape","shape","channels","dyValues","data","get","dataId","values","xValues","yValues","result","Float32Array","size","offset","currentChannel","depthBegin","Math","max","depthEnd","min","norm","k","pow","dyi","makeTensorInfo","dtype","LRNGradConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LRNGrad.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LRNGrad, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function lRNGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, y, dy } = inputs;\n    const { depthRadius, bias, alpha, beta } = attrs;\n    assertNotComplex(dy, 'LRNGrad');\n    const dySize = util.sizeFromShape(dy.shape);\n    const channels = dy.shape[3];\n    const dyValues = backend.data.get(dy.dataId).values;\n    const xValues = backend.data.get(x.dataId).values;\n    const yValues = backend.data.get(y.dataId).values;\n    const result = new Float32Array(dySize);\n    const size = dySize;\n    for (let offset = 0; offset < size; offset++) {\n        const currentChannel = offset % channels;\n        const depthBegin = (offset - currentChannel) + Math.max(0, currentChannel - depthRadius);\n        const depthEnd = (offset - currentChannel) +\n            Math.min(channels, currentChannel + depthRadius + 1);\n        let norm = 0;\n        for (let k = depthBegin; k < depthEnd; k++) {\n            norm += Math.pow(xValues[k], 2);\n        }\n        norm = alpha * norm + bias;\n        for (let k = depthBegin; k < depthEnd; k++) {\n            let dyi = -2 * alpha * beta * xValues[k] * yValues[offset] / norm;\n            if (offset === k) {\n                dyi += Math.pow(norm, -beta);\n            }\n            dyi *= dyValues[offset];\n            result[k] += dyi;\n        }\n    }\n    return backend.makeTensorInfo(dy.shape, x.dtype, result);\n}\n// tslint:disable-next-line: variable-name\nexport const LRNGradConfig = {\n    kernelName: LRNGrad,\n    backendName: 'cpu',\n    kernelFunc: lRNGrad\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}