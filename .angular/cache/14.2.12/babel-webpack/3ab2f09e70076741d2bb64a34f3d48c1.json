{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, upcastType } from '@tensorflow/tfjs-core';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nimport { complex } from '../kernels/Complex';\nimport { LEAKYRELU, LEAKYRELU_PACKED } from '../kernels/LeakyRelu';\nimport { PRELU, PRELU_PACKED } from '../kernels/Prelu';\nimport * as unary_op from '../unaryop_gpu';\nimport { UnaryOpProgram } from '../unaryop_gpu';\nimport * as unary_packed_op from '../unaryop_packed_gpu';\nimport { UnaryOpPackedProgram } from '../unaryop_packed_gpu';\nexport const CHECK_NAN_SNIPPET_UNARY = `if (isnan(x)) return x;`;\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param opSnippet Op snippet to create `UnaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `UnaryOpPackedProgram`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\n\nexport function unaryKernelFunc({\n  opSnippet,\n  packedOpSnippet,\n  cpuKernelImpl,\n  dtype\n}) {\n  return ({\n    inputs,\n    backend\n  }) => {\n    const {\n      x\n    } = inputs;\n    const webglBackend = backend;\n    const $dtype = dtype || x.dtype;\n\n    if (webglBackend.shouldExecuteOnCPU([x]) && cpuKernelImpl != null) {\n      const xData = webglBackend.texData.get(x.dataId);\n      const outValues = cpuKernelImpl(xData.values, $dtype);\n      return webglBackend.makeTensorInfo(x.shape, $dtype, outValues);\n    }\n\n    const shouldUsePackedProgram = env().getBool('WEBGL_PACK_UNARY_OPERATIONS') && packedOpSnippet != null;\n    let program;\n\n    if (shouldUsePackedProgram) {\n      program = new UnaryOpPackedProgram(x.shape, packedOpSnippet);\n    } else {\n      program = new UnaryOpProgram(x.shape, opSnippet);\n    }\n\n    return webglBackend.runWebGLProgram(program, [x], $dtype);\n  };\n}\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param opSnippet Op snippet to create `BinaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `BinaryOpPackedProgram`.\n * @param checkOutOfBoundsForPackedProgram Whether to set checkOutOfBounds=true\n *     when creating BinaryOpPackedProgram.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\n\nexport function binaryKernelFunc({\n  opSnippet,\n  packedOpSnippet,\n  checkOutOfBounds = false,\n  supportsComplex = false,\n  cpuKernelImpl,\n  dtype\n}) {\n  return ({\n    inputs,\n    backend\n  }) => {\n    const {\n      a,\n      b\n    } = inputs;\n    const webglBackend = backend;\n\n    if (supportsComplex && a.dtype === 'complex64') {\n      const aData = webglBackend.texData.get(a.dataId);\n      const bData = webglBackend.texData.get(b.dataId);\n      const [real, imag] = [[aData.complexTensorInfos.real, bData.complexTensorInfos.real], [aData.complexTensorInfos.imag, bData.complexTensorInfos.imag]].map(complexParts => {\n        const [aPart, bPart] = complexParts;\n        const aHandle = {\n          dataId: aPart.dataId,\n          dtype: aPart.dtype,\n          shape: a.shape\n        };\n        const bHandle = {\n          dataId: bPart.dataId,\n          dtype: bPart.dtype,\n          shape: b.shape\n        };\n        const program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n        return webglBackend.runWebGLProgram(program, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));\n      });\n      const complexOutput = complex({\n        inputs: {\n          real,\n          imag\n        },\n        backend: webglBackend\n      });\n      webglBackend.disposeIntermediateTensorInfo(real);\n      webglBackend.disposeIntermediateTensorInfo(imag); // TODO(annxingyuan): Implement CPU forwarding for complex inputs.\n\n      return complexOutput;\n    }\n\n    const $dtype = dtype || upcastType(a.dtype, b.dtype);\n\n    if ((a.dtype === 'string' || b.dtype === 'string' || webglBackend.shouldExecuteOnCPU([a, b])) && cpuKernelImpl != null) {\n      const aVals = webglBackend.texData.get(a.dataId).values;\n      const bVals = webglBackend.texData.get(b.dataId).values;\n      const decodedAVals = a.dtype === 'string' ? // tslint:disable-next-line: no-any\n      backend_util.fromUint8ToStringArray(aVals) : aVals;\n      const decodedBVals = a.dtype === 'string' ? // tslint:disable-next-line: no-any\n      backend_util.fromUint8ToStringArray(bVals) : bVals;\n      const [outValues, outShape] = cpuKernelImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n      const out = webglBackend.makeTensorInfo(outShape, $dtype);\n      const outData = webglBackend.texData.get(out.dataId);\n      outData.values = outValues;\n      return out;\n    }\n\n    const shouldUsePackedProgram = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') && packedOpSnippet != null;\n    let program;\n\n    if (shouldUsePackedProgram) {\n      program = new BinaryOpPackedProgram(packedOpSnippet, a.shape, b.shape, checkOutOfBounds);\n    } else {\n      program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n    }\n\n    return webglBackend.runWebGLProgram(program, [a, b], $dtype);\n  };\n}\nexport function mapActivationToShaderProgram(activation, packed = false) {\n  if (activation === 'linear') {\n    if (packed) {\n      return unary_packed_op.LINEAR;\n    }\n\n    return unary_op.LINEAR;\n  } else if (activation === 'relu') {\n    if (packed) {\n      return unary_packed_op.RELU;\n    }\n\n    return unary_op.RELU;\n  } else if (activation === 'elu') {\n    if (packed) {\n      return unary_packed_op.ELU;\n    }\n\n    return unary_op.ELU;\n  } else if (activation === 'relu6') {\n    if (packed) {\n      return unary_packed_op.RELU6;\n    }\n\n    return unary_op.RELU6;\n  } else if (activation === 'prelu') {\n    if (packed) {\n      return PRELU_PACKED;\n    }\n\n    return PRELU;\n  } else if (activation === 'leakyrelu') {\n    if (packed) {\n      return LEAKYRELU_PACKED;\n    }\n\n    return LEAKYRELU;\n  } else if (activation === 'sigmoid') {\n    if (packed) {\n      return unary_packed_op.SIGMOID;\n    }\n\n    return unary_op.SIGMOID;\n  }\n\n  throw new Error(`Activation ${activation} has not been implemented for the WebGL backend.`);\n}","map":{"version":3,"names":["backend_util","env","upcastType","BinaryOpProgram","BinaryOpPackedProgram","complex","LEAKYRELU","LEAKYRELU_PACKED","PRELU","PRELU_PACKED","unary_op","UnaryOpProgram","unary_packed_op","UnaryOpPackedProgram","CHECK_NAN_SNIPPET_UNARY","unaryKernelFunc","opSnippet","packedOpSnippet","cpuKernelImpl","dtype","inputs","backend","x","webglBackend","$dtype","shouldExecuteOnCPU","xData","texData","get","dataId","outValues","values","makeTensorInfo","shape","shouldUsePackedProgram","getBool","program","runWebGLProgram","binaryKernelFunc","checkOutOfBounds","supportsComplex","a","b","aData","bData","real","imag","complexTensorInfos","map","complexParts","aPart","bPart","aHandle","bHandle","complexOutput","disposeIntermediateTensorInfo","aVals","bVals","decodedAVals","fromUint8ToStringArray","decodedBVals","outShape","out","outData","mapActivationToShaderProgram","activation","packed","LINEAR","RELU","ELU","RELU6","SIGMOID","Error"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, upcastType } from '@tensorflow/tfjs-core';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nimport { complex } from '../kernels/Complex';\nimport { LEAKYRELU, LEAKYRELU_PACKED } from '../kernels/LeakyRelu';\nimport { PRELU, PRELU_PACKED } from '../kernels/Prelu';\nimport * as unary_op from '../unaryop_gpu';\nimport { UnaryOpProgram } from '../unaryop_gpu';\nimport * as unary_packed_op from '../unaryop_packed_gpu';\nimport { UnaryOpPackedProgram } from '../unaryop_packed_gpu';\nexport const CHECK_NAN_SNIPPET_UNARY = `if (isnan(x)) return x;`;\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param opSnippet Op snippet to create `UnaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `UnaryOpPackedProgram`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function unaryKernelFunc({ opSnippet, packedOpSnippet, cpuKernelImpl, dtype }) {\n    return ({ inputs, backend }) => {\n        const { x } = inputs;\n        const webglBackend = backend;\n        const $dtype = dtype || x.dtype;\n        if (webglBackend.shouldExecuteOnCPU([x]) && cpuKernelImpl != null) {\n            const xData = webglBackend.texData.get(x.dataId);\n            const outValues = cpuKernelImpl(xData.values, $dtype);\n            return webglBackend.makeTensorInfo(x.shape, $dtype, outValues);\n        }\n        const shouldUsePackedProgram = env().getBool('WEBGL_PACK_UNARY_OPERATIONS') && packedOpSnippet != null;\n        let program;\n        if (shouldUsePackedProgram) {\n            program = new UnaryOpPackedProgram(x.shape, packedOpSnippet);\n        }\n        else {\n            program = new UnaryOpProgram(x.shape, opSnippet);\n        }\n        return webglBackend.runWebGLProgram(program, [x], $dtype);\n    };\n}\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param opSnippet Op snippet to create `BinaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `BinaryOpPackedProgram`.\n * @param checkOutOfBoundsForPackedProgram Whether to set checkOutOfBounds=true\n *     when creating BinaryOpPackedProgram.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc({ opSnippet, packedOpSnippet, checkOutOfBounds = false, supportsComplex = false, cpuKernelImpl, dtype }) {\n    return ({ inputs, backend }) => {\n        const { a, b } = inputs;\n        const webglBackend = backend;\n        if (supportsComplex && a.dtype === 'complex64') {\n            const aData = webglBackend.texData.get(a.dataId);\n            const bData = webglBackend.texData.get(b.dataId);\n            const [real, imag] = [\n                [aData.complexTensorInfos.real, bData.complexTensorInfos.real],\n                [aData.complexTensorInfos.imag, bData.complexTensorInfos.imag]\n            ].map(complexParts => {\n                const [aPart, bPart] = complexParts;\n                const aHandle = {\n                    dataId: aPart.dataId,\n                    dtype: aPart.dtype,\n                    shape: a.shape\n                };\n                const bHandle = {\n                    dataId: bPart.dataId,\n                    dtype: bPart.dtype,\n                    shape: b.shape\n                };\n                const program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n                return webglBackend.runWebGLProgram(program, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));\n            });\n            const complexOutput = complex({ inputs: { real, imag }, backend: webglBackend });\n            webglBackend.disposeIntermediateTensorInfo(real);\n            webglBackend.disposeIntermediateTensorInfo(imag);\n            // TODO(annxingyuan): Implement CPU forwarding for complex inputs.\n            return complexOutput;\n        }\n        const $dtype = dtype || upcastType(a.dtype, b.dtype);\n        if ((a.dtype === 'string' || b.dtype === 'string' ||\n            webglBackend.shouldExecuteOnCPU([a, b])) &&\n            cpuKernelImpl != null) {\n            const aVals = webglBackend.texData.get(a.dataId).values;\n            const bVals = webglBackend.texData.get(b.dataId).values;\n            const decodedAVals = a.dtype === 'string' ?\n                // tslint:disable-next-line: no-any\n                backend_util.fromUint8ToStringArray(aVals) :\n                aVals;\n            const decodedBVals = a.dtype === 'string' ?\n                // tslint:disable-next-line: no-any\n                backend_util.fromUint8ToStringArray(bVals) :\n                bVals;\n            const [outValues, outShape] = cpuKernelImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n            const out = webglBackend.makeTensorInfo(outShape, $dtype);\n            const outData = webglBackend.texData.get(out.dataId);\n            outData.values = outValues;\n            return out;\n        }\n        const shouldUsePackedProgram = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') &&\n            packedOpSnippet != null;\n        let program;\n        if (shouldUsePackedProgram) {\n            program = new BinaryOpPackedProgram(packedOpSnippet, a.shape, b.shape, checkOutOfBounds);\n        }\n        else {\n            program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n        }\n        return webglBackend.runWebGLProgram(program, [a, b], $dtype);\n    };\n}\nexport function mapActivationToShaderProgram(activation, packed = false) {\n    if (activation === 'linear') {\n        if (packed) {\n            return unary_packed_op.LINEAR;\n        }\n        return unary_op.LINEAR;\n    }\n    else if (activation === 'relu') {\n        if (packed) {\n            return unary_packed_op.RELU;\n        }\n        return unary_op.RELU;\n    }\n    else if (activation === 'elu') {\n        if (packed) {\n            return unary_packed_op.ELU;\n        }\n        return unary_op.ELU;\n    }\n    else if (activation === 'relu6') {\n        if (packed) {\n            return unary_packed_op.RELU6;\n        }\n        return unary_op.RELU6;\n    }\n    else if (activation === 'prelu') {\n        if (packed) {\n            return PRELU_PACKED;\n        }\n        return PRELU;\n    }\n    else if (activation === 'leakyrelu') {\n        if (packed) {\n            return LEAKYRELU_PACKED;\n        }\n        return LEAKYRELU;\n    }\n    else if (activation === 'sigmoid') {\n        if (packed) {\n            return unary_packed_op.SIGMOID;\n        }\n        return unary_op.SIGMOID;\n    }\n    throw new Error(`Activation ${activation} has not been implemented for the WebGL backend.`);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}