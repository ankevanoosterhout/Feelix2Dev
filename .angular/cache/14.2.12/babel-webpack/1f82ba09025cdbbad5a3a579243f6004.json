{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, util } from '@tensorflow/tfjs-core';\nexport function bincountImpl(xVals, weightsVals, weightsDtype, weightsShape, size) {\n  const weightsSize = util.sizeFromShape(weightsShape);\n  const outVals = util.makeZerosTypedArray(size, weightsDtype);\n\n  for (let i = 0; i < xVals.length; i++) {\n    const value = xVals[i];\n\n    if (value < 0) {\n      throw new Error('Input x must be non-negative!');\n    }\n\n    if (value >= size) {\n      continue;\n    }\n\n    if (weightsSize > 0) {\n      outVals[value] += weightsVals[i];\n    } else {\n      outVals[value] += 1;\n    }\n  }\n\n  return outVals;\n}\nexport function bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput = false) {\n  const numRows = xBuf.shape[0];\n  const numCols = xBuf.shape[1];\n  const outBuf = buffer([numRows, size], weightsBuf.dtype);\n\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      const value = xBuf.get(i, j);\n\n      if (value < 0) {\n        throw new Error('Input x must be non-negative!');\n      }\n\n      if (value >= size) {\n        continue;\n      }\n\n      if (binaryOutput) {\n        outBuf.set(1, i, value);\n      } else {\n        if (weightsBuf.size > 0) {\n          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n        } else {\n          outBuf.set(outBuf.get(i, value) + 1, i, value);\n        }\n      }\n    }\n  }\n\n  return outBuf;\n}","map":{"version":3,"names":["buffer","util","bincountImpl","xVals","weightsVals","weightsDtype","weightsShape","size","weightsSize","sizeFromShape","outVals","makeZerosTypedArray","i","length","value","Error","bincountReduceImpl","xBuf","weightsBuf","binaryOutput","numRows","shape","numCols","outBuf","dtype","j","get","set"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Bincount_impl.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, util } from '@tensorflow/tfjs-core';\nexport function bincountImpl(xVals, weightsVals, weightsDtype, weightsShape, size) {\n    const weightsSize = util.sizeFromShape(weightsShape);\n    const outVals = util.makeZerosTypedArray(size, weightsDtype);\n    for (let i = 0; i < xVals.length; i++) {\n        const value = xVals[i];\n        if (value < 0) {\n            throw new Error('Input x must be non-negative!');\n        }\n        if (value >= size) {\n            continue;\n        }\n        if (weightsSize > 0) {\n            outVals[value] += weightsVals[i];\n        }\n        else {\n            outVals[value] += 1;\n        }\n    }\n    return outVals;\n}\nexport function bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput = false) {\n    const numRows = xBuf.shape[0];\n    const numCols = xBuf.shape[1];\n    const outBuf = buffer([numRows, size], weightsBuf.dtype);\n    for (let i = 0; i < numRows; i++) {\n        for (let j = 0; j < numCols; j++) {\n            const value = xBuf.get(i, j);\n            if (value < 0) {\n                throw new Error('Input x must be non-negative!');\n            }\n            if (value >= size) {\n                continue;\n            }\n            if (binaryOutput) {\n                outBuf.set(1, i, value);\n            }\n            else {\n                if (weightsBuf.size > 0) {\n                    outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n                }\n                else {\n                    outBuf.set(outBuf.get(i, value) + 1, i, value);\n                }\n            }\n        }\n    }\n    return outBuf;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,EAAiBC,IAAjB,QAA6B,uBAA7B;AACA,OAAO,SAASC,YAAT,CAAsBC,KAAtB,EAA6BC,WAA7B,EAA0CC,YAA1C,EAAwDC,YAAxD,EAAsEC,IAAtE,EAA4E;EAC/E,MAAMC,WAAW,GAAGP,IAAI,CAACQ,aAAL,CAAmBH,YAAnB,CAApB;EACA,MAAMI,OAAO,GAAGT,IAAI,CAACU,mBAAL,CAAyBJ,IAAzB,EAA+BF,YAA/B,CAAhB;;EACA,KAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,KAAK,CAACU,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;IACnC,MAAME,KAAK,GAAGX,KAAK,CAACS,CAAD,CAAnB;;IACA,IAAIE,KAAK,GAAG,CAAZ,EAAe;MACX,MAAM,IAAIC,KAAJ,CAAU,+BAAV,CAAN;IACH;;IACD,IAAID,KAAK,IAAIP,IAAb,EAAmB;MACf;IACH;;IACD,IAAIC,WAAW,GAAG,CAAlB,EAAqB;MACjBE,OAAO,CAACI,KAAD,CAAP,IAAkBV,WAAW,CAACQ,CAAD,CAA7B;IACH,CAFD,MAGK;MACDF,OAAO,CAACI,KAAD,CAAP,IAAkB,CAAlB;IACH;EACJ;;EACD,OAAOJ,OAAP;AACH;AACD,OAAO,SAASM,kBAAT,CAA4BC,IAA5B,EAAkCC,UAAlC,EAA8CX,IAA9C,EAAoDY,YAAY,GAAG,KAAnE,EAA0E;EAC7E,MAAMC,OAAO,GAAGH,IAAI,CAACI,KAAL,CAAW,CAAX,CAAhB;EACA,MAAMC,OAAO,GAAGL,IAAI,CAACI,KAAL,CAAW,CAAX,CAAhB;EACA,MAAME,MAAM,GAAGvB,MAAM,CAAC,CAACoB,OAAD,EAAUb,IAAV,CAAD,EAAkBW,UAAU,CAACM,KAA7B,CAArB;;EACA,KAAK,IAAIZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,OAApB,EAA6BR,CAAC,EAA9B,EAAkC;IAC9B,KAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,OAApB,EAA6BG,CAAC,EAA9B,EAAkC;MAC9B,MAAMX,KAAK,GAAGG,IAAI,CAACS,GAAL,CAASd,CAAT,EAAYa,CAAZ,CAAd;;MACA,IAAIX,KAAK,GAAG,CAAZ,EAAe;QACX,MAAM,IAAIC,KAAJ,CAAU,+BAAV,CAAN;MACH;;MACD,IAAID,KAAK,IAAIP,IAAb,EAAmB;QACf;MACH;;MACD,IAAIY,YAAJ,EAAkB;QACdI,MAAM,CAACI,GAAP,CAAW,CAAX,EAAcf,CAAd,EAAiBE,KAAjB;MACH,CAFD,MAGK;QACD,IAAII,UAAU,CAACX,IAAX,GAAkB,CAAtB,EAAyB;UACrBgB,MAAM,CAACI,GAAP,CAAWJ,MAAM,CAACG,GAAP,CAAWd,CAAX,EAAcE,KAAd,IAAuBI,UAAU,CAACQ,GAAX,CAAed,CAAf,EAAkBa,CAAlB,CAAlC,EAAwDb,CAAxD,EAA2DE,KAA3D;QACH,CAFD,MAGK;UACDS,MAAM,CAACI,GAAP,CAAWJ,MAAM,CAACG,GAAP,CAAWd,CAAX,EAAcE,KAAd,IAAuB,CAAlC,EAAqCF,CAArC,EAAwCE,KAAxC;QACH;MACJ;IACJ;EACJ;;EACD,OAAOS,MAAP;AACH"},"metadata":{},"sourceType":"module"}