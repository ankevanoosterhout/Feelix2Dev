{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\nimport { buffer, util } from '@tensorflow/tfjs-core';\n\nconst comparePair = (a, b) => {\n  const valueDiff = b.value - a.value;\n  return valueDiff === 0 ? a.index - b.index : valueDiff;\n};\n/**\n * Partitions array where all elements smaller than the (k+1) smallest element\n * are found to the left of it, and all larger to the right of it.\n * Based on the Floyd-Rivest Algorithm, ref:\n * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm\n * @param array: Array to partition\n * @param left: Left index for the interval\n * @param right: Right index for the interval\n * @param k: Desired index value, where array[k] is the (k+1)th smallest element\n *           when left = 0\n */\n\n\nfunction select(array, k, left = 0, right = array.length - 1) {\n  while (right > left) {\n    // Use select recursively to sample a smaller set of size s\n    // the arbitrary constants 600 and 0.5 are used in the original\n    // version to minimize execution time.\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const i = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i - n / 2);\n      const newLeft = Math.max(left, Math.floor(k - i * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));\n      select(array, k, newLeft, newRight);\n    } // partition the elements between left and right around t\n\n\n    const t = array[k];\n    let i = left;\n    let j = right;\n    util.swap(array, left, k);\n\n    if (comparePair(array[right], t) > 0) {\n      util.swap(array, left, right);\n    }\n\n    while (i < j) {\n      util.swap(array, i, j);\n      i++;\n      j--;\n\n      while (comparePair(array[i], t) < 0) {\n        i = i + 1;\n      }\n\n      while (comparePair(array[j], t) > 0) {\n        j = j - 1;\n      }\n    }\n\n    if (comparePair(array[left], t) === 0) {\n      util.swap(array, left, j);\n    } else {\n      j = j + 1;\n      util.swap(array, j, right);\n    } // Adjust left and right towards the boundaries of the subset\n    // containing the (k - left + 1)th smallest element.\n\n\n    if (j <= k) {\n      left = j + 1;\n    }\n\n    if (k <= j) {\n      right = j - 1;\n    }\n  }\n}\n\nexport function topKImpl(x, xShape, xDtype, k, sorted) {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n    let valAndInd = new Array(vals.length);\n    vals.forEach((value, index) => valAndInd[index] = {\n      value,\n      index\n    });\n\n    if (k < valAndInd.length) {\n      select(valAndInd, k);\n      valAndInd = valAndInd.slice(0, k);\n    }\n\n    if (sorted) {\n      valAndInd.sort(comparePair);\n    }\n\n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  } // Reshape back to the original input shape, except that the last\n  // dimension is k.\n\n\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n  return [buffer(outputShape, xDtype, allTopKVals), buffer(outputShape, 'int32', allTopKIndices)];\n}","map":{"version":3,"names":["buffer","util","comparePair","a","b","valueDiff","value","index","select","array","k","left","right","length","n","i","z","Math","log","s","exp","sd","sqrt","sign","newLeft","max","floor","newRight","min","t","j","swap","topKImpl","x","xShape","xDtype","sorted","lastDim","batch","size","allTopKVals","getTypedArrayFromDType","allTopKIndices","offset","vals","subarray","valAndInd","Array","forEach","slice","sort","outOffset","topKVals","topKIndices","outputShape"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/TopK_impl.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/** An implementation of the TopK kernel shared between webgl and cpu. */\nimport { buffer, util } from '@tensorflow/tfjs-core';\nconst comparePair = (a, b) => {\n    const valueDiff = b.value - a.value;\n    return valueDiff === 0 ? a.index - b.index : valueDiff;\n};\n/**\n * Partitions array where all elements smaller than the (k+1) smallest element\n * are found to the left of it, and all larger to the right of it.\n * Based on the Floyd-Rivest Algorithm, ref:\n * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm\n * @param array: Array to partition\n * @param left: Left index for the interval\n * @param right: Right index for the interval\n * @param k: Desired index value, where array[k] is the (k+1)th smallest element\n *           when left = 0\n */\nfunction select(array, k, left = 0, right = array.length - 1) {\n    while (right > left) {\n        // Use select recursively to sample a smaller set of size s\n        // the arbitrary constants 600 and 0.5 are used in the original\n        // version to minimize execution time.\n        if (right - left > 600) {\n            const n = right - left + 1;\n            const i = k - left + 1;\n            const z = Math.log(n);\n            const s = 0.5 * Math.exp(2 * z / 3);\n            const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i - n / 2);\n            const newLeft = Math.max(left, Math.floor(k - i * s / n + sd));\n            const newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));\n            select(array, k, newLeft, newRight);\n        }\n        // partition the elements between left and right around t\n        const t = array[k];\n        let i = left;\n        let j = right;\n        util.swap(array, left, k);\n        if (comparePair(array[right], t) > 0) {\n            util.swap(array, left, right);\n        }\n        while (i < j) {\n            util.swap(array, i, j);\n            i++;\n            j--;\n            while (comparePair(array[i], t) < 0) {\n                i = i + 1;\n            }\n            while (comparePair(array[j], t) > 0) {\n                j = j - 1;\n            }\n        }\n        if (comparePair(array[left], t) === 0) {\n            util.swap(array, left, j);\n        }\n        else {\n            j = j + 1;\n            util.swap(array, j, right);\n        }\n        // Adjust left and right towards the boundaries of the subset\n        // containing the (k - left + 1)th smallest element.\n        if (j <= k) {\n            left = j + 1;\n        }\n        if (k <= j) {\n            right = j - 1;\n        }\n    }\n}\nexport function topKImpl(x, xShape, xDtype, k, sorted) {\n    // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n    const lastDim = xShape[xShape.length - 1];\n    const [batch, size] = [x.length / lastDim, lastDim];\n    const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n    const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n    for (let b = 0; b < batch; b++) {\n        const offset = b * size;\n        const vals = x.subarray(offset, offset + size);\n        let valAndInd = new Array(vals.length);\n        vals.forEach((value, index) => valAndInd[index] = { value, index });\n        if (k < valAndInd.length) {\n            select(valAndInd, k);\n            valAndInd = valAndInd.slice(0, k);\n        }\n        if (sorted) {\n            valAndInd.sort(comparePair);\n        }\n        const outOffset = b * k;\n        const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n        const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n        for (let i = 0; i < k; i++) {\n            topKVals[i] = valAndInd[i].value;\n            topKIndices[i] = valAndInd[i].index;\n        }\n    }\n    // Reshape back to the original input shape, except that the last\n    // dimension is k.\n    const outputShape = xShape.slice();\n    outputShape[outputShape.length - 1] = k;\n    return [\n        buffer(outputShape, xDtype, allTopKVals),\n        buffer(outputShape, 'int32', allTopKIndices)\n    ];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}