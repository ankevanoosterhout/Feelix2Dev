{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Softmax, util } from '@tensorflow/tfjs-core';\nimport { exp } from './Exp';\nimport { max } from './Max';\nimport { div } from './RealDiv';\nimport { reshape } from './Reshape';\nimport { sub } from './Sub';\nimport { sum } from './Sum';\nexport function softmax(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    logits\n  } = inputs;\n  const {\n    dim\n  } = attrs;\n  const logitsRank = logits.shape.length;\n  let $dim = dim;\n\n  if ($dim === -1) {\n    $dim = logitsRank - 1;\n  }\n\n  if ($dim !== logitsRank - 1) {\n    throw Error('Softmax along a non-last dimension is not yet supported. ' + `Logits was rank ${logitsRank} and dim was ${$dim}`);\n  }\n\n  const axes = util.parseAxisParam([$dim], logits.shape);\n  const maxLogit = max({\n    inputs: {\n      x: logits\n    },\n    backend,\n    attrs: {\n      reductionIndices: axes,\n      keepDims: false\n    }\n  });\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n  const maxLogitReshaped = reshape({\n    inputs: {\n      x: maxLogit\n    },\n    backend,\n    attrs: {\n      shape: expandedShape\n    }\n  });\n  const a = sub({\n    inputs: {\n      a: logits,\n      b: maxLogitReshaped\n    },\n    backend\n  });\n  const b = exp({\n    inputs: {\n      x: a\n    },\n    backend\n  });\n  const sumExp = sum({\n    inputs: {\n      x: b\n    },\n    backend,\n    attrs: {\n      axis: axes,\n      keepDims: false\n    }\n  });\n  const sumReshaped = reshape({\n    inputs: {\n      x: sumExp\n    },\n    backend,\n    attrs: {\n      shape: expandedShape\n    }\n  });\n  const result = div({\n    inputs: {\n      a: b,\n      b: sumReshaped\n    },\n    backend\n  });\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumReshaped);\n  return result;\n}\nexport const softmaxConfig = {\n  kernelName: Softmax,\n  backendName: 'cpu',\n  kernelFunc: softmax\n};","map":{"version":3,"names":["backend_util","Softmax","util","exp","max","div","reshape","sub","sum","softmax","args","inputs","backend","attrs","logits","dim","logitsRank","shape","length","$dim","Error","axes","parseAxisParam","maxLogit","x","reductionIndices","keepDims","expandedShape","expandShapeToKeepDim","maxLogitReshaped","a","b","sumExp","axis","sumReshaped","result","disposeIntermediateTensorInfo","softmaxConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Softmax.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Softmax, util } from '@tensorflow/tfjs-core';\nimport { exp } from './Exp';\nimport { max } from './Max';\nimport { div } from './RealDiv';\nimport { reshape } from './Reshape';\nimport { sub } from './Sub';\nimport { sum } from './Sum';\nexport function softmax(args) {\n    const { inputs, backend, attrs } = args;\n    const { logits } = inputs;\n    const { dim } = attrs;\n    const logitsRank = logits.shape.length;\n    let $dim = dim;\n    if ($dim === -1) {\n        $dim = logitsRank - 1;\n    }\n    if ($dim !== logitsRank - 1) {\n        throw Error('Softmax along a non-last dimension is not yet supported. ' +\n            `Logits was rank ${logitsRank} and dim was ${$dim}`);\n    }\n    const axes = util.parseAxisParam([$dim], logits.shape);\n    const maxLogit = max({\n        inputs: { x: logits },\n        backend,\n        attrs: { reductionIndices: axes, keepDims: false }\n    });\n    const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n    const maxLogitReshaped = reshape({ inputs: { x: maxLogit }, backend, attrs: { shape: expandedShape } });\n    const a = sub({ inputs: { a: logits, b: maxLogitReshaped }, backend });\n    const b = exp({ inputs: { x: a }, backend });\n    const sumExp = sum({ inputs: { x: b }, backend, attrs: { axis: axes, keepDims: false } });\n    const sumReshaped = reshape({ inputs: { x: sumExp }, backend, attrs: { shape: expandedShape } });\n    const result = div({ inputs: { a: b, b: sumReshaped }, backend });\n    backend.disposeIntermediateTensorInfo(maxLogit);\n    backend.disposeIntermediateTensorInfo(maxLogitReshaped);\n    backend.disposeIntermediateTensorInfo(a);\n    backend.disposeIntermediateTensorInfo(b);\n    backend.disposeIntermediateTensorInfo(sumExp);\n    backend.disposeIntermediateTensorInfo(sumReshaped);\n    return result;\n}\nexport const softmaxConfig = {\n    kernelName: Softmax,\n    backendName: 'cpu',\n    kernelFunc: softmax\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,EAAuBC,OAAvB,EAAgCC,IAAhC,QAA4C,uBAA5C;AACA,SAASC,GAAT,QAAoB,OAApB;AACA,SAASC,GAAT,QAAoB,OAApB;AACA,SAASC,GAAT,QAAoB,WAApB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,GAAT,QAAoB,OAApB;AACA,SAASC,GAAT,QAAoB,OAApB;AACA,OAAO,SAASC,OAAT,CAAiBC,IAAjB,EAAuB;EAC1B,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BH,IAAnC;EACA,MAAM;IAAEI;EAAF,IAAaH,MAAnB;EACA,MAAM;IAAEI;EAAF,IAAUF,KAAhB;EACA,MAAMG,UAAU,GAAGF,MAAM,CAACG,KAAP,CAAaC,MAAhC;EACA,IAAIC,IAAI,GAAGJ,GAAX;;EACA,IAAII,IAAI,KAAK,CAAC,CAAd,EAAiB;IACbA,IAAI,GAAGH,UAAU,GAAG,CAApB;EACH;;EACD,IAAIG,IAAI,KAAKH,UAAU,GAAG,CAA1B,EAA6B;IACzB,MAAMI,KAAK,CAAC,8DACP,mBAAkBJ,UAAW,gBAAeG,IAAK,EAD3C,CAAX;EAEH;;EACD,MAAME,IAAI,GAAGnB,IAAI,CAACoB,cAAL,CAAoB,CAACH,IAAD,CAApB,EAA4BL,MAAM,CAACG,KAAnC,CAAb;EACA,MAAMM,QAAQ,GAAGnB,GAAG,CAAC;IACjBO,MAAM,EAAE;MAAEa,CAAC,EAAEV;IAAL,CADS;IAEjBF,OAFiB;IAGjBC,KAAK,EAAE;MAAEY,gBAAgB,EAAEJ,IAApB;MAA0BK,QAAQ,EAAE;IAApC;EAHU,CAAD,CAApB;EAKA,MAAMC,aAAa,GAAG3B,YAAY,CAAC4B,oBAAb,CAAkCL,QAAQ,CAACN,KAA3C,EAAkDI,IAAlD,CAAtB;EACA,MAAMQ,gBAAgB,GAAGvB,OAAO,CAAC;IAAEK,MAAM,EAAE;MAAEa,CAAC,EAAED;IAAL,CAAV;IAA2BX,OAA3B;IAAoCC,KAAK,EAAE;MAAEI,KAAK,EAAEU;IAAT;EAA3C,CAAD,CAAhC;EACA,MAAMG,CAAC,GAAGvB,GAAG,CAAC;IAAEI,MAAM,EAAE;MAAEmB,CAAC,EAAEhB,MAAL;MAAaiB,CAAC,EAAEF;IAAhB,CAAV;IAA8CjB;EAA9C,CAAD,CAAb;EACA,MAAMmB,CAAC,GAAG5B,GAAG,CAAC;IAAEQ,MAAM,EAAE;MAAEa,CAAC,EAAEM;IAAL,CAAV;IAAoBlB;EAApB,CAAD,CAAb;EACA,MAAMoB,MAAM,GAAGxB,GAAG,CAAC;IAAEG,MAAM,EAAE;MAAEa,CAAC,EAAEO;IAAL,CAAV;IAAoBnB,OAApB;IAA6BC,KAAK,EAAE;MAAEoB,IAAI,EAAEZ,IAAR;MAAcK,QAAQ,EAAE;IAAxB;EAApC,CAAD,CAAlB;EACA,MAAMQ,WAAW,GAAG5B,OAAO,CAAC;IAAEK,MAAM,EAAE;MAAEa,CAAC,EAAEQ;IAAL,CAAV;IAAyBpB,OAAzB;IAAkCC,KAAK,EAAE;MAAEI,KAAK,EAAEU;IAAT;EAAzC,CAAD,CAA3B;EACA,MAAMQ,MAAM,GAAG9B,GAAG,CAAC;IAAEM,MAAM,EAAE;MAAEmB,CAAC,EAAEC,CAAL;MAAQA,CAAC,EAAEG;IAAX,CAAV;IAAoCtB;EAApC,CAAD,CAAlB;EACAA,OAAO,CAACwB,6BAAR,CAAsCb,QAAtC;EACAX,OAAO,CAACwB,6BAAR,CAAsCP,gBAAtC;EACAjB,OAAO,CAACwB,6BAAR,CAAsCN,CAAtC;EACAlB,OAAO,CAACwB,6BAAR,CAAsCL,CAAtC;EACAnB,OAAO,CAACwB,6BAAR,CAAsCJ,MAAtC;EACApB,OAAO,CAACwB,6BAAR,CAAsCF,WAAtC;EACA,OAAOC,MAAP;AACH;AACD,OAAO,MAAME,aAAa,GAAG;EACzBC,UAAU,EAAErC,OADa;EAEzBsC,WAAW,EAAE,KAFY;EAGzBC,UAAU,EAAE/B;AAHa,CAAtB"},"metadata":{},"sourceType":"module"}