{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { cloneTensor, getParamValue, getTensor } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n  switch (node.op) {\n    case 'Const':\n      {\n        return tensorMap[node.name];\n      }\n\n    case 'PlaceholderWithDefault':\n      const def = getParamValue('default', node, tensorMap, context);\n      return [getTensor(node.name, tensorMap, context) || def];\n\n    case 'Placeholder':\n      return [getTensor(node.name, tensorMap, context)];\n\n    case 'Identity':\n    case 'StopGradient':\n    case 'FakeQuantWithMinMaxVars':\n      {\n        // This op is currently ignored.\n        const data = getParamValue('x', node, tensorMap, context);\n        return [cloneTensor(data)];\n      }\n\n    case 'IdentityN':\n      return getParamValue('x', node, tensorMap, context).map(t => cloneTensor(t));\n\n    case 'Snapshot':\n      const snapshot = getParamValue('x', node, tensorMap, context);\n      return [cloneTensor(snapshot)];\n\n    case 'Shape':\n      return [ops.tensor1d(getParamValue('x', node, tensorMap, context).shape, 'int32')];\n\n    case 'ShapeN':\n      return getParamValue('x', node, tensorMap, context).map(t => ops.tensor1d(t.shape));\n\n    case 'Size':\n      return [ops.scalar(getParamValue('x', node, tensorMap, context).size, 'int32')];\n\n    case 'Rank':\n      return [ops.scalar(getParamValue('x', node, tensorMap, context).rank, 'int32')];\n\n    case 'NoOp':\n      return [ops.scalar(1)];\n\n    case 'Print':\n      const input = getParamValue('x', node, tensorMap, context);\n      const data = getParamValue('data', node, tensorMap, context);\n      const message = getParamValue('message', node, tensorMap, context);\n      const summarize = getParamValue('summarize', node, tensorMap, context);\n      console.warn('The graph has a tf.print() operation,' + 'usually used for debugging, which slows down performance.');\n      console.log(message);\n\n      for (let i = 0; i < data.length; i++) {\n        console.log(Array.prototype.slice.call(data[i].dataSync()).slice(0, summarize));\n      }\n\n      return [input];\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'graph';","map":{"version":3,"names":["tfOps","cloneTensor","getParamValue","getTensor","executeOp","node","tensorMap","context","ops","op","name","def","data","map","t","snapshot","tensor1d","shape","scalar","size","rank","input","message","summarize","console","warn","log","i","length","Array","prototype","slice","call","dataSync","TypeError","CATEGORY"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/graph_executor.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { cloneTensor, getParamValue, getTensor } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'Const': {\n            return tensorMap[node.name];\n        }\n        case 'PlaceholderWithDefault':\n            const def = getParamValue('default', node, tensorMap, context);\n            return [getTensor(node.name, tensorMap, context) || def];\n        case 'Placeholder':\n            return [getTensor(node.name, tensorMap, context)];\n        case 'Identity':\n        case 'StopGradient':\n        case 'FakeQuantWithMinMaxVars': { // This op is currently ignored.\n            const data = getParamValue('x', node, tensorMap, context);\n            return [cloneTensor(data)];\n        }\n        case 'IdentityN':\n            return getParamValue('x', node, tensorMap, context)\n                .map((t) => cloneTensor(t));\n        case 'Snapshot':\n            const snapshot = getParamValue('x', node, tensorMap, context);\n            return [cloneTensor(snapshot)];\n        case 'Shape':\n            return [ops.tensor1d(getParamValue('x', node, tensorMap, context).shape, 'int32')];\n        case 'ShapeN':\n            return getParamValue('x', node, tensorMap, context)\n                .map((t) => ops.tensor1d(t.shape));\n        case 'Size':\n            return [ops.scalar(getParamValue('x', node, tensorMap, context).size, 'int32')];\n        case 'Rank':\n            return [ops.scalar(getParamValue('x', node, tensorMap, context).rank, 'int32')];\n        case 'NoOp':\n            return [ops.scalar(1)];\n        case 'Print':\n            const input = getParamValue('x', node, tensorMap, context);\n            const data = getParamValue('data', node, tensorMap, context);\n            const message = getParamValue('message', node, tensorMap, context);\n            const summarize = getParamValue('summarize', node, tensorMap, context);\n            console.warn('The graph has a tf.print() operation,' +\n                'usually used for debugging, which slows down performance.');\n            console.log(message);\n            for (let i = 0; i < data.length; i++) {\n                console.log(Array.prototype.slice.call(data[i].dataSync())\n                    .slice(0, summarize));\n            }\n            return [input];\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'graph';\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}