{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Conv2DBackpropInput } from '../kernel_names';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the derivative of the input of a 2D convolution.\n *\n * @param xShape The shape of the input: [batch, height, width, inDepth].\n * If length of 3, batch of 1 is assumed.\n * @param dy The derivative of the output, of rank 4 or rank 3 of shape\n *   `[batch, outHeight, outWidth, outDepth]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter, rank 4, of shape\n *     `[filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm used:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels].\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\n\nfunction conv2DBackpropInput_(xShape, dy, filter, strides, pad, dataFormat = 'NHWC', dimRoundingMode) {\n  util.assert(xShape.length === dy.rank, () => `Length of inShape ` + `(${xShape.length}) and rank of dy (${dy.rank}) must match`);\n  let xShape4D = xShape;\n  let dy4D = dy;\n  let reshapedTo4D = false;\n\n  if (dy.rank === 3) {\n    reshapedTo4D = true;\n    dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n    xShape4D = [1, xShape[0], xShape[1], xShape[2]];\n  }\n\n  util.assert(xShape4D.length === 4, () => `Error in conv2dDerInput: inShape must be length 4, but got length ` + `${xShape4D.length}.`);\n  util.assert(dy4D.rank === 4, () => `Error in conv2dDerInput: dy must be rank 4, but got ` + `rank ${dy4D.rank}`);\n  util.assert(filter.rank === 4, () => `Error in conv2dDerInput: filter must be rank 4, but got ` + `rank ${filter.rank}`);\n  const inDepth = dataFormat === 'NHWC' ? xShape4D[3] : xShape4D[1];\n  const outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];\n  util.assert(inDepth === filter.shape[2], () => `Error in conv2dDerInput: depth of input (${inDepth}) must ` + `match input depth for filter ${filter.shape[2]}.`);\n  util.assert(outDepth === filter.shape[3], () => `Error in conv2dDerInput: depth of output (${outDepth}) must ` + `match output depth for filter ${filter.shape[3]}.`);\n  conv_util.checkPadOnDimRoundingMode('conv2dDerInput', pad, dimRoundingMode);\n  const inputs = {\n    dy: dy4D,\n    filter\n  };\n  const attrs = {\n    strides,\n    pad,\n    dataFormat,\n    dimRoundingMode,\n    inputShape: xShape4D\n  }; // tslint:disable-next-line: no-unnecessary-type-assertion\n\n  const res = ENGINE.runKernel(Conv2DBackpropInput, inputs, attrs);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n\n  return res;\n}\n\nexport const conv2DBackpropInput = op({\n  conv2DBackpropInput_\n});","map":{"version":3,"names":["ENGINE","Conv2DBackpropInput","util","conv_util","op","reshape","conv2DBackpropInput_","xShape","dy","filter","strides","pad","dataFormat","dimRoundingMode","assert","length","rank","xShape4D","dy4D","reshapedTo4D","shape","inDepth","outDepth","checkPadOnDimRoundingMode","inputs","attrs","inputShape","res","runKernel","conv2DBackpropInput"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_backprop_input.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Conv2DBackpropInput } from '../kernel_names';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the derivative of the input of a 2D convolution.\n *\n * @param xShape The shape of the input: [batch, height, width, inDepth].\n * If length of 3, batch of 1 is assumed.\n * @param dy The derivative of the output, of rank 4 or rank 3 of shape\n *   `[batch, outHeight, outWidth, outDepth]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter, rank 4, of shape\n *     `[filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm used:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels].\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\nfunction conv2DBackpropInput_(xShape, dy, filter, strides, pad, dataFormat = 'NHWC', dimRoundingMode) {\n    util.assert(xShape.length === dy.rank, () => `Length of inShape ` +\n        `(${xShape.length}) and rank of dy (${dy.rank}) must match`);\n    let xShape4D = xShape;\n    let dy4D = dy;\n    let reshapedTo4D = false;\n    if (dy.rank === 3) {\n        reshapedTo4D = true;\n        dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n        xShape4D = [1, xShape[0], xShape[1], xShape[2]];\n    }\n    util.assert(xShape4D.length === 4, () => `Error in conv2dDerInput: inShape must be length 4, but got length ` +\n        `${xShape4D.length}.`);\n    util.assert(dy4D.rank === 4, () => `Error in conv2dDerInput: dy must be rank 4, but got ` +\n        `rank ${dy4D.rank}`);\n    util.assert(filter.rank === 4, () => `Error in conv2dDerInput: filter must be rank 4, but got ` +\n        `rank ${filter.rank}`);\n    const inDepth = dataFormat === 'NHWC' ? xShape4D[3] : xShape4D[1];\n    const outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];\n    util.assert(inDepth === filter.shape[2], () => `Error in conv2dDerInput: depth of input (${inDepth}) must ` +\n        `match input depth for filter ${filter.shape[2]}.`);\n    util.assert(outDepth === filter.shape[3], () => `Error in conv2dDerInput: depth of output (${outDepth}) must ` +\n        `match output depth for filter ${filter.shape[3]}.`);\n    conv_util.checkPadOnDimRoundingMode('conv2dDerInput', pad, dimRoundingMode);\n    const inputs = { dy: dy4D, filter };\n    const attrs = { strides, pad, dataFormat, dimRoundingMode, inputShape: xShape4D };\n    // tslint:disable-next-line: no-unnecessary-type-assertion\n    const res = ENGINE.runKernel(Conv2DBackpropInput, inputs, attrs);\n    if (reshapedTo4D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n    }\n    return res;\n}\nexport const conv2DBackpropInput = op({ conv2DBackpropInput_ });\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}