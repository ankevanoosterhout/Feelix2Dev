{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Max } from '@tensorflow/tfjs-core';\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxImpl } from './Max_impl';\nimport { transposeImpl } from './Transpose_impl';\nexport function max(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    reductionIndices,\n    keepDims\n  } = attrs;\n  const cpuBackend = backend;\n  let xShape = x.shape;\n  const xRank = xShape.length;\n  const origAxes = util.parseAxisParam(reductionIndices, xShape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let xVals = cpuBackend.data.get(x.dataId).values;\n\n  if (permutedAxes != null) {\n    const newShape = new Array(xRank);\n\n    for (let i = 0; i < newShape.length; i++) {\n      newShape[i] = xShape[permutedAxes[i]];\n    }\n\n    xVals = transposeImpl(xVals, xShape, x.dtype, permutedAxes, newShape);\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    xShape = newShape;\n  }\n\n  assertNotComplex(x, 'max');\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n  const [maxOutShape, reduceShape] = backend_util.computeOutAndReduceShapes(xShape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const result = maxImpl(xVals, reduceSize, maxOutShape, x.dtype);\n  const dataId = cpuBackend.write(result, maxOutShape, x.dtype);\n  let outShape = maxOutShape;\n\n  if (keepDims) {\n    // reshape\n    const newShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n    outShape = newShape;\n  }\n\n  return {\n    dataId,\n    shape: outShape,\n    dtype: x.dtype\n  };\n}\nexport const maxConfig = {\n  kernelName: Max,\n  backendName: 'cpu',\n  kernelFunc: max\n};","map":{"version":3,"names":["Max","backend_util","util","assertNotComplex","maxImpl","transposeImpl","max","args","inputs","backend","attrs","x","reductionIndices","keepDims","cpuBackend","xShape","shape","xRank","length","origAxes","parseAxisParam","axes","permutedAxes","getAxesPermutation","xVals","data","get","dataId","values","newShape","Array","i","dtype","getInnerMostAxes","assertAxesAreInnerMostDims","maxOutShape","reduceShape","computeOutAndReduceShapes","reduceSize","sizeFromShape","result","write","outShape","expandShapeToKeepDim","maxConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Max.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Max } from '@tensorflow/tfjs-core';\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxImpl } from './Max_impl';\nimport { transposeImpl } from './Transpose_impl';\nexport function max(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { reductionIndices, keepDims } = attrs;\n    const cpuBackend = backend;\n    let xShape = x.shape;\n    const xRank = xShape.length;\n    const origAxes = util.parseAxisParam(reductionIndices, xShape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    let xVals = cpuBackend.data.get(x.dataId).values;\n    if (permutedAxes != null) {\n        const newShape = new Array(xRank);\n        for (let i = 0; i < newShape.length; i++) {\n            newShape[i] = xShape[permutedAxes[i]];\n        }\n        xVals = transposeImpl(xVals, xShape, x.dtype, permutedAxes, newShape);\n        axes = backend_util.getInnerMostAxes(axes.length, xRank);\n        xShape = newShape;\n    }\n    assertNotComplex(x, 'max');\n    backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n    const [maxOutShape, reduceShape] = backend_util.computeOutAndReduceShapes(xShape, axes);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const result = maxImpl(xVals, reduceSize, maxOutShape, x.dtype);\n    const dataId = cpuBackend.write(result, maxOutShape, x.dtype);\n    let outShape = maxOutShape;\n    if (keepDims) {\n        // reshape\n        const newShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n        outShape = newShape;\n    }\n    return { dataId, shape: outShape, dtype: x.dtype };\n}\nexport const maxConfig = {\n    kernelName: Max,\n    backendName: 'cpu',\n    kernelFunc: max\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}