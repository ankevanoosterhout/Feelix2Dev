{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, CropAndResize, util } from '@tensorflow/tfjs-core';\nexport function cropAndResize(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    image,\n    boxes,\n    boxInd\n  } = inputs;\n  const {\n    cropSize,\n    method,\n    extrapolationValue\n  } = attrs;\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const numBoxes = boxes.shape[0];\n  const [cropHeight, cropWidth] = cropSize;\n  const output = buffer([numBoxes, cropHeight, cropWidth, numChannels], 'float32');\n  const boxVals = backend.data.get(boxes.dataId).values;\n  const boxIndVals = backend.data.get(boxInd.dataId).values;\n  const imageVals = backend.data.get(image.dataId).values;\n  const inStride = util.computeStrides(image.shape); // to calculate flat indexes into image\n\n  const outStride = util.computeStrides(output.shape); // to calculate flat indexes into output\n  // Reference implementation\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc\n\n  for (let b = 0; b < numBoxes; b++) {\n    const startInd = b * 4;\n    const y1 = boxVals[startInd];\n    const x1 = boxVals[startInd + 1];\n    const y2 = boxVals[startInd + 2];\n    const x2 = boxVals[startInd + 3];\n    const bInd = boxIndVals[b];\n\n    if (bInd >= batch) {\n      continue;\n    }\n\n    const heightScale = cropHeight > 1 ? (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) : 0;\n    const widthScale = cropWidth > 1 ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;\n\n    for (let y = 0; y < cropHeight; y++) {\n      const yInd = cropHeight > 1 ? y1 * (imageHeight - 1) + y * heightScale : 0.5 * (y1 + y2) * (imageHeight - 1);\n\n      if (yInd < 0 || yInd > imageHeight - 1) {\n        for (let x = 0; x < cropWidth; x++) {\n          for (let c = 0; c < numChannels; c++) {\n            const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = extrapolationValue;\n          }\n        }\n\n        continue;\n      }\n\n      if (method === 'bilinear') {\n        const topInd = Math.floor(yInd);\n        const bottomInd = Math.ceil(yInd);\n        const yLerp = yInd - topInd;\n\n        for (let x = 0; x < cropWidth; x++) {\n          const xInd = cropWidth > 1 ? x1 * (imageWidth - 1) + x * widthScale : 0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n\n            continue;\n          }\n\n          const leftInd = Math.floor(xInd);\n          const rightInd = Math.ceil(xInd);\n          const xLerp = xInd - leftInd;\n\n          for (let c = 0; c < numChannels; c++) {\n            let ind = c + leftInd * inStride[2] + topInd * inStride[1] + bInd * inStride[0];\n            const topLeft = imageVals[ind];\n            ind = c + rightInd * inStride[2] + topInd * inStride[1] + bInd * inStride[0];\n            const topRight = imageVals[ind];\n            ind = c + leftInd * inStride[2] + bottomInd * inStride[1] + bInd * inStride[0];\n            const bottomLeft = imageVals[ind];\n            ind = c + rightInd * inStride[2] + bottomInd * inStride[1] + bInd * inStride[0];\n            const bottomRight = imageVals[ind];\n            const top = topLeft + (topRight - topLeft) * xLerp;\n            const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;\n            ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = top + (bottom - top) * yLerp;\n          }\n        }\n      } else {\n        // method == \"nearest\"\n        for (let x = 0; x < cropWidth; ++x) {\n          const xInd = cropWidth > 1 ? x1 * (imageWidth - 1) + x * widthScale : 0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n\n            continue;\n          }\n\n          const closestX = Math.round(xInd);\n          const closestY = Math.round(yInd);\n\n          for (let c = 0; c < numChannels; c++) {\n            const inInd = c + closestX * inStride[2] + closestY * inStride[1] + bInd * inStride[0];\n            const outInd = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[outInd] = imageVals[inInd];\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(output.shape, output.dtype, output.values);\n}\nexport const cropAndResizeConfig = {\n  kernelName: CropAndResize,\n  backendName: 'cpu',\n  kernelFunc: cropAndResize\n};","map":{"version":3,"names":["buffer","CropAndResize","util","cropAndResize","args","inputs","backend","attrs","image","boxes","boxInd","cropSize","method","extrapolationValue","batch","imageHeight","imageWidth","numChannels","shape","numBoxes","cropHeight","cropWidth","output","boxVals","data","get","dataId","values","boxIndVals","imageVals","inStride","computeStrides","outStride","b","startInd","y1","x1","y2","x2","bInd","heightScale","widthScale","y","yInd","x","c","ind","topInd","Math","floor","bottomInd","ceil","yLerp","xInd","leftInd","rightInd","xLerp","topLeft","topRight","bottomLeft","bottomRight","top","bottom","closestX","round","closestY","inInd","outInd","makeTensorInfo","dtype","cropAndResizeConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/CropAndResize.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, CropAndResize, util } from '@tensorflow/tfjs-core';\nexport function cropAndResize(args) {\n    const { inputs, backend, attrs } = args;\n    const { image, boxes, boxInd } = inputs;\n    const { cropSize, method, extrapolationValue } = attrs;\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n    const numBoxes = boxes.shape[0];\n    const [cropHeight, cropWidth] = cropSize;\n    const output = buffer([numBoxes, cropHeight, cropWidth, numChannels], 'float32');\n    const boxVals = backend.data.get(boxes.dataId).values;\n    const boxIndVals = backend.data.get(boxInd.dataId).values;\n    const imageVals = backend.data.get(image.dataId).values;\n    const inStride = util.computeStrides(image.shape); // to calculate flat indexes into image\n    const outStride = util.computeStrides(output.shape); // to calculate flat indexes into output\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc\n    for (let b = 0; b < numBoxes; b++) {\n        const startInd = b * 4;\n        const y1 = boxVals[startInd];\n        const x1 = boxVals[startInd + 1];\n        const y2 = boxVals[startInd + 2];\n        const x2 = boxVals[startInd + 3];\n        const bInd = boxIndVals[b];\n        if (bInd >= batch) {\n            continue;\n        }\n        const heightScale = (cropHeight > 1) ? (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) : 0;\n        const widthScale = (cropWidth > 1) ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;\n        for (let y = 0; y < cropHeight; y++) {\n            const yInd = (cropHeight > 1) ?\n                y1 * (imageHeight - 1) + y * (heightScale) :\n                0.5 * (y1 + y2) * (imageHeight - 1);\n            if (yInd < 0 || yInd > imageHeight - 1) {\n                for (let x = 0; x < cropWidth; x++) {\n                    for (let c = 0; c < numChannels; c++) {\n                        const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                        output.values[ind] = extrapolationValue;\n                    }\n                }\n                continue;\n            }\n            if (method === 'bilinear') {\n                const topInd = Math.floor(yInd);\n                const bottomInd = Math.ceil(yInd);\n                const yLerp = yInd - topInd;\n                for (let x = 0; x < cropWidth; x++) {\n                    const xInd = (cropWidth > 1) ?\n                        x1 * (imageWidth - 1) + x * widthScale :\n                        0.5 * (x1 + x2) * (imageWidth - 1);\n                    if (xInd < 0 || xInd > imageWidth - 1) {\n                        for (let c = 0; c < numChannels; c++) {\n                            const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                            output.values[ind] = extrapolationValue;\n                        }\n                        continue;\n                    }\n                    const leftInd = Math.floor(xInd);\n                    const rightInd = Math.ceil(xInd);\n                    const xLerp = xInd - leftInd;\n                    for (let c = 0; c < numChannels; c++) {\n                        let ind = c + leftInd * inStride[2] + topInd * inStride[1] +\n                            bInd * inStride[0];\n                        const topLeft = imageVals[ind];\n                        ind = c + rightInd * inStride[2] + topInd * inStride[1] +\n                            bInd * inStride[0];\n                        const topRight = imageVals[ind];\n                        ind = c + leftInd * inStride[2] + bottomInd * inStride[1] +\n                            bInd * inStride[0];\n                        const bottomLeft = imageVals[ind];\n                        ind = c + rightInd * inStride[2] + bottomInd * inStride[1] +\n                            bInd * inStride[0];\n                        const bottomRight = imageVals[ind];\n                        const top = topLeft + (topRight - topLeft) * xLerp;\n                        const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;\n                        ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                        output.values[ind] = top + ((bottom - top) * yLerp);\n                    }\n                }\n            }\n            else { // method == \"nearest\"\n                for (let x = 0; x < cropWidth; ++x) {\n                    const xInd = (cropWidth > 1) ?\n                        x1 * (imageWidth - 1) + x * widthScale :\n                        0.5 * (x1 + x2) * (imageWidth - 1);\n                    if (xInd < 0 || xInd > imageWidth - 1) {\n                        for (let c = 0; c < numChannels; c++) {\n                            const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                            output.values[ind] = extrapolationValue;\n                        }\n                        continue;\n                    }\n                    const closestX = Math.round(xInd);\n                    const closestY = Math.round(yInd);\n                    for (let c = 0; c < numChannels; c++) {\n                        const inInd = c + closestX * inStride[2] + closestY * inStride[1] +\n                            bInd * inStride[0];\n                        const outInd = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                        output.values[outInd] = imageVals[inInd];\n                    }\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(output.shape, output.dtype, output.values);\n}\nexport const cropAndResizeConfig = {\n    kernelName: CropAndResize,\n    backendName: 'cpu',\n    kernelFunc: cropAndResize\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}