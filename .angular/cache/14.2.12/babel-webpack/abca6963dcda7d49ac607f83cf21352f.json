{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext, setWebGLContext } from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport * as webgl_util from './webgl_util';\nexport class GPGPUContext {\n  constructor(gl) {\n    this.outputTexture = null;\n    this.program = null;\n    this.disposed = false;\n    this.vertexAttrsAreBound = false;\n    this.itemsToPoll = [];\n    const glVersion = env().getNumber('WEBGL_VERSION');\n\n    if (gl != null) {\n      this.gl = gl;\n      setWebGLContext(glVersion, gl);\n    } else {\n      this.gl = getWebGLContext(glVersion);\n    } // WebGL 2.0 enables texture floats without an extension.\n\n\n    let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    this.parallelCompilationExtension = this.gl.getExtension('KHR_parallel_shader_compile');\n\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n      const TEXTURE_FLOAT = 'OES_texture_float';\n      const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n      this.textureFloatExtension = webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n\n      if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n        this.textureHalfFloatExtension = webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error('GL context does not support half float textures, yet the ' + 'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n\n      this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension = webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error('GL context does not support color renderable half floats, yet ' + 'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n    } else {\n      COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n        this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      } else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension = this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      } else {\n        throw new Error('GL context does not support color renderable floats');\n      }\n    }\n\n    this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n    this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n    this.framebuffer = webgl_util.createFramebuffer(this.gl);\n    this.textureConfig = tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n  }\n\n  get debug() {\n    return env().getBool('DEBUG');\n  }\n\n  dispose() {\n    if (this.disposed) {\n      return;\n    }\n\n    if (this.program != null) {\n      console.warn('Disposing a GPGPUContext that still has a bound WebGLProgram.' + ' This is probably a resource leak, delete the program with ' + 'GPGPUContext.deleteProgram before disposing.');\n    }\n\n    if (this.outputTexture != null) {\n      console.warn('Disposing a GPGPUContext that still has a bound output matrix ' + 'texture.  This is probably a resource leak, delete the output ' + 'matrix texture with GPGPUContext.deleteMatrixTexture before ' + 'disposing.');\n    }\n\n    const gl = this.gl;\n    webgl_util.callAndCheck(gl, () => gl.finish());\n    webgl_util.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));\n    this.disposed = true;\n  }\n\n  createFloat32MatrixTexture(rows, columns) {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat32MatrixTexture(this.gl, rows, columns, this.textureConfig);\n  }\n\n  createFloat16MatrixTexture(rows, columns) {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16MatrixTexture(this.gl, rows, columns, this.textureConfig);\n  }\n\n  createUnsignedBytesMatrixTexture(rows, columns) {\n    this.throwIfDisposed();\n    return gpgpu_util.createUnsignedBytesMatrixTexture(this.gl, rows, columns, this.textureConfig);\n  }\n\n  uploadPixelDataToTexture(texture, pixels) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n  }\n\n  uploadDenseMatrixToTexture(texture, width, height, data) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadDenseMatrixToTexture(this.gl, texture, width, height, data, this.textureConfig);\n  }\n\n  createFloat16PackedMatrixTexture(rows, columns) {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16PackedMatrixTexture(this.gl, rows, columns, this.textureConfig);\n  }\n\n  createPackedMatrixTexture(rows, columns) {\n    this.throwIfDisposed();\n    return gpgpu_util.createPackedMatrixTexture(this.gl, rows, columns, this.textureConfig);\n  }\n\n  deleteMatrixTexture(texture) {\n    this.throwIfDisposed();\n\n    if (this.outputTexture === texture) {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n      this.outputTexture = null;\n    }\n\n    webgl_util.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));\n  }\n\n  downloadByteEncodedFloatMatrixFromOutputTexture(texture, rows, columns) {\n    return this.downloadMatrixDriver(texture, () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(this.gl, rows, columns, this.textureConfig));\n  }\n\n  downloadPackedMatrixFromBuffer(buffer, batch, rows, columns, physicalRows, physicalCols) {\n    return gpgpu_util.downloadPackedMatrixFromBuffer(this.gl, buffer, batch, rows, columns, physicalRows, physicalCols, this.textureConfig);\n  }\n\n  downloadFloat32MatrixFromBuffer(buffer, size) {\n    return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n  }\n\n  createBufferFromTexture(texture, rows, columns) {\n    this.bindTextureToFrameBuffer(texture);\n    const result = gpgpu_util.createBufferFromOutputTexture(this.gl, rows, columns, this.textureConfig);\n    this.unbindTextureToFrameBuffer();\n    return result;\n  }\n\n  createAndWaitForFence() {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  createFence(gl) {\n    let query;\n    let isFencePassed;\n\n    if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n      const gl2 = gl;\n      const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n      gl.flush();\n\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(sync, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n\n      query = sync;\n    } else if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      query = this.beginQuery();\n      this.endQuery();\n\n      isFencePassed = () => this.isQueryAvailable(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    } else {\n      // If we have no way to fence, return true immediately. This will fire in\n      // WebGL 1.0 when there is no disjoint query timer. In this case, because\n      // the fence passes immediately, we'll immediately ask for a download of\n      // the texture, which will cause the UI thread to hang.\n      isFencePassed = () => true;\n    }\n\n    return {\n      query,\n      isFencePassed\n    };\n  }\n\n  downloadMatrixFromPackedTexture(texture, physicalRows, physicalCols) {\n    return this.downloadMatrixDriver(texture, () => gpgpu_util.downloadMatrixFromPackedOutputTexture(this.gl, physicalRows, physicalCols));\n  }\n\n  createProgram(fragmentShader) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n\n    if (this.vertexShader == null) {\n      this.vertexShader = gpgpu_util.createVertexShader(gl);\n    }\n\n    const program = webgl_util.createProgram(gl);\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, this.vertexShader));\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));\n    webgl_util.linkProgram(gl, program);\n\n    if (this.debug) {\n      webgl_util.validateProgram(gl, program);\n    }\n\n    if (!this.vertexAttrsAreBound) {\n      this.setProgram(program);\n      this.vertexAttrsAreBound = gpgpu_util.bindVertexProgramAttributeStreams(gl, this.program, this.vertexBuffer);\n    }\n\n    return program;\n  }\n\n  deleteProgram(program) {\n    this.throwIfDisposed();\n\n    if (program === this.program) {\n      this.program = null;\n    }\n\n    if (program != null) {\n      webgl_util.callAndCheck(this.gl, () => this.gl.deleteProgram(program));\n    }\n  }\n\n  setProgram(program) {\n    this.throwIfDisposed();\n    this.program = program;\n\n    if (this.program != null && this.debug) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n\n    webgl_util.callAndCheck(this.gl, () => this.gl.useProgram(program));\n  }\n\n  getUniformLocation(program, uniformName, shouldThrow = true) {\n    this.throwIfDisposed();\n\n    if (shouldThrow) {\n      return webgl_util.getProgramUniformLocationOrThrow(this.gl, program, uniformName);\n    } else {\n      return webgl_util.getProgramUniformLocation(this.gl, program, uniformName);\n    }\n  }\n\n  getAttributeLocation(program, attribute) {\n    this.throwIfDisposed();\n    return webgl_util.callAndCheck(this.gl, () => this.gl.getAttribLocation(program, attribute));\n  }\n\n  getUniformLocationNoThrow(program, uniformName) {\n    this.throwIfDisposed();\n    return this.gl.getUniformLocation(program, uniformName);\n  }\n\n  setInputMatrixTexture(inputMatrixTexture, uniformLocation, textureUnit) {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    webgl_util.bindTextureToProgramUniformSampler(this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n  }\n\n  setOutputMatrixTexture(outputMatrixTexture, rows, columns) {\n    this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n  }\n\n  setOutputPackedMatrixTexture(outputPackedMatrixTexture, rows, columns) {\n    this.throwIfDisposed();\n    const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n  }\n\n  setOutputMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {\n    this.setOutputMatrixWriteRegionDriver(startColumn, startRow, numColumns, numRows);\n  }\n\n  setOutputPackedMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {\n    throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n  }\n\n  debugValidate() {\n    if (this.program != null) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n\n    webgl_util.validateFramebuffer(this.gl);\n  }\n\n  executeProgram() {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    const gl = this.gl;\n\n    if (this.debug) {\n      this.debugValidate();\n    }\n\n    webgl_util.callAndCheck(gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n  }\n\n  blockUntilAllProgramsCompleted() {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(this.gl, () => this.gl.finish());\n  }\n\n  getQueryTimerExtension() {\n    if (this.disjointQueryTimerExtension == null) {\n      this.disjointQueryTimerExtension = webgl_util.getExtensionOrThrow(this.gl, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ? 'EXT_disjoint_timer_query_webgl2' : 'EXT_disjoint_timer_query');\n    }\n\n    return this.disjointQueryTimerExtension;\n  }\n\n  getQueryTimerExtensionWebGL2() {\n    return this.getQueryTimerExtension();\n  }\n\n  getQueryTimerExtensionWebGL1() {\n    return this.getQueryTimerExtension();\n  }\n\n  beginQuery() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      const query = gl2.createQuery();\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    }\n\n    const ext = this.getQueryTimerExtensionWebGL1();\n    const query = ext.createQueryEXT();\n    ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n    return query;\n  }\n\n  endQuery() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    }\n\n    const ext = this.getQueryTimerExtensionWebGL1();\n    ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n  }\n\n  waitForQueryAndGetTime(query) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield util.repeatedTry(() => _this.disposed || // while testing contexts are created / disposed\n      // in rapid succession, so without this check we\n      // may poll for the query timer indefinitely\n      _this.isQueryAvailable(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n      return _this.getQueryTime(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    })();\n  }\n\n  getQueryTime(query, queryTimerVersion) {\n    if (queryTimerVersion === 0) {\n      return null;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl;\n      const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT); // Return milliseconds.\n\n      return timeElapsedNanos / 1000000;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n      const timeElapsedNanos = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT); // Return milliseconds.\n\n      return timeElapsedNanos / 1000000;\n    }\n  }\n\n  isQueryAvailable(query, queryTimerVersion) {\n    if (queryTimerVersion === 0) {\n      return true;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      const available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n      const available = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    }\n  }\n\n  pollFence(fenceContext) {\n    return new Promise(resolve => {\n      this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  pollItems() {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n\n    for (let i = 0; i <= index; ++i) {\n      const {\n        resolveFn\n      } = this.itemsToPoll[i];\n      resolveFn();\n    }\n\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  addItemToPoll(isDoneFn, resolveFn) {\n    this.itemsToPoll.push({\n      isDoneFn,\n      resolveFn\n    });\n\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    } // Start a new loop that polls.\n\n\n    let scheduleFn = undefined;\n\n    if ('setTimeoutCustom' in env().platform) {\n      scheduleFn = env().platform.setTimeoutCustom.bind(env().platform);\n    }\n\n    util.repeatedTry(() => {\n      this.pollItems(); // End the loop if no more items to poll.\n\n      return this.itemsToPoll.length === 0;\n    }, () => 0, null, scheduleFn);\n  }\n\n  bindTextureToFrameBuffer(texture) {\n    this.throwIfDisposed();\n    webgl_util.bindColorTextureToFramebuffer(this.gl, texture, this.framebuffer);\n\n    if (this.debug) {\n      webgl_util.validateFramebuffer(this.gl);\n    }\n  }\n\n  unbindTextureToFrameBuffer() {\n    if (this.outputTexture != null) {\n      webgl_util.bindColorTextureToFramebuffer(this.gl, this.outputTexture, this.framebuffer);\n\n      if (this.debug) {\n        webgl_util.validateFramebuffer(this.gl);\n      }\n    } else {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n    }\n  }\n\n  downloadMatrixDriver(texture, downloadAndDecode) {\n    this.bindTextureToFrameBuffer(texture);\n    const result = downloadAndDecode();\n    this.unbindTextureToFrameBuffer();\n    return result;\n  }\n\n  setOutputMatrixTextureDriver(outputMatrixTextureMaybePacked, width, height) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    webgl_util.bindColorTextureToFramebuffer(gl, outputMatrixTextureMaybePacked, this.framebuffer);\n\n    if (this.debug) {\n      webgl_util.validateFramebuffer(gl);\n    }\n\n    this.outputTexture = outputMatrixTextureMaybePacked;\n    webgl_util.callAndCheck(gl, () => gl.viewport(0, 0, width, height));\n    webgl_util.callAndCheck(gl, () => gl.scissor(0, 0, width, height));\n  }\n\n  setOutputMatrixWriteRegionDriver(x, y, width, height) {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(this.gl, () => this.gl.scissor(x, y, width, height));\n  }\n\n  throwIfDisposed() {\n    if (this.disposed) {\n      throw new Error('Attempted to use disposed GPGPUContext.');\n    }\n  }\n\n  throwIfNoProgram() {\n    if (this.program == null) {\n      throw new Error('No GPU program is currently set.');\n    }\n  }\n\n}\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\n\nexport function linearSearchLastTrue(arr) {\n  let i = 0;\n\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n\n    if (!isDone) {\n      break;\n    }\n  }\n\n  return i - 1;\n}","map":{"version":3,"names":["env","util","getWebGLContext","setWebGLContext","gpgpu_util","tex_util","webgl_util","GPGPUContext","constructor","gl","outputTexture","program","disposed","vertexAttrsAreBound","itemsToPoll","glVersion","getNumber","COLOR_BUFFER_FLOAT","COLOR_BUFFER_HALF_FLOAT","parallelCompilationExtension","getExtension","TEXTURE_FLOAT","TEXTURE_HALF_FLOAT","textureFloatExtension","getExtensionOrThrow","hasExtension","textureHalfFloatExtension","get","Error","colorBufferFloatExtension","colorBufferHalfFloatExtension","vertexBuffer","createVertexBuffer","indexBuffer","createIndexBuffer","framebuffer","createFramebuffer","textureConfig","getTextureConfig","debug","getBool","dispose","console","warn","callAndCheck","finish","bindFramebuffer","FRAMEBUFFER","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","deleteBuffer","createFloat32MatrixTexture","rows","columns","throwIfDisposed","createFloat16MatrixTexture","createUnsignedBytesMatrixTexture","uploadPixelDataToTexture","texture","pixels","uploadDenseMatrixToTexture","width","height","data","createFloat16PackedMatrixTexture","createPackedMatrixTexture","deleteMatrixTexture","unbindColorTextureFromFramebuffer","deleteTexture","downloadByteEncodedFloatMatrixFromOutputTexture","downloadMatrixDriver","downloadPackedMatrixFromBuffer","buffer","batch","physicalRows","physicalCols","downloadFloat32MatrixFromBuffer","size","createBufferFromTexture","bindTextureToFrameBuffer","result","createBufferFromOutputTexture","unbindTextureToFrameBuffer","createAndWaitForFence","fenceContext","createFence","pollFence","query","isFencePassed","gl2","sync","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","status","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","beginQuery","endQuery","isQueryAvailable","downloadMatrixFromPackedTexture","downloadMatrixFromPackedOutputTexture","createProgram","fragmentShader","vertexShader","createVertexShader","attachShader","linkProgram","validateProgram","setProgram","bindVertexProgramAttributeStreams","deleteProgram","useProgram","getUniformLocation","uniformName","shouldThrow","getProgramUniformLocationOrThrow","getProgramUniformLocation","getAttributeLocation","attribute","getAttribLocation","getUniformLocationNoThrow","setInputMatrixTexture","inputMatrixTexture","uniformLocation","textureUnit","throwIfNoProgram","bindTextureToProgramUniformSampler","setOutputMatrixTexture","outputMatrixTexture","setOutputMatrixTextureDriver","setOutputPackedMatrixTexture","outputPackedMatrixTexture","getPackedMatrixTextureShapeWidthHeight","setOutputMatrixWriteRegion","startRow","numRows","startColumn","numColumns","setOutputMatrixWriteRegionDriver","setOutputPackedMatrixWriteRegion","debugValidate","validateFramebuffer","executeProgram","drawElements","TRIANGLES","UNSIGNED_SHORT","blockUntilAllProgramsCompleted","getQueryTimerExtension","disjointQueryTimerExtension","getQueryTimerExtensionWebGL2","getQueryTimerExtensionWebGL1","ext","createQuery","TIME_ELAPSED_EXT","createQueryEXT","beginQueryEXT","endQueryEXT","waitForQueryAndGetTime","repeatedTry","getQueryTime","queryTimerVersion","timeElapsedNanos","getQueryParameter","QUERY_RESULT","getQueryObjectEXT","QUERY_RESULT_EXT","available","QUERY_RESULT_AVAILABLE","disjoint","getParameter","GPU_DISJOINT_EXT","QUERY_RESULT_AVAILABLE_EXT","Promise","resolve","addItemToPoll","pollItems","index","linearSearchLastTrue","map","x","isDoneFn","i","resolveFn","slice","push","length","scheduleFn","undefined","platform","setTimeoutCustom","bind","bindColorTextureToFramebuffer","downloadAndDecode","outputMatrixTextureMaybePacked","viewport","scissor","y","arr","isDone"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_context.js"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext, setWebGLContext } from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport * as webgl_util from './webgl_util';\nexport class GPGPUContext {\n    constructor(gl) {\n        this.outputTexture = null;\n        this.program = null;\n        this.disposed = false;\n        this.vertexAttrsAreBound = false;\n        this.itemsToPoll = [];\n        const glVersion = env().getNumber('WEBGL_VERSION');\n        if (gl != null) {\n            this.gl = gl;\n            setWebGLContext(glVersion, gl);\n        }\n        else {\n            this.gl = getWebGLContext(glVersion);\n        }\n        // WebGL 2.0 enables texture floats without an extension.\n        let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n        const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n        this.parallelCompilationExtension =\n            this.gl.getExtension('KHR_parallel_shader_compile');\n        if (env().getNumber('WEBGL_VERSION') === 1) {\n            const TEXTURE_FLOAT = 'OES_texture_float';\n            const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n            this.textureFloatExtension =\n                webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n            if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n                this.textureHalfFloatExtension =\n                    webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n            }\n            else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n                throw new Error('GL context does not support half float textures, yet the ' +\n                    'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n            }\n            this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n            if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n                this.colorBufferHalfFloatExtension =\n                    webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n            }\n            else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n                throw new Error('GL context does not support color renderable half floats, yet ' +\n                    'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n            }\n        }\n        else {\n            COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n            if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n                this.colorBufferFloatExtension =\n                    this.gl.getExtension(COLOR_BUFFER_FLOAT);\n            }\n            else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n                this.colorBufferHalfFloatExtension =\n                    this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n            }\n            else {\n                throw new Error('GL context does not support color renderable floats');\n            }\n        }\n        this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n        this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n        this.framebuffer = webgl_util.createFramebuffer(this.gl);\n        this.textureConfig =\n            tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n    }\n    get debug() {\n        return env().getBool('DEBUG');\n    }\n    dispose() {\n        if (this.disposed) {\n            return;\n        }\n        if (this.program != null) {\n            console.warn('Disposing a GPGPUContext that still has a bound WebGLProgram.' +\n                ' This is probably a resource leak, delete the program with ' +\n                'GPGPUContext.deleteProgram before disposing.');\n        }\n        if (this.outputTexture != null) {\n            console.warn('Disposing a GPGPUContext that still has a bound output matrix ' +\n                'texture.  This is probably a resource leak, delete the output ' +\n                'matrix texture with GPGPUContext.deleteMatrixTexture before ' +\n                'disposing.');\n        }\n        const gl = this.gl;\n        webgl_util.callAndCheck(gl, () => gl.finish());\n        webgl_util.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n        webgl_util.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));\n        webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n        webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n        webgl_util.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));\n        this.disposed = true;\n    }\n    createFloat32MatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createFloat32MatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    createFloat16MatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createFloat16MatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    createUnsignedBytesMatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createUnsignedBytesMatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    uploadPixelDataToTexture(texture, pixels) {\n        this.throwIfDisposed();\n        gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n    }\n    uploadDenseMatrixToTexture(texture, width, height, data) {\n        this.throwIfDisposed();\n        gpgpu_util.uploadDenseMatrixToTexture(this.gl, texture, width, height, data, this.textureConfig);\n    }\n    createFloat16PackedMatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createFloat16PackedMatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    createPackedMatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createPackedMatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    deleteMatrixTexture(texture) {\n        this.throwIfDisposed();\n        if (this.outputTexture === texture) {\n            webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n            this.outputTexture = null;\n        }\n        webgl_util.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));\n    }\n    downloadByteEncodedFloatMatrixFromOutputTexture(texture, rows, columns) {\n        return this.downloadMatrixDriver(texture, () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(this.gl, rows, columns, this.textureConfig));\n    }\n    downloadPackedMatrixFromBuffer(buffer, batch, rows, columns, physicalRows, physicalCols) {\n        return gpgpu_util.downloadPackedMatrixFromBuffer(this.gl, buffer, batch, rows, columns, physicalRows, physicalCols, this.textureConfig);\n    }\n    downloadFloat32MatrixFromBuffer(buffer, size) {\n        return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n    }\n    createBufferFromTexture(texture, rows, columns) {\n        this.bindTextureToFrameBuffer(texture);\n        const result = gpgpu_util.createBufferFromOutputTexture(this.gl, rows, columns, this.textureConfig);\n        this.unbindTextureToFrameBuffer();\n        return result;\n    }\n    createAndWaitForFence() {\n        const fenceContext = this.createFence(this.gl);\n        return this.pollFence(fenceContext);\n    }\n    createFence(gl) {\n        let query;\n        let isFencePassed;\n        if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n            const gl2 = gl;\n            const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n            gl.flush();\n            isFencePassed = () => {\n                const status = gl2.clientWaitSync(sync, 0, 0);\n                return status === gl2.ALREADY_SIGNALED ||\n                    status === gl2.CONDITION_SATISFIED;\n            };\n            query = sync;\n        }\n        else if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n            query = this.beginQuery();\n            this.endQuery();\n            isFencePassed = () => this.isQueryAvailable(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n        }\n        else {\n            // If we have no way to fence, return true immediately. This will fire in\n            // WebGL 1.0 when there is no disjoint query timer. In this case, because\n            // the fence passes immediately, we'll immediately ask for a download of\n            // the texture, which will cause the UI thread to hang.\n            isFencePassed = () => true;\n        }\n        return { query, isFencePassed };\n    }\n    downloadMatrixFromPackedTexture(texture, physicalRows, physicalCols) {\n        return this.downloadMatrixDriver(texture, () => gpgpu_util.downloadMatrixFromPackedOutputTexture(this.gl, physicalRows, physicalCols));\n    }\n    createProgram(fragmentShader) {\n        this.throwIfDisposed();\n        const gl = this.gl;\n        if (this.vertexShader == null) {\n            this.vertexShader = gpgpu_util.createVertexShader(gl);\n        }\n        const program = webgl_util.createProgram(gl);\n        webgl_util.callAndCheck(gl, () => gl.attachShader(program, this.vertexShader));\n        webgl_util.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));\n        webgl_util.linkProgram(gl, program);\n        if (this.debug) {\n            webgl_util.validateProgram(gl, program);\n        }\n        if (!this.vertexAttrsAreBound) {\n            this.setProgram(program);\n            this.vertexAttrsAreBound = gpgpu_util.bindVertexProgramAttributeStreams(gl, this.program, this.vertexBuffer);\n        }\n        return program;\n    }\n    deleteProgram(program) {\n        this.throwIfDisposed();\n        if (program === this.program) {\n            this.program = null;\n        }\n        if (program != null) {\n            webgl_util.callAndCheck(this.gl, () => this.gl.deleteProgram(program));\n        }\n    }\n    setProgram(program) {\n        this.throwIfDisposed();\n        this.program = program;\n        if ((this.program != null) && this.debug) {\n            webgl_util.validateProgram(this.gl, this.program);\n        }\n        webgl_util.callAndCheck(this.gl, () => this.gl.useProgram(program));\n    }\n    getUniformLocation(program, uniformName, shouldThrow = true) {\n        this.throwIfDisposed();\n        if (shouldThrow) {\n            return webgl_util.getProgramUniformLocationOrThrow(this.gl, program, uniformName);\n        }\n        else {\n            return webgl_util.getProgramUniformLocation(this.gl, program, uniformName);\n        }\n    }\n    getAttributeLocation(program, attribute) {\n        this.throwIfDisposed();\n        return webgl_util.callAndCheck(this.gl, () => this.gl.getAttribLocation(program, attribute));\n    }\n    getUniformLocationNoThrow(program, uniformName) {\n        this.throwIfDisposed();\n        return this.gl.getUniformLocation(program, uniformName);\n    }\n    setInputMatrixTexture(inputMatrixTexture, uniformLocation, textureUnit) {\n        this.throwIfDisposed();\n        this.throwIfNoProgram();\n        webgl_util.bindTextureToProgramUniformSampler(this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n    }\n    setOutputMatrixTexture(outputMatrixTexture, rows, columns) {\n        this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n    }\n    setOutputPackedMatrixTexture(outputPackedMatrixTexture, rows, columns) {\n        this.throwIfDisposed();\n        const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n        this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n    }\n    setOutputMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {\n        this.setOutputMatrixWriteRegionDriver(startColumn, startRow, numColumns, numRows);\n    }\n    setOutputPackedMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {\n        throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n    }\n    debugValidate() {\n        if (this.program != null) {\n            webgl_util.validateProgram(this.gl, this.program);\n        }\n        webgl_util.validateFramebuffer(this.gl);\n    }\n    executeProgram() {\n        this.throwIfDisposed();\n        this.throwIfNoProgram();\n        const gl = this.gl;\n        if (this.debug) {\n            this.debugValidate();\n        }\n        webgl_util.callAndCheck(gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n    }\n    blockUntilAllProgramsCompleted() {\n        this.throwIfDisposed();\n        webgl_util.callAndCheck(this.gl, () => this.gl.finish());\n    }\n    getQueryTimerExtension() {\n        if (this.disjointQueryTimerExtension == null) {\n            this.disjointQueryTimerExtension =\n                webgl_util.getExtensionOrThrow(this.gl, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ?\n                    'EXT_disjoint_timer_query_webgl2' :\n                    'EXT_disjoint_timer_query');\n        }\n        return this.disjointQueryTimerExtension;\n    }\n    getQueryTimerExtensionWebGL2() {\n        return this.getQueryTimerExtension();\n    }\n    getQueryTimerExtensionWebGL1() {\n        return this.getQueryTimerExtension();\n    }\n    beginQuery() {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n            const gl2 = this.gl;\n            const ext = this.getQueryTimerExtensionWebGL2();\n            const query = gl2.createQuery();\n            gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n            return query;\n        }\n        const ext = this.getQueryTimerExtensionWebGL1();\n        const query = ext.createQueryEXT();\n        ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n        return query;\n    }\n    endQuery() {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n            const gl2 = this.gl;\n            const ext = this.getQueryTimerExtensionWebGL2();\n            gl2.endQuery(ext.TIME_ELAPSED_EXT);\n            return;\n        }\n        const ext = this.getQueryTimerExtensionWebGL1();\n        ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n    }\n    async waitForQueryAndGetTime(query) {\n        await util.repeatedTry(() => this.disposed || // while testing contexts are created / disposed\n            // in rapid succession, so without this check we\n            // may poll for the query timer indefinitely\n            this.isQueryAvailable(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n        return this.getQueryTime(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    }\n    getQueryTime(query, queryTimerVersion) {\n        if (queryTimerVersion === 0) {\n            return null;\n        }\n        if (queryTimerVersion === 2) {\n            const gl2 = this.gl;\n            const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n            // Return milliseconds.\n            return timeElapsedNanos / 1000000;\n        }\n        else {\n            const ext = this.getQueryTimerExtensionWebGL1();\n            const timeElapsedNanos = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n            // Return milliseconds.\n            return timeElapsedNanos / 1000000;\n        }\n    }\n    isQueryAvailable(query, queryTimerVersion) {\n        if (queryTimerVersion === 0) {\n            return true;\n        }\n        if (queryTimerVersion === 2) {\n            const gl2 = this.gl;\n            const ext = this.getQueryTimerExtensionWebGL2();\n            const available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n            if (this.disjoint == null) {\n                this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n            }\n            return available && !this.disjoint;\n        }\n        else {\n            const ext = this.getQueryTimerExtensionWebGL1();\n            const available = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n            if (this.disjoint == null) {\n                this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n            }\n            return available && !this.disjoint;\n        }\n    }\n    pollFence(fenceContext) {\n        return new Promise(resolve => {\n            this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n        });\n    }\n    pollItems() {\n        // Find the last query that has finished.\n        const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n        for (let i = 0; i <= index; ++i) {\n            const { resolveFn } = this.itemsToPoll[i];\n            resolveFn();\n        }\n        this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n    }\n    addItemToPoll(isDoneFn, resolveFn) {\n        this.itemsToPoll.push({ isDoneFn, resolveFn });\n        if (this.itemsToPoll.length > 1) {\n            // We already have a running loop that polls.\n            return;\n        }\n        // Start a new loop that polls.\n        let scheduleFn = undefined;\n        if ('setTimeoutCustom' in env().platform) {\n            scheduleFn = env().platform.setTimeoutCustom.bind(env().platform);\n        }\n        util.repeatedTry(() => {\n            this.pollItems();\n            // End the loop if no more items to poll.\n            return this.itemsToPoll.length === 0;\n        }, () => 0, null, scheduleFn);\n    }\n    bindTextureToFrameBuffer(texture) {\n        this.throwIfDisposed();\n        webgl_util.bindColorTextureToFramebuffer(this.gl, texture, this.framebuffer);\n        if (this.debug) {\n            webgl_util.validateFramebuffer(this.gl);\n        }\n    }\n    unbindTextureToFrameBuffer() {\n        if (this.outputTexture != null) {\n            webgl_util.bindColorTextureToFramebuffer(this.gl, this.outputTexture, this.framebuffer);\n            if (this.debug) {\n                webgl_util.validateFramebuffer(this.gl);\n            }\n        }\n        else {\n            webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n        }\n    }\n    downloadMatrixDriver(texture, downloadAndDecode) {\n        this.bindTextureToFrameBuffer(texture);\n        const result = downloadAndDecode();\n        this.unbindTextureToFrameBuffer();\n        return result;\n    }\n    setOutputMatrixTextureDriver(outputMatrixTextureMaybePacked, width, height) {\n        this.throwIfDisposed();\n        const gl = this.gl;\n        webgl_util.bindColorTextureToFramebuffer(gl, outputMatrixTextureMaybePacked, this.framebuffer);\n        if (this.debug) {\n            webgl_util.validateFramebuffer(gl);\n        }\n        this.outputTexture = outputMatrixTextureMaybePacked;\n        webgl_util.callAndCheck(gl, () => gl.viewport(0, 0, width, height));\n        webgl_util.callAndCheck(gl, () => gl.scissor(0, 0, width, height));\n    }\n    setOutputMatrixWriteRegionDriver(x, y, width, height) {\n        this.throwIfDisposed();\n        webgl_util.callAndCheck(this.gl, () => this.gl.scissor(x, y, width, height));\n    }\n    throwIfDisposed() {\n        if (this.disposed) {\n            throw new Error('Attempted to use disposed GPGPUContext.');\n        }\n    }\n    throwIfNoProgram() {\n        if (this.program == null) {\n            throw new Error('No GPU program is currently set.');\n        }\n    }\n}\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\nexport function linearSearchLastTrue(arr) {\n    let i = 0;\n    for (; i < arr.length; ++i) {\n        const isDone = arr[i]();\n        if (!isDone) {\n            break;\n        }\n    }\n    return i - 1;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}