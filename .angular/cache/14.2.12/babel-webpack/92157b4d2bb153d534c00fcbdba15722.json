{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import webgl flags.\nimport './flags_webgl';\nimport { backend_util, buffer, DataStorage, engine, env, kernel_impls, KernelBackend, nextFrame, scalar, tidy, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext } from './canvas_util';\nimport { DecodeMatrixProgram } from './decode_matrix_gpu';\nimport { DecodeMatrixPackedProgram } from './decode_matrix_packed_gpu';\nimport { EncodeFloatProgram } from './encode_float_gpu';\nimport { EncodeFloatPackedProgram } from './encode_float_packed_gpu';\nimport { EncodeMatrixProgram } from './encode_matrix_gpu';\nimport { EncodeMatrixPackedProgram } from './encode_matrix_packed_gpu';\nimport { GPGPUContext } from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport { getUniformLocations } from './gpgpu_math';\nimport { simpleAbsImplCPU } from './kernel_utils/shared';\nimport { PackProgram } from './pack_gpu';\nimport { ReshapePackedProgram } from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport { TextureUsage } from './tex_util';\nimport { TextureManager } from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport { UnaryOpProgram } from './unaryop_gpu';\nimport { UnaryOpPackedProgram } from './unaryop_packed_gpu';\nimport { UnpackProgram } from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\nconst whereImpl = kernel_impls.whereImpl;\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\nconst binaryCaches = {};\nexport function getBinaryCache(webGLVersion) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n} // Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\n\nconst CPU_HANDOFF_SIZE_THRESHOLD = env().getNumber('CPU_HANDOFF_SIZE_THRESHOLD'); // Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\n\nconst BEFORE_PAGING_CONSTANT = 600;\n\nfunction numMBBeforeWarning() {\n  if (env().global.screen == null) {\n    return 1024; // 1 GB.\n  }\n\n  return env().global.screen.height * env().global.screen.width * window.devicePixelRatio * BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\n\nexport class MathBackendWebGL extends KernelBackend {\n  constructor(gpuResource) {\n    super(); // Maps data ids that have a pending read operation, to list of subscribers.\n\n    this.pendingRead = new WeakMap(); // List of data ids that are scheduled for disposal, but are waiting on a\n    // pending read operation.\n\n    this.pendingDisposal = new WeakSet(); // Used to count the number of 'shallow' sliced tensors that point to the\n    // same data id.\n\n    this.dataRefCount = new WeakMap();\n    this.numBytesInGPU = 0; // Accumulated time spent (including blocking) in uploading data to webgl.\n\n    this.uploadWaitMs = 0; // Accumulated time spent (including blocking in downloading data from webgl.\n\n    this.downloadWaitMs = 0; // record the last manual GL Flush time.\n\n    this.lastGlFlushTime = 0;\n    this.warnedAboutMemory = false;\n    this.pendingDeletes = 0;\n    this.disposed = false;\n\n    if (!env().getBool('HAS_WEBGL')) {\n      throw new Error('WebGL is not supported on this device');\n    }\n\n    let newGPGPU;\n\n    if (gpuResource != null) {\n      if (gpuResource instanceof GPGPUContext) {\n        newGPGPU = gpuResource;\n      } else {\n        const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'), gpuResource);\n        newGPGPU = new GPGPUContext(gl);\n      }\n\n      this.binaryCache = {};\n      this.gpgpuCreatedLocally = false;\n    } else {\n      const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n      newGPGPU = new GPGPUContext(gl);\n      this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n      this.gpgpuCreatedLocally = true;\n    }\n\n    this.gpgpu = newGPGPU;\n    this.canvas = this.gpgpu.gl.canvas;\n    this.textureManager = new TextureManager(this.gpgpu);\n    this.numMBBeforeWarning = numMBBeforeWarning();\n    this.texData = new DataStorage(this, engine());\n  }\n\n  nextDataId() {\n    return MathBackendWebGL.nextDataId++;\n  }\n\n  numDataIds() {\n    return this.texData.numDataIds() - this.pendingDeletes;\n  }\n\n  write(values, shape, dtype) {\n    if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') || env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(`Cannot write to a complex64 dtype. ` + `Please use tf.complex(real, imag).`);\n    }\n\n    const dataId = {\n      id: this.nextDataId()\n    };\n    this.texData.set(dataId, {\n      shape,\n      dtype,\n      values,\n      usage: TextureUsage.UPLOAD,\n      refCount: 1\n    });\n    return dataId;\n  }\n  /** Return refCount of a `TensorData`. */\n\n\n  refCount(dataId) {\n    if (this.texData.has(dataId)) {\n      const tensorData = this.texData.get(dataId);\n      return tensorData.refCount;\n    }\n\n    return 0;\n  }\n  /** Increase refCount of a `TextureData`. */\n\n\n  incRef(dataId) {\n    const texData = this.texData.get(dataId);\n    texData.refCount++;\n  }\n  /** Decrease refCount of a `TextureData`. */\n\n\n  decRef(dataId) {\n    if (this.texData.has(dataId)) {\n      const texData = this.texData.get(dataId);\n      texData.refCount--;\n    }\n  }\n\n  move(dataId, values, shape, dtype, refCount) {\n    if (env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n\n    if (dtype === 'complex64') {\n      throw new Error(`Cannot write to a complex64 dtype. ` + `Please use tf.complex(real, imag).`);\n    }\n\n    this.texData.set(dataId, {\n      shape,\n      dtype,\n      values,\n      usage: TextureUsage.UPLOAD,\n      refCount\n    });\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo) {\n    this.disposeData(tensorInfo.dataId);\n  }\n\n  readSync(dataId) {\n    const texData = this.texData.get(dataId);\n    const {\n      values,\n      dtype,\n      complexTensorInfos,\n      slice,\n      shape,\n      isPacked\n    } = texData; // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n\n    if (slice != null) {\n      let program;\n\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n\n      const res = this.runWebGLProgram(program, [{\n        dataId,\n        shape,\n        dtype\n      }], dtype);\n      const data = this.readSync(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n\n    if (dtype === 'string') {\n      return values;\n    }\n\n    const shouldTimeProgram = this.activeTimers != null;\n    let start;\n\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let result;\n\n    if (dtype === 'complex64') {\n      const realValues = this.readSync(complexTensorInfos.real.dataId);\n      const imagValues = this.readSync(complexTensorInfos.imag.dataId);\n      result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else {\n      result = this.getValuesFromTexture(dataId);\n    }\n\n    if (shouldTimeProgram) {\n      this.downloadWaitMs += util.now() - start;\n    }\n\n    return this.convertAndCacheOnCPU(dataId, result);\n  }\n\n  read(dataId) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.pendingRead.has(dataId)) {\n        const subscribers = _this.pendingRead.get(dataId);\n\n        return new Promise(resolve => subscribers.push(resolve));\n      }\n\n      const texData = _this.texData.get(dataId);\n\n      const {\n        values,\n        shape,\n        slice,\n        dtype,\n        complexTensorInfos,\n        isPacked\n      } = texData; // The presence of `slice` indicates this tensor is a shallow slice of a\n      // different tensor, and is using that original tensor's texture. Run\n      // `clone` in order to copy that texture and read from it.\n\n      if (slice != null) {\n        let program;\n\n        if (isPacked) {\n          program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n        } else {\n          program = new UnaryOpProgram(shape, unary_op.CLONE);\n        }\n\n        const res = _this.runWebGLProgram(program, [{\n          dataId,\n          shape,\n          dtype\n        }], dtype);\n\n        const data = _this.read(res.dataId);\n\n        _this.disposeIntermediateTensorInfo(res);\n\n        return data;\n      }\n\n      if (values != null) {\n        return _this.convertAndCacheOnCPU(dataId);\n      }\n\n      if (env().getBool('DEBUG')) {\n        // getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') caused a blocking GPU call.\n        // For performance reason, only check it for debugging. In production,\n        // it doesn't handle this use case anyway, so behavior is not changed.\n        if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') && env().getNumber('WEBGL_VERSION') === 2) {\n          throw new Error(`tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` + `WEBGL_VERSION=2 not yet supported.`);\n        }\n      }\n\n      let buffer = null;\n      let tmpDownloadTarget;\n\n      if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n        // Possibly copy the texture into a buffer before inserting a fence.\n        tmpDownloadTarget = _this.decode(dataId);\n\n        const tmpData = _this.texData.get(tmpDownloadTarget.dataId);\n\n        buffer = _this.gpgpu.createBufferFromTexture(tmpData.texture.texture, ...tex_util.getDenseTexShape(shape));\n      }\n\n      _this.pendingRead.set(dataId, []);\n\n      if (dtype !== 'complex64') {\n        // Create a fence and wait for it to resolve.\n        yield _this.gpgpu.createAndWaitForFence();\n      } // Download the values from the GPU.\n\n\n      let vals;\n\n      if (dtype === 'complex64') {\n        const ps = yield Promise.all([_this.read(complexTensorInfos.real.dataId), _this.read(complexTensorInfos.imag.dataId)]);\n        const realValues = ps[0];\n        const imagValues = ps[1];\n        vals = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n      } else if (buffer == null) {\n        vals = _this.getValuesFromTexture(dataId);\n      } else {\n        const size = util.sizeFromShape(shape);\n        vals = _this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n      }\n\n      if (tmpDownloadTarget != null) {\n        _this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n      }\n\n      if (buffer != null) {\n        const gl = _this.gpgpu.gl;\n        webgl_util.callAndCheck(gl, () => gl.deleteBuffer(buffer));\n      }\n\n      const dTypeVals = _this.convertAndCacheOnCPU(dataId, vals);\n\n      const subscribers = _this.pendingRead.get(dataId);\n\n      _this.pendingRead.delete(dataId); // Notify all pending reads.\n\n\n      subscribers.forEach(resolve => resolve(dTypeVals));\n\n      if (_this.pendingDisposal.has(dataId)) {\n        _this.pendingDisposal.delete(dataId);\n\n        if (_this.disposeData(dataId)) {\n          engine().removeDataId(dataId, _this);\n        }\n\n        _this.pendingDeletes--;\n      }\n\n      return dTypeVals;\n    })();\n  }\n  /**\n   * Read tensor to a new texture that is densely packed for ease of use.\n   * @param dataId The source tensor.\n   * @param options\n   *     customTexShape: Optional. If set, will use the user defined texture\n   *     shape to create the texture.\n   */\n\n\n  readToGPU(dataId, options = {}) {\n    const texData = this.texData.get(dataId);\n    const {\n      values,\n      shape,\n      slice,\n      dtype,\n      isPacked,\n      texture\n    } = texData;\n\n    if (dtype === 'complex64') {\n      throw new Error('Does not support reading texture for complex64 dtype.');\n    } // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n\n\n    if (slice != null) {\n      let program;\n\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n\n      const res = this.runWebGLProgram(program, [{\n        dataId,\n        shape,\n        dtype\n      }], dtype);\n      const gpuResouorce = this.readToGPU(res, options);\n      this.disposeIntermediateTensorInfo(res);\n      return gpuResouorce;\n    }\n\n    if (texture == null) {\n      if (values != null) {\n        throw new Error('Data is not on GPU but on CPU.');\n      } else {\n        throw new Error('There is no data on GPU or CPU.');\n      }\n    } // Decode the texture so that it is stored densely (using four channels).\n\n\n    const tmpTarget = this.decode(dataId, options.customTexShape); // Make engine track this tensor, so that we can dispose it later.\n\n    const tensorRef = engine().makeTensorFromTensorInfo(tmpTarget);\n    const tmpData = this.texData.get(tmpTarget.dataId);\n    return Object.assign({\n      tensorRef\n    }, tmpData.texture);\n  }\n\n  bufferSync(t) {\n    const data = this.readSync(t.dataId);\n\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        const strings = data.map(d => util.decodeString(d));\n        return buffer(t.shape, t.dtype, strings);\n      } catch (_a) {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n\n    return buffer(t.shape, t.dtype, data);\n  }\n\n  checkNumericalProblems(values) {\n    if (values == null) {\n      return;\n    }\n\n    for (let i = 0; i < values.length; i++) {\n      const num = values[i];\n\n      if (!webgl_util.canBeRepresented(num)) {\n        if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n          throw Error(`The value ${num} cannot be represented with your ` + `current settings. Consider enabling float32 rendering: ` + `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n        }\n\n        throw Error(`The value ${num} cannot be represented on this device.`);\n      }\n    }\n  }\n\n  getValuesFromTexture(dataId) {\n    const {\n      shape,\n      dtype,\n      isPacked\n    } = this.texData.get(dataId);\n    const size = util.sizeFromShape(shape);\n\n    if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n      const tmpTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpTarget.dataId);\n      const vals = this.gpgpu.downloadMatrixFromPackedTexture(tmpData.texture.texture, ...tex_util.getDenseTexShape(shape)).subarray(0, size);\n      this.disposeIntermediateTensorInfo(tmpTarget);\n      return vals;\n    }\n\n    const shouldUsePackedProgram = env().getBool('WEBGL_PACK') && isPacked === true;\n    const outputShape = shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n    const program = shouldUsePackedProgram ? new EncodeFloatPackedProgram(outputShape) : new EncodeFloatProgram(outputShape);\n    const output = this.runWebGLProgram(program, [{\n      shape: outputShape,\n      dtype,\n      dataId\n    }], 'float32');\n    const tmpData = this.texData.get(output.dataId);\n    const vals = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(tmpData.texture.texture, tmpData.texShape[0], tmpData.texShape[1]).subarray(0, size);\n    this.disposeIntermediateTensorInfo(output);\n    return vals;\n  }\n\n  timerAvailable() {\n    return env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0;\n  }\n\n  time(f) {\n    var _this2 = this;\n\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers = [];\n    let outerMostTime = false;\n\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n\n    this.activeTimers = newActiveTimers;\n    f(); // needing to split these up because util.flatten only accepts certain types\n\n    const flattenedActiveTimerQueries = util.flatten(this.activeTimers.map(d => d.query)).filter(d => d != null);\n    const flattenedActiveTimerNames = util.flatten(this.activeTimers.map(d => d.name)).filter(d => d != null);\n    this.activeTimers = oldActiveTimers;\n\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n\n    const res = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: null,\n      wallMs: null // will be filled by the engine\n\n    };\n    return _asyncToGenerator(function* () {\n      if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n        const kernelMs = yield Promise.all(flattenedActiveTimerQueries);\n        res['kernelMs'] = util.sum(kernelMs);\n\n        res['getExtraProfileInfo'] = () => kernelMs.map((d, i) => ({\n          name: flattenedActiveTimerNames[i],\n          ms: d\n        })).map(d => `${d.name}: ${d.ms}`).join(', ');\n      } else {\n        res['kernelMs'] = {\n          error: 'WebGL query timers are not supported in this environment.'\n        };\n      }\n\n      _this2.uploadWaitMs = 0;\n      _this2.downloadWaitMs = 0;\n      return res;\n    })();\n  }\n\n  memory() {\n    return {\n      unreliable: false,\n      numBytesInGPU: this.numBytesInGPU,\n      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n      numBytesInGPUFree: this.textureManager.numBytesFree\n    };\n  }\n\n  startTimer() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.beginQuery();\n    }\n\n    return {\n      startMs: util.now(),\n      endMs: null\n    };\n  }\n\n  endTimer(query) {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      this.gpgpu.endQuery();\n      return query;\n    }\n\n    query.endMs = util.now();\n    return query;\n  }\n\n  getQueryTime(query) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n        return _this3.gpgpu.waitForQueryAndGetTime(query);\n      }\n\n      const timerQuery = query;\n      return timerQuery.endMs - timerQuery.startMs;\n    })();\n  }\n  /**\n   * Decrease the RefCount on the dataId and dispose the memory if the dataId\n   * has 0 refCount. If there are pending read on the data, the disposal would\n   * added to the pending delete queue. Return true if the dataId is removed\n   * from backend or the backend does not contain the dataId, false if the\n   * dataId is not removed. Memory may or may not be released even when dataId\n   * is removed, which also depends on dataRefCount, see `releaseGPU`.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n\n\n  disposeData(dataId, force = false) {\n    if (this.pendingDisposal.has(dataId)) {\n      return false;\n    } // No-op if already disposed.\n\n\n    if (!this.texData.has(dataId)) {\n      return true;\n    } // if force flag is set, change refCount to 0, this would ensure disposal\n    // when added to the pendingDisposal queue. Memory may or may not be\n    // released, which also depends on dataRefCount, see `releaseGPU`.\n\n\n    if (force) {\n      this.texData.get(dataId).refCount = 0;\n    } else {\n      this.texData.get(dataId).refCount--;\n    }\n\n    if (!force && this.texData.get(dataId).refCount > 0) {\n      return false;\n    }\n\n    if (this.pendingRead.has(dataId)) {\n      this.pendingDisposal.add(dataId);\n      this.pendingDeletes++;\n      return false;\n    }\n\n    this.releaseGPUData(dataId);\n    const {\n      complexTensorInfos\n    } = this.texData.get(dataId);\n\n    if (complexTensorInfos != null) {\n      this.disposeData(complexTensorInfos.real.dataId, force);\n      this.disposeData(complexTensorInfos.imag.dataId, force);\n    }\n\n    this.texData.delete(dataId);\n    return true;\n  }\n\n  releaseGPUData(dataId) {\n    const {\n      texture,\n      dtype,\n      texShape,\n      usage,\n      isPacked,\n      slice\n    } = this.texData.get(dataId);\n    const key = slice && slice.origDataId || dataId;\n    const refCount = this.dataRefCount.get(key);\n\n    if (refCount > 1) {\n      this.dataRefCount.set(key, refCount - 1);\n    } else {\n      this.dataRefCount.delete(key);\n\n      if (texture != null) {\n        this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n      }\n    }\n\n    const texData = this.texData.get(dataId);\n    texData.texture = null;\n    texData.texShape = null;\n    texData.isPacked = false;\n    texData.slice = null;\n  }\n\n  getTexture(dataId) {\n    this.uploadToGPU(dataId);\n    return this.texData.get(dataId).texture.texture;\n  }\n  /**\n   * Returns internal information for the specific data bucket. Used in unit\n   * tests.\n   */\n\n\n  getDataInfo(dataId) {\n    return this.texData.get(dataId);\n  }\n  /*\n  Tests whether all the inputs to an op are small and on the CPU. This heuristic\n  determines when it would be faster to execute a kernel on the CPU. WebGL\n  kernels opt into running this check and forwarding when appropriate.\n  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n  sustainable strategy for optimizing backend execution of ops.\n   */\n\n\n  shouldExecuteOnCPU(inputs, sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD) {\n    return env().getBool('WEBGL_CPU_FORWARD') && inputs.every(input => this.texData.get(input.dataId).texture == null && util.sizeFromShape(input.shape) < sizeThreshold);\n  }\n\n  getGPGPUContext() {\n    return this.gpgpu;\n  }\n\n  where(condition) {\n    backend_util.warn('tf.where() in webgl locks the UI thread. ' + 'Call tf.whereAsync() instead');\n    const condVals = condition.dataSync();\n    return whereImpl(condition.shape, condVals);\n  }\n\n  packedUnaryOp(x, op, dtype) {\n    const program = new UnaryOpPackedProgram(x.shape, op);\n    const outInfo = this.compileAndRun(program, [x], dtype);\n    return engine().makeTensorFromTensorInfo(outInfo);\n  } // TODO(msoulanille) remove this once the backend has been modularized\n  // a copy is needed here to break a circular dependency.\n  // Also remove the op from unary_op.\n\n\n  abs(x) {\n    // TODO: handle cases when x is complex.\n    if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n      const outValues = simpleAbsImplCPU(this.texData.get(x.dataId).values);\n      return this.makeOutput(x.shape, x.dtype, outValues);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.ABS, x.dtype);\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n    const outInfo = this.compileAndRun(program, [x]);\n    return engine().makeTensorFromTensorInfo(outInfo);\n  }\n\n  makeTensorInfo(shape, dtype, values) {\n    let dataId;\n\n    if (dtype === 'string' && values != null && values.length > 0 && util.isString(values[0])) {\n      const encodedValues = values.map(d => util.encodeString(d));\n      dataId = this.write(encodedValues, shape, dtype);\n    } else {\n      dataId = this.write(values, shape, dtype);\n    }\n\n    this.texData.get(dataId).usage = null;\n    return {\n      dataId,\n      shape,\n      dtype\n    };\n  }\n\n  makeOutput(shape, dtype, values) {\n    return engine().makeTensorFromTensorInfo(this.makeTensorInfo(shape, dtype, values), this);\n  }\n\n  unpackTensor(input) {\n    const program = new UnpackProgram(input.shape);\n    return this.runWebGLProgram(program, [input], input.dtype);\n  }\n\n  packTensor(input) {\n    const program = new PackProgram(input.shape);\n    const preventEagerUnpackingOutput = true;\n    return this.runWebGLProgram(program, [input], input.dtype, null\n    /* customUniformValues */\n    , preventEagerUnpackingOutput);\n  }\n\n  packedReshape(input, afterShape) {\n    const input3DShape = [webgl_util.getBatchDim(input.shape), ...webgl_util.getRowsCols(input.shape)];\n    const input3D = {\n      dtype: input.dtype,\n      shape: input3DShape,\n      dataId: input.dataId\n    };\n    const afterShapeAs3D = [webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)];\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const customValues = [input3DShape];\n    const output = this.runWebGLProgram(program, [input3D], input.dtype, customValues, preventEagerUnpackingOfOutput);\n    return {\n      dataId: output.dataId,\n      shape: afterShape,\n      dtype: output.dtype\n    };\n  }\n\n  decode(dataId, customTexShape) {\n    const texData = this.texData.get(dataId);\n    const {\n      isPacked,\n      shape,\n      dtype\n    } = texData;\n\n    if (customTexShape != null) {\n      const size = util.sizeFromShape(shape);\n      const texSize = customTexShape[0] * customTexShape[1] * 4;\n      util.assert(size <= texSize, () => 'customTexShape is too small. ' + 'Row * Column * 4 should be equal or larger than the ' + 'size of the tensor data.');\n    }\n\n    const shapeAs3D = webgl_util.getShapeAs3D(shape);\n    let program;\n\n    if (isPacked) {\n      program = new DecodeMatrixPackedProgram(shapeAs3D);\n    } else {\n      program = new DecodeMatrixProgram(shapeAs3D);\n    }\n\n    const preventEagerUnpackingOfOutput = true;\n    const customValues = [customTexShape != null ? customTexShape : tex_util.getDenseTexShape(shapeAs3D)];\n    const out = this.runWebGLProgram(program, [{\n      shape: shapeAs3D,\n      dtype,\n      dataId\n    }], dtype, customValues, preventEagerUnpackingOfOutput, customTexShape);\n    return {\n      dtype,\n      shape,\n      dataId: out.dataId\n    };\n  }\n\n  runWebGLProgram(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput = false, customTexShape) {\n    const output = this.makeTensorInfo(program.outputShape, outputDtype);\n    const outData = this.texData.get(output.dataId);\n\n    if (program.packedOutput) {\n      outData.isPacked = true;\n    }\n\n    if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n      const texelShape = customTexShape != null ? customTexShape : tex_util.getDenseTexShape(program.outputShape); // For a densely packed output, we explicitly set texShape\n      // so it doesn't get assigned later according to our typical packing\n      // scheme wherein a single texel can only contain values from adjacent\n      // rows/cols.\n\n      outData.texShape = texelShape.map(d => d * 2);\n    }\n\n    if (program.outTexUsage != null) {\n      outData.usage = program.outTexUsage;\n    }\n\n    if (util.sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      outData.values = util.getTypedArrayFromDType(output.dtype, 0);\n      return output;\n    }\n\n    const dataToDispose = [];\n    const inputsData = inputs.map(input => {\n      if (input.dtype === 'complex64') {\n        throw new Error(`GPGPUProgram does not support complex64 input. For complex64 ` + `dtypes, please separate the program into real and imaginary ` + `parts.`);\n      }\n\n      let texData = this.texData.get(input.dataId);\n\n      if (texData.texture == null) {\n        if (!program.packedInputs && util.sizeFromShape(input.shape) <= env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n          // Upload small tensors that live on the CPU as uniforms, not as\n          // textures. Do this only when the environment supports 32bit floats\n          // due to problems when comparing 16bit floats with 32bit floats.\n          // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n          // possible for packed shaders to sample from uniforms.\n          return {\n            shape: input.shape,\n            texData: null,\n            isUniform: true,\n            uniformValues: texData.values\n          };\n        } // This ensures that if a packed program's inputs have not yet been\n        // uploaded to the GPU, they get uploaded as packed right off the bat.\n\n\n        if (program.packedInputs) {\n          texData.isPacked = true;\n          texData.shape = input.shape;\n        }\n      }\n\n      this.uploadToGPU(input.dataId);\n\n      if (!!texData.isPacked !== !!program.packedInputs) {\n        input = texData.isPacked ? this.unpackTensor(input) : this.packTensor(input);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n      } else if (texData.isPacked && !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n        // This is a special case where a texture exists for a tensor\n        // but the shapes are incompatible (due to packing constraints) because\n        // the tensor did not have a chance to go through the packed reshape\n        // shader. This only happens when we reshape the *same* tensor to form\n        // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n        // case will disappear once packed uploading is the default.\n        const savedInput = input;\n        const targetShape = input.shape;\n        input.shape = texData.shape;\n        input = this.packedReshape(input, targetShape);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n        savedInput.shape = targetShape;\n      }\n\n      return {\n        shape: input.shape,\n        texData,\n        isUniform: false\n      };\n    });\n    this.uploadToGPU(output.dataId);\n    const outputData = {\n      shape: output.shape,\n      texData: outData,\n      isUniform: false\n    };\n    const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n    const binary = this.getAndSaveBinary(key, () => {\n      return gpgpu_math.compileProgram(this.gpgpu, program, inputsData, outputData);\n    });\n    const shouldTimeProgram = this.activeTimers != null;\n    let query;\n\n    if (shouldTimeProgram) {\n      query = this.startTimer();\n    }\n\n    if (!env().get('ENGINE_COMPILE_ONLY')) {\n      gpgpu_math.runProgram(this.gpgpu, binary, inputsData, outputData, customUniformValues);\n    }\n\n    dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n\n    if (shouldTimeProgram) {\n      query = this.endTimer(query);\n      this.activeTimers.push({\n        name: program.constructor.name,\n        query: this.getQueryTime(query)\n      });\n    }\n\n    const glFlushThreshold = env().get('WEBGL_FLUSH_THRESHOLD'); // Manually GL flush requested\n\n    if (glFlushThreshold > 0) {\n      const time = util.now();\n\n      if (time - this.lastGlFlushTime > glFlushThreshold) {\n        this.gpgpu.gl.flush();\n        this.lastGlFlushTime = time;\n      }\n    }\n\n    if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked && preventEagerUnpackingOfOutput === false) {\n      const unpacked = this.unpackTensor(output);\n      this.disposeIntermediateTensorInfo(output);\n      return unpacked;\n    }\n\n    return output;\n  }\n\n  compileAndRun(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput = false) {\n    outputDtype = outputDtype || inputs[0].dtype;\n    const outInfo = this.runWebGLProgram(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput);\n    return outInfo;\n  }\n\n  getAndSaveBinary(key, getBinary) {\n    if (!(key in this.binaryCache)) {\n      this.binaryCache[key] = getBinary();\n    }\n\n    return this.binaryCache[key];\n  }\n\n  getTextureManager() {\n    return this.textureManager;\n  }\n\n  dispose() {\n    if (this.disposed) {\n      return;\n    } // Avoid disposing the compiled webgl programs during unit testing because\n    // it slows down test execution.\n\n\n    if (!env().getBool('IS_TEST')) {\n      const allKeys = Object.keys(this.binaryCache);\n      allKeys.forEach(key => {\n        this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n        delete this.binaryCache[key];\n      });\n    }\n\n    this.textureManager.dispose();\n\n    if (this.canvas != null && typeof HTMLCanvasElement !== 'undefined' && this.canvas instanceof HTMLCanvasElement) {\n      this.canvas.remove();\n    } else {\n      this.canvas = null;\n    }\n\n    if (this.gpgpuCreatedLocally) {\n      this.gpgpu.program = null;\n      this.gpgpu.dispose();\n    }\n\n    this.disposed = true;\n  }\n\n  floatPrecision() {\n    if (this.floatPrecisionValue == null) {\n      this.floatPrecisionValue = tidy(() => {\n        if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n          // Momentarily switching DEBUG flag to false so we don't throw an\n          // error trying to upload a small value.\n          const debugFlag = env().getBool('DEBUG');\n          env().set('DEBUG', false);\n          const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n          env().set('DEBUG', debugFlag);\n\n          if (underflowCheckValue > 0) {\n            return 32;\n          }\n        }\n\n        return 16;\n      });\n    }\n\n    return this.floatPrecisionValue;\n  }\n  /** Returns the smallest representable number.  */\n\n\n  epsilon() {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n\n  uploadToGPU(dataId) {\n    const texData = this.texData.get(dataId);\n    const {\n      shape,\n      dtype,\n      values,\n      texture,\n      usage,\n      isPacked\n    } = texData;\n\n    if (texture != null) {\n      // Array is already on GPU. No-op.\n      return;\n    }\n\n    const shouldTimeProgram = this.activeTimers != null;\n    let start;\n\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let texShape = texData.texShape;\n\n    if (texShape == null) {\n      // This texShape may not be the final texture shape. For packed or dense\n      // textures, the texShape will be changed when textures are created.\n      texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n      texData.texShape = texShape;\n    }\n\n    if (values != null) {\n      const shapeAs3D = webgl_util.getShapeAs3D(shape);\n      let program;\n      let width = texShape[1],\n          height = texShape[0];\n      const isByteArray = values instanceof Uint8Array || values instanceof Uint8ClampedArray; // texture for float array is PhysicalTextureType.PACKED_2X2_FLOAT32, we\n      // need to make sure the upload uses the same packed size\n\n      if (isPacked || !isByteArray) {\n        [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(texShape[0], texShape[1]);\n      }\n\n      if (isPacked) {\n        program = new EncodeMatrixPackedProgram(shapeAs3D, isByteArray);\n      } else {\n        program = new EncodeMatrixProgram(shapeAs3D, isByteArray);\n      } // TexShape for float array needs to be the original shape, which byte\n      // array needs to be packed size. This allow the data upload shape to be\n      // matched with texture creation logic.\n\n\n      const tempDenseInputTexShape = isByteArray ? [height, width] : texShape;\n      const tempDenseInputHandle = this.makeTensorInfo(tempDenseInputTexShape, dtype);\n      const tempDenseInputTexData = this.texData.get(tempDenseInputHandle.dataId);\n\n      if (isByteArray) {\n        tempDenseInputTexData.usage = TextureUsage.PIXELS;\n      } else {\n        tempDenseInputTexData.usage = TextureUsage.UPLOAD;\n      }\n\n      tempDenseInputTexData.texShape = tempDenseInputTexShape;\n      this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(tempDenseInputHandle.dataId), width, height, values);\n      const customValues = [[height, width]]; // We want the output to remain packed regardless of the value of\n      // WEBGL_PACK.\n\n      const preventEagerUnpacking = true;\n      const encodedOutputTarget = this.runWebGLProgram(program, [tempDenseInputHandle], dtype, customValues, preventEagerUnpacking); // Have the original texture assume the identity of the encoded output.\n\n      const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n      texData.texShape = outputTexData.texShape;\n      texData.isPacked = outputTexData.isPacked;\n      texData.usage = outputTexData.usage;\n\n      if (!env().get('ENGINE_COMPILE_ONLY')) {\n        texData.texture = outputTexData.texture; // Once uploaded, don't store the values on cpu.\n\n        texData.values = null;\n        this.texData.delete(encodedOutputTarget.dataId);\n      } else {\n        this.disposeData(encodedOutputTarget.dataId);\n      }\n\n      this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n\n      if (shouldTimeProgram) {\n        this.uploadWaitMs += util.now() - start;\n      }\n    } else {\n      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n      texData.texture = newTexture;\n    }\n  }\n\n  convertAndCacheOnCPU(dataId, float32Values) {\n    const texData = this.texData.get(dataId);\n    const {\n      dtype\n    } = texData;\n    this.releaseGPUData(dataId);\n\n    if (float32Values != null) {\n      texData.values = float32ToTypedArray(float32Values, dtype);\n    }\n\n    return texData.values;\n  }\n\n  acquireTexture(texShape, texType, dtype, isPacked) {\n    this.numBytesInGPU += this.computeBytes(texShape, dtype);\n\n    if (!this.warnedAboutMemory && this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n      this.warnedAboutMemory = true;\n      console.warn(`High memory usage in GPU: ${mb} MB, ` + `most likely due to a memory leak`);\n    }\n\n    return this.textureManager.acquireTexture(texShape, texType, isPacked);\n  }\n\n  computeBytes(shape, dtype) {\n    return shape[0] * shape[1] * util.bytesPerElement(dtype);\n  }\n\n  checkCompileCompletion() {\n    for (const [, binary] of Object.entries(this.binaryCache)) {\n      this.checkCompletion_(binary);\n    }\n  }\n\n  checkCompileCompletionAsync() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const ps = [];\n\n      if (_this4.gpgpu.parallelCompilationExtension) {\n        for (const [, binary] of Object.entries(_this4.binaryCache)) {\n          ps.push(_this4.checkCompletionAsync_(binary));\n        }\n\n        return Promise.all(ps);\n      } else {\n        for (const [, binary] of Object.entries(_this4.binaryCache)) {\n          const p = new Promise(resolve => {\n            try {\n              _this4.checkCompletion_(binary);\n\n              resolve(true);\n            } catch (error) {\n              throw error;\n            }\n          });\n          ps.push(p);\n        }\n\n        return Promise.all(ps);\n      }\n    })();\n  }\n\n  checkCompletionAsync_(binary) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this5.gpgpu.gl.getProgramParameter(binary.webGLProgram, _this5.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)) {\n        return _this5.checkCompletion_(binary);\n      } else {\n        yield nextFrame();\n        return _this5.checkCompletionAsync_(binary);\n      }\n    })();\n  }\n\n  checkCompletion_(binary) {\n    if (this.gpgpu.gl.getProgramParameter(binary.webGLProgram, this.gpgpu.gl.LINK_STATUS) === false) {\n      console.log(this.gpgpu.gl.getProgramInfoLog(binary.webGLProgram));\n\n      if (this.gpgpu.gl.getShaderParameter(binary.fragmentShader, this.gpgpu.gl.COMPILE_STATUS) === false) {\n        webgl_util.logShaderSourceAndInfoLog(binary.source, this.gpgpu.gl.getShaderInfoLog(binary.fragmentShader));\n        throw new Error('Failed to compile fragment shader.');\n      }\n\n      throw new Error('Failed to link vertex and fragment shaders.');\n    }\n\n    return true;\n  }\n\n  getUniformLocations() {\n    for (const [, binary] of Object.entries(this.binaryCache)) {\n      const {\n        uniformLocations,\n        customUniformLocations,\n        infLoc,\n        nanLoc,\n        inShapesLocations,\n        inTexShapesLocations,\n        outShapeLocation,\n        outShapeStridesLocation,\n        outTexShapeLocation\n      } = getUniformLocations(this.gpgpu, binary.program, binary.webGLProgram);\n      binary.uniformLocations = uniformLocations;\n      binary.customUniformLocations = customUniformLocations;\n      binary.infLoc = infLoc;\n      binary.nanLoc = nanLoc;\n      binary.inShapesLocations = inShapesLocations;\n      binary.inTexShapesLocations = inTexShapesLocations;\n      binary.outShapeLocation = outShapeLocation;\n      binary.outShapeStridesLocation = outShapeStridesLocation;\n      binary.outTexShapeLocation = outTexShapeLocation;\n    }\n  }\n\n}\nMathBackendWebGL.nextDataId = 0;\n\nfunction float32ToTypedArray(a, dtype) {\n  if (dtype === 'float32' || dtype === 'complex64') {\n    return a;\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    const result = dtype === 'int32' ? new Int32Array(a.length) : new Uint8Array(a.length);\n\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n\n    return result;\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}","map":{"version":3,"names":["backend_util","buffer","DataStorage","engine","env","kernel_impls","KernelBackend","nextFrame","scalar","tidy","util","getWebGLContext","DecodeMatrixProgram","DecodeMatrixPackedProgram","EncodeFloatProgram","EncodeFloatPackedProgram","EncodeMatrixProgram","EncodeMatrixPackedProgram","GPGPUContext","gpgpu_math","getUniformLocations","simpleAbsImplCPU","PackProgram","ReshapePackedProgram","tex_util","TextureUsage","TextureManager","unary_op","UnaryOpProgram","UnaryOpPackedProgram","UnpackProgram","webgl_util","whereImpl","EPSILON_FLOAT32","EPSILON_FLOAT16","binaryCaches","getBinaryCache","webGLVersion","CPU_HANDOFF_SIZE_THRESHOLD","getNumber","BEFORE_PAGING_CONSTANT","numMBBeforeWarning","global","screen","height","width","window","devicePixelRatio","MathBackendWebGL","constructor","gpuResource","pendingRead","WeakMap","pendingDisposal","WeakSet","dataRefCount","numBytesInGPU","uploadWaitMs","downloadWaitMs","lastGlFlushTime","warnedAboutMemory","pendingDeletes","disposed","getBool","Error","newGPGPU","gl","binaryCache","gpgpuCreatedLocally","gpgpu","canvas","textureManager","texData","nextDataId","numDataIds","write","values","shape","dtype","checkNumericalProblems","dataId","id","set","usage","UPLOAD","refCount","has","tensorData","get","incRef","decRef","move","disposeIntermediateTensorInfo","tensorInfo","disposeData","readSync","complexTensorInfos","slice","isPacked","program","CLONE","res","runWebGLProgram","data","convertAndCacheOnCPU","shouldTimeProgram","activeTimers","start","now","result","realValues","real","imagValues","imag","mergeRealAndImagArrays","getValuesFromTexture","read","subscribers","Promise","resolve","push","tmpDownloadTarget","decode","tmpData","createBufferFromTexture","texture","getDenseTexShape","createAndWaitForFence","vals","ps","all","size","sizeFromShape","downloadFloat32MatrixFromBuffer","callAndCheck","deleteBuffer","dTypeVals","delete","forEach","removeDataId","readToGPU","options","gpuResouorce","tmpTarget","customTexShape","tensorRef","makeTensorFromTensorInfo","Object","assign","bufferSync","t","strings","map","d","decodeString","_a","i","length","num","canBeRepresented","downloadMatrixFromPackedTexture","subarray","shouldUsePackedProgram","outputShape","getShapeAs3D","output","downloadByteEncodedFloatMatrixFromOutputTexture","texShape","timerAvailable","time","f","oldActiveTimers","newActiveTimers","outerMostTime","programTimersStack","flattenedActiveTimerQueries","flatten","query","filter","flattenedActiveTimerNames","name","kernelMs","wallMs","sum","ms","join","error","memory","unreliable","numBytesInGPUAllocated","numBytesAllocated","numBytesInGPUFree","numBytesFree","startTimer","beginQuery","startMs","endMs","endTimer","endQuery","getQueryTime","waitForQueryAndGetTime","timerQuery","force","add","releaseGPUData","key","origDataId","computeBytes","releaseTexture","getTexture","uploadToGPU","getDataInfo","shouldExecuteOnCPU","inputs","sizeThreshold","every","input","getGPGPUContext","where","condition","warn","condVals","dataSync","packedUnaryOp","x","op","outInfo","compileAndRun","abs","outValues","makeOutput","ABS","makeTensorInfo","isString","encodedValues","encodeString","unpackTensor","packTensor","preventEagerUnpackingOutput","packedReshape","afterShape","input3DShape","getBatchDim","getRowsCols","input3D","afterShapeAs3D","preventEagerUnpackingOfOutput","customValues","texSize","assert","shapeAs3D","out","outputDtype","customUniformValues","outData","packedOutput","outPackingScheme","PackingScheme","DENSE","texelShape","outTexUsage","getTypedArrayFromDType","dataToDispose","inputsData","packedInputs","isUniform","uniformValues","isReshapeFree","savedInput","targetShape","outputData","makeShaderKey","binary","getAndSaveBinary","compileProgram","runProgram","info","glFlushThreshold","flush","unpacked","getBinary","getTextureManager","dispose","allKeys","keys","deleteProgram","webGLProgram","HTMLCanvasElement","remove","floatPrecision","floatPrecisionValue","debugFlag","underflowCheckValue","epsilon","getTextureShapeFromLogicalShape","isByteArray","Uint8Array","Uint8ClampedArray","getPackedMatrixTextureShapeWidthHeight","tempDenseInputTexShape","tempDenseInputHandle","tempDenseInputTexData","PIXELS","uploadDenseMatrixToTexture","preventEagerUnpacking","encodedOutputTarget","outputTexData","newTexture","acquireTexture","float32Values","float32ToTypedArray","texType","mb","toFixed","console","bytesPerElement","checkCompileCompletion","entries","checkCompletion_","checkCompileCompletionAsync","parallelCompilationExtension","checkCompletionAsync_","p","getProgramParameter","COMPLETION_STATUS_KHR","LINK_STATUS","log","getProgramInfoLog","getShaderParameter","fragmentShader","COMPILE_STATUS","logShaderSourceAndInfoLog","source","getShaderInfoLog","uniformLocations","customUniformLocations","infLoc","nanLoc","inShapesLocations","inTexShapesLocations","outShapeLocation","outShapeStridesLocation","outTexShapeLocation","a","Int32Array","Math","round"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/backend_webgl.js"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import webgl flags.\nimport './flags_webgl';\nimport { backend_util, buffer, DataStorage, engine, env, kernel_impls, KernelBackend, nextFrame, scalar, tidy, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext } from './canvas_util';\nimport { DecodeMatrixProgram } from './decode_matrix_gpu';\nimport { DecodeMatrixPackedProgram } from './decode_matrix_packed_gpu';\nimport { EncodeFloatProgram } from './encode_float_gpu';\nimport { EncodeFloatPackedProgram } from './encode_float_packed_gpu';\nimport { EncodeMatrixProgram } from './encode_matrix_gpu';\nimport { EncodeMatrixPackedProgram } from './encode_matrix_packed_gpu';\nimport { GPGPUContext } from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport { getUniformLocations } from './gpgpu_math';\nimport { simpleAbsImplCPU } from './kernel_utils/shared';\nimport { PackProgram } from './pack_gpu';\nimport { ReshapePackedProgram } from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport { TextureUsage } from './tex_util';\nimport { TextureManager } from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport { UnaryOpProgram } from './unaryop_gpu';\nimport { UnaryOpPackedProgram } from './unaryop_packed_gpu';\nimport { UnpackProgram } from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\nconst whereImpl = kernel_impls.whereImpl;\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\nconst binaryCaches = {};\nexport function getBinaryCache(webGLVersion) {\n    if (webGLVersion in binaryCaches) {\n        return binaryCaches[webGLVersion];\n    }\n    binaryCaches[webGLVersion] = {};\n    return binaryCaches[webGLVersion];\n}\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD = env().getNumber('CPU_HANDOFF_SIZE_THRESHOLD');\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning() {\n    if (env().global.screen == null) {\n        return 1024; // 1 GB.\n    }\n    return (env().global.screen.height * env().global.screen.width *\n        window.devicePixelRatio) *\n        BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\nexport class MathBackendWebGL extends KernelBackend {\n    constructor(gpuResource) {\n        super();\n        // Maps data ids that have a pending read operation, to list of subscribers.\n        this.pendingRead = new WeakMap();\n        // List of data ids that are scheduled for disposal, but are waiting on a\n        // pending read operation.\n        this.pendingDisposal = new WeakSet();\n        // Used to count the number of 'shallow' sliced tensors that point to the\n        // same data id.\n        this.dataRefCount = new WeakMap();\n        this.numBytesInGPU = 0;\n        // Accumulated time spent (including blocking) in uploading data to webgl.\n        this.uploadWaitMs = 0;\n        // Accumulated time spent (including blocking in downloading data from webgl.\n        this.downloadWaitMs = 0;\n        // record the last manual GL Flush time.\n        this.lastGlFlushTime = 0;\n        this.warnedAboutMemory = false;\n        this.pendingDeletes = 0;\n        this.disposed = false;\n        if (!env().getBool('HAS_WEBGL')) {\n            throw new Error('WebGL is not supported on this device');\n        }\n        let newGPGPU;\n        if (gpuResource != null) {\n            if (gpuResource instanceof GPGPUContext) {\n                newGPGPU = gpuResource;\n            }\n            else {\n                const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'), gpuResource);\n                newGPGPU = new GPGPUContext(gl);\n            }\n            this.binaryCache = {};\n            this.gpgpuCreatedLocally = false;\n        }\n        else {\n            const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n            newGPGPU = new GPGPUContext(gl);\n            this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n            this.gpgpuCreatedLocally = true;\n        }\n        this.gpgpu = newGPGPU;\n        this.canvas = this.gpgpu.gl.canvas;\n        this.textureManager = new TextureManager(this.gpgpu);\n        this.numMBBeforeWarning = numMBBeforeWarning();\n        this.texData = new DataStorage(this, engine());\n    }\n    nextDataId() {\n        return MathBackendWebGL.nextDataId++;\n    }\n    numDataIds() {\n        return this.texData.numDataIds() - this.pendingDeletes;\n    }\n    write(values, shape, dtype) {\n        if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') ||\n            env().getBool('DEBUG')) {\n            this.checkNumericalProblems(values);\n        }\n        if (dtype === 'complex64' && values != null) {\n            throw new Error(`Cannot write to a complex64 dtype. ` +\n                `Please use tf.complex(real, imag).`);\n        }\n        const dataId = { id: this.nextDataId() };\n        this.texData.set(dataId, { shape, dtype, values, usage: TextureUsage.UPLOAD, refCount: 1 });\n        return dataId;\n    }\n    /** Return refCount of a `TensorData`. */\n    refCount(dataId) {\n        if (this.texData.has(dataId)) {\n            const tensorData = this.texData.get(dataId);\n            return tensorData.refCount;\n        }\n        return 0;\n    }\n    /** Increase refCount of a `TextureData`. */\n    incRef(dataId) {\n        const texData = this.texData.get(dataId);\n        texData.refCount++;\n    }\n    /** Decrease refCount of a `TextureData`. */\n    decRef(dataId) {\n        if (this.texData.has(dataId)) {\n            const texData = this.texData.get(dataId);\n            texData.refCount--;\n        }\n    }\n    move(dataId, values, shape, dtype, refCount) {\n        if (env().getBool('DEBUG')) {\n            this.checkNumericalProblems(values);\n        }\n        if (dtype === 'complex64') {\n            throw new Error(`Cannot write to a complex64 dtype. ` +\n                `Please use tf.complex(real, imag).`);\n        }\n        this.texData.set(dataId, { shape, dtype, values, usage: TextureUsage.UPLOAD, refCount });\n    }\n    disposeIntermediateTensorInfo(tensorInfo) {\n        this.disposeData(tensorInfo.dataId);\n    }\n    readSync(dataId) {\n        const texData = this.texData.get(dataId);\n        const { values, dtype, complexTensorInfos, slice, shape, isPacked } = texData;\n        // The presence of `slice` indicates this tensor is a shallow slice of a\n        // different tensor, and is using that original tensor's texture. Run\n        // `clone` in order to copy that texture and read from it.\n        if (slice != null) {\n            let program;\n            if (isPacked) {\n                program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n            }\n            else {\n                program = new UnaryOpProgram(shape, unary_op.CLONE);\n            }\n            const res = this.runWebGLProgram(program, [{ dataId, shape, dtype }], dtype);\n            const data = this.readSync(res.dataId);\n            this.disposeIntermediateTensorInfo(res);\n            return data;\n        }\n        if (values != null) {\n            return this.convertAndCacheOnCPU(dataId);\n        }\n        if (dtype === 'string') {\n            return values;\n        }\n        const shouldTimeProgram = this.activeTimers != null;\n        let start;\n        if (shouldTimeProgram) {\n            start = util.now();\n        }\n        let result;\n        if (dtype === 'complex64') {\n            const realValues = this.readSync(complexTensorInfos.real.dataId);\n            const imagValues = this.readSync(complexTensorInfos.imag.dataId);\n            result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n        }\n        else {\n            result = this.getValuesFromTexture(dataId);\n        }\n        if (shouldTimeProgram) {\n            this.downloadWaitMs += util.now() - start;\n        }\n        return this.convertAndCacheOnCPU(dataId, result);\n    }\n    async read(dataId) {\n        if (this.pendingRead.has(dataId)) {\n            const subscribers = this.pendingRead.get(dataId);\n            return new Promise(resolve => subscribers.push(resolve));\n        }\n        const texData = this.texData.get(dataId);\n        const { values, shape, slice, dtype, complexTensorInfos, isPacked } = texData;\n        // The presence of `slice` indicates this tensor is a shallow slice of a\n        // different tensor, and is using that original tensor's texture. Run\n        // `clone` in order to copy that texture and read from it.\n        if (slice != null) {\n            let program;\n            if (isPacked) {\n                program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n            }\n            else {\n                program = new UnaryOpProgram(shape, unary_op.CLONE);\n            }\n            const res = this.runWebGLProgram(program, [{ dataId, shape, dtype }], dtype);\n            const data = this.read(res.dataId);\n            this.disposeIntermediateTensorInfo(res);\n            return data;\n        }\n        if (values != null) {\n            return this.convertAndCacheOnCPU(dataId);\n        }\n        if (env().getBool('DEBUG')) {\n            // getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') caused a blocking GPU call.\n            // For performance reason, only check it for debugging. In production,\n            // it doesn't handle this use case anyway, so behavior is not changed.\n            if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&\n                env().getNumber('WEBGL_VERSION') === 2) {\n                throw new Error(`tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` +\n                    `WEBGL_VERSION=2 not yet supported.`);\n            }\n        }\n        let buffer = null;\n        let tmpDownloadTarget;\n        if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n            // Possibly copy the texture into a buffer before inserting a fence.\n            tmpDownloadTarget = this.decode(dataId);\n            const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n            buffer = this.gpgpu.createBufferFromTexture(tmpData.texture.texture, ...tex_util.getDenseTexShape(shape));\n        }\n        this.pendingRead.set(dataId, []);\n        if (dtype !== 'complex64') {\n            // Create a fence and wait for it to resolve.\n            await this.gpgpu.createAndWaitForFence();\n        }\n        // Download the values from the GPU.\n        let vals;\n        if (dtype === 'complex64') {\n            const ps = await Promise.all([\n                this.read(complexTensorInfos.real.dataId),\n                this.read(complexTensorInfos.imag.dataId)\n            ]);\n            const realValues = ps[0];\n            const imagValues = ps[1];\n            vals = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n        }\n        else if (buffer == null) {\n            vals = this.getValuesFromTexture(dataId);\n        }\n        else {\n            const size = util.sizeFromShape(shape);\n            vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n        }\n        if (tmpDownloadTarget != null) {\n            this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n        }\n        if (buffer != null) {\n            const gl = this.gpgpu.gl;\n            webgl_util.callAndCheck(gl, () => gl.deleteBuffer(buffer));\n        }\n        const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n        const subscribers = this.pendingRead.get(dataId);\n        this.pendingRead.delete(dataId);\n        // Notify all pending reads.\n        subscribers.forEach(resolve => resolve(dTypeVals));\n        if (this.pendingDisposal.has(dataId)) {\n            this.pendingDisposal.delete(dataId);\n            if (this.disposeData(dataId)) {\n                engine().removeDataId(dataId, this);\n            }\n            this.pendingDeletes--;\n        }\n        return dTypeVals;\n    }\n    /**\n     * Read tensor to a new texture that is densely packed for ease of use.\n     * @param dataId The source tensor.\n     * @param options\n     *     customTexShape: Optional. If set, will use the user defined texture\n     *     shape to create the texture.\n     */\n    readToGPU(dataId, options = {}) {\n        const texData = this.texData.get(dataId);\n        const { values, shape, slice, dtype, isPacked, texture } = texData;\n        if (dtype === 'complex64') {\n            throw new Error('Does not support reading texture for complex64 dtype.');\n        }\n        // The presence of `slice` indicates this tensor is a shallow slice of a\n        // different tensor, and is using that original tensor's texture. Run\n        // `clone` in order to copy that texture and read from it.\n        if (slice != null) {\n            let program;\n            if (isPacked) {\n                program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n            }\n            else {\n                program = new UnaryOpProgram(shape, unary_op.CLONE);\n            }\n            const res = this.runWebGLProgram(program, [{ dataId, shape, dtype }], dtype);\n            const gpuResouorce = this.readToGPU(res, options);\n            this.disposeIntermediateTensorInfo(res);\n            return gpuResouorce;\n        }\n        if (texture == null) {\n            if (values != null) {\n                throw new Error('Data is not on GPU but on CPU.');\n            }\n            else {\n                throw new Error('There is no data on GPU or CPU.');\n            }\n        }\n        // Decode the texture so that it is stored densely (using four channels).\n        const tmpTarget = this.decode(dataId, options.customTexShape);\n        // Make engine track this tensor, so that we can dispose it later.\n        const tensorRef = engine().makeTensorFromTensorInfo(tmpTarget);\n        const tmpData = this.texData.get(tmpTarget.dataId);\n        return Object.assign({ tensorRef }, tmpData.texture);\n    }\n    bufferSync(t) {\n        const data = this.readSync(t.dataId);\n        if (t.dtype === 'string') {\n            try {\n                // Decode the bytes into string.\n                const strings = data.map(d => util.decodeString(d));\n                return buffer(t.shape, t.dtype, strings);\n            }\n            catch (_a) {\n                throw new Error('Failed to decode encoded string bytes into utf-8');\n            }\n        }\n        return buffer(t.shape, t.dtype, data);\n    }\n    checkNumericalProblems(values) {\n        if (values == null) {\n            return;\n        }\n        for (let i = 0; i < values.length; i++) {\n            const num = values[i];\n            if (!webgl_util.canBeRepresented(num)) {\n                if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n                    throw Error(`The value ${num} cannot be represented with your ` +\n                        `current settings. Consider enabling float32 rendering: ` +\n                        `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n                }\n                throw Error(`The value ${num} cannot be represented on this device.`);\n            }\n        }\n    }\n    getValuesFromTexture(dataId) {\n        const { shape, dtype, isPacked } = this.texData.get(dataId);\n        const size = util.sizeFromShape(shape);\n        if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n            const tmpTarget = this.decode(dataId);\n            const tmpData = this.texData.get(tmpTarget.dataId);\n            const vals = this.gpgpu\n                .downloadMatrixFromPackedTexture(tmpData.texture.texture, ...tex_util.getDenseTexShape(shape))\n                .subarray(0, size);\n            this.disposeIntermediateTensorInfo(tmpTarget);\n            return vals;\n        }\n        const shouldUsePackedProgram = env().getBool('WEBGL_PACK') && isPacked === true;\n        const outputShape = shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n        const program = shouldUsePackedProgram ?\n            new EncodeFloatPackedProgram(outputShape) :\n            new EncodeFloatProgram(outputShape);\n        const output = this.runWebGLProgram(program, [{ shape: outputShape, dtype, dataId }], 'float32');\n        const tmpData = this.texData.get(output.dataId);\n        const vals = this.gpgpu\n            .downloadByteEncodedFloatMatrixFromOutputTexture(tmpData.texture.texture, tmpData.texShape[0], tmpData.texShape[1])\n            .subarray(0, size);\n        this.disposeIntermediateTensorInfo(output);\n        return vals;\n    }\n    timerAvailable() {\n        return env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0;\n    }\n    time(f) {\n        const oldActiveTimers = this.activeTimers;\n        const newActiveTimers = [];\n        let outerMostTime = false;\n        if (this.programTimersStack == null) {\n            this.programTimersStack = newActiveTimers;\n            outerMostTime = true;\n        }\n        else {\n            this.activeTimers.push(newActiveTimers);\n        }\n        this.activeTimers = newActiveTimers;\n        f();\n        // needing to split these up because util.flatten only accepts certain types\n        const flattenedActiveTimerQueries = util.flatten(this.activeTimers.map((d) => d.query))\n            .filter(d => d != null);\n        const flattenedActiveTimerNames = util.flatten(this.activeTimers.map((d) => d.name))\n            .filter(d => d != null);\n        this.activeTimers = oldActiveTimers;\n        if (outerMostTime) {\n            this.programTimersStack = null;\n        }\n        const res = {\n            uploadWaitMs: this.uploadWaitMs,\n            downloadWaitMs: this.downloadWaitMs,\n            kernelMs: null,\n            wallMs: null // will be filled by the engine\n        };\n        return (async () => {\n            if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') >\n                0) {\n                const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n                res['kernelMs'] = util.sum(kernelMs);\n                res['getExtraProfileInfo'] = () => kernelMs\n                    .map((d, i) => ({ name: flattenedActiveTimerNames[i], ms: d }))\n                    .map(d => `${d.name}: ${d.ms}`)\n                    .join(', ');\n            }\n            else {\n                res['kernelMs'] = {\n                    error: 'WebGL query timers are not supported in this environment.'\n                };\n            }\n            this.uploadWaitMs = 0;\n            this.downloadWaitMs = 0;\n            return res;\n        })();\n    }\n    memory() {\n        return {\n            unreliable: false,\n            numBytesInGPU: this.numBytesInGPU,\n            numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n            numBytesInGPUFree: this.textureManager.numBytesFree\n        };\n    }\n    startTimer() {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            return this.gpgpu.beginQuery();\n        }\n        return { startMs: util.now(), endMs: null };\n    }\n    endTimer(query) {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            this.gpgpu.endQuery();\n            return query;\n        }\n        query.endMs = util.now();\n        return query;\n    }\n    async getQueryTime(query) {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            return this.gpgpu.waitForQueryAndGetTime(query);\n        }\n        const timerQuery = query;\n        return timerQuery.endMs - timerQuery.startMs;\n    }\n    /**\n     * Decrease the RefCount on the dataId and dispose the memory if the dataId\n     * has 0 refCount. If there are pending read on the data, the disposal would\n     * added to the pending delete queue. Return true if the dataId is removed\n     * from backend or the backend does not contain the dataId, false if the\n     * dataId is not removed. Memory may or may not be released even when dataId\n     * is removed, which also depends on dataRefCount, see `releaseGPU`.\n     * @param dataId\n     * @oaram force Optional, remove the data regardless of refCount\n     */\n    disposeData(dataId, force = false) {\n        if (this.pendingDisposal.has(dataId)) {\n            return false;\n        }\n        // No-op if already disposed.\n        if (!this.texData.has(dataId)) {\n            return true;\n        }\n        // if force flag is set, change refCount to 0, this would ensure disposal\n        // when added to the pendingDisposal queue. Memory may or may not be\n        // released, which also depends on dataRefCount, see `releaseGPU`.\n        if (force) {\n            this.texData.get(dataId).refCount = 0;\n        }\n        else {\n            this.texData.get(dataId).refCount--;\n        }\n        if (!force && this.texData.get(dataId).refCount > 0) {\n            return false;\n        }\n        if (this.pendingRead.has(dataId)) {\n            this.pendingDisposal.add(dataId);\n            this.pendingDeletes++;\n            return false;\n        }\n        this.releaseGPUData(dataId);\n        const { complexTensorInfos } = this.texData.get(dataId);\n        if (complexTensorInfos != null) {\n            this.disposeData(complexTensorInfos.real.dataId, force);\n            this.disposeData(complexTensorInfos.imag.dataId, force);\n        }\n        this.texData.delete(dataId);\n        return true;\n    }\n    releaseGPUData(dataId) {\n        const { texture, dtype, texShape, usage, isPacked, slice } = this.texData.get(dataId);\n        const key = slice && slice.origDataId || dataId;\n        const refCount = this.dataRefCount.get(key);\n        if (refCount > 1) {\n            this.dataRefCount.set(key, refCount - 1);\n        }\n        else {\n            this.dataRefCount.delete(key);\n            if (texture != null) {\n                this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n                this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n            }\n        }\n        const texData = this.texData.get(dataId);\n        texData.texture = null;\n        texData.texShape = null;\n        texData.isPacked = false;\n        texData.slice = null;\n    }\n    getTexture(dataId) {\n        this.uploadToGPU(dataId);\n        return this.texData.get(dataId).texture.texture;\n    }\n    /**\n     * Returns internal information for the specific data bucket. Used in unit\n     * tests.\n     */\n    getDataInfo(dataId) {\n        return this.texData.get(dataId);\n    }\n    /*\n    Tests whether all the inputs to an op are small and on the CPU. This heuristic\n    determines when it would be faster to execute a kernel on the CPU. WebGL\n    kernels opt into running this check and forwarding when appropriate.\n    TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n    sustainable strategy for optimizing backend execution of ops.\n     */\n    shouldExecuteOnCPU(inputs, sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD) {\n        return env().getBool('WEBGL_CPU_FORWARD') &&\n            inputs.every(input => this.texData.get(input.dataId).texture == null &&\n                util.sizeFromShape(input.shape) < sizeThreshold);\n    }\n    getGPGPUContext() {\n        return this.gpgpu;\n    }\n    where(condition) {\n        backend_util.warn('tf.where() in webgl locks the UI thread. ' +\n            'Call tf.whereAsync() instead');\n        const condVals = condition.dataSync();\n        return whereImpl(condition.shape, condVals);\n    }\n    packedUnaryOp(x, op, dtype) {\n        const program = new UnaryOpPackedProgram(x.shape, op);\n        const outInfo = this.compileAndRun(program, [x], dtype);\n        return engine().makeTensorFromTensorInfo(outInfo);\n    }\n    // TODO(msoulanille) remove this once the backend has been modularized\n    // a copy is needed here to break a circular dependency.\n    // Also remove the op from unary_op.\n    abs(x) {\n        // TODO: handle cases when x is complex.\n        if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n            const outValues = simpleAbsImplCPU(this.texData.get(x.dataId).values);\n            return this.makeOutput(x.shape, x.dtype, outValues);\n        }\n        if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n            return this.packedUnaryOp(x, unary_op.ABS, x.dtype);\n        }\n        const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n        const outInfo = this.compileAndRun(program, [x]);\n        return engine().makeTensorFromTensorInfo(outInfo);\n    }\n    makeTensorInfo(shape, dtype, values) {\n        let dataId;\n        if (dtype === 'string' && values != null && values.length > 0 &&\n            util.isString(values[0])) {\n            const encodedValues = values.map(d => util.encodeString(d));\n            dataId = this.write(encodedValues, shape, dtype);\n        }\n        else {\n            dataId = this.write(values, shape, dtype);\n        }\n        this.texData.get(dataId).usage = null;\n        return { dataId, shape, dtype };\n    }\n    makeOutput(shape, dtype, values) {\n        return engine().makeTensorFromTensorInfo(this.makeTensorInfo(shape, dtype, values), this);\n    }\n    unpackTensor(input) {\n        const program = new UnpackProgram(input.shape);\n        return this.runWebGLProgram(program, [input], input.dtype);\n    }\n    packTensor(input) {\n        const program = new PackProgram(input.shape);\n        const preventEagerUnpackingOutput = true;\n        return this.runWebGLProgram(program, [input], input.dtype, null /* customUniformValues */, preventEagerUnpackingOutput);\n    }\n    packedReshape(input, afterShape) {\n        const input3DShape = [\n            webgl_util.getBatchDim(input.shape),\n            ...webgl_util.getRowsCols(input.shape)\n        ];\n        const input3D = {\n            dtype: input.dtype,\n            shape: input3DShape,\n            dataId: input.dataId\n        };\n        const afterShapeAs3D = [\n            webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)\n        ];\n        const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n        const preventEagerUnpackingOfOutput = true;\n        const customValues = [input3DShape];\n        const output = this.runWebGLProgram(program, [input3D], input.dtype, customValues, preventEagerUnpackingOfOutput);\n        return { dataId: output.dataId, shape: afterShape, dtype: output.dtype };\n    }\n    decode(dataId, customTexShape) {\n        const texData = this.texData.get(dataId);\n        const { isPacked, shape, dtype } = texData;\n        if (customTexShape != null) {\n            const size = util.sizeFromShape(shape);\n            const texSize = customTexShape[0] * customTexShape[1] * 4;\n            util.assert(size <= texSize, () => 'customTexShape is too small. ' +\n                'Row * Column * 4 should be equal or larger than the ' +\n                'size of the tensor data.');\n        }\n        const shapeAs3D = webgl_util.getShapeAs3D(shape);\n        let program;\n        if (isPacked) {\n            program = new DecodeMatrixPackedProgram(shapeAs3D);\n        }\n        else {\n            program = new DecodeMatrixProgram(shapeAs3D);\n        }\n        const preventEagerUnpackingOfOutput = true;\n        const customValues = [customTexShape != null ? customTexShape :\n                tex_util.getDenseTexShape(shapeAs3D)];\n        const out = this.runWebGLProgram(program, [{ shape: shapeAs3D, dtype, dataId }], dtype, customValues, preventEagerUnpackingOfOutput, customTexShape);\n        return { dtype, shape, dataId: out.dataId };\n    }\n    runWebGLProgram(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput = false, customTexShape) {\n        const output = this.makeTensorInfo(program.outputShape, outputDtype);\n        const outData = this.texData.get(output.dataId);\n        if (program.packedOutput) {\n            outData.isPacked = true;\n        }\n        if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n            const texelShape = customTexShape != null ?\n                customTexShape :\n                tex_util.getDenseTexShape(program.outputShape);\n            // For a densely packed output, we explicitly set texShape\n            // so it doesn't get assigned later according to our typical packing\n            // scheme wherein a single texel can only contain values from adjacent\n            // rows/cols.\n            outData.texShape = texelShape.map(d => d * 2);\n        }\n        if (program.outTexUsage != null) {\n            outData.usage = program.outTexUsage;\n        }\n        if (util.sizeFromShape(output.shape) === 0) {\n            // Short-circuit the computation since the result is empty (has 0 in its\n            // shape).\n            outData.values =\n                util.getTypedArrayFromDType(output.dtype, 0);\n            return output;\n        }\n        const dataToDispose = [];\n        const inputsData = inputs.map(input => {\n            if (input.dtype === 'complex64') {\n                throw new Error(`GPGPUProgram does not support complex64 input. For complex64 ` +\n                    `dtypes, please separate the program into real and imaginary ` +\n                    `parts.`);\n            }\n            let texData = this.texData.get(input.dataId);\n            if (texData.texture == null) {\n                if (!program.packedInputs &&\n                    util.sizeFromShape(input.shape) <=\n                        env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n                    // Upload small tensors that live on the CPU as uniforms, not as\n                    // textures. Do this only when the environment supports 32bit floats\n                    // due to problems when comparing 16bit floats with 32bit floats.\n                    // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n                    // possible for packed shaders to sample from uniforms.\n                    return {\n                        shape: input.shape,\n                        texData: null,\n                        isUniform: true,\n                        uniformValues: texData.values\n                    };\n                }\n                // This ensures that if a packed program's inputs have not yet been\n                // uploaded to the GPU, they get uploaded as packed right off the bat.\n                if (program.packedInputs) {\n                    texData.isPacked = true;\n                    texData.shape = input.shape;\n                }\n            }\n            this.uploadToGPU(input.dataId);\n            if (!!texData.isPacked !== !!program.packedInputs) {\n                input = texData.isPacked ? this.unpackTensor(input) :\n                    this.packTensor(input);\n                dataToDispose.push(input);\n                texData = this.texData.get(input.dataId);\n            }\n            else if (texData.isPacked &&\n                !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n                // This is a special case where a texture exists for a tensor\n                // but the shapes are incompatible (due to packing constraints) because\n                // the tensor did not have a chance to go through the packed reshape\n                // shader. This only happens when we reshape the *same* tensor to form\n                // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n                // case will disappear once packed uploading is the default.\n                const savedInput = input;\n                const targetShape = input.shape;\n                input.shape = texData.shape;\n                input = this.packedReshape(input, targetShape);\n                dataToDispose.push(input);\n                texData = this.texData.get(input.dataId);\n                savedInput.shape = targetShape;\n            }\n            return { shape: input.shape, texData, isUniform: false };\n        });\n        this.uploadToGPU(output.dataId);\n        const outputData = { shape: output.shape, texData: outData, isUniform: false };\n        const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n        const binary = this.getAndSaveBinary(key, () => {\n            return gpgpu_math.compileProgram(this.gpgpu, program, inputsData, outputData);\n        });\n        const shouldTimeProgram = this.activeTimers != null;\n        let query;\n        if (shouldTimeProgram) {\n            query = this.startTimer();\n        }\n        if (!env().get('ENGINE_COMPILE_ONLY')) {\n            gpgpu_math.runProgram(this.gpgpu, binary, inputsData, outputData, customUniformValues);\n        }\n        dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n        if (shouldTimeProgram) {\n            query = this.endTimer(query);\n            this.activeTimers.push({ name: program.constructor.name, query: this.getQueryTime(query) });\n        }\n        const glFlushThreshold = env().get('WEBGL_FLUSH_THRESHOLD');\n        // Manually GL flush requested\n        if (glFlushThreshold > 0) {\n            const time = util.now();\n            if ((time - this.lastGlFlushTime) > glFlushThreshold) {\n                this.gpgpu.gl.flush();\n                this.lastGlFlushTime = time;\n            }\n        }\n        if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked &&\n            preventEagerUnpackingOfOutput === false) {\n            const unpacked = this.unpackTensor(output);\n            this.disposeIntermediateTensorInfo(output);\n            return unpacked;\n        }\n        return output;\n    }\n    compileAndRun(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput = false) {\n        outputDtype = outputDtype || inputs[0].dtype;\n        const outInfo = this.runWebGLProgram(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput);\n        return outInfo;\n    }\n    getAndSaveBinary(key, getBinary) {\n        if (!(key in this.binaryCache)) {\n            this.binaryCache[key] = getBinary();\n        }\n        return this.binaryCache[key];\n    }\n    getTextureManager() {\n        return this.textureManager;\n    }\n    dispose() {\n        if (this.disposed) {\n            return;\n        }\n        // Avoid disposing the compiled webgl programs during unit testing because\n        // it slows down test execution.\n        if (!env().getBool('IS_TEST')) {\n            const allKeys = Object.keys(this.binaryCache);\n            allKeys.forEach(key => {\n                this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n                delete this.binaryCache[key];\n            });\n        }\n        this.textureManager.dispose();\n        if (this.canvas != null &&\n            (typeof (HTMLCanvasElement) !== 'undefined' &&\n                this.canvas instanceof HTMLCanvasElement)) {\n            this.canvas.remove();\n        }\n        else {\n            this.canvas = null;\n        }\n        if (this.gpgpuCreatedLocally) {\n            this.gpgpu.program = null;\n            this.gpgpu.dispose();\n        }\n        this.disposed = true;\n    }\n    floatPrecision() {\n        if (this.floatPrecisionValue == null) {\n            this.floatPrecisionValue = tidy(() => {\n                if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n                    // Momentarily switching DEBUG flag to false so we don't throw an\n                    // error trying to upload a small value.\n                    const debugFlag = env().getBool('DEBUG');\n                    env().set('DEBUG', false);\n                    const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n                    env().set('DEBUG', debugFlag);\n                    if (underflowCheckValue > 0) {\n                        return 32;\n                    }\n                }\n                return 16;\n            });\n        }\n        return this.floatPrecisionValue;\n    }\n    /** Returns the smallest representable number.  */\n    epsilon() {\n        return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n    }\n    uploadToGPU(dataId) {\n        const texData = this.texData.get(dataId);\n        const { shape, dtype, values, texture, usage, isPacked } = texData;\n        if (texture != null) {\n            // Array is already on GPU. No-op.\n            return;\n        }\n        const shouldTimeProgram = this.activeTimers != null;\n        let start;\n        if (shouldTimeProgram) {\n            start = util.now();\n        }\n        let texShape = texData.texShape;\n        if (texShape == null) {\n            // This texShape may not be the final texture shape. For packed or dense\n            // textures, the texShape will be changed when textures are created.\n            texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n            texData.texShape = texShape;\n        }\n        if (values != null) {\n            const shapeAs3D = webgl_util.getShapeAs3D(shape);\n            let program;\n            let width = texShape[1], height = texShape[0];\n            const isByteArray = values instanceof Uint8Array || values instanceof Uint8ClampedArray;\n            // texture for float array is PhysicalTextureType.PACKED_2X2_FLOAT32, we\n            // need to make sure the upload uses the same packed size\n            if (isPacked || !isByteArray) {\n                [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(texShape[0], texShape[1]);\n            }\n            if (isPacked) {\n                program = new EncodeMatrixPackedProgram(shapeAs3D, isByteArray);\n            }\n            else {\n                program = new EncodeMatrixProgram(shapeAs3D, isByteArray);\n            }\n            // TexShape for float array needs to be the original shape, which byte\n            // array needs to be packed size. This allow the data upload shape to be\n            // matched with texture creation logic.\n            const tempDenseInputTexShape = isByteArray ? [height, width] : texShape;\n            const tempDenseInputHandle = this.makeTensorInfo(tempDenseInputTexShape, dtype);\n            const tempDenseInputTexData = this.texData.get(tempDenseInputHandle.dataId);\n            if (isByteArray) {\n                tempDenseInputTexData.usage = TextureUsage.PIXELS;\n            }\n            else {\n                tempDenseInputTexData.usage = TextureUsage.UPLOAD;\n            }\n            tempDenseInputTexData.texShape = tempDenseInputTexShape;\n            this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(tempDenseInputHandle.dataId), width, height, values);\n            const customValues = [[height, width]];\n            // We want the output to remain packed regardless of the value of\n            // WEBGL_PACK.\n            const preventEagerUnpacking = true;\n            const encodedOutputTarget = this.runWebGLProgram(program, [tempDenseInputHandle], dtype, customValues, preventEagerUnpacking);\n            // Have the original texture assume the identity of the encoded output.\n            const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n            texData.texShape = outputTexData.texShape;\n            texData.isPacked = outputTexData.isPacked;\n            texData.usage = outputTexData.usage;\n            if (!env().get('ENGINE_COMPILE_ONLY')) {\n                texData.texture = outputTexData.texture;\n                // Once uploaded, don't store the values on cpu.\n                texData.values = null;\n                this.texData.delete(encodedOutputTarget.dataId);\n            }\n            else {\n                this.disposeData(encodedOutputTarget.dataId);\n            }\n            this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n            if (shouldTimeProgram) {\n                this.uploadWaitMs += util.now() - start;\n            }\n        }\n        else {\n            const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n            texData.texture = newTexture;\n        }\n    }\n    convertAndCacheOnCPU(dataId, float32Values) {\n        const texData = this.texData.get(dataId);\n        const { dtype } = texData;\n        this.releaseGPUData(dataId);\n        if (float32Values != null) {\n            texData.values = float32ToTypedArray(float32Values, dtype);\n        }\n        return texData.values;\n    }\n    acquireTexture(texShape, texType, dtype, isPacked) {\n        this.numBytesInGPU += this.computeBytes(texShape, dtype);\n        if (!this.warnedAboutMemory &&\n            this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n            const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n            this.warnedAboutMemory = true;\n            console.warn(`High memory usage in GPU: ${mb} MB, ` +\n                `most likely due to a memory leak`);\n        }\n        return this.textureManager.acquireTexture(texShape, texType, isPacked);\n    }\n    computeBytes(shape, dtype) {\n        return shape[0] * shape[1] * util.bytesPerElement(dtype);\n    }\n    checkCompileCompletion() {\n        for (const [, binary] of Object.entries(this.binaryCache)) {\n            this.checkCompletion_(binary);\n        }\n    }\n    async checkCompileCompletionAsync() {\n        const ps = [];\n        if (this.gpgpu.parallelCompilationExtension) {\n            for (const [, binary] of Object.entries(this.binaryCache)) {\n                ps.push(this.checkCompletionAsync_(binary));\n            }\n            return Promise.all(ps);\n        }\n        else {\n            for (const [, binary] of Object.entries(this.binaryCache)) {\n                const p = new Promise((resolve) => {\n                    try {\n                        this.checkCompletion_(binary);\n                        resolve(true);\n                    }\n                    catch (error) {\n                        throw error;\n                    }\n                });\n                ps.push(p);\n            }\n            return Promise.all(ps);\n        }\n    }\n    async checkCompletionAsync_(binary) {\n        if (this.gpgpu.gl.getProgramParameter(binary.webGLProgram, this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)) {\n            return this.checkCompletion_(binary);\n        }\n        else {\n            await nextFrame();\n            return this.checkCompletionAsync_(binary);\n        }\n    }\n    checkCompletion_(binary) {\n        if (this.gpgpu.gl.getProgramParameter(binary.webGLProgram, this.gpgpu.gl.LINK_STATUS) === false) {\n            console.log(this.gpgpu.gl.getProgramInfoLog(binary.webGLProgram));\n            if (this.gpgpu.gl.getShaderParameter(binary.fragmentShader, this.gpgpu.gl.COMPILE_STATUS) === false) {\n                webgl_util.logShaderSourceAndInfoLog(binary.source, this.gpgpu.gl.getShaderInfoLog(binary.fragmentShader));\n                throw new Error('Failed to compile fragment shader.');\n            }\n            throw new Error('Failed to link vertex and fragment shaders.');\n        }\n        return true;\n    }\n    getUniformLocations() {\n        for (const [, binary] of Object.entries(this.binaryCache)) {\n            const { uniformLocations, customUniformLocations, infLoc, nanLoc, inShapesLocations, inTexShapesLocations, outShapeLocation, outShapeStridesLocation, outTexShapeLocation } = getUniformLocations(this.gpgpu, binary.program, binary.webGLProgram);\n            binary.uniformLocations = uniformLocations;\n            binary.customUniformLocations = customUniformLocations;\n            binary.infLoc = infLoc;\n            binary.nanLoc = nanLoc;\n            binary.inShapesLocations = inShapesLocations;\n            binary.inTexShapesLocations = inTexShapesLocations;\n            binary.outShapeLocation = outShapeLocation;\n            binary.outShapeStridesLocation = outShapeStridesLocation;\n            binary.outTexShapeLocation = outTexShapeLocation;\n        }\n    }\n}\nMathBackendWebGL.nextDataId = 0;\nfunction float32ToTypedArray(a, dtype) {\n    if (dtype === 'float32' || dtype === 'complex64') {\n        return a;\n    }\n    else if (dtype === 'int32' || dtype === 'bool') {\n        const result = (dtype === 'int32') ? new Int32Array(a.length) :\n            new Uint8Array(a.length);\n        for (let i = 0; i < result.length; ++i) {\n            result[i] = Math.round(a[i]);\n        }\n        return result;\n    }\n    else {\n        throw new Error(`Unknown dtype ${dtype}`);\n    }\n}\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAP;AACA,SAASA,YAAT,EAAuBC,MAAvB,EAA+BC,WAA/B,EAA4CC,MAA5C,EAAoDC,GAApD,EAAyDC,YAAzD,EAAuEC,aAAvE,EAAsFC,SAAtF,EAAiGC,MAAjG,EAAyGC,IAAzG,EAA+GC,IAA/G,QAA2H,uBAA3H;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,SAASC,mBAAT,QAAoC,qBAApC;AACA,SAASC,yBAAT,QAA0C,4BAA1C;AACA,SAASC,kBAAT,QAAmC,oBAAnC;AACA,SAASC,wBAAT,QAAyC,2BAAzC;AACA,SAASC,mBAAT,QAAoC,qBAApC;AACA,SAASC,yBAAT,QAA0C,4BAA1C;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,OAAO,KAAKC,UAAZ,MAA4B,cAA5B;AACA,SAASC,mBAAT,QAAoC,cAApC;AACA,SAASC,gBAAT,QAAiC,uBAAjC;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,SAASC,oBAAT,QAAqC,sBAArC;AACA,OAAO,KAAKC,QAAZ,MAA0B,YAA1B;AACA,SAASC,YAAT,QAA6B,YAA7B;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,OAAO,KAAKC,QAAZ,MAA0B,eAA1B;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,oBAAT,QAAqC,sBAArC;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,OAAO,KAAKC,UAAZ,MAA4B,cAA5B;AACA,MAAMC,SAAS,GAAG3B,YAAY,CAAC2B,SAA/B;AACA,OAAO,MAAMC,eAAe,GAAG,IAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,IAAxB;AACP,MAAMC,YAAY,GAAG,EAArB;AACA,OAAO,SAASC,cAAT,CAAwBC,YAAxB,EAAsC;EACzC,IAAIA,YAAY,IAAIF,YAApB,EAAkC;IAC9B,OAAOA,YAAY,CAACE,YAAD,CAAnB;EACH;;EACDF,YAAY,CAACE,YAAD,CAAZ,GAA6B,EAA7B;EACA,OAAOF,YAAY,CAACE,YAAD,CAAnB;AACH,C,CACD;AACA;;AACA,MAAMC,0BAA0B,GAAGlC,GAAG,GAAGmC,SAAN,CAAgB,4BAAhB,CAAnC,C,CACA;AACA;AACA;;AACA,MAAMC,sBAAsB,GAAG,GAA/B;;AACA,SAASC,kBAAT,GAA8B;EAC1B,IAAIrC,GAAG,GAAGsC,MAAN,CAAaC,MAAb,IAAuB,IAA3B,EAAiC;IAC7B,OAAO,IAAP,CAD6B,CAChB;EAChB;;EACD,OAAQvC,GAAG,GAAGsC,MAAN,CAAaC,MAAb,CAAoBC,MAApB,GAA6BxC,GAAG,GAAGsC,MAAN,CAAaC,MAAb,CAAoBE,KAAjD,GACJC,MAAM,CAACC,gBADJ,GAEHP,sBAFG,GAEsB,IAFtB,GAE6B,IAFpC;AAGH;;AACD,OAAO,MAAMQ,gBAAN,SAA+B1C,aAA/B,CAA6C;EAChD2C,WAAW,CAACC,WAAD,EAAc;IACrB,QADqB,CAErB;;IACA,KAAKC,WAAL,GAAmB,IAAIC,OAAJ,EAAnB,CAHqB,CAIrB;IACA;;IACA,KAAKC,eAAL,GAAuB,IAAIC,OAAJ,EAAvB,CANqB,CAOrB;IACA;;IACA,KAAKC,YAAL,GAAoB,IAAIH,OAAJ,EAApB;IACA,KAAKI,aAAL,GAAqB,CAArB,CAVqB,CAWrB;;IACA,KAAKC,YAAL,GAAoB,CAApB,CAZqB,CAarB;;IACA,KAAKC,cAAL,GAAsB,CAAtB,CAdqB,CAerB;;IACA,KAAKC,eAAL,GAAuB,CAAvB;IACA,KAAKC,iBAAL,GAAyB,KAAzB;IACA,KAAKC,cAAL,GAAsB,CAAtB;IACA,KAAKC,QAAL,GAAgB,KAAhB;;IACA,IAAI,CAAC1D,GAAG,GAAG2D,OAAN,CAAc,WAAd,CAAL,EAAiC;MAC7B,MAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN;IACH;;IACD,IAAIC,QAAJ;;IACA,IAAIf,WAAW,IAAI,IAAnB,EAAyB;MACrB,IAAIA,WAAW,YAAYhC,YAA3B,EAAyC;QACrC+C,QAAQ,GAAGf,WAAX;MACH,CAFD,MAGK;QACD,MAAMgB,EAAE,GAAGvD,eAAe,CAACP,GAAG,GAAGmC,SAAN,CAAgB,eAAhB,CAAD,EAAmCW,WAAnC,CAA1B;QACAe,QAAQ,GAAG,IAAI/C,YAAJ,CAAiBgD,EAAjB,CAAX;MACH;;MACD,KAAKC,WAAL,GAAmB,EAAnB;MACA,KAAKC,mBAAL,GAA2B,KAA3B;IACH,CAVD,MAWK;MACD,MAAMF,EAAE,GAAGvD,eAAe,CAACP,GAAG,GAAGmC,SAAN,CAAgB,eAAhB,CAAD,CAA1B;MACA0B,QAAQ,GAAG,IAAI/C,YAAJ,CAAiBgD,EAAjB,CAAX;MACA,KAAKC,WAAL,GAAmB/B,cAAc,CAAChC,GAAG,GAAGmC,SAAN,CAAgB,eAAhB,CAAD,CAAjC;MACA,KAAK6B,mBAAL,GAA2B,IAA3B;IACH;;IACD,KAAKC,KAAL,GAAaJ,QAAb;IACA,KAAKK,MAAL,GAAc,KAAKD,KAAL,CAAWH,EAAX,CAAcI,MAA5B;IACA,KAAKC,cAAL,GAAsB,IAAI7C,cAAJ,CAAmB,KAAK2C,KAAxB,CAAtB;IACA,KAAK5B,kBAAL,GAA0BA,kBAAkB,EAA5C;IACA,KAAK+B,OAAL,GAAe,IAAItE,WAAJ,CAAgB,IAAhB,EAAsBC,MAAM,EAA5B,CAAf;EACH;;EACDsE,UAAU,GAAG;IACT,OAAOzB,gBAAgB,CAACyB,UAAjB,EAAP;EACH;;EACDC,UAAU,GAAG;IACT,OAAO,KAAKF,OAAL,CAAaE,UAAb,KAA4B,KAAKb,cAAxC;EACH;;EACDc,KAAK,CAACC,MAAD,EAASC,KAAT,EAAgBC,KAAhB,EAAuB;IACxB,IAAI1E,GAAG,GAAG2D,OAAN,CAAc,gCAAd,KACA3D,GAAG,GAAG2D,OAAN,CAAc,OAAd,CADJ,EAC4B;MACxB,KAAKgB,sBAAL,CAA4BH,MAA5B;IACH;;IACD,IAAIE,KAAK,KAAK,WAAV,IAAyBF,MAAM,IAAI,IAAvC,EAA6C;MACzC,MAAM,IAAIZ,KAAJ,CAAW,qCAAD,GACX,oCADC,CAAN;IAEH;;IACD,MAAMgB,MAAM,GAAG;MAAEC,EAAE,EAAE,KAAKR,UAAL;IAAN,CAAf;IACA,KAAKD,OAAL,CAAaU,GAAb,CAAiBF,MAAjB,EAAyB;MAAEH,KAAF;MAASC,KAAT;MAAgBF,MAAhB;MAAwBO,KAAK,EAAE1D,YAAY,CAAC2D,MAA5C;MAAoDC,QAAQ,EAAE;IAA9D,CAAzB;IACA,OAAOL,MAAP;EACH;EACD;;;EACAK,QAAQ,CAACL,MAAD,EAAS;IACb,IAAI,KAAKR,OAAL,CAAac,GAAb,CAAiBN,MAAjB,CAAJ,EAA8B;MAC1B,MAAMO,UAAU,GAAG,KAAKf,OAAL,CAAagB,GAAb,CAAiBR,MAAjB,CAAnB;MACA,OAAOO,UAAU,CAACF,QAAlB;IACH;;IACD,OAAO,CAAP;EACH;EACD;;;EACAI,MAAM,CAACT,MAAD,EAAS;IACX,MAAMR,OAAO,GAAG,KAAKA,OAAL,CAAagB,GAAb,CAAiBR,MAAjB,CAAhB;IACAR,OAAO,CAACa,QAAR;EACH;EACD;;;EACAK,MAAM,CAACV,MAAD,EAAS;IACX,IAAI,KAAKR,OAAL,CAAac,GAAb,CAAiBN,MAAjB,CAAJ,EAA8B;MAC1B,MAAMR,OAAO,GAAG,KAAKA,OAAL,CAAagB,GAAb,CAAiBR,MAAjB,CAAhB;MACAR,OAAO,CAACa,QAAR;IACH;EACJ;;EACDM,IAAI,CAACX,MAAD,EAASJ,MAAT,EAAiBC,KAAjB,EAAwBC,KAAxB,EAA+BO,QAA/B,EAAyC;IACzC,IAAIjF,GAAG,GAAG2D,OAAN,CAAc,OAAd,CAAJ,EAA4B;MACxB,KAAKgB,sBAAL,CAA4BH,MAA5B;IACH;;IACD,IAAIE,KAAK,KAAK,WAAd,EAA2B;MACvB,MAAM,IAAId,KAAJ,CAAW,qCAAD,GACX,oCADC,CAAN;IAEH;;IACD,KAAKQ,OAAL,CAAaU,GAAb,CAAiBF,MAAjB,EAAyB;MAAEH,KAAF;MAASC,KAAT;MAAgBF,MAAhB;MAAwBO,KAAK,EAAE1D,YAAY,CAAC2D,MAA5C;MAAoDC;IAApD,CAAzB;EACH;;EACDO,6BAA6B,CAACC,UAAD,EAAa;IACtC,KAAKC,WAAL,CAAiBD,UAAU,CAACb,MAA5B;EACH;;EACDe,QAAQ,CAACf,MAAD,EAAS;IACb,MAAMR,OAAO,GAAG,KAAKA,OAAL,CAAagB,GAAb,CAAiBR,MAAjB,CAAhB;IACA,MAAM;MAAEJ,MAAF;MAAUE,KAAV;MAAiBkB,kBAAjB;MAAqCC,KAArC;MAA4CpB,KAA5C;MAAmDqB;IAAnD,IAAgE1B,OAAtE,CAFa,CAGb;IACA;IACA;;IACA,IAAIyB,KAAK,IAAI,IAAb,EAAmB;MACf,IAAIE,OAAJ;;MACA,IAAID,QAAJ,EAAc;QACVC,OAAO,GAAG,IAAItE,oBAAJ,CAAyBgD,KAAzB,EAAgClD,QAAQ,CAACyE,KAAzC,CAAV;MACH,CAFD,MAGK;QACDD,OAAO,GAAG,IAAIvE,cAAJ,CAAmBiD,KAAnB,EAA0BlD,QAAQ,CAACyE,KAAnC,CAAV;MACH;;MACD,MAAMC,GAAG,GAAG,KAAKC,eAAL,CAAqBH,OAArB,EAA8B,CAAC;QAAEnB,MAAF;QAAUH,KAAV;QAAiBC;MAAjB,CAAD,CAA9B,EAA0DA,KAA1D,CAAZ;MACA,MAAMyB,IAAI,GAAG,KAAKR,QAAL,CAAcM,GAAG,CAACrB,MAAlB,CAAb;MACA,KAAKY,6BAAL,CAAmCS,GAAnC;MACA,OAAOE,IAAP;IACH;;IACD,IAAI3B,MAAM,IAAI,IAAd,EAAoB;MAChB,OAAO,KAAK4B,oBAAL,CAA0BxB,MAA1B,CAAP;IACH;;IACD,IAAIF,KAAK,KAAK,QAAd,EAAwB;MACpB,OAAOF,MAAP;IACH;;IACD,MAAM6B,iBAAiB,GAAG,KAAKC,YAAL,IAAqB,IAA/C;IACA,IAAIC,KAAJ;;IACA,IAAIF,iBAAJ,EAAuB;MACnBE,KAAK,GAAGjG,IAAI,CAACkG,GAAL,EAAR;IACH;;IACD,IAAIC,MAAJ;;IACA,IAAI/B,KAAK,KAAK,WAAd,EAA2B;MACvB,MAAMgC,UAAU,GAAG,KAAKf,QAAL,CAAcC,kBAAkB,CAACe,IAAnB,CAAwB/B,MAAtC,CAAnB;MACA,MAAMgC,UAAU,GAAG,KAAKjB,QAAL,CAAcC,kBAAkB,CAACiB,IAAnB,CAAwBjC,MAAtC,CAAnB;MACA6B,MAAM,GAAG7G,YAAY,CAACkH,sBAAb,CAAoCJ,UAApC,EAAgDE,UAAhD,CAAT;IACH,CAJD,MAKK;MACDH,MAAM,GAAG,KAAKM,oBAAL,CAA0BnC,MAA1B,CAAT;IACH;;IACD,IAAIyB,iBAAJ,EAAuB;MACnB,KAAK/C,cAAL,IAAuBhD,IAAI,CAACkG,GAAL,KAAaD,KAApC;IACH;;IACD,OAAO,KAAKH,oBAAL,CAA0BxB,MAA1B,EAAkC6B,MAAlC,CAAP;EACH;;EACKO,IAAI,CAACpC,MAAD,EAAS;IAAA;;IAAA;MACf,IAAI,KAAI,CAAC7B,WAAL,CAAiBmC,GAAjB,CAAqBN,MAArB,CAAJ,EAAkC;QAC9B,MAAMqC,WAAW,GAAG,KAAI,CAAClE,WAAL,CAAiBqC,GAAjB,CAAqBR,MAArB,CAApB;;QACA,OAAO,IAAIsC,OAAJ,CAAYC,OAAO,IAAIF,WAAW,CAACG,IAAZ,CAAiBD,OAAjB,CAAvB,CAAP;MACH;;MACD,MAAM/C,OAAO,GAAG,KAAI,CAACA,OAAL,CAAagB,GAAb,CAAiBR,MAAjB,CAAhB;;MACA,MAAM;QAAEJ,MAAF;QAAUC,KAAV;QAAiBoB,KAAjB;QAAwBnB,KAAxB;QAA+BkB,kBAA/B;QAAmDE;MAAnD,IAAgE1B,OAAtE,CANe,CAOf;MACA;MACA;;MACA,IAAIyB,KAAK,IAAI,IAAb,EAAmB;QACf,IAAIE,OAAJ;;QACA,IAAID,QAAJ,EAAc;UACVC,OAAO,GAAG,IAAItE,oBAAJ,CAAyBgD,KAAzB,EAAgClD,QAAQ,CAACyE,KAAzC,CAAV;QACH,CAFD,MAGK;UACDD,OAAO,GAAG,IAAIvE,cAAJ,CAAmBiD,KAAnB,EAA0BlD,QAAQ,CAACyE,KAAnC,CAAV;QACH;;QACD,MAAMC,GAAG,GAAG,KAAI,CAACC,eAAL,CAAqBH,OAArB,EAA8B,CAAC;UAAEnB,MAAF;UAAUH,KAAV;UAAiBC;QAAjB,CAAD,CAA9B,EAA0DA,KAA1D,CAAZ;;QACA,MAAMyB,IAAI,GAAG,KAAI,CAACa,IAAL,CAAUf,GAAG,CAACrB,MAAd,CAAb;;QACA,KAAI,CAACY,6BAAL,CAAmCS,GAAnC;;QACA,OAAOE,IAAP;MACH;;MACD,IAAI3B,MAAM,IAAI,IAAd,EAAoB;QAChB,OAAO,KAAI,CAAC4B,oBAAL,CAA0BxB,MAA1B,CAAP;MACH;;MACD,IAAI5E,GAAG,GAAG2D,OAAN,CAAc,OAAd,CAAJ,EAA4B;QACxB;QACA;QACA;QACA,IAAI,CAAC3D,GAAG,GAAG2D,OAAN,CAAc,8BAAd,CAAD,IACA3D,GAAG,GAAGmC,SAAN,CAAgB,eAAhB,MAAqC,CADzC,EAC4C;UACxC,MAAM,IAAIyB,KAAJ,CAAW,4DAAD,GACX,oCADC,CAAN;QAEH;MACJ;;MACD,IAAI/D,MAAM,GAAG,IAAb;MACA,IAAIwH,iBAAJ;;MACA,IAAI3C,KAAK,KAAK,WAAV,IAAyB1E,GAAG,GAAGoF,GAAN,CAAU,wBAAV,CAA7B,EAAkE;QAC9D;QACAiC,iBAAiB,GAAG,KAAI,CAACC,MAAL,CAAY1C,MAAZ,CAApB;;QACA,MAAM2C,OAAO,GAAG,KAAI,CAACnD,OAAL,CAAagB,GAAb,CAAiBiC,iBAAiB,CAACzC,MAAnC,CAAhB;;QACA/E,MAAM,GAAG,KAAI,CAACoE,KAAL,CAAWuD,uBAAX,CAAmCD,OAAO,CAACE,OAAR,CAAgBA,OAAnD,EAA4D,GAAGrG,QAAQ,CAACsG,gBAAT,CAA0BjD,KAA1B,CAA/D,CAAT;MACH;;MACD,KAAI,CAAC1B,WAAL,CAAiB+B,GAAjB,CAAqBF,MAArB,EAA6B,EAA7B;;MACA,IAAIF,KAAK,KAAK,WAAd,EAA2B;QACvB;QACA,MAAM,KAAI,CAACT,KAAL,CAAW0D,qBAAX,EAAN;MACH,CAhDc,CAiDf;;;MACA,IAAIC,IAAJ;;MACA,IAAIlD,KAAK,KAAK,WAAd,EAA2B;QACvB,MAAMmD,EAAE,SAASX,OAAO,CAACY,GAAR,CAAY,CACzB,KAAI,CAACd,IAAL,CAAUpB,kBAAkB,CAACe,IAAnB,CAAwB/B,MAAlC,CADyB,EAEzB,KAAI,CAACoC,IAAL,CAAUpB,kBAAkB,CAACiB,IAAnB,CAAwBjC,MAAlC,CAFyB,CAAZ,CAAjB;QAIA,MAAM8B,UAAU,GAAGmB,EAAE,CAAC,CAAD,CAArB;QACA,MAAMjB,UAAU,GAAGiB,EAAE,CAAC,CAAD,CAArB;QACAD,IAAI,GAAGhI,YAAY,CAACkH,sBAAb,CAAoCJ,UAApC,EAAgDE,UAAhD,CAAP;MACH,CARD,MASK,IAAI/G,MAAM,IAAI,IAAd,EAAoB;QACrB+H,IAAI,GAAG,KAAI,CAACb,oBAAL,CAA0BnC,MAA1B,CAAP;MACH,CAFI,MAGA;QACD,MAAMmD,IAAI,GAAGzH,IAAI,CAAC0H,aAAL,CAAmBvD,KAAnB,CAAb;QACAmD,IAAI,GAAG,KAAI,CAAC3D,KAAL,CAAWgE,+BAAX,CAA2CpI,MAA3C,EAAmDkI,IAAnD,CAAP;MACH;;MACD,IAAIV,iBAAiB,IAAI,IAAzB,EAA+B;QAC3B,KAAI,CAAC7B,6BAAL,CAAmC6B,iBAAnC;MACH;;MACD,IAAIxH,MAAM,IAAI,IAAd,EAAoB;QAChB,MAAMiE,EAAE,GAAG,KAAI,CAACG,KAAL,CAAWH,EAAtB;QACAnC,UAAU,CAACuG,YAAX,CAAwBpE,EAAxB,EAA4B,MAAMA,EAAE,CAACqE,YAAH,CAAgBtI,MAAhB,CAAlC;MACH;;MACD,MAAMuI,SAAS,GAAG,KAAI,CAAChC,oBAAL,CAA0BxB,MAA1B,EAAkCgD,IAAlC,CAAlB;;MACA,MAAMX,WAAW,GAAG,KAAI,CAAClE,WAAL,CAAiBqC,GAAjB,CAAqBR,MAArB,CAApB;;MACA,KAAI,CAAC7B,WAAL,CAAiBsF,MAAjB,CAAwBzD,MAAxB,EA5Ee,CA6Ef;;;MACAqC,WAAW,CAACqB,OAAZ,CAAoBnB,OAAO,IAAIA,OAAO,CAACiB,SAAD,CAAtC;;MACA,IAAI,KAAI,CAACnF,eAAL,CAAqBiC,GAArB,CAAyBN,MAAzB,CAAJ,EAAsC;QAClC,KAAI,CAAC3B,eAAL,CAAqBoF,MAArB,CAA4BzD,MAA5B;;QACA,IAAI,KAAI,CAACc,WAAL,CAAiBd,MAAjB,CAAJ,EAA8B;UAC1B7E,MAAM,GAAGwI,YAAT,CAAsB3D,MAAtB,EAA8B,KAA9B;QACH;;QACD,KAAI,CAACnB,cAAL;MACH;;MACD,OAAO2E,SAAP;IAtFe;EAuFlB;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACII,SAAS,CAAC5D,MAAD,EAAS6D,OAAO,GAAG,EAAnB,EAAuB;IAC5B,MAAMrE,OAAO,GAAG,KAAKA,OAAL,CAAagB,GAAb,CAAiBR,MAAjB,CAAhB;IACA,MAAM;MAAEJ,MAAF;MAAUC,KAAV;MAAiBoB,KAAjB;MAAwBnB,KAAxB;MAA+BoB,QAA/B;MAAyC2B;IAAzC,IAAqDrD,OAA3D;;IACA,IAAIM,KAAK,KAAK,WAAd,EAA2B;MACvB,MAAM,IAAId,KAAJ,CAAU,uDAAV,CAAN;IACH,CAL2B,CAM5B;IACA;IACA;;;IACA,IAAIiC,KAAK,IAAI,IAAb,EAAmB;MACf,IAAIE,OAAJ;;MACA,IAAID,QAAJ,EAAc;QACVC,OAAO,GAAG,IAAItE,oBAAJ,CAAyBgD,KAAzB,EAAgClD,QAAQ,CAACyE,KAAzC,CAAV;MACH,CAFD,MAGK;QACDD,OAAO,GAAG,IAAIvE,cAAJ,CAAmBiD,KAAnB,EAA0BlD,QAAQ,CAACyE,KAAnC,CAAV;MACH;;MACD,MAAMC,GAAG,GAAG,KAAKC,eAAL,CAAqBH,OAArB,EAA8B,CAAC;QAAEnB,MAAF;QAAUH,KAAV;QAAiBC;MAAjB,CAAD,CAA9B,EAA0DA,KAA1D,CAAZ;MACA,MAAMgE,YAAY,GAAG,KAAKF,SAAL,CAAevC,GAAf,EAAoBwC,OAApB,CAArB;MACA,KAAKjD,6BAAL,CAAmCS,GAAnC;MACA,OAAOyC,YAAP;IACH;;IACD,IAAIjB,OAAO,IAAI,IAAf,EAAqB;MACjB,IAAIjD,MAAM,IAAI,IAAd,EAAoB;QAChB,MAAM,IAAIZ,KAAJ,CAAU,gCAAV,CAAN;MACH,CAFD,MAGK;QACD,MAAM,IAAIA,KAAJ,CAAU,iCAAV,CAAN;MACH;IACJ,CA7B2B,CA8B5B;;;IACA,MAAM+E,SAAS,GAAG,KAAKrB,MAAL,CAAY1C,MAAZ,EAAoB6D,OAAO,CAACG,cAA5B,CAAlB,CA/B4B,CAgC5B;;IACA,MAAMC,SAAS,GAAG9I,MAAM,GAAG+I,wBAAT,CAAkCH,SAAlC,CAAlB;IACA,MAAMpB,OAAO,GAAG,KAAKnD,OAAL,CAAagB,GAAb,CAAiBuD,SAAS,CAAC/D,MAA3B,CAAhB;IACA,OAAOmE,MAAM,CAACC,MAAP,CAAc;MAAEH;IAAF,CAAd,EAA6BtB,OAAO,CAACE,OAArC,CAAP;EACH;;EACDwB,UAAU,CAACC,CAAD,EAAI;IACV,MAAM/C,IAAI,GAAG,KAAKR,QAAL,CAAcuD,CAAC,CAACtE,MAAhB,CAAb;;IACA,IAAIsE,CAAC,CAACxE,KAAF,KAAY,QAAhB,EAA0B;MACtB,IAAI;QACA;QACA,MAAMyE,OAAO,GAAGhD,IAAI,CAACiD,GAAL,CAASC,CAAC,IAAI/I,IAAI,CAACgJ,YAAL,CAAkBD,CAAlB,CAAd,CAAhB;QACA,OAAOxJ,MAAM,CAACqJ,CAAC,CAACzE,KAAH,EAAUyE,CAAC,CAACxE,KAAZ,EAAmByE,OAAnB,CAAb;MACH,CAJD,CAKA,OAAOI,EAAP,EAAW;QACP,MAAM,IAAI3F,KAAJ,CAAU,kDAAV,CAAN;MACH;IACJ;;IACD,OAAO/D,MAAM,CAACqJ,CAAC,CAACzE,KAAH,EAAUyE,CAAC,CAACxE,KAAZ,EAAmByB,IAAnB,CAAb;EACH;;EACDxB,sBAAsB,CAACH,MAAD,EAAS;IAC3B,IAAIA,MAAM,IAAI,IAAd,EAAoB;MAChB;IACH;;IACD,KAAK,IAAIgF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhF,MAAM,CAACiF,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;MACpC,MAAME,GAAG,GAAGlF,MAAM,CAACgF,CAAD,CAAlB;;MACA,IAAI,CAAC7H,UAAU,CAACgI,gBAAX,CAA4BD,GAA5B,CAAL,EAAuC;QACnC,IAAI1J,GAAG,GAAG2D,OAAN,CAAc,8BAAd,CAAJ,EAAmD;UAC/C,MAAMC,KAAK,CAAE,aAAY8F,GAAI,mCAAjB,GACP,yDADO,GAEP,uDAFM,CAAX;QAGH;;QACD,MAAM9F,KAAK,CAAE,aAAY8F,GAAI,wCAAlB,CAAX;MACH;IACJ;EACJ;;EACD3C,oBAAoB,CAACnC,MAAD,EAAS;IACzB,MAAM;MAAEH,KAAF;MAASC,KAAT;MAAgBoB;IAAhB,IAA6B,KAAK1B,OAAL,CAAagB,GAAb,CAAiBR,MAAjB,CAAnC;IACA,MAAMmD,IAAI,GAAGzH,IAAI,CAAC0H,aAAL,CAAmBvD,KAAnB,CAAb;;IACA,IAAIzE,GAAG,GAAG2D,OAAN,CAAc,8BAAd,CAAJ,EAAmD;MAC/C,MAAMgF,SAAS,GAAG,KAAKrB,MAAL,CAAY1C,MAAZ,CAAlB;MACA,MAAM2C,OAAO,GAAG,KAAKnD,OAAL,CAAagB,GAAb,CAAiBuD,SAAS,CAAC/D,MAA3B,CAAhB;MACA,MAAMgD,IAAI,GAAG,KAAK3D,KAAL,CACR2F,+BADQ,CACwBrC,OAAO,CAACE,OAAR,CAAgBA,OADxC,EACiD,GAAGrG,QAAQ,CAACsG,gBAAT,CAA0BjD,KAA1B,CADpD,EAERoF,QAFQ,CAEC,CAFD,EAEI9B,IAFJ,CAAb;MAGA,KAAKvC,6BAAL,CAAmCmD,SAAnC;MACA,OAAOf,IAAP;IACH;;IACD,MAAMkC,sBAAsB,GAAG9J,GAAG,GAAG2D,OAAN,CAAc,YAAd,KAA+BmC,QAAQ,KAAK,IAA3E;IACA,MAAMiE,WAAW,GAAGD,sBAAsB,GAAGnI,UAAU,CAACqI,YAAX,CAAwBvF,KAAxB,CAAH,GAAoCA,KAA9E;IACA,MAAMsB,OAAO,GAAG+D,sBAAsB,GAClC,IAAInJ,wBAAJ,CAA6BoJ,WAA7B,CADkC,GAElC,IAAIrJ,kBAAJ,CAAuBqJ,WAAvB,CAFJ;IAGA,MAAME,MAAM,GAAG,KAAK/D,eAAL,CAAqBH,OAArB,EAA8B,CAAC;MAAEtB,KAAK,EAAEsF,WAAT;MAAsBrF,KAAtB;MAA6BE;IAA7B,CAAD,CAA9B,EAAuE,SAAvE,CAAf;IACA,MAAM2C,OAAO,GAAG,KAAKnD,OAAL,CAAagB,GAAb,CAAiB6E,MAAM,CAACrF,MAAxB,CAAhB;IACA,MAAMgD,IAAI,GAAG,KAAK3D,KAAL,CACRiG,+CADQ,CACwC3C,OAAO,CAACE,OAAR,CAAgBA,OADxD,EACiEF,OAAO,CAAC4C,QAAR,CAAiB,CAAjB,CADjE,EACsF5C,OAAO,CAAC4C,QAAR,CAAiB,CAAjB,CADtF,EAERN,QAFQ,CAEC,CAFD,EAEI9B,IAFJ,CAAb;IAGA,KAAKvC,6BAAL,CAAmCyE,MAAnC;IACA,OAAOrC,IAAP;EACH;;EACDwC,cAAc,GAAG;IACb,OAAOpK,GAAG,GAAGmC,SAAN,CAAgB,+CAAhB,IAAmE,CAA1E;EACH;;EACDkI,IAAI,CAACC,CAAD,EAAI;IAAA;;IACJ,MAAMC,eAAe,GAAG,KAAKjE,YAA7B;IACA,MAAMkE,eAAe,GAAG,EAAxB;IACA,IAAIC,aAAa,GAAG,KAApB;;IACA,IAAI,KAAKC,kBAAL,IAA2B,IAA/B,EAAqC;MACjC,KAAKA,kBAAL,GAA0BF,eAA1B;MACAC,aAAa,GAAG,IAAhB;IACH,CAHD,MAIK;MACD,KAAKnE,YAAL,CAAkBc,IAAlB,CAAuBoD,eAAvB;IACH;;IACD,KAAKlE,YAAL,GAAoBkE,eAApB;IACAF,CAAC,GAZG,CAaJ;;IACA,MAAMK,2BAA2B,GAAGrK,IAAI,CAACsK,OAAL,CAAa,KAAKtE,YAAL,CAAkB8C,GAAlB,CAAuBC,CAAD,IAAOA,CAAC,CAACwB,KAA/B,CAAb,EAC/BC,MAD+B,CACxBzB,CAAC,IAAIA,CAAC,IAAI,IADc,CAApC;IAEA,MAAM0B,yBAAyB,GAAGzK,IAAI,CAACsK,OAAL,CAAa,KAAKtE,YAAL,CAAkB8C,GAAlB,CAAuBC,CAAD,IAAOA,CAAC,CAAC2B,IAA/B,CAAb,EAC7BF,MAD6B,CACtBzB,CAAC,IAAIA,CAAC,IAAI,IADY,CAAlC;IAEA,KAAK/C,YAAL,GAAoBiE,eAApB;;IACA,IAAIE,aAAJ,EAAmB;MACf,KAAKC,kBAAL,GAA0B,IAA1B;IACH;;IACD,MAAMzE,GAAG,GAAG;MACR5C,YAAY,EAAE,KAAKA,YADX;MAERC,cAAc,EAAE,KAAKA,cAFb;MAGR2H,QAAQ,EAAE,IAHF;MAIRC,MAAM,EAAE,IAJA,CAIK;;IAJL,CAAZ;IAMA,OAAO,kBAAC,aAAY;MAChB,IAAIlL,GAAG,GAAGmC,SAAN,CAAgB,+CAAhB,IACA,CADJ,EACO;QACH,MAAM8I,QAAQ,SAAS/D,OAAO,CAACY,GAAR,CAAY6C,2BAAZ,CAAvB;QACA1E,GAAG,CAAC,UAAD,CAAH,GAAkB3F,IAAI,CAAC6K,GAAL,CAASF,QAAT,CAAlB;;QACAhF,GAAG,CAAC,qBAAD,CAAH,GAA6B,MAAMgF,QAAQ,CACtC7B,GAD8B,CAC1B,CAACC,CAAD,EAAIG,CAAJ,MAAW;UAAEwB,IAAI,EAAED,yBAAyB,CAACvB,CAAD,CAAjC;UAAsC4B,EAAE,EAAE/B;QAA1C,CAAX,CAD0B,EAE9BD,GAF8B,CAE1BC,CAAC,IAAK,GAAEA,CAAC,CAAC2B,IAAK,KAAI3B,CAAC,CAAC+B,EAAG,EAFE,EAG9BC,IAH8B,CAGzB,IAHyB,CAAnC;MAIH,CARD,MASK;QACDpF,GAAG,CAAC,UAAD,CAAH,GAAkB;UACdqF,KAAK,EAAE;QADO,CAAlB;MAGH;;MACD,MAAI,CAACjI,YAAL,GAAoB,CAApB;MACA,MAAI,CAACC,cAAL,GAAsB,CAAtB;MACA,OAAO2C,GAAP;IACH,CAlBM,GAAP;EAmBH;;EACDsF,MAAM,GAAG;IACL,OAAO;MACHC,UAAU,EAAE,KADT;MAEHpI,aAAa,EAAE,KAAKA,aAFjB;MAGHqI,sBAAsB,EAAE,KAAKtH,cAAL,CAAoBuH,iBAHzC;MAIHC,iBAAiB,EAAE,KAAKxH,cAAL,CAAoByH;IAJpC,CAAP;EAMH;;EACDC,UAAU,GAAG;IACT,IAAI7L,GAAG,GAAGmC,SAAN,CAAgB,+CAAhB,IAAmE,CAAvE,EAA0E;MACtE,OAAO,KAAK8B,KAAL,CAAW6H,UAAX,EAAP;IACH;;IACD,OAAO;MAAEC,OAAO,EAAEzL,IAAI,CAACkG,GAAL,EAAX;MAAuBwF,KAAK,EAAE;IAA9B,CAAP;EACH;;EACDC,QAAQ,CAACpB,KAAD,EAAQ;IACZ,IAAI7K,GAAG,GAAGmC,SAAN,CAAgB,+CAAhB,IAAmE,CAAvE,EAA0E;MACtE,KAAK8B,KAAL,CAAWiI,QAAX;MACA,OAAOrB,KAAP;IACH;;IACDA,KAAK,CAACmB,KAAN,GAAc1L,IAAI,CAACkG,GAAL,EAAd;IACA,OAAOqE,KAAP;EACH;;EACKsB,YAAY,CAACtB,KAAD,EAAQ;IAAA;;IAAA;MACtB,IAAI7K,GAAG,GAAGmC,SAAN,CAAgB,+CAAhB,IAAmE,CAAvE,EAA0E;QACtE,OAAO,MAAI,CAAC8B,KAAL,CAAWmI,sBAAX,CAAkCvB,KAAlC,CAAP;MACH;;MACD,MAAMwB,UAAU,GAAGxB,KAAnB;MACA,OAAOwB,UAAU,CAACL,KAAX,GAAmBK,UAAU,CAACN,OAArC;IALsB;EAMzB;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIrG,WAAW,CAACd,MAAD,EAAS0H,KAAK,GAAG,KAAjB,EAAwB;IAC/B,IAAI,KAAKrJ,eAAL,CAAqBiC,GAArB,CAAyBN,MAAzB,CAAJ,EAAsC;MAClC,OAAO,KAAP;IACH,CAH8B,CAI/B;;;IACA,IAAI,CAAC,KAAKR,OAAL,CAAac,GAAb,CAAiBN,MAAjB,CAAL,EAA+B;MAC3B,OAAO,IAAP;IACH,CAP8B,CAQ/B;IACA;IACA;;;IACA,IAAI0H,KAAJ,EAAW;MACP,KAAKlI,OAAL,CAAagB,GAAb,CAAiBR,MAAjB,EAAyBK,QAAzB,GAAoC,CAApC;IACH,CAFD,MAGK;MACD,KAAKb,OAAL,CAAagB,GAAb,CAAiBR,MAAjB,EAAyBK,QAAzB;IACH;;IACD,IAAI,CAACqH,KAAD,IAAU,KAAKlI,OAAL,CAAagB,GAAb,CAAiBR,MAAjB,EAAyBK,QAAzB,GAAoC,CAAlD,EAAqD;MACjD,OAAO,KAAP;IACH;;IACD,IAAI,KAAKlC,WAAL,CAAiBmC,GAAjB,CAAqBN,MAArB,CAAJ,EAAkC;MAC9B,KAAK3B,eAAL,CAAqBsJ,GAArB,CAAyB3H,MAAzB;MACA,KAAKnB,cAAL;MACA,OAAO,KAAP;IACH;;IACD,KAAK+I,cAAL,CAAoB5H,MAApB;IACA,MAAM;MAAEgB;IAAF,IAAyB,KAAKxB,OAAL,CAAagB,GAAb,CAAiBR,MAAjB,CAA/B;;IACA,IAAIgB,kBAAkB,IAAI,IAA1B,EAAgC;MAC5B,KAAKF,WAAL,CAAiBE,kBAAkB,CAACe,IAAnB,CAAwB/B,MAAzC,EAAiD0H,KAAjD;MACA,KAAK5G,WAAL,CAAiBE,kBAAkB,CAACiB,IAAnB,CAAwBjC,MAAzC,EAAiD0H,KAAjD;IACH;;IACD,KAAKlI,OAAL,CAAaiE,MAAb,CAAoBzD,MAApB;IACA,OAAO,IAAP;EACH;;EACD4H,cAAc,CAAC5H,MAAD,EAAS;IACnB,MAAM;MAAE6C,OAAF;MAAW/C,KAAX;MAAkByF,QAAlB;MAA4BpF,KAA5B;MAAmCe,QAAnC;MAA6CD;IAA7C,IAAuD,KAAKzB,OAAL,CAAagB,GAAb,CAAiBR,MAAjB,CAA7D;IACA,MAAM6H,GAAG,GAAG5G,KAAK,IAAIA,KAAK,CAAC6G,UAAf,IAA6B9H,MAAzC;IACA,MAAMK,QAAQ,GAAG,KAAK9B,YAAL,CAAkBiC,GAAlB,CAAsBqH,GAAtB,CAAjB;;IACA,IAAIxH,QAAQ,GAAG,CAAf,EAAkB;MACd,KAAK9B,YAAL,CAAkB2B,GAAlB,CAAsB2H,GAAtB,EAA2BxH,QAAQ,GAAG,CAAtC;IACH,CAFD,MAGK;MACD,KAAK9B,YAAL,CAAkBkF,MAAlB,CAAyBoE,GAAzB;;MACA,IAAIhF,OAAO,IAAI,IAAf,EAAqB;QACjB,KAAKrE,aAAL,IAAsB,KAAKuJ,YAAL,CAAkBxC,QAAlB,EAA4BzF,KAA5B,CAAtB;QACA,KAAKP,cAAL,CAAoByI,cAApB,CAAmCnF,OAAnC,EAA4C0C,QAA5C,EAAsDpF,KAAtD,EAA6De,QAA7D;MACH;IACJ;;IACD,MAAM1B,OAAO,GAAG,KAAKA,OAAL,CAAagB,GAAb,CAAiBR,MAAjB,CAAhB;IACAR,OAAO,CAACqD,OAAR,GAAkB,IAAlB;IACArD,OAAO,CAAC+F,QAAR,GAAmB,IAAnB;IACA/F,OAAO,CAAC0B,QAAR,GAAmB,KAAnB;IACA1B,OAAO,CAACyB,KAAR,GAAgB,IAAhB;EACH;;EACDgH,UAAU,CAACjI,MAAD,EAAS;IACf,KAAKkI,WAAL,CAAiBlI,MAAjB;IACA,OAAO,KAAKR,OAAL,CAAagB,GAAb,CAAiBR,MAAjB,EAAyB6C,OAAzB,CAAiCA,OAAxC;EACH;EACD;AACJ;AACA;AACA;;;EACIsF,WAAW,CAACnI,MAAD,EAAS;IAChB,OAAO,KAAKR,OAAL,CAAagB,GAAb,CAAiBR,MAAjB,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIoI,kBAAkB,CAACC,MAAD,EAASC,aAAa,GAAGhL,0BAAzB,EAAqD;IACnE,OAAOlC,GAAG,GAAG2D,OAAN,CAAc,mBAAd,KACHsJ,MAAM,CAACE,KAAP,CAAaC,KAAK,IAAI,KAAKhJ,OAAL,CAAagB,GAAb,CAAiBgI,KAAK,CAACxI,MAAvB,EAA+B6C,OAA/B,IAA0C,IAA1C,IAClBnH,IAAI,CAAC0H,aAAL,CAAmBoF,KAAK,CAAC3I,KAAzB,IAAkCyI,aADtC,CADJ;EAGH;;EACDG,eAAe,GAAG;IACd,OAAO,KAAKpJ,KAAZ;EACH;;EACDqJ,KAAK,CAACC,SAAD,EAAY;IACb3N,YAAY,CAAC4N,IAAb,CAAkB,8CACd,8BADJ;IAEA,MAAMC,QAAQ,GAAGF,SAAS,CAACG,QAAV,EAAjB;IACA,OAAO9L,SAAS,CAAC2L,SAAS,CAAC9I,KAAX,EAAkBgJ,QAAlB,CAAhB;EACH;;EACDE,aAAa,CAACC,CAAD,EAAIC,EAAJ,EAAQnJ,KAAR,EAAe;IACxB,MAAMqB,OAAO,GAAG,IAAItE,oBAAJ,CAAyBmM,CAAC,CAACnJ,KAA3B,EAAkCoJ,EAAlC,CAAhB;IACA,MAAMC,OAAO,GAAG,KAAKC,aAAL,CAAmBhI,OAAnB,EAA4B,CAAC6H,CAAD,CAA5B,EAAiClJ,KAAjC,CAAhB;IACA,OAAO3E,MAAM,GAAG+I,wBAAT,CAAkCgF,OAAlC,CAAP;EACH,CA/f+C,CAggBhD;EACA;EACA;;;EACAE,GAAG,CAACJ,CAAD,EAAI;IACH;IACA,IAAI,KAAKZ,kBAAL,CAAwB,CAACY,CAAD,CAAxB,KAAgCA,CAAC,CAAClJ,KAAF,KAAY,WAAhD,EAA6D;MACzD,MAAMuJ,SAAS,GAAGhN,gBAAgB,CAAC,KAAKmD,OAAL,CAAagB,GAAb,CAAiBwI,CAAC,CAAChJ,MAAnB,EAA2BJ,MAA5B,CAAlC;MACA,OAAO,KAAK0J,UAAL,CAAgBN,CAAC,CAACnJ,KAAlB,EAAyBmJ,CAAC,CAAClJ,KAA3B,EAAkCuJ,SAAlC,CAAP;IACH;;IACD,IAAIjO,GAAG,GAAG2D,OAAN,CAAc,6BAAd,CAAJ,EAAkD;MAC9C,OAAO,KAAKgK,aAAL,CAAmBC,CAAnB,EAAsBrM,QAAQ,CAAC4M,GAA/B,EAAoCP,CAAC,CAAClJ,KAAtC,CAAP;IACH;;IACD,MAAMqB,OAAO,GAAG,IAAIvE,cAAJ,CAAmBoM,CAAC,CAACnJ,KAArB,EAA4BlD,QAAQ,CAAC4M,GAArC,CAAhB;IACA,MAAML,OAAO,GAAG,KAAKC,aAAL,CAAmBhI,OAAnB,EAA4B,CAAC6H,CAAD,CAA5B,CAAhB;IACA,OAAO7N,MAAM,GAAG+I,wBAAT,CAAkCgF,OAAlC,CAAP;EACH;;EACDM,cAAc,CAAC3J,KAAD,EAAQC,KAAR,EAAeF,MAAf,EAAuB;IACjC,IAAII,MAAJ;;IACA,IAAIF,KAAK,KAAK,QAAV,IAAsBF,MAAM,IAAI,IAAhC,IAAwCA,MAAM,CAACiF,MAAP,GAAgB,CAAxD,IACAnJ,IAAI,CAAC+N,QAAL,CAAc7J,MAAM,CAAC,CAAD,CAApB,CADJ,EAC8B;MAC1B,MAAM8J,aAAa,GAAG9J,MAAM,CAAC4E,GAAP,CAAWC,CAAC,IAAI/I,IAAI,CAACiO,YAAL,CAAkBlF,CAAlB,CAAhB,CAAtB;MACAzE,MAAM,GAAG,KAAKL,KAAL,CAAW+J,aAAX,EAA0B7J,KAA1B,EAAiCC,KAAjC,CAAT;IACH,CAJD,MAKK;MACDE,MAAM,GAAG,KAAKL,KAAL,CAAWC,MAAX,EAAmBC,KAAnB,EAA0BC,KAA1B,CAAT;IACH;;IACD,KAAKN,OAAL,CAAagB,GAAb,CAAiBR,MAAjB,EAAyBG,KAAzB,GAAiC,IAAjC;IACA,OAAO;MAAEH,MAAF;MAAUH,KAAV;MAAiBC;IAAjB,CAAP;EACH;;EACDwJ,UAAU,CAACzJ,KAAD,EAAQC,KAAR,EAAeF,MAAf,EAAuB;IAC7B,OAAOzE,MAAM,GAAG+I,wBAAT,CAAkC,KAAKsF,cAAL,CAAoB3J,KAApB,EAA2BC,KAA3B,EAAkCF,MAAlC,CAAlC,EAA6E,IAA7E,CAAP;EACH;;EACDgK,YAAY,CAACpB,KAAD,EAAQ;IAChB,MAAMrH,OAAO,GAAG,IAAIrE,aAAJ,CAAkB0L,KAAK,CAAC3I,KAAxB,CAAhB;IACA,OAAO,KAAKyB,eAAL,CAAqBH,OAArB,EAA8B,CAACqH,KAAD,CAA9B,EAAuCA,KAAK,CAAC1I,KAA7C,CAAP;EACH;;EACD+J,UAAU,CAACrB,KAAD,EAAQ;IACd,MAAMrH,OAAO,GAAG,IAAI7E,WAAJ,CAAgBkM,KAAK,CAAC3I,KAAtB,CAAhB;IACA,MAAMiK,2BAA2B,GAAG,IAApC;IACA,OAAO,KAAKxI,eAAL,CAAqBH,OAArB,EAA8B,CAACqH,KAAD,CAA9B,EAAuCA,KAAK,CAAC1I,KAA7C,EAAoD;IAAK;IAAzD,EAAoFgK,2BAApF,CAAP;EACH;;EACDC,aAAa,CAACvB,KAAD,EAAQwB,UAAR,EAAoB;IAC7B,MAAMC,YAAY,GAAG,CACjBlN,UAAU,CAACmN,WAAX,CAAuB1B,KAAK,CAAC3I,KAA7B,CADiB,EAEjB,GAAG9C,UAAU,CAACoN,WAAX,CAAuB3B,KAAK,CAAC3I,KAA7B,CAFc,CAArB;IAIA,MAAMuK,OAAO,GAAG;MACZtK,KAAK,EAAE0I,KAAK,CAAC1I,KADD;MAEZD,KAAK,EAAEoK,YAFK;MAGZjK,MAAM,EAAEwI,KAAK,CAACxI;IAHF,CAAhB;IAKA,MAAMqK,cAAc,GAAG,CACnBtN,UAAU,CAACmN,WAAX,CAAuBF,UAAvB,CADmB,EACiB,GAAGjN,UAAU,CAACoN,WAAX,CAAuBH,UAAvB,CADpB,CAAvB;IAGA,MAAM7I,OAAO,GAAG,IAAI5E,oBAAJ,CAAyB8N,cAAzB,EAAyCJ,YAAzC,CAAhB;IACA,MAAMK,6BAA6B,GAAG,IAAtC;IACA,MAAMC,YAAY,GAAG,CAACN,YAAD,CAArB;IACA,MAAM5E,MAAM,GAAG,KAAK/D,eAAL,CAAqBH,OAArB,EAA8B,CAACiJ,OAAD,CAA9B,EAAyC5B,KAAK,CAAC1I,KAA/C,EAAsDyK,YAAtD,EAAoED,6BAApE,CAAf;IACA,OAAO;MAAEtK,MAAM,EAAEqF,MAAM,CAACrF,MAAjB;MAAyBH,KAAK,EAAEmK,UAAhC;MAA4ClK,KAAK,EAAEuF,MAAM,CAACvF;IAA1D,CAAP;EACH;;EACD4C,MAAM,CAAC1C,MAAD,EAASgE,cAAT,EAAyB;IAC3B,MAAMxE,OAAO,GAAG,KAAKA,OAAL,CAAagB,GAAb,CAAiBR,MAAjB,CAAhB;IACA,MAAM;MAAEkB,QAAF;MAAYrB,KAAZ;MAAmBC;IAAnB,IAA6BN,OAAnC;;IACA,IAAIwE,cAAc,IAAI,IAAtB,EAA4B;MACxB,MAAMb,IAAI,GAAGzH,IAAI,CAAC0H,aAAL,CAAmBvD,KAAnB,CAAb;MACA,MAAM2K,OAAO,GAAGxG,cAAc,CAAC,CAAD,CAAd,GAAoBA,cAAc,CAAC,CAAD,CAAlC,GAAwC,CAAxD;MACAtI,IAAI,CAAC+O,MAAL,CAAYtH,IAAI,IAAIqH,OAApB,EAA6B,MAAM,kCAC/B,sDAD+B,GAE/B,0BAFJ;IAGH;;IACD,MAAME,SAAS,GAAG3N,UAAU,CAACqI,YAAX,CAAwBvF,KAAxB,CAAlB;IACA,IAAIsB,OAAJ;;IACA,IAAID,QAAJ,EAAc;MACVC,OAAO,GAAG,IAAItF,yBAAJ,CAA8B6O,SAA9B,CAAV;IACH,CAFD,MAGK;MACDvJ,OAAO,GAAG,IAAIvF,mBAAJ,CAAwB8O,SAAxB,CAAV;IACH;;IACD,MAAMJ,6BAA6B,GAAG,IAAtC;IACA,MAAMC,YAAY,GAAG,CAACvG,cAAc,IAAI,IAAlB,GAAyBA,cAAzB,GACdxH,QAAQ,CAACsG,gBAAT,CAA0B4H,SAA1B,CADa,CAArB;IAEA,MAAMC,GAAG,GAAG,KAAKrJ,eAAL,CAAqBH,OAArB,EAA8B,CAAC;MAAEtB,KAAK,EAAE6K,SAAT;MAAoB5K,KAApB;MAA2BE;IAA3B,CAAD,CAA9B,EAAqEF,KAArE,EAA4EyK,YAA5E,EAA0FD,6BAA1F,EAAyHtG,cAAzH,CAAZ;IACA,OAAO;MAAElE,KAAF;MAASD,KAAT;MAAgBG,MAAM,EAAE2K,GAAG,CAAC3K;IAA5B,CAAP;EACH;;EACDsB,eAAe,CAACH,OAAD,EAAUkH,MAAV,EAAkBuC,WAAlB,EAA+BC,mBAA/B,EAAoDP,6BAA6B,GAAG,KAApF,EAA2FtG,cAA3F,EAA2G;IACtH,MAAMqB,MAAM,GAAG,KAAKmE,cAAL,CAAoBrI,OAAO,CAACgE,WAA5B,EAAyCyF,WAAzC,CAAf;IACA,MAAME,OAAO,GAAG,KAAKtL,OAAL,CAAagB,GAAb,CAAiB6E,MAAM,CAACrF,MAAxB,CAAhB;;IACA,IAAImB,OAAO,CAAC4J,YAAZ,EAA0B;MACtBD,OAAO,CAAC5J,QAAR,GAAmB,IAAnB;IACH;;IACD,IAAIC,OAAO,CAAC6J,gBAAR,KAA6BxO,QAAQ,CAACyO,aAAT,CAAuBC,KAAxD,EAA+D;MAC3D,MAAMC,UAAU,GAAGnH,cAAc,IAAI,IAAlB,GACfA,cADe,GAEfxH,QAAQ,CAACsG,gBAAT,CAA0B3B,OAAO,CAACgE,WAAlC,CAFJ,CAD2D,CAI3D;MACA;MACA;MACA;;MACA2F,OAAO,CAACvF,QAAR,GAAmB4F,UAAU,CAAC3G,GAAX,CAAeC,CAAC,IAAIA,CAAC,GAAG,CAAxB,CAAnB;IACH;;IACD,IAAItD,OAAO,CAACiK,WAAR,IAAuB,IAA3B,EAAiC;MAC7BN,OAAO,CAAC3K,KAAR,GAAgBgB,OAAO,CAACiK,WAAxB;IACH;;IACD,IAAI1P,IAAI,CAAC0H,aAAL,CAAmBiC,MAAM,CAACxF,KAA1B,MAAqC,CAAzC,EAA4C;MACxC;MACA;MACAiL,OAAO,CAAClL,MAAR,GACIlE,IAAI,CAAC2P,sBAAL,CAA4BhG,MAAM,CAACvF,KAAnC,EAA0C,CAA1C,CADJ;MAEA,OAAOuF,MAAP;IACH;;IACD,MAAMiG,aAAa,GAAG,EAAtB;IACA,MAAMC,UAAU,GAAGlD,MAAM,CAAC7D,GAAP,CAAWgE,KAAK,IAAI;MACnC,IAAIA,KAAK,CAAC1I,KAAN,KAAgB,WAApB,EAAiC;QAC7B,MAAM,IAAId,KAAJ,CAAW,+DAAD,GACX,8DADW,GAEX,QAFC,CAAN;MAGH;;MACD,IAAIQ,OAAO,GAAG,KAAKA,OAAL,CAAagB,GAAb,CAAiBgI,KAAK,CAACxI,MAAvB,CAAd;;MACA,IAAIR,OAAO,CAACqD,OAAR,IAAmB,IAAvB,EAA6B;QACzB,IAAI,CAAC1B,OAAO,CAACqK,YAAT,IACA9P,IAAI,CAAC0H,aAAL,CAAmBoF,KAAK,CAAC3I,KAAzB,KACIzE,GAAG,GAAGmC,SAAN,CAAgB,2BAAhB,CAFR,EAEsD;UAClD;UACA;UACA;UACA;UACA;UACA,OAAO;YACHsC,KAAK,EAAE2I,KAAK,CAAC3I,KADV;YAEHL,OAAO,EAAE,IAFN;YAGHiM,SAAS,EAAE,IAHR;YAIHC,aAAa,EAAElM,OAAO,CAACI;UAJpB,CAAP;QAMH,CAfwB,CAgBzB;QACA;;;QACA,IAAIuB,OAAO,CAACqK,YAAZ,EAA0B;UACtBhM,OAAO,CAAC0B,QAAR,GAAmB,IAAnB;UACA1B,OAAO,CAACK,KAAR,GAAgB2I,KAAK,CAAC3I,KAAtB;QACH;MACJ;;MACD,KAAKqI,WAAL,CAAiBM,KAAK,CAACxI,MAAvB;;MACA,IAAI,CAAC,CAACR,OAAO,CAAC0B,QAAV,KAAuB,CAAC,CAACC,OAAO,CAACqK,YAArC,EAAmD;QAC/ChD,KAAK,GAAGhJ,OAAO,CAAC0B,QAAR,GAAmB,KAAK0I,YAAL,CAAkBpB,KAAlB,CAAnB,GACJ,KAAKqB,UAAL,CAAgBrB,KAAhB,CADJ;QAEA8C,aAAa,CAAC9I,IAAd,CAAmBgG,KAAnB;QACAhJ,OAAO,GAAG,KAAKA,OAAL,CAAagB,GAAb,CAAiBgI,KAAK,CAACxI,MAAvB,CAAV;MACH,CALD,MAMK,IAAIR,OAAO,CAAC0B,QAAR,IACL,CAACnE,UAAU,CAAC4O,aAAX,CAAyBnM,OAAO,CAACK,KAAjC,EAAwC2I,KAAK,CAAC3I,KAA9C,CADA,EACsD;QACvD;QACA;QACA;QACA;QACA;QACA;QACA,MAAM+L,UAAU,GAAGpD,KAAnB;QACA,MAAMqD,WAAW,GAAGrD,KAAK,CAAC3I,KAA1B;QACA2I,KAAK,CAAC3I,KAAN,GAAcL,OAAO,CAACK,KAAtB;QACA2I,KAAK,GAAG,KAAKuB,aAAL,CAAmBvB,KAAnB,EAA0BqD,WAA1B,CAAR;QACAP,aAAa,CAAC9I,IAAd,CAAmBgG,KAAnB;QACAhJ,OAAO,GAAG,KAAKA,OAAL,CAAagB,GAAb,CAAiBgI,KAAK,CAACxI,MAAvB,CAAV;QACA4L,UAAU,CAAC/L,KAAX,GAAmBgM,WAAnB;MACH;;MACD,OAAO;QAAEhM,KAAK,EAAE2I,KAAK,CAAC3I,KAAf;QAAsBL,OAAtB;QAA+BiM,SAAS,EAAE;MAA1C,CAAP;IACH,CAtDkB,CAAnB;IAuDA,KAAKvD,WAAL,CAAiB7C,MAAM,CAACrF,MAAxB;IACA,MAAM8L,UAAU,GAAG;MAAEjM,KAAK,EAAEwF,MAAM,CAACxF,KAAhB;MAAuBL,OAAO,EAAEsL,OAAhC;MAAyCW,SAAS,EAAE;IAApD,CAAnB;IACA,MAAM5D,GAAG,GAAG1L,UAAU,CAAC4P,aAAX,CAAyB5K,OAAzB,EAAkCoK,UAAlC,EAA8CO,UAA9C,CAAZ;IACA,MAAME,MAAM,GAAG,KAAKC,gBAAL,CAAsBpE,GAAtB,EAA2B,MAAM;MAC5C,OAAO1L,UAAU,CAAC+P,cAAX,CAA0B,KAAK7M,KAA/B,EAAsC8B,OAAtC,EAA+CoK,UAA/C,EAA2DO,UAA3D,CAAP;IACH,CAFc,CAAf;IAGA,MAAMrK,iBAAiB,GAAG,KAAKC,YAAL,IAAqB,IAA/C;IACA,IAAIuE,KAAJ;;IACA,IAAIxE,iBAAJ,EAAuB;MACnBwE,KAAK,GAAG,KAAKgB,UAAL,EAAR;IACH;;IACD,IAAI,CAAC7L,GAAG,GAAGoF,GAAN,CAAU,qBAAV,CAAL,EAAuC;MACnCrE,UAAU,CAACgQ,UAAX,CAAsB,KAAK9M,KAA3B,EAAkC2M,MAAlC,EAA0CT,UAA1C,EAAsDO,UAAtD,EAAkEjB,mBAAlE;IACH;;IACDS,aAAa,CAAC5H,OAAd,CAAsB0I,IAAI,IAAI,KAAKxL,6BAAL,CAAmCwL,IAAnC,CAA9B;;IACA,IAAI3K,iBAAJ,EAAuB;MACnBwE,KAAK,GAAG,KAAKoB,QAAL,CAAcpB,KAAd,CAAR;MACA,KAAKvE,YAAL,CAAkBc,IAAlB,CAAuB;QAAE4D,IAAI,EAAEjF,OAAO,CAAClD,WAAR,CAAoBmI,IAA5B;QAAkCH,KAAK,EAAE,KAAKsB,YAAL,CAAkBtB,KAAlB;MAAzC,CAAvB;IACH;;IACD,MAAMoG,gBAAgB,GAAGjR,GAAG,GAAGoF,GAAN,CAAU,uBAAV,CAAzB,CArGsH,CAsGtH;;IACA,IAAI6L,gBAAgB,GAAG,CAAvB,EAA0B;MACtB,MAAM5G,IAAI,GAAG/J,IAAI,CAACkG,GAAL,EAAb;;MACA,IAAK6D,IAAI,GAAG,KAAK9G,eAAb,GAAgC0N,gBAApC,EAAsD;QAClD,KAAKhN,KAAL,CAAWH,EAAX,CAAcoN,KAAd;QACA,KAAK3N,eAAL,GAAuB8G,IAAvB;MACH;IACJ;;IACD,IAAI,CAACrK,GAAG,GAAG2D,OAAN,CAAc,qBAAd,CAAD,IAAyC+L,OAAO,CAAC5J,QAAjD,IACAoJ,6BAA6B,KAAK,KADtC,EAC6C;MACzC,MAAMiC,QAAQ,GAAG,KAAK3C,YAAL,CAAkBvE,MAAlB,CAAjB;MACA,KAAKzE,6BAAL,CAAmCyE,MAAnC;MACA,OAAOkH,QAAP;IACH;;IACD,OAAOlH,MAAP;EACH;;EACD8D,aAAa,CAAChI,OAAD,EAAUkH,MAAV,EAAkBuC,WAAlB,EAA+BC,mBAA/B,EAAoDP,6BAA6B,GAAG,KAApF,EAA2F;IACpGM,WAAW,GAAGA,WAAW,IAAIvC,MAAM,CAAC,CAAD,CAAN,CAAUvI,KAAvC;IACA,MAAMoJ,OAAO,GAAG,KAAK5H,eAAL,CAAqBH,OAArB,EAA8BkH,MAA9B,EAAsCuC,WAAtC,EAAmDC,mBAAnD,EAAwEP,6BAAxE,CAAhB;IACA,OAAOpB,OAAP;EACH;;EACD+C,gBAAgB,CAACpE,GAAD,EAAM2E,SAAN,EAAiB;IAC7B,IAAI,EAAE3E,GAAG,IAAI,KAAK1I,WAAd,CAAJ,EAAgC;MAC5B,KAAKA,WAAL,CAAiB0I,GAAjB,IAAwB2E,SAAS,EAAjC;IACH;;IACD,OAAO,KAAKrN,WAAL,CAAiB0I,GAAjB,CAAP;EACH;;EACD4E,iBAAiB,GAAG;IAChB,OAAO,KAAKlN,cAAZ;EACH;;EACDmN,OAAO,GAAG;IACN,IAAI,KAAK5N,QAAT,EAAmB;MACf;IACH,CAHK,CAIN;IACA;;;IACA,IAAI,CAAC1D,GAAG,GAAG2D,OAAN,CAAc,SAAd,CAAL,EAA+B;MAC3B,MAAM4N,OAAO,GAAGxI,MAAM,CAACyI,IAAP,CAAY,KAAKzN,WAAjB,CAAhB;MACAwN,OAAO,CAACjJ,OAAR,CAAgBmE,GAAG,IAAI;QACnB,KAAKxI,KAAL,CAAWwN,aAAX,CAAyB,KAAK1N,WAAL,CAAiB0I,GAAjB,EAAsBiF,YAA/C;QACA,OAAO,KAAK3N,WAAL,CAAiB0I,GAAjB,CAAP;MACH,CAHD;IAIH;;IACD,KAAKtI,cAAL,CAAoBmN,OAApB;;IACA,IAAI,KAAKpN,MAAL,IAAe,IAAf,IACC,OAAQyN,iBAAR,KAA+B,WAA/B,IACG,KAAKzN,MAAL,YAAuByN,iBAF/B,EAEmD;MAC/C,KAAKzN,MAAL,CAAY0N,MAAZ;IACH,CAJD,MAKK;MACD,KAAK1N,MAAL,GAAc,IAAd;IACH;;IACD,IAAI,KAAKF,mBAAT,EAA8B;MAC1B,KAAKC,KAAL,CAAW8B,OAAX,GAAqB,IAArB;MACA,KAAK9B,KAAL,CAAWqN,OAAX;IACH;;IACD,KAAK5N,QAAL,GAAgB,IAAhB;EACH;;EACDmO,cAAc,GAAG;IACb,IAAI,KAAKC,mBAAL,IAA4B,IAAhC,EAAsC;MAClC,KAAKA,mBAAL,GAA2BzR,IAAI,CAAC,MAAM;QAClC,IAAI,CAACL,GAAG,GAAGoF,GAAN,CAAU,8BAAV,CAAL,EAAgD;UAC5C;UACA;UACA,MAAM2M,SAAS,GAAG/R,GAAG,GAAG2D,OAAN,CAAc,OAAd,CAAlB;UACA3D,GAAG,GAAG8E,GAAN,CAAU,OAAV,EAAmB,KAAnB;UACA,MAAMkN,mBAAmB,GAAG,KAAKhE,GAAL,CAAS5N,MAAM,CAAC,IAAD,CAAf,EAAuBsN,QAAvB,GAAkC,CAAlC,CAA5B;UACA1N,GAAG,GAAG8E,GAAN,CAAU,OAAV,EAAmBiN,SAAnB;;UACA,IAAIC,mBAAmB,GAAG,CAA1B,EAA6B;YACzB,OAAO,EAAP;UACH;QACJ;;QACD,OAAO,EAAP;MACH,CAb8B,CAA/B;IAcH;;IACD,OAAO,KAAKF,mBAAZ;EACH;EACD;;;EACAG,OAAO,GAAG;IACN,OAAO,KAAKJ,cAAL,OAA0B,EAA1B,GAA+BhQ,eAA/B,GAAiDC,eAAxD;EACH;;EACDgL,WAAW,CAAClI,MAAD,EAAS;IAChB,MAAMR,OAAO,GAAG,KAAKA,OAAL,CAAagB,GAAb,CAAiBR,MAAjB,CAAhB;IACA,MAAM;MAAEH,KAAF;MAASC,KAAT;MAAgBF,MAAhB;MAAwBiD,OAAxB;MAAiC1C,KAAjC;MAAwCe;IAAxC,IAAqD1B,OAA3D;;IACA,IAAIqD,OAAO,IAAI,IAAf,EAAqB;MACjB;MACA;IACH;;IACD,MAAMpB,iBAAiB,GAAG,KAAKC,YAAL,IAAqB,IAA/C;IACA,IAAIC,KAAJ;;IACA,IAAIF,iBAAJ,EAAuB;MACnBE,KAAK,GAAGjG,IAAI,CAACkG,GAAL,EAAR;IACH;;IACD,IAAI2D,QAAQ,GAAG/F,OAAO,CAAC+F,QAAvB;;IACA,IAAIA,QAAQ,IAAI,IAAhB,EAAsB;MAClB;MACA;MACAA,QAAQ,GAAGxI,UAAU,CAACuQ,+BAAX,CAA2CzN,KAA3C,EAAkDqB,QAAlD,CAAX;MACA1B,OAAO,CAAC+F,QAAR,GAAmBA,QAAnB;IACH;;IACD,IAAI3F,MAAM,IAAI,IAAd,EAAoB;MAChB,MAAM8K,SAAS,GAAG3N,UAAU,CAACqI,YAAX,CAAwBvF,KAAxB,CAAlB;MACA,IAAIsB,OAAJ;MACA,IAAItD,KAAK,GAAG0H,QAAQ,CAAC,CAAD,CAApB;MAAA,IAAyB3H,MAAM,GAAG2H,QAAQ,CAAC,CAAD,CAA1C;MACA,MAAMgI,WAAW,GAAG3N,MAAM,YAAY4N,UAAlB,IAAgC5N,MAAM,YAAY6N,iBAAtE,CAJgB,CAKhB;MACA;;MACA,IAAIvM,QAAQ,IAAI,CAACqM,WAAjB,EAA8B;QAC1B,CAAC1P,KAAD,EAAQD,MAAR,IAAkBpB,QAAQ,CAACkR,sCAAT,CAAgDnI,QAAQ,CAAC,CAAD,CAAxD,EAA6DA,QAAQ,CAAC,CAAD,CAArE,CAAlB;MACH;;MACD,IAAIrE,QAAJ,EAAc;QACVC,OAAO,GAAG,IAAIlF,yBAAJ,CAA8ByO,SAA9B,EAAyC6C,WAAzC,CAAV;MACH,CAFD,MAGK;QACDpM,OAAO,GAAG,IAAInF,mBAAJ,CAAwB0O,SAAxB,EAAmC6C,WAAnC,CAAV;MACH,CAfe,CAgBhB;MACA;MACA;;;MACA,MAAMI,sBAAsB,GAAGJ,WAAW,GAAG,CAAC3P,MAAD,EAASC,KAAT,CAAH,GAAqB0H,QAA/D;MACA,MAAMqI,oBAAoB,GAAG,KAAKpE,cAAL,CAAoBmE,sBAApB,EAA4C7N,KAA5C,CAA7B;MACA,MAAM+N,qBAAqB,GAAG,KAAKrO,OAAL,CAAagB,GAAb,CAAiBoN,oBAAoB,CAAC5N,MAAtC,CAA9B;;MACA,IAAIuN,WAAJ,EAAiB;QACbM,qBAAqB,CAAC1N,KAAtB,GAA8B1D,YAAY,CAACqR,MAA3C;MACH,CAFD,MAGK;QACDD,qBAAqB,CAAC1N,KAAtB,GAA8B1D,YAAY,CAAC2D,MAA3C;MACH;;MACDyN,qBAAqB,CAACtI,QAAtB,GAAiCoI,sBAAjC;MACA,KAAKtO,KAAL,CAAW0O,0BAAX,CAAsC,KAAK9F,UAAL,CAAgB2F,oBAAoB,CAAC5N,MAArC,CAAtC,EAAoFnC,KAApF,EAA2FD,MAA3F,EAAmGgC,MAAnG;MACA,MAAM2K,YAAY,GAAG,CAAC,CAAC3M,MAAD,EAASC,KAAT,CAAD,CAArB,CA9BgB,CA+BhB;MACA;;MACA,MAAMmQ,qBAAqB,GAAG,IAA9B;MACA,MAAMC,mBAAmB,GAAG,KAAK3M,eAAL,CAAqBH,OAArB,EAA8B,CAACyM,oBAAD,CAA9B,EAAsD9N,KAAtD,EAA6DyK,YAA7D,EAA2EyD,qBAA3E,CAA5B,CAlCgB,CAmChB;;MACA,MAAME,aAAa,GAAG,KAAK1O,OAAL,CAAagB,GAAb,CAAiByN,mBAAmB,CAACjO,MAArC,CAAtB;MACAR,OAAO,CAAC+F,QAAR,GAAmB2I,aAAa,CAAC3I,QAAjC;MACA/F,OAAO,CAAC0B,QAAR,GAAmBgN,aAAa,CAAChN,QAAjC;MACA1B,OAAO,CAACW,KAAR,GAAgB+N,aAAa,CAAC/N,KAA9B;;MACA,IAAI,CAAC/E,GAAG,GAAGoF,GAAN,CAAU,qBAAV,CAAL,EAAuC;QACnChB,OAAO,CAACqD,OAAR,GAAkBqL,aAAa,CAACrL,OAAhC,CADmC,CAEnC;;QACArD,OAAO,CAACI,MAAR,GAAiB,IAAjB;QACA,KAAKJ,OAAL,CAAaiE,MAAb,CAAoBwK,mBAAmB,CAACjO,MAAxC;MACH,CALD,MAMK;QACD,KAAKc,WAAL,CAAiBmN,mBAAmB,CAACjO,MAArC;MACH;;MACD,KAAKY,6BAAL,CAAmCgN,oBAAnC;;MACA,IAAInM,iBAAJ,EAAuB;QACnB,KAAKhD,YAAL,IAAqB/C,IAAI,CAACkG,GAAL,KAAaD,KAAlC;MACH;IACJ,CArDD,MAsDK;MACD,MAAMwM,UAAU,GAAG,KAAKC,cAAL,CAAoB7I,QAApB,EAA8BpF,KAA9B,EAAqCL,KAArC,EAA4CoB,QAA5C,CAAnB;MACA1B,OAAO,CAACqD,OAAR,GAAkBsL,UAAlB;IACH;EACJ;;EACD3M,oBAAoB,CAACxB,MAAD,EAASqO,aAAT,EAAwB;IACxC,MAAM7O,OAAO,GAAG,KAAKA,OAAL,CAAagB,GAAb,CAAiBR,MAAjB,CAAhB;IACA,MAAM;MAAEF;IAAF,IAAYN,OAAlB;IACA,KAAKoI,cAAL,CAAoB5H,MAApB;;IACA,IAAIqO,aAAa,IAAI,IAArB,EAA2B;MACvB7O,OAAO,CAACI,MAAR,GAAiB0O,mBAAmB,CAACD,aAAD,EAAgBvO,KAAhB,CAApC;IACH;;IACD,OAAON,OAAO,CAACI,MAAf;EACH;;EACDwO,cAAc,CAAC7I,QAAD,EAAWgJ,OAAX,EAAoBzO,KAApB,EAA2BoB,QAA3B,EAAqC;IAC/C,KAAK1C,aAAL,IAAsB,KAAKuJ,YAAL,CAAkBxC,QAAlB,EAA4BzF,KAA5B,CAAtB;;IACA,IAAI,CAAC,KAAKlB,iBAAN,IACA,KAAKJ,aAAL,GAAqB,KAAKf,kBAAL,GAA0B,IAA1B,GAAiC,IAD1D,EACgE;MAC5D,MAAM+Q,EAAE,GAAG,CAAC,KAAKhQ,aAAL,GAAqB,IAArB,GAA4B,IAA7B,EAAmCiQ,OAAnC,CAA2C,CAA3C,CAAX;MACA,KAAK7P,iBAAL,GAAyB,IAAzB;MACA8P,OAAO,CAAC9F,IAAR,CAAc,6BAA4B4F,EAAG,OAAhC,GACR,kCADL;IAEH;;IACD,OAAO,KAAKjP,cAAL,CAAoB6O,cAApB,CAAmC7I,QAAnC,EAA6CgJ,OAA7C,EAAsDrN,QAAtD,CAAP;EACH;;EACD6G,YAAY,CAAClI,KAAD,EAAQC,KAAR,EAAe;IACvB,OAAOD,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAhB,GAAsBnE,IAAI,CAACiT,eAAL,CAAqB7O,KAArB,CAA7B;EACH;;EACD8O,sBAAsB,GAAG;IACrB,KAAK,MAAM,GAAG5C,MAAH,CAAX,IAAyB7H,MAAM,CAAC0K,OAAP,CAAe,KAAK1P,WAApB,CAAzB,EAA2D;MACvD,KAAK2P,gBAAL,CAAsB9C,MAAtB;IACH;EACJ;;EACK+C,2BAA2B,GAAG;IAAA;;IAAA;MAChC,MAAM9L,EAAE,GAAG,EAAX;;MACA,IAAI,MAAI,CAAC5D,KAAL,CAAW2P,4BAAf,EAA6C;QACzC,KAAK,MAAM,GAAGhD,MAAH,CAAX,IAAyB7H,MAAM,CAAC0K,OAAP,CAAe,MAAI,CAAC1P,WAApB,CAAzB,EAA2D;UACvD8D,EAAE,CAACT,IAAH,CAAQ,MAAI,CAACyM,qBAAL,CAA2BjD,MAA3B,CAAR;QACH;;QACD,OAAO1J,OAAO,CAACY,GAAR,CAAYD,EAAZ,CAAP;MACH,CALD,MAMK;QACD,KAAK,MAAM,GAAG+I,MAAH,CAAX,IAAyB7H,MAAM,CAAC0K,OAAP,CAAe,MAAI,CAAC1P,WAApB,CAAzB,EAA2D;UACvD,MAAM+P,CAAC,GAAG,IAAI5M,OAAJ,CAAaC,OAAD,IAAa;YAC/B,IAAI;cACA,MAAI,CAACuM,gBAAL,CAAsB9C,MAAtB;;cACAzJ,OAAO,CAAC,IAAD,CAAP;YACH,CAHD,CAIA,OAAOmE,KAAP,EAAc;cACV,MAAMA,KAAN;YACH;UACJ,CARS,CAAV;UASAzD,EAAE,CAACT,IAAH,CAAQ0M,CAAR;QACH;;QACD,OAAO5M,OAAO,CAACY,GAAR,CAAYD,EAAZ,CAAP;MACH;IAtB+B;EAuBnC;;EACKgM,qBAAqB,CAACjD,MAAD,EAAS;IAAA;;IAAA;MAChC,IAAI,MAAI,CAAC3M,KAAL,CAAWH,EAAX,CAAciQ,mBAAd,CAAkCnD,MAAM,CAACc,YAAzC,EAAuD,MAAI,CAACzN,KAAL,CAAW2P,4BAAX,CAAwCI,qBAA/F,CAAJ,EAA2H;QACvH,OAAO,MAAI,CAACN,gBAAL,CAAsB9C,MAAtB,CAAP;MACH,CAFD,MAGK;QACD,MAAMzQ,SAAS,EAAf;QACA,OAAO,MAAI,CAAC0T,qBAAL,CAA2BjD,MAA3B,CAAP;MACH;IAP+B;EAQnC;;EACD8C,gBAAgB,CAAC9C,MAAD,EAAS;IACrB,IAAI,KAAK3M,KAAL,CAAWH,EAAX,CAAciQ,mBAAd,CAAkCnD,MAAM,CAACc,YAAzC,EAAuD,KAAKzN,KAAL,CAAWH,EAAX,CAAcmQ,WAArE,MAAsF,KAA1F,EAAiG;MAC7FX,OAAO,CAACY,GAAR,CAAY,KAAKjQ,KAAL,CAAWH,EAAX,CAAcqQ,iBAAd,CAAgCvD,MAAM,CAACc,YAAvC,CAAZ;;MACA,IAAI,KAAKzN,KAAL,CAAWH,EAAX,CAAcsQ,kBAAd,CAAiCxD,MAAM,CAACyD,cAAxC,EAAwD,KAAKpQ,KAAL,CAAWH,EAAX,CAAcwQ,cAAtE,MAA0F,KAA9F,EAAqG;QACjG3S,UAAU,CAAC4S,yBAAX,CAAqC3D,MAAM,CAAC4D,MAA5C,EAAoD,KAAKvQ,KAAL,CAAWH,EAAX,CAAc2Q,gBAAd,CAA+B7D,MAAM,CAACyD,cAAtC,CAApD;QACA,MAAM,IAAIzQ,KAAJ,CAAU,oCAAV,CAAN;MACH;;MACD,MAAM,IAAIA,KAAJ,CAAU,6CAAV,CAAN;IACH;;IACD,OAAO,IAAP;EACH;;EACD5C,mBAAmB,GAAG;IAClB,KAAK,MAAM,GAAG4P,MAAH,CAAX,IAAyB7H,MAAM,CAAC0K,OAAP,CAAe,KAAK1P,WAApB,CAAzB,EAA2D;MACvD,MAAM;QAAE2Q,gBAAF;QAAoBC,sBAApB;QAA4CC,MAA5C;QAAoDC,MAApD;QAA4DC,iBAA5D;QAA+EC,oBAA/E;QAAqGC,gBAArG;QAAuHC,uBAAvH;QAAgJC;MAAhJ,IAAwKlU,mBAAmB,CAAC,KAAKiD,KAAN,EAAa2M,MAAM,CAAC7K,OAApB,EAA6B6K,MAAM,CAACc,YAApC,CAAjM;MACAd,MAAM,CAAC8D,gBAAP,GAA0BA,gBAA1B;MACA9D,MAAM,CAAC+D,sBAAP,GAAgCA,sBAAhC;MACA/D,MAAM,CAACgE,MAAP,GAAgBA,MAAhB;MACAhE,MAAM,CAACiE,MAAP,GAAgBA,MAAhB;MACAjE,MAAM,CAACkE,iBAAP,GAA2BA,iBAA3B;MACAlE,MAAM,CAACmE,oBAAP,GAA8BA,oBAA9B;MACAnE,MAAM,CAACoE,gBAAP,GAA0BA,gBAA1B;MACApE,MAAM,CAACqE,uBAAP,GAAiCA,uBAAjC;MACArE,MAAM,CAACsE,mBAAP,GAA6BA,mBAA7B;IACH;EACJ;;AA96B+C;AAg7BpDtS,gBAAgB,CAACyB,UAAjB,GAA8B,CAA9B;;AACA,SAAS6O,mBAAT,CAA6BiC,CAA7B,EAAgCzQ,KAAhC,EAAuC;EACnC,IAAIA,KAAK,KAAK,SAAV,IAAuBA,KAAK,KAAK,WAArC,EAAkD;IAC9C,OAAOyQ,CAAP;EACH,CAFD,MAGK,IAAIzQ,KAAK,KAAK,OAAV,IAAqBA,KAAK,KAAK,MAAnC,EAA2C;IAC5C,MAAM+B,MAAM,GAAI/B,KAAK,KAAK,OAAX,GAAsB,IAAI0Q,UAAJ,CAAeD,CAAC,CAAC1L,MAAjB,CAAtB,GACX,IAAI2I,UAAJ,CAAe+C,CAAC,CAAC1L,MAAjB,CADJ;;IAEA,KAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG/C,MAAM,CAACgD,MAA3B,EAAmC,EAAED,CAArC,EAAwC;MACpC/C,MAAM,CAAC+C,CAAD,CAAN,GAAY6L,IAAI,CAACC,KAAL,CAAWH,CAAC,CAAC3L,CAAD,CAAZ,CAAZ;IACH;;IACD,OAAO/C,MAAP;EACH,CAPI,MAQA;IACD,MAAM,IAAI7C,KAAJ,CAAW,iBAAgBc,KAAM,EAAjC,CAAN;EACH;AACJ"},"metadata":{},"sourceType":"module"}