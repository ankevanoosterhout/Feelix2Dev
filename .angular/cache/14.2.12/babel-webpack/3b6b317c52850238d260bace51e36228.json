{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from '../util';\n\nfunction nonMaxSuppSanityCheck(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {\n  if (iouThreshold == null) {\n    iouThreshold = 0.5;\n  }\n\n  if (scoreThreshold == null) {\n    scoreThreshold = Number.NEGATIVE_INFINITY;\n  }\n\n  if (softNmsSigma == null) {\n    softNmsSigma = 0.0;\n  }\n\n  const numBoxes = boxes.shape[0];\n  maxOutputSize = Math.min(maxOutputSize, numBoxes);\n  util.assert(0 <= iouThreshold && iouThreshold <= 1, () => `iouThreshold must be in [0, 1], but was '${iouThreshold}'`);\n  util.assert(boxes.rank === 2, () => `boxes must be a 2D tensor, but was of rank '${boxes.rank}'`);\n  util.assert(boxes.shape[1] === 4, () => `boxes must have 4 columns, but 2nd dimension was ${boxes.shape[1]}`);\n  util.assert(scores.rank === 1, () => 'scores must be a 1D tensor');\n  util.assert(scores.shape[0] === numBoxes, () => `scores has incompatible shape with boxes. Expected ${numBoxes}, ` + `but was ${scores.shape[0]}`);\n  util.assert(0 <= softNmsSigma && softNmsSigma <= 1, () => `softNmsSigma must be in [0, 1], but was '${softNmsSigma}'`);\n  return {\n    maxOutputSize,\n    iouThreshold,\n    scoreThreshold,\n    softNmsSigma\n  };\n}\n\nexport { nonMaxSuppSanityCheck };","map":{"version":3,"names":["util","nonMaxSuppSanityCheck","boxes","scores","maxOutputSize","iouThreshold","scoreThreshold","softNmsSigma","Number","NEGATIVE_INFINITY","numBoxes","shape","Math","min","assert","rank"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/nonmax_util.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from '../util';\nfunction nonMaxSuppSanityCheck(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {\n    if (iouThreshold == null) {\n        iouThreshold = 0.5;\n    }\n    if (scoreThreshold == null) {\n        scoreThreshold = Number.NEGATIVE_INFINITY;\n    }\n    if (softNmsSigma == null) {\n        softNmsSigma = 0.0;\n    }\n    const numBoxes = boxes.shape[0];\n    maxOutputSize = Math.min(maxOutputSize, numBoxes);\n    util.assert(0 <= iouThreshold && iouThreshold <= 1, () => `iouThreshold must be in [0, 1], but was '${iouThreshold}'`);\n    util.assert(boxes.rank === 2, () => `boxes must be a 2D tensor, but was of rank '${boxes.rank}'`);\n    util.assert(boxes.shape[1] === 4, () => `boxes must have 4 columns, but 2nd dimension was ${boxes.shape[1]}`);\n    util.assert(scores.rank === 1, () => 'scores must be a 1D tensor');\n    util.assert(scores.shape[0] === numBoxes, () => `scores has incompatible shape with boxes. Expected ${numBoxes}, ` +\n        `but was ${scores.shape[0]}`);\n    util.assert(0 <= softNmsSigma && softNmsSigma <= 1, () => `softNmsSigma must be in [0, 1], but was '${softNmsSigma}'`);\n    return { maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma };\n}\nexport { nonMaxSuppSanityCheck };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,KAAKA,IAAZ,MAAsB,SAAtB;;AACA,SAASC,qBAAT,CAA+BC,KAA/B,EAAsCC,MAAtC,EAA8CC,aAA9C,EAA6DC,YAA7D,EAA2EC,cAA3E,EAA2FC,YAA3F,EAAyG;EACrG,IAAIF,YAAY,IAAI,IAApB,EAA0B;IACtBA,YAAY,GAAG,GAAf;EACH;;EACD,IAAIC,cAAc,IAAI,IAAtB,EAA4B;IACxBA,cAAc,GAAGE,MAAM,CAACC,iBAAxB;EACH;;EACD,IAAIF,YAAY,IAAI,IAApB,EAA0B;IACtBA,YAAY,GAAG,GAAf;EACH;;EACD,MAAMG,QAAQ,GAAGR,KAAK,CAACS,KAAN,CAAY,CAAZ,CAAjB;EACAP,aAAa,GAAGQ,IAAI,CAACC,GAAL,CAAST,aAAT,EAAwBM,QAAxB,CAAhB;EACAV,IAAI,CAACc,MAAL,CAAY,KAAKT,YAAL,IAAqBA,YAAY,IAAI,CAAjD,EAAoD,MAAO,4CAA2CA,YAAa,GAAnH;EACAL,IAAI,CAACc,MAAL,CAAYZ,KAAK,CAACa,IAAN,KAAe,CAA3B,EAA8B,MAAO,+CAA8Cb,KAAK,CAACa,IAAK,GAA9F;EACAf,IAAI,CAACc,MAAL,CAAYZ,KAAK,CAACS,KAAN,CAAY,CAAZ,MAAmB,CAA/B,EAAkC,MAAO,oDAAmDT,KAAK,CAACS,KAAN,CAAY,CAAZ,CAAe,EAA3G;EACAX,IAAI,CAACc,MAAL,CAAYX,MAAM,CAACY,IAAP,KAAgB,CAA5B,EAA+B,MAAM,4BAArC;EACAf,IAAI,CAACc,MAAL,CAAYX,MAAM,CAACQ,KAAP,CAAa,CAAb,MAAoBD,QAAhC,EAA0C,MAAO,sDAAqDA,QAAS,IAA/D,GAC3C,WAAUP,MAAM,CAACQ,KAAP,CAAa,CAAb,CAAgB,EAD/B;EAEAX,IAAI,CAACc,MAAL,CAAY,KAAKP,YAAL,IAAqBA,YAAY,IAAI,CAAjD,EAAoD,MAAO,4CAA2CA,YAAa,GAAnH;EACA,OAAO;IAAEH,aAAF;IAAiBC,YAAjB;IAA+BC,cAA/B;IAA+CC;EAA/C,CAAP;AACH;;AACD,SAASN,qBAAT"},"metadata":{},"sourceType":"module"}