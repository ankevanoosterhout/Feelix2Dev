{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Mean } from '../kernel_names';\nimport { computeOutAndReduceShapes } from '../ops/axis_util';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { ones } from '../ops/ones';\nimport { reshape } from '../ops/reshape';\nimport * as util from '../util';\nexport const meanGradConfig = {\n  kernelName: Mean,\n  inputsToSave: ['x'],\n  gradFunc: (dy, saved, attrs) => {\n    const [x] = saved;\n    const {\n      axis\n    } = attrs;\n    const axes = util.parseAxisParam(axis, x.shape);\n    const shapes = computeOutAndReduceShapes(x.shape, axes);\n    const reduceShape = shapes[1];\n    const reduceSize = util.sizeFromShape(reduceShape);\n\n    const derX = () => {\n      const expandedDyShape = x.shape.slice();\n      axes.forEach(axis => {\n        expandedDyShape[axis] = 1;\n      });\n      const expandedDy = reshape(dy, expandedDyShape);\n      const res = div(mul(expandedDy, ones(x.shape, 'float32')), reduceSize);\n      return res;\n    };\n\n    return {\n      x: derX\n    };\n  }\n};","map":{"version":3,"names":["Mean","computeOutAndReduceShapes","div","mul","ones","reshape","util","meanGradConfig","kernelName","inputsToSave","gradFunc","dy","saved","attrs","x","axis","axes","parseAxisParam","shape","shapes","reduceShape","reduceSize","sizeFromShape","derX","expandedDyShape","slice","forEach","expandedDy","res"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/gradients/Mean_grad.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Mean } from '../kernel_names';\nimport { computeOutAndReduceShapes } from '../ops/axis_util';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { ones } from '../ops/ones';\nimport { reshape } from '../ops/reshape';\nimport * as util from '../util';\nexport const meanGradConfig = {\n    kernelName: Mean,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved, attrs) => {\n        const [x] = saved;\n        const { axis } = attrs;\n        const axes = util.parseAxisParam(axis, x.shape);\n        const shapes = computeOutAndReduceShapes(x.shape, axes);\n        const reduceShape = shapes[1];\n        const reduceSize = util.sizeFromShape(reduceShape);\n        const derX = () => {\n            const expandedDyShape = x.shape.slice();\n            axes.forEach(axis => {\n                expandedDyShape[axis] = 1;\n            });\n            const expandedDy = reshape(dy, expandedDyShape);\n            const res = div(mul(expandedDy, ones(x.shape, 'float32')), reduceSize);\n            return res;\n        };\n        return { x: derX };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,IAAT,QAAqB,iBAArB;AACA,SAASC,yBAAT,QAA0C,kBAA1C;AACA,SAASC,GAAT,QAAoB,YAApB;AACA,SAASC,GAAT,QAAoB,YAApB;AACA,SAASC,IAAT,QAAqB,aAArB;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AACA,OAAO,MAAMC,cAAc,GAAG;EAC1BC,UAAU,EAAER,IADc;EAE1BS,YAAY,EAAE,CAAC,GAAD,CAFY;EAG1BC,QAAQ,EAAE,CAACC,EAAD,EAAKC,KAAL,EAAYC,KAAZ,KAAsB;IAC5B,MAAM,CAACC,CAAD,IAAMF,KAAZ;IACA,MAAM;MAAEG;IAAF,IAAWF,KAAjB;IACA,MAAMG,IAAI,GAAGV,IAAI,CAACW,cAAL,CAAoBF,IAApB,EAA0BD,CAAC,CAACI,KAA5B,CAAb;IACA,MAAMC,MAAM,GAAGlB,yBAAyB,CAACa,CAAC,CAACI,KAAH,EAAUF,IAAV,CAAxC;IACA,MAAMI,WAAW,GAAGD,MAAM,CAAC,CAAD,CAA1B;IACA,MAAME,UAAU,GAAGf,IAAI,CAACgB,aAAL,CAAmBF,WAAnB,CAAnB;;IACA,MAAMG,IAAI,GAAG,MAAM;MACf,MAAMC,eAAe,GAAGV,CAAC,CAACI,KAAF,CAAQO,KAAR,EAAxB;MACAT,IAAI,CAACU,OAAL,CAAaX,IAAI,IAAI;QACjBS,eAAe,CAACT,IAAD,CAAf,GAAwB,CAAxB;MACH,CAFD;MAGA,MAAMY,UAAU,GAAGtB,OAAO,CAACM,EAAD,EAAKa,eAAL,CAA1B;MACA,MAAMI,GAAG,GAAG1B,GAAG,CAACC,GAAG,CAACwB,UAAD,EAAavB,IAAI,CAACU,CAAC,CAACI,KAAH,EAAU,SAAV,CAAjB,CAAJ,EAA4CG,UAA5C,CAAf;MACA,OAAOO,GAAP;IACH,CARD;;IASA,OAAO;MAAEd,CAAC,EAAES;IAAL,CAAP;EACH;AApByB,CAAvB"},"metadata":{},"sourceType":"module"}