{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, Neg } from '@tensorflow/tfjs-core';\nimport { negImplCPU } from '../kernel_utils/shared';\nimport { CHECK_NAN_SNIPPET, UnaryOpProgram } from '../unaryop_gpu';\nimport { UnaryOpPackedProgram } from '../unaryop_packed_gpu';\nconst NEG = CHECK_NAN_SNIPPET + `\n  return -x;\n`;\nconst NEG_PACKED = `\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`; // This doesn't use unaryKernelFunc because negImplCPU is not of type\n// SimpleUnaryKernelImplCPU.\n\nexport function neg(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x\n  } = inputs;\n\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xData = backend.texData.get(x.dataId);\n    const [outValues, newShape] = negImplCPU(xData.values, x.shape, x.dtype);\n    return backend.makeTensorInfo(newShape, x.dtype, outValues);\n  }\n\n  let program;\n\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, NEG_PACKED);\n  } else {\n    program = new UnaryOpProgram(x.shape, NEG);\n  }\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\nexport const negConfig = {\n  kernelName: Neg,\n  backendName: 'webgl',\n  kernelFunc: neg\n};","map":{"version":3,"names":["env","Neg","negImplCPU","CHECK_NAN_SNIPPET","UnaryOpProgram","UnaryOpPackedProgram","NEG","NEG_PACKED","neg","args","inputs","backend","x","shouldExecuteOnCPU","xData","texData","get","dataId","outValues","newShape","values","shape","dtype","makeTensorInfo","program","getBool","runWebGLProgram","negConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Neg.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, Neg } from '@tensorflow/tfjs-core';\nimport { negImplCPU } from '../kernel_utils/shared';\nimport { CHECK_NAN_SNIPPET, UnaryOpProgram } from '../unaryop_gpu';\nimport { UnaryOpPackedProgram } from '../unaryop_packed_gpu';\nconst NEG = CHECK_NAN_SNIPPET + `\n  return -x;\n`;\nconst NEG_PACKED = `\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n// This doesn't use unaryKernelFunc because negImplCPU is not of type\n// SimpleUnaryKernelImplCPU.\nexport function neg(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    if (backend.shouldExecuteOnCPU([x])) {\n        const xData = backend.texData.get(x.dataId);\n        const [outValues, newShape] = negImplCPU(xData.values, x.shape, x.dtype);\n        return backend.makeTensorInfo(newShape, x.dtype, outValues);\n    }\n    let program;\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n        program = new UnaryOpPackedProgram(x.shape, NEG_PACKED);\n    }\n    else {\n        program = new UnaryOpProgram(x.shape, NEG);\n    }\n    return backend.runWebGLProgram(program, [x], x.dtype);\n}\nexport const negConfig = {\n    kernelName: Neg,\n    backendName: 'webgl',\n    kernelFunc: neg\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,GAAT,EAAcC,GAAd,QAAyB,uBAAzB;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,SAASC,iBAAT,EAA4BC,cAA5B,QAAkD,gBAAlD;AACA,SAASC,oBAAT,QAAqC,uBAArC;AACA,MAAMC,GAAG,GAAGH,iBAAiB,GAAI;AACjC;AACA,CAFA;AAGA,MAAMI,UAAU,GAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAVA,C,CAWA;AACA;;AACA,OAAO,SAASC,GAAT,CAAaC,IAAb,EAAmB;EACtB,MAAM;IAAEC,MAAF;IAAUC;EAAV,IAAsBF,IAA5B;EACA,MAAM;IAAEG;EAAF,IAAQF,MAAd;;EACA,IAAIC,OAAO,CAACE,kBAAR,CAA2B,CAACD,CAAD,CAA3B,CAAJ,EAAqC;IACjC,MAAME,KAAK,GAAGH,OAAO,CAACI,OAAR,CAAgBC,GAAhB,CAAoBJ,CAAC,CAACK,MAAtB,CAAd;IACA,MAAM,CAACC,SAAD,EAAYC,QAAZ,IAAwBjB,UAAU,CAACY,KAAK,CAACM,MAAP,EAAeR,CAAC,CAACS,KAAjB,EAAwBT,CAAC,CAACU,KAA1B,CAAxC;IACA,OAAOX,OAAO,CAACY,cAAR,CAAuBJ,QAAvB,EAAiCP,CAAC,CAACU,KAAnC,EAA0CJ,SAA1C,CAAP;EACH;;EACD,IAAIM,OAAJ;;EACA,IAAIxB,GAAG,GAAGyB,OAAN,CAAc,6BAAd,CAAJ,EAAkD;IAC9CD,OAAO,GAAG,IAAInB,oBAAJ,CAAyBO,CAAC,CAACS,KAA3B,EAAkCd,UAAlC,CAAV;EACH,CAFD,MAGK;IACDiB,OAAO,GAAG,IAAIpB,cAAJ,CAAmBQ,CAAC,CAACS,KAArB,EAA4Bf,GAA5B,CAAV;EACH;;EACD,OAAOK,OAAO,CAACe,eAAR,CAAwBF,OAAxB,EAAiC,CAACZ,CAAD,CAAjC,EAAsCA,CAAC,CAACU,KAAxC,CAAP;AACH;AACD,OAAO,MAAMK,SAAS,GAAG;EACrBC,UAAU,EAAE3B,GADS;EAErB4B,WAAW,EAAE,OAFQ;EAGrBC,UAAU,EAAEtB;AAHS,CAAlB"},"metadata":{},"sourceType":"module"}