{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SparseToDense, util } from '@tensorflow/tfjs-core';\nimport { scatterImplCPU } from '../kernel_utils/shared';\nimport { ScatterProgram } from '../scatter_gpu';\nimport { reshape } from './Reshape';\nexport function sparseToDense(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    sparseIndices,\n    sparseValues,\n    defaultValue\n  } = inputs;\n  const {\n    outputShape\n  } = attrs;\n  const {\n    sliceRank,\n    numUpdates,\n    sliceSize,\n    strides,\n    outputSize\n  } = backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n\n  if (sparseValues.dtype === 'string') {\n    const indicesBuf = backend.bufferSync(sparseIndices);\n    const updatesBuf = backend.bufferSync(sparseValues);\n    const $defaultValue = util.decodeString(backend.readSync(defaultValue.dataId)[0]);\n    const outBuf = scatterImplCPU(indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n    return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n  }\n\n  const program = new ScatterProgram(numUpdates, sliceRank, sparseIndices.shape.length, sparseValues.shape.length, strides, [outputSize, 1], sumDupeIndices);\n  const res = backend.runWebGLProgram(program, [sparseValues, sparseIndices, defaultValue], sparseValues.dtype);\n  const reshaped = reshape({\n    inputs: {\n      x: res\n    },\n    backend,\n    attrs: {\n      shape: outputShape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(res);\n  return reshaped;\n}\nexport const sparseToDenseConfig = {\n  kernelName: SparseToDense,\n  backendName: 'webgl',\n  kernelFunc: sparseToDense\n};","map":{"version":3,"names":["backend_util","SparseToDense","util","scatterImplCPU","ScatterProgram","reshape","sparseToDense","args","inputs","backend","attrs","sparseIndices","sparseValues","defaultValue","outputShape","sliceRank","numUpdates","sliceSize","strides","outputSize","calculateShapes","sumDupeIndices","dtype","indicesBuf","bufferSync","updatesBuf","$defaultValue","decodeString","readSync","dataId","outBuf","makeTensorInfo","values","program","shape","length","res","runWebGLProgram","reshaped","x","disposeIntermediateTensorInfo","sparseToDenseConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SparseToDense.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SparseToDense, util } from '@tensorflow/tfjs-core';\nimport { scatterImplCPU } from '../kernel_utils/shared';\nimport { ScatterProgram } from '../scatter_gpu';\nimport { reshape } from './Reshape';\nexport function sparseToDense(args) {\n    const { inputs, backend, attrs } = args;\n    const { sparseIndices, sparseValues, defaultValue } = inputs;\n    const { outputShape } = attrs;\n    const { sliceRank, numUpdates, sliceSize, strides, outputSize } = backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n    const sumDupeIndices = false;\n    if (sparseValues.dtype === 'string') {\n        const indicesBuf = backend.bufferSync(sparseIndices);\n        const updatesBuf = backend.bufferSync(sparseValues);\n        const $defaultValue = util.decodeString(backend.readSync(defaultValue.dataId)[0]);\n        const outBuf = scatterImplCPU(indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n        return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n    }\n    const program = new ScatterProgram(numUpdates, sliceRank, sparseIndices.shape.length, sparseValues.shape.length, strides, [outputSize, 1], sumDupeIndices);\n    const res = backend.runWebGLProgram(program, [sparseValues, sparseIndices, defaultValue], sparseValues.dtype);\n    const reshaped = reshape({ inputs: { x: res }, backend, attrs: { shape: outputShape } });\n    backend.disposeIntermediateTensorInfo(res);\n    return reshaped;\n}\nexport const sparseToDenseConfig = {\n    kernelName: SparseToDense,\n    backendName: 'webgl',\n    kernelFunc: sparseToDense\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,EAAuBC,aAAvB,EAAsCC,IAAtC,QAAkD,uBAAlD;AACA,SAASC,cAAT,QAA+B,wBAA/B;AACA,SAASC,cAAT,QAA+B,gBAA/B;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;EAChC,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BH,IAAnC;EACA,MAAM;IAAEI,aAAF;IAAiBC,YAAjB;IAA+BC;EAA/B,IAAgDL,MAAtD;EACA,MAAM;IAAEM;EAAF,IAAkBJ,KAAxB;EACA,MAAM;IAAEK,SAAF;IAAaC,UAAb;IAAyBC,SAAzB;IAAoCC,OAApC;IAA6CC;EAA7C,IAA4DnB,YAAY,CAACoB,eAAb,CAA6BR,YAA7B,EAA2CD,aAA3C,EAA0DG,WAA1D,CAAlE;EACA,MAAMO,cAAc,GAAG,KAAvB;;EACA,IAAIT,YAAY,CAACU,KAAb,KAAuB,QAA3B,EAAqC;IACjC,MAAMC,UAAU,GAAGd,OAAO,CAACe,UAAR,CAAmBb,aAAnB,CAAnB;IACA,MAAMc,UAAU,GAAGhB,OAAO,CAACe,UAAR,CAAmBZ,YAAnB,CAAnB;IACA,MAAMc,aAAa,GAAGxB,IAAI,CAACyB,YAAL,CAAkBlB,OAAO,CAACmB,QAAR,CAAiBf,YAAY,CAACgB,MAA9B,EAAsC,CAAtC,CAAlB,CAAtB;IACA,MAAMC,MAAM,GAAG3B,cAAc,CAACoB,UAAD,EAAaE,UAAb,EAAyBX,WAAzB,EAAsCK,UAAtC,EAAkDF,SAAlD,EAA6DD,UAA7D,EAAyED,SAAzE,EAAoFG,OAApF,EAA6FQ,aAA7F,EAA4GL,cAA5G,CAA7B;IACA,OAAOZ,OAAO,CAACsB,cAAR,CAAuBjB,WAAvB,EAAoCgB,MAAM,CAACR,KAA3C,EAAkDQ,MAAM,CAACE,MAAzD,CAAP;EACH;;EACD,MAAMC,OAAO,GAAG,IAAI7B,cAAJ,CAAmBY,UAAnB,EAA+BD,SAA/B,EAA0CJ,aAAa,CAACuB,KAAd,CAAoBC,MAA9D,EAAsEvB,YAAY,CAACsB,KAAb,CAAmBC,MAAzF,EAAiGjB,OAAjG,EAA0G,CAACC,UAAD,EAAa,CAAb,CAA1G,EAA2HE,cAA3H,CAAhB;EACA,MAAMe,GAAG,GAAG3B,OAAO,CAAC4B,eAAR,CAAwBJ,OAAxB,EAAiC,CAACrB,YAAD,EAAeD,aAAf,EAA8BE,YAA9B,CAAjC,EAA8ED,YAAY,CAACU,KAA3F,CAAZ;EACA,MAAMgB,QAAQ,GAAGjC,OAAO,CAAC;IAAEG,MAAM,EAAE;MAAE+B,CAAC,EAAEH;IAAL,CAAV;IAAsB3B,OAAtB;IAA+BC,KAAK,EAAE;MAAEwB,KAAK,EAAEpB;IAAT;EAAtC,CAAD,CAAxB;EACAL,OAAO,CAAC+B,6BAAR,CAAsCJ,GAAtC;EACA,OAAOE,QAAP;AACH;AACD,OAAO,MAAMG,mBAAmB,GAAG;EAC/BC,UAAU,EAAEzC,aADmB;EAE/B0C,WAAW,EAAE,OAFkB;EAG/BC,UAAU,EAAEtC;AAHmB,CAA5B"},"metadata":{},"sourceType":"module"}