{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reshape, util } from '@tensorflow/tfjs-core';\nexport function reshape(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    shape\n  } = attrs;\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n  util.assert(xSize === $xSize, () => `The new shape (${$shape}) has ${$xSize} elements and the old ` + `shape (${x.shape}) has ${xSize} elements. The new shape and old ` + `shape must have the same number of elements.`);\n  backend.incRef(x.dataId);\n  const xData = backend.data.get(x.dataId);\n\n  if (xData.complexTensorInfos != null) {\n    const real = xData.complexTensorInfos.real;\n    const imag = xData.complexTensorInfos.imag;\n    real.shape = $shape;\n    imag.shape = $shape;\n  }\n\n  return {\n    dataId: x.dataId,\n    shape: $shape,\n    dtype: x.dtype\n  };\n}\nexport const reshapeConfig = {\n  kernelName: Reshape,\n  backendName: 'cpu',\n  kernelFunc: reshape\n};","map":{"version":3,"names":["Reshape","util","reshape","args","inputs","backend","attrs","x","shape","xSize","sizeFromShape","$shape","inferFromImplicitShape","$xSize","assert","incRef","dataId","xData","data","get","complexTensorInfos","real","imag","dtype","reshapeConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Reshape.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reshape, util } from '@tensorflow/tfjs-core';\nexport function reshape(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { shape } = attrs;\n    const xSize = util.sizeFromShape(x.shape);\n    const $shape = util.inferFromImplicitShape(shape, xSize);\n    const $xSize = util.sizeFromShape($shape);\n    util.assert(xSize === $xSize, () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n        `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n        `shape must have the same number of elements.`);\n    backend.incRef(x.dataId);\n    const xData = backend.data.get(x.dataId);\n    if (xData.complexTensorInfos != null) {\n        const real = xData.complexTensorInfos.real;\n        const imag = xData.complexTensorInfos.imag;\n        real.shape = $shape;\n        imag.shape = $shape;\n    }\n    return { dataId: x.dataId, shape: $shape, dtype: x.dtype };\n}\nexport const reshapeConfig = {\n    kernelName: Reshape,\n    backendName: 'cpu',\n    kernelFunc: reshape\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAT,EAAkBC,IAAlB,QAA8B,uBAA9B;AACA,OAAO,SAASC,OAAT,CAAiBC,IAAjB,EAAuB;EAC1B,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BH,IAAnC;EACA,MAAM;IAAEI;EAAF,IAAQH,MAAd;EACA,MAAM;IAAEI;EAAF,IAAYF,KAAlB;EACA,MAAMG,KAAK,GAAGR,IAAI,CAACS,aAAL,CAAmBH,CAAC,CAACC,KAArB,CAAd;EACA,MAAMG,MAAM,GAAGV,IAAI,CAACW,sBAAL,CAA4BJ,KAA5B,EAAmCC,KAAnC,CAAf;EACA,MAAMI,MAAM,GAAGZ,IAAI,CAACS,aAAL,CAAmBC,MAAnB,CAAf;EACAV,IAAI,CAACa,MAAL,CAAYL,KAAK,KAAKI,MAAtB,EAA8B,MAAO,kBAAiBF,MAAO,SAAQE,MAAO,wBAAxC,GAC/B,UAASN,CAAC,CAACC,KAAM,SAAQC,KAAM,mCADA,GAE/B,8CAFL;EAGAJ,OAAO,CAACU,MAAR,CAAeR,CAAC,CAACS,MAAjB;EACA,MAAMC,KAAK,GAAGZ,OAAO,CAACa,IAAR,CAAaC,GAAb,CAAiBZ,CAAC,CAACS,MAAnB,CAAd;;EACA,IAAIC,KAAK,CAACG,kBAAN,IAA4B,IAAhC,EAAsC;IAClC,MAAMC,IAAI,GAAGJ,KAAK,CAACG,kBAAN,CAAyBC,IAAtC;IACA,MAAMC,IAAI,GAAGL,KAAK,CAACG,kBAAN,CAAyBE,IAAtC;IACAD,IAAI,CAACb,KAAL,GAAaG,MAAb;IACAW,IAAI,CAACd,KAAL,GAAaG,MAAb;EACH;;EACD,OAAO;IAAEK,MAAM,EAAET,CAAC,CAACS,MAAZ;IAAoBR,KAAK,EAAEG,MAA3B;IAAmCY,KAAK,EAAEhB,CAAC,CAACgB;EAA5C,CAAP;AACH;AACD,OAAO,MAAMC,aAAa,GAAG;EACzBC,UAAU,EAAEzB,OADa;EAEzB0B,WAAW,EAAE,KAFY;EAGzBC,UAAU,EAAEzB;AAHa,CAAtB"},"metadata":{},"sourceType":"module"}