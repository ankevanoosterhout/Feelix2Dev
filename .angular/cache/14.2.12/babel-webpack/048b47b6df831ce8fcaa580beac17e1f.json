{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Atan2 } from '../kernel_names';\nimport { add } from '../ops/add';\nimport { assertAndGetBroadcastShape, getReductionAxes } from '../ops/broadcast_util';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { neg } from '../ops/neg';\nimport { reshape } from '../ops/reshape';\nimport { square } from '../ops/square';\nimport { sum } from '../ops/sum';\nexport const atan2GradConfig = {\n  kernelName: Atan2,\n  inputsToSave: ['a', 'b'],\n  gradFunc: (dy, saved) => {\n    const [a, b] = saved;\n    const outShape = assertAndGetBroadcastShape(a.shape, b.shape);\n\n    const derA = () => {\n      const d = add(square(a), square(b));\n      let res = mul(dy, div(b, d));\n      const reduceAxes = getReductionAxes(a.shape, outShape);\n\n      if (reduceAxes.length > 0) {\n        res = sum(res, reduceAxes);\n      }\n\n      return reshape(res, a.shape);\n    };\n\n    const derB = () => {\n      const d = add(square(a), square(b));\n      let res = neg(mul(dy, div(a, d)));\n      const reduceAxes = getReductionAxes(b.shape, outShape);\n\n      if (reduceAxes.length > 0) {\n        res = sum(res, reduceAxes);\n      }\n\n      return reshape(res, b.shape);\n    };\n\n    return {\n      a: derA,\n      b: derB\n    };\n  }\n};","map":{"version":3,"names":["Atan2","add","assertAndGetBroadcastShape","getReductionAxes","div","mul","neg","reshape","square","sum","atan2GradConfig","kernelName","inputsToSave","gradFunc","dy","saved","a","b","outShape","shape","derA","d","res","reduceAxes","length","derB"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/gradients/Atan2_grad.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Atan2 } from '../kernel_names';\nimport { add } from '../ops/add';\nimport { assertAndGetBroadcastShape, getReductionAxes } from '../ops/broadcast_util';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { neg } from '../ops/neg';\nimport { reshape } from '../ops/reshape';\nimport { square } from '../ops/square';\nimport { sum } from '../ops/sum';\nexport const atan2GradConfig = {\n    kernelName: Atan2,\n    inputsToSave: ['a', 'b'],\n    gradFunc: (dy, saved) => {\n        const [a, b] = saved;\n        const outShape = assertAndGetBroadcastShape(a.shape, b.shape);\n        const derA = () => {\n            const d = add(square(a), square(b));\n            let res = mul(dy, div(b, d));\n            const reduceAxes = getReductionAxes(a.shape, outShape);\n            if (reduceAxes.length > 0) {\n                res = sum(res, reduceAxes);\n            }\n            return reshape(res, a.shape);\n        };\n        const derB = () => {\n            const d = add(square(a), square(b));\n            let res = neg(mul(dy, div(a, d)));\n            const reduceAxes = getReductionAxes(b.shape, outShape);\n            if (reduceAxes.length > 0) {\n                res = sum(res, reduceAxes);\n            }\n            return reshape(res, b.shape);\n        };\n        return { a: derA, b: derB };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,KAAT,QAAsB,iBAAtB;AACA,SAASC,GAAT,QAAoB,YAApB;AACA,SAASC,0BAAT,EAAqCC,gBAArC,QAA6D,uBAA7D;AACA,SAASC,GAAT,QAAoB,YAApB;AACA,SAASC,GAAT,QAAoB,YAApB;AACA,SAASC,GAAT,QAAoB,YAApB;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,SAASC,GAAT,QAAoB,YAApB;AACA,OAAO,MAAMC,eAAe,GAAG;EAC3BC,UAAU,EAAEX,KADe;EAE3BY,YAAY,EAAE,CAAC,GAAD,EAAM,GAAN,CAFa;EAG3BC,QAAQ,EAAE,CAACC,EAAD,EAAKC,KAAL,KAAe;IACrB,MAAM,CAACC,CAAD,EAAIC,CAAJ,IAASF,KAAf;IACA,MAAMG,QAAQ,GAAGhB,0BAA0B,CAACc,CAAC,CAACG,KAAH,EAAUF,CAAC,CAACE,KAAZ,CAA3C;;IACA,MAAMC,IAAI,GAAG,MAAM;MACf,MAAMC,CAAC,GAAGpB,GAAG,CAACO,MAAM,CAACQ,CAAD,CAAP,EAAYR,MAAM,CAACS,CAAD,CAAlB,CAAb;MACA,IAAIK,GAAG,GAAGjB,GAAG,CAACS,EAAD,EAAKV,GAAG,CAACa,CAAD,EAAII,CAAJ,CAAR,CAAb;MACA,MAAME,UAAU,GAAGpB,gBAAgB,CAACa,CAAC,CAACG,KAAH,EAAUD,QAAV,CAAnC;;MACA,IAAIK,UAAU,CAACC,MAAX,GAAoB,CAAxB,EAA2B;QACvBF,GAAG,GAAGb,GAAG,CAACa,GAAD,EAAMC,UAAN,CAAT;MACH;;MACD,OAAOhB,OAAO,CAACe,GAAD,EAAMN,CAAC,CAACG,KAAR,CAAd;IACH,CARD;;IASA,MAAMM,IAAI,GAAG,MAAM;MACf,MAAMJ,CAAC,GAAGpB,GAAG,CAACO,MAAM,CAACQ,CAAD,CAAP,EAAYR,MAAM,CAACS,CAAD,CAAlB,CAAb;MACA,IAAIK,GAAG,GAAGhB,GAAG,CAACD,GAAG,CAACS,EAAD,EAAKV,GAAG,CAACY,CAAD,EAAIK,CAAJ,CAAR,CAAJ,CAAb;MACA,MAAME,UAAU,GAAGpB,gBAAgB,CAACc,CAAC,CAACE,KAAH,EAAUD,QAAV,CAAnC;;MACA,IAAIK,UAAU,CAACC,MAAX,GAAoB,CAAxB,EAA2B;QACvBF,GAAG,GAAGb,GAAG,CAACa,GAAD,EAAMC,UAAN,CAAT;MACH;;MACD,OAAOhB,OAAO,CAACe,GAAD,EAAML,CAAC,CAACE,KAAR,CAAd;IACH,CARD;;IASA,OAAO;MAAEH,CAAC,EAAEI,IAAL;MAAWH,CAAC,EAAEQ;IAAd,CAAP;EACH;AAzB0B,CAAxB"},"metadata":{},"sourceType":"module"}