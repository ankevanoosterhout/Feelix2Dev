{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n  switch (node.op) {\n    case 'BiasAdd':\n    case 'AddV2':\n    case 'Add':\n      {\n        return [ops.add(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n\n    case 'AddN':\n      {\n        return [ops.addN(getParamValue('tensors', node, tensorMap, context))];\n      }\n\n    case 'FloorMod':\n    case 'Mod':\n      return [ops.mod(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n\n    case 'Mul':\n      return [ops.mul(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n\n    case 'RealDiv':\n    case 'Div':\n      {\n        return [ops.div(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n\n    case 'DivNoNan':\n      {\n        return [ops.divNoNan(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n\n    case 'FloorDiv':\n      {\n        return [ops.floorDiv(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n\n    case 'Sub':\n      {\n        return [ops.sub(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n\n    case 'Minimum':\n      {\n        return [ops.minimum(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n\n    case 'Maximum':\n      {\n        return [ops.maximum(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n\n    case 'Pow':\n      {\n        return [ops.pow(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n\n    case 'SquaredDifference':\n      {\n        return [ops.squaredDifference(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'arithmetic';","map":{"version":3,"names":["tfOps","getParamValue","executeOp","node","tensorMap","context","ops","op","add","addN","mod","mul","div","divNoNan","floorDiv","sub","minimum","maximum","pow","squaredDifference","TypeError","CATEGORY"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/arithmetic_executor.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'BiasAdd':\n        case 'AddV2':\n        case 'Add': {\n            return [ops.add(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'AddN': {\n            return [ops.addN(getParamValue('tensors', node, tensorMap, context))];\n        }\n        case 'FloorMod':\n        case 'Mod':\n            return [ops.mod(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        case 'Mul':\n            return [ops.mul(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        case 'RealDiv':\n        case 'Div': {\n            return [ops.div(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'DivNoNan': {\n            return [ops.divNoNan(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'FloorDiv': {\n            return [ops.floorDiv(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'Sub': {\n            return [ops.sub(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'Minimum': {\n            return [ops.minimum(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'Maximum': {\n            return [ops.maximum(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'Pow': {\n            return [ops.pow(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'SquaredDifference': {\n            return [ops.squaredDifference(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'arithmetic';\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}