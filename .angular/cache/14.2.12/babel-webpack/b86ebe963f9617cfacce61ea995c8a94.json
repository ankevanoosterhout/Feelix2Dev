{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { tensor1d } from '../tensor1d';\nimport { op } from '../operation';\nimport { cast } from '../cast';\nimport { split } from '../split';\nimport { bincount } from '../bincount';\nimport { lessEqual } from '../less_equal';\nimport { greater } from '../greater';\nimport { sum } from '../sum';\nimport { add } from '../add';\nimport { mul } from '../mul';\nimport { div } from '../div';\nimport { sub } from '../sub';\nimport { round } from '../round';\nimport { where } from '../where';\nimport { fill } from '../fill';\nimport { slice } from '../slice';\nimport { range } from '../range';\nimport { tensor } from '../tensor';\nimport * as util from '../../util';\nimport { convertToTensor } from '../../tensor_util_env';\n/**\n * Performs image binarization with corresponding threshold\n * (depends on the method)value, which creates a binary image from a grayscale.\n * @param image 3d tensor of shape [imageHeight,imageWidth, depth],\n * where imageHeight and imageWidth must be positive.The image color\n * range should be [0, 255].\n * @param method Optional string from `'binary' | 'otsu'`\n * which specifies the method for thresholding. Defaults to 'binary'.\n * @param inverted Optional boolean whichspecifies\n * if colours should be inverted. Defaults to false.\n * @param threshValue Optional number which defines threshold value from 0 to 1.\n * Defaults to 0.5.\n * @return A 3d tensor of shape [imageHeight,imageWidth, depth], which\n * contains binarized image.\n */\n\nfunction threshold_(image, method = 'binary', inverted = false, threshValue = 0.5) {\n  const $image = convertToTensor(image, 'image', 'threshold');\n  /* 0.2989, 0.5870, 0.1140 are represent luma coefficients in CCIR601.\n  Reference for converting between RGB and grayscale: https://en.wikipedia.org/wiki/Luma_%28video%29  */\n\n  const RED_INTENCITY_COEF = 0.2989;\n  const GREEN_INTENCITY_COEF = 0.5870;\n  const BLUE_INTENCITY_COEF = 0.1140;\n  const totalPixelsInImage = $image.shape[0] * $image.shape[1];\n  let $threshold = mul(tensor1d([threshValue]), 255);\n  let r, g, b, grayscale;\n  util.assert($image.rank === 3, () => 'Error in threshold: image must be rank 3,' + `but got rank ${$image.rank}.`);\n  util.assert($image.shape[2] === 3 || $image.shape[2] === 1, () => 'Error in threshold: ' + 'image color channel must be equal to 3 or 1' + `but got ${$image.shape[2]}.`);\n  util.assert($image.dtype === 'int32' || $image.dtype === 'float32', () => 'Error in dtype: image dtype must be int32 or float32,' + `but got dtype ${$image.dtype}.`);\n  util.assert(method === 'otsu' || method === 'binary', () => `Method must be binary or otsu, but was ${method}`);\n\n  if ($image.shape[2] === 3) {\n    [r, g, b] = split($image, [1, 1, 1], -1);\n    const $r = mul(r, RED_INTENCITY_COEF);\n    const $g = mul(g, GREEN_INTENCITY_COEF);\n    const $b = mul(b, BLUE_INTENCITY_COEF);\n    grayscale = add(add($r, $g), $b);\n  } else {\n    grayscale = image;\n  }\n\n  if (method === 'otsu') {\n    const $histogram = bincount(cast(round(grayscale), 'int32'), tensor([]), 256);\n    $threshold = otsu($histogram, totalPixelsInImage);\n  }\n\n  const invCondition = inverted ? lessEqual(grayscale, $threshold) : greater(grayscale, $threshold);\n  const result = cast(mul(invCondition, 255), 'int32');\n  return result;\n}\n\nfunction otsu(histogram, total) {\n  let bestThresh = tensor1d([-1]);\n  let bestInBetVar = tensor1d([0]);\n  let cInBetVar = tensor1d([0]);\n  let classFirst, classSecond, meanFirst, meanSec, weightForeground, weightBack;\n\n  for (let index = 0; index < histogram.size - 1; index++) {\n    classFirst = slice(histogram, 0, index + 1);\n    classSecond = slice(histogram, index + 1);\n    weightForeground = div(sum(classFirst), total);\n    weightBack = div(sum(classSecond), total);\n    const meanFirstDivA = sum(mul(classFirst, range(0, classFirst.size)));\n    meanFirst = div(meanFirstDivA, sum(classFirst));\n    const meanSecFill = fill(classSecond.shape, classFirst.size);\n    const meanSecAdd = add(range(0, classSecond.size), meanSecFill);\n    const meanSecMul = mul(classSecond, meanSecAdd);\n    meanSec = div(sum(meanSecMul), sum(classSecond));\n    const cInBetVarSubA = sub(meanFirst, meanSec);\n    const cInBetVarSubB = sub(meanFirst, meanSec);\n    const cInBetVarMul = mul(weightForeground, weightBack);\n    cInBetVar = mul(mul(cInBetVarMul, cInBetVarSubA), cInBetVarSubB);\n    const condition = greater(cInBetVar, bestInBetVar);\n    bestInBetVar = where(condition, cInBetVar, bestInBetVar);\n    bestThresh = where(condition, tensor1d([index]), bestThresh);\n  }\n\n  return bestThresh;\n}\n\nexport const threshold = op({\n  threshold_\n});","map":{"version":3,"names":["tensor1d","op","cast","split","bincount","lessEqual","greater","sum","add","mul","div","sub","round","where","fill","slice","range","tensor","util","convertToTensor","threshold_","image","method","inverted","threshValue","$image","RED_INTENCITY_COEF","GREEN_INTENCITY_COEF","BLUE_INTENCITY_COEF","totalPixelsInImage","shape","$threshold","r","g","b","grayscale","assert","rank","dtype","$r","$g","$b","$histogram","otsu","invCondition","result","histogram","total","bestThresh","bestInBetVar","cInBetVar","classFirst","classSecond","meanFirst","meanSec","weightForeground","weightBack","index","size","meanFirstDivA","meanSecFill","meanSecAdd","meanSecMul","cInBetVarSubA","cInBetVarSubB","cInBetVarMul","condition","threshold"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/image/threshold.js"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { tensor1d } from '../tensor1d';\nimport { op } from '../operation';\nimport { cast } from '../cast';\nimport { split } from '../split';\nimport { bincount } from '../bincount';\nimport { lessEqual } from '../less_equal';\nimport { greater } from '../greater';\nimport { sum } from '../sum';\nimport { add } from '../add';\nimport { mul } from '../mul';\nimport { div } from '../div';\nimport { sub } from '../sub';\nimport { round } from '../round';\nimport { where } from '../where';\nimport { fill } from '../fill';\nimport { slice } from '../slice';\nimport { range } from '../range';\nimport { tensor } from '../tensor';\nimport * as util from '../../util';\nimport { convertToTensor } from '../../tensor_util_env';\n/**\n * Performs image binarization with corresponding threshold\n * (depends on the method)value, which creates a binary image from a grayscale.\n * @param image 3d tensor of shape [imageHeight,imageWidth, depth],\n * where imageHeight and imageWidth must be positive.The image color\n * range should be [0, 255].\n * @param method Optional string from `'binary' | 'otsu'`\n * which specifies the method for thresholding. Defaults to 'binary'.\n * @param inverted Optional boolean whichspecifies\n * if colours should be inverted. Defaults to false.\n * @param threshValue Optional number which defines threshold value from 0 to 1.\n * Defaults to 0.5.\n * @return A 3d tensor of shape [imageHeight,imageWidth, depth], which\n * contains binarized image.\n */\nfunction threshold_(image, method = 'binary', inverted = false, threshValue = 0.5) {\n    const $image = convertToTensor(image, 'image', 'threshold');\n    /* 0.2989, 0.5870, 0.1140 are represent luma coefficients in CCIR601.\n    Reference for converting between RGB and grayscale: https://en.wikipedia.org/wiki/Luma_%28video%29  */\n    const RED_INTENCITY_COEF = 0.2989;\n    const GREEN_INTENCITY_COEF = 0.5870;\n    const BLUE_INTENCITY_COEF = 0.1140;\n    const totalPixelsInImage = $image.shape[0] * $image.shape[1];\n    let $threshold = mul(tensor1d([threshValue]), 255);\n    let r, g, b, grayscale;\n    util.assert($image.rank === 3, () => 'Error in threshold: image must be rank 3,' +\n        `but got rank ${$image.rank}.`);\n    util.assert($image.shape[2] === 3 || $image.shape[2] === 1, () => 'Error in threshold: ' +\n        'image color channel must be equal to 3 or 1' +\n        `but got ${$image.shape[2]}.`);\n    util.assert($image.dtype === 'int32' || $image.dtype === 'float32', () => 'Error in dtype: image dtype must be int32 or float32,' +\n        `but got dtype ${$image.dtype}.`);\n    util.assert(method === 'otsu' || method === 'binary', () => `Method must be binary or otsu, but was ${method}`);\n    if ($image.shape[2] === 3) {\n        [r, g, b] = split($image, [1, 1, 1], -1);\n        const $r = mul(r, RED_INTENCITY_COEF);\n        const $g = mul(g, GREEN_INTENCITY_COEF);\n        const $b = mul(b, BLUE_INTENCITY_COEF);\n        grayscale = add(add($r, $g), $b);\n    }\n    else {\n        grayscale = image;\n    }\n    if (method === 'otsu') {\n        const $histogram = bincount(cast(round(grayscale), 'int32'), tensor([]), 256);\n        $threshold = otsu($histogram, totalPixelsInImage);\n    }\n    const invCondition = inverted ?\n        lessEqual(grayscale, $threshold) : greater(grayscale, $threshold);\n    const result = cast(mul(invCondition, 255), 'int32');\n    return result;\n}\nfunction otsu(histogram, total) {\n    let bestThresh = tensor1d([-1]);\n    let bestInBetVar = tensor1d([0]);\n    let cInBetVar = tensor1d([0]);\n    let classFirst, classSecond, meanFirst, meanSec, weightForeground, weightBack;\n    for (let index = 0; index < histogram.size - 1; index++) {\n        classFirst = slice(histogram, 0, index + 1);\n        classSecond = slice(histogram, index + 1);\n        weightForeground = div(sum(classFirst), total);\n        weightBack = div(sum(classSecond), total);\n        const meanFirstDivA = sum(mul(classFirst, range(0, classFirst.size)));\n        meanFirst = div(meanFirstDivA, sum(classFirst));\n        const meanSecFill = fill(classSecond.shape, classFirst.size);\n        const meanSecAdd = add(range(0, classSecond.size), meanSecFill);\n        const meanSecMul = mul(classSecond, (meanSecAdd));\n        meanSec = div(sum(meanSecMul), sum(classSecond));\n        const cInBetVarSubA = sub(meanFirst, meanSec);\n        const cInBetVarSubB = sub(meanFirst, meanSec);\n        const cInBetVarMul = mul(weightForeground, weightBack);\n        cInBetVar = mul(mul(cInBetVarMul, cInBetVarSubA), cInBetVarSubB);\n        const condition = greater(cInBetVar, bestInBetVar);\n        bestInBetVar = where(condition, cInBetVar, bestInBetVar);\n        bestThresh = where(condition, tensor1d([index]), bestThresh);\n    }\n    return bestThresh;\n}\nexport const threshold = op({ threshold_ });\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}