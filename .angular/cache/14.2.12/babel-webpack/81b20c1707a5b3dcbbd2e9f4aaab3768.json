{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Concat, util } from '@tensorflow/tfjs-core';\nimport { complex } from './Complex';\nimport { concatImpl } from './Concat_impl';\nimport { identity } from './Identity';\nimport { imag } from './Imag';\nimport { real } from './Real';\nimport { reshape } from './Reshape';\nexport function concat(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    axis\n  } = attrs;\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n  const shapes = inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n  let outShape = backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  } // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n\n\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n\n  if ($inputs.length === 1) {\n    return identity({\n      inputs: {\n        x: $inputs[0]\n      },\n      backend\n    });\n  }\n\n  if ($inputs[0].dtype === 'complex64') {\n    const reals = $inputs.map(t => real({\n      inputs: {\n        input: t\n      },\n      backend\n    }));\n    const imags = $inputs.map(t => imag({\n      inputs: {\n        input: t\n      },\n      backend\n    }));\n    const realConcated = concat({\n      inputs: reals,\n      backend,\n      attrs: {\n        axis: $axis\n      }\n    });\n    const imagConcated = concat({\n      inputs: imags,\n      backend,\n      attrs: {\n        axis: $axis\n      }\n    });\n    const result = complex({\n      inputs: {\n        real: realConcated,\n        imag: imagConcated\n      },\n      backend\n    });\n    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n    return result;\n  } // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n\n\n  const inputs2D = $inputs.map(t => {\n    const innerSize = util.sizeFromShape(t.shape.slice($axis));\n    const shape = [-1, innerSize];\n    return reshape({\n      inputs: {\n        x: t\n      },\n      backend,\n      attrs: {\n        shape\n      }\n    });\n  });\n  const inputsValShapes = inputs2D.map(t => {\n    return {\n      vals: backend.data.get(t.dataId).values,\n      shape: t.shape\n    };\n  }); // Concats 2d tensors along axis=1.\n\n  outShape = backend_util.computeOutShape(inputs2D.map(t => t.shape), 1\n  /* axis */\n  );\n  const simplyConcat = inputs2D[0].shape[0] === 1;\n  const outVals = concatImpl(inputsValShapes, outShape, inputs[0].dtype, simplyConcat);\n  const finalOutShape = backend_util.computeOutShape($inputs.map(t => t.shape), $axis);\n  const outInfo = backend.makeTensorInfo(finalOutShape, inputs[0].dtype, outVals);\n  inputs2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return outInfo;\n}\nexport const concatConfig = {\n  kernelName: Concat,\n  backendName: 'cpu',\n  kernelFunc: concat\n};","map":{"version":3,"names":["backend_util","Concat","util","complex","concatImpl","identity","imag","real","reshape","concat","args","inputs","backend","attrs","axis","$axis","parseAxisParam","shape","shapes","map","t","assertParamsConsistent","outShape","computeOutShape","sizeFromShape","makeTensorInfo","dtype","$inputs","filter","length","x","reals","input","imags","realConcated","imagConcated","result","forEach","r","disposeIntermediateTensorInfo","i","inputs2D","innerSize","slice","inputsValShapes","vals","data","get","dataId","values","simplyConcat","outVals","finalOutShape","outInfo","concatConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Concat.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Concat, util } from '@tensorflow/tfjs-core';\nimport { complex } from './Complex';\nimport { concatImpl } from './Concat_impl';\nimport { identity } from './Identity';\nimport { imag } from './Imag';\nimport { real } from './Real';\nimport { reshape } from './Reshape';\nexport function concat(args) {\n    const { inputs, backend, attrs } = args;\n    const { axis } = attrs;\n    const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n    const shapes = inputs.map(t => t.shape);\n    backend_util.assertParamsConsistent(shapes, $axis);\n    let outShape = backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n    if (util.sizeFromShape(outShape) === 0) {\n        return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n    }\n    // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n    const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n    if ($inputs.length === 1) {\n        return identity({ inputs: { x: $inputs[0] }, backend });\n    }\n    if ($inputs[0].dtype === 'complex64') {\n        const reals = $inputs.map((t) => real({ inputs: { input: t }, backend }));\n        const imags = $inputs.map((t) => imag({ inputs: { input: t }, backend }));\n        const realConcated = concat({ inputs: reals, backend, attrs: { axis: $axis } });\n        const imagConcated = concat({ inputs: imags, backend, attrs: { axis: $axis } });\n        const result = complex({ inputs: { real: realConcated, imag: imagConcated }, backend });\n        reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n        imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n        backend.disposeIntermediateTensorInfo(realConcated);\n        backend.disposeIntermediateTensorInfo(imagConcated);\n        return result;\n    }\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const inputs2D = $inputs.map(t => {\n        const innerSize = util.sizeFromShape(t.shape.slice($axis));\n        const shape = [-1, innerSize];\n        return reshape({ inputs: { x: t }, backend, attrs: { shape } });\n    });\n    const inputsValShapes = inputs2D.map(t => {\n        return { vals: backend.data.get(t.dataId).values, shape: t.shape };\n    });\n    // Concats 2d tensors along axis=1.\n    outShape =\n        backend_util.computeOutShape(inputs2D.map(t => t.shape), 1 /* axis */);\n    const simplyConcat = inputs2D[0].shape[0] === 1;\n    const outVals = concatImpl(inputsValShapes, outShape, inputs[0].dtype, simplyConcat);\n    const finalOutShape = backend_util.computeOutShape($inputs.map(t => t.shape), $axis);\n    const outInfo = backend.makeTensorInfo(finalOutShape, inputs[0].dtype, outVals);\n    inputs2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return outInfo;\n}\nexport const concatConfig = {\n    kernelName: Concat,\n    backendName: 'cpu',\n    kernelFunc: concat\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}