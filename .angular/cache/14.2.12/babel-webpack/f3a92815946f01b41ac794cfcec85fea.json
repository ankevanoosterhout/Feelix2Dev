{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { RaggedTensorToTensor } from '@tensorflow/tfjs-core';\nimport { raggedTensorToTensorImplCPU } from '../kernel_utils/shared';\nexport function raggedTensorToTensor(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    shape,\n    values,\n    defaultValue,\n    rowPartitionTensors\n  } = inputs;\n  const {\n    rowPartitionTypes\n  } = attrs;\n  const $shape = backend.readSync(shape.dataId);\n  const $values = backend.readSync(values.dataId);\n  const $defaultValue = backend.readSync(defaultValue.dataId);\n  const $rowPartitionValues = rowPartitionTensors.map(t => backend.readSync(t.dataId));\n  const rowPartitionValuesShapes = rowPartitionTensors.map(t => t.shape);\n  const [outputShape, output] = raggedTensorToTensorImplCPU($shape, shape.shape, $values, values.shape, values.dtype, $defaultValue, defaultValue.shape, $rowPartitionValues, rowPartitionValuesShapes, rowPartitionTypes);\n  return backend.makeTensorInfo(outputShape, values.dtype, output);\n}\nexport const raggedTensorToTensorConfig = {\n  kernelName: RaggedTensorToTensor,\n  backendName: 'webgl',\n  kernelFunc: raggedTensorToTensor\n};","map":{"version":3,"names":["RaggedTensorToTensor","raggedTensorToTensorImplCPU","raggedTensorToTensor","args","inputs","backend","attrs","shape","values","defaultValue","rowPartitionTensors","rowPartitionTypes","$shape","readSync","dataId","$values","$defaultValue","$rowPartitionValues","map","t","rowPartitionValuesShapes","outputShape","output","dtype","makeTensorInfo","raggedTensorToTensorConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/RaggedTensorToTensor.js"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { RaggedTensorToTensor } from '@tensorflow/tfjs-core';\nimport { raggedTensorToTensorImplCPU } from '../kernel_utils/shared';\nexport function raggedTensorToTensor(args) {\n    const { inputs, backend, attrs } = args;\n    const { shape, values, defaultValue, rowPartitionTensors } = inputs;\n    const { rowPartitionTypes } = attrs;\n    const $shape = backend.readSync(shape.dataId);\n    const $values = backend.readSync(values.dataId);\n    const $defaultValue = backend.readSync(defaultValue.dataId);\n    const $rowPartitionValues = rowPartitionTensors.map(t => backend.readSync(t.dataId));\n    const rowPartitionValuesShapes = rowPartitionTensors.map(t => t.shape);\n    const [outputShape, output] = raggedTensorToTensorImplCPU($shape, shape.shape, $values, values.shape, values.dtype, $defaultValue, defaultValue.shape, $rowPartitionValues, rowPartitionValuesShapes, rowPartitionTypes);\n    return backend.makeTensorInfo(outputShape, values.dtype, output);\n}\nexport const raggedTensorToTensorConfig = {\n    kernelName: RaggedTensorToTensor,\n    backendName: 'webgl',\n    kernelFunc: raggedTensorToTensor,\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,oBAAT,QAAqC,uBAArC;AACA,SAASC,2BAAT,QAA4C,wBAA5C;AACA,OAAO,SAASC,oBAAT,CAA8BC,IAA9B,EAAoC;EACvC,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BH,IAAnC;EACA,MAAM;IAAEI,KAAF;IAASC,MAAT;IAAiBC,YAAjB;IAA+BC;EAA/B,IAAuDN,MAA7D;EACA,MAAM;IAAEO;EAAF,IAAwBL,KAA9B;EACA,MAAMM,MAAM,GAAGP,OAAO,CAACQ,QAAR,CAAiBN,KAAK,CAACO,MAAvB,CAAf;EACA,MAAMC,OAAO,GAAGV,OAAO,CAACQ,QAAR,CAAiBL,MAAM,CAACM,MAAxB,CAAhB;EACA,MAAME,aAAa,GAAGX,OAAO,CAACQ,QAAR,CAAiBJ,YAAY,CAACK,MAA9B,CAAtB;EACA,MAAMG,mBAAmB,GAAGP,mBAAmB,CAACQ,GAApB,CAAwBC,CAAC,IAAId,OAAO,CAACQ,QAAR,CAAiBM,CAAC,CAACL,MAAnB,CAA7B,CAA5B;EACA,MAAMM,wBAAwB,GAAGV,mBAAmB,CAACQ,GAApB,CAAwBC,CAAC,IAAIA,CAAC,CAACZ,KAA/B,CAAjC;EACA,MAAM,CAACc,WAAD,EAAcC,MAAd,IAAwBrB,2BAA2B,CAACW,MAAD,EAASL,KAAK,CAACA,KAAf,EAAsBQ,OAAtB,EAA+BP,MAAM,CAACD,KAAtC,EAA6CC,MAAM,CAACe,KAApD,EAA2DP,aAA3D,EAA0EP,YAAY,CAACF,KAAvF,EAA8FU,mBAA9F,EAAmHG,wBAAnH,EAA6IT,iBAA7I,CAAzD;EACA,OAAON,OAAO,CAACmB,cAAR,CAAuBH,WAAvB,EAAoCb,MAAM,CAACe,KAA3C,EAAkDD,MAAlD,CAAP;AACH;AACD,OAAO,MAAMG,0BAA0B,GAAG;EACtCC,UAAU,EAAE1B,oBAD0B;EAEtC2B,WAAW,EAAE,OAFyB;EAGtCC,UAAU,EAAE1B;AAH0B,CAAnC"},"metadata":{},"sourceType":"module"}