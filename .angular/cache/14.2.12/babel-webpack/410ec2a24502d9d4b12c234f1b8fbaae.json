{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { avgPool } from './avg_pool';\nimport { batchToSpaceND } from './batch_to_space_nd';\nimport * as conv_util from './conv_util';\nimport { maxPool } from './max_pool';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { spaceToBatchND } from './space_to_batch_nd';\n/**\n * Performs an N-D pooling operation\n *\n * @param input The input tensor, of rank 4 or rank 3 of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param windowShape The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param poolingType The type of pooling, either 'max' or 'avg'.\n * @param pad The type of padding algorithm:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *         https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in dilated pooling. Defaults to `[1, 1]`. If `dilationRate` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\n\nfunction pool_(input, windowShape, poolingType, pad, dilations, strides, dimRoundingMode) {\n  if (dilations == null) {\n    dilations = [1, 1];\n  }\n\n  if (strides == null) {\n    strides = 1;\n  }\n\n  if (pad === 0) {\n    pad = 'valid';\n  }\n\n  const $x = convertToTensor(input, 'x', 'maxPool');\n  let x4D = $x;\n  let reshapedTo4D = false;\n\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n\n  util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in pool: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);\n  const convInfo = conv_util.computePool2DInfo(x4D.shape, windowShape, strides, dilations, pad);\n  const dilation = [convInfo.dilationHeight, convInfo.dilationWidth]; // The following implementation does batchToSpace(pool(spaceToBatch(x)))\n  // whenever dilation > 1 since the TF kernels do not support dilation > 1.\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/nn_ops.py#L1037\n\n  let basePadding;\n\n  if (pad === 'same') {\n    basePadding = withSpaceToBatchBasePaddings([convInfo.filterHeight, convInfo.filterWidth], dilation);\n  } else {\n    basePadding = [[0, 0], [0, 0]];\n  }\n\n  const isDilationOne = dilation[0] === 1 && dilation[1] === 1;\n  const [adjustedPadding, adjustedCrops] = requiredSpaceToBatchPaddings([convInfo.inHeight, convInfo.inWidth], dilation, basePadding);\n  const convertedPad = isDilationOne ? pad : 'valid';\n  const convertedX = isDilationOne ? x4D : spaceToBatchND(x4D, dilation, adjustedPadding);\n  const forwardOp = poolingType === 'avg' ? () => avgPool(convertedX, windowShape, strides, convertedPad, dimRoundingMode) : () => maxPool(convertedX, windowShape, strides, convertedPad, dimRoundingMode);\n  const y = forwardOp();\n  const res = isDilationOne ? y : batchToSpaceND(y, dilation, adjustedCrops);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n\n  return res;\n} // Helper function to compute crops and paddings for pool with dilation > 1.\n// tslint:disable-next-line:max-line-length\n// https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/array_ops.py#L2184\n\n\nfunction requiredSpaceToBatchPaddings(inputShape, blockShape, basePadding) {\n  const padStart = basePadding.map(b => b[0]);\n  const origPadEnd = basePadding.map(b => b[1]);\n  const fullInputShape = inputShape.concat(padStart, origPadEnd);\n  const padEndExtra = blockShape.map((b, i) => (b - fullInputShape[i] % b) % b);\n  const padEnd = origPadEnd.map((s, i) => s + padEndExtra[i]);\n  const paddings = blockShape.map((_, i) => [padStart[i], padEnd[i]]);\n  const crops = blockShape.map((_, i) => [0, padEndExtra[i]]);\n  return [paddings, crops];\n} // Helper function to compute base paddings for pool with dilation > 1.\n// tslint:disable-next-line:max-line-length\n// https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/nn_ops.py#L524\n\n\nfunction withSpaceToBatchBasePaddings(filterShape, dilation) {\n  // Spatial dimensions of the filters and the upsampled filters in which we\n  // introduce (rate - 1) zeros between consecutive filter values.\n  const dilatedFilterShape = filterShape.map((s, i) => {\n    return s + (s - 1) * (dilation[i] - 1);\n  });\n  const padExtraShape = dilatedFilterShape.map(s => s - 1); // When padding is odd, we pad more at end, following the same\n  // convention as conv2d.\n\n  const padExtraStart = padExtraShape.map(s => Math.floor(s / 2));\n  const padExtraEnd = padExtraShape.map((s, i) => s - padExtraStart[i]);\n  return padExtraShape.map((_, i) => {\n    return [padExtraStart[i], padExtraEnd[i]];\n  });\n}\n\nexport const pool = op({\n  pool_\n});","map":{"version":3,"names":["convertToTensor","util","avgPool","batchToSpaceND","conv_util","maxPool","op","reshape","spaceToBatchND","pool_","input","windowShape","poolingType","pad","dilations","strides","dimRoundingMode","$x","x4D","reshapedTo4D","rank","shape","assert","eitherStridesOrDilationsAreOne","convInfo","computePool2DInfo","dilation","dilationHeight","dilationWidth","basePadding","withSpaceToBatchBasePaddings","filterHeight","filterWidth","isDilationOne","adjustedPadding","adjustedCrops","requiredSpaceToBatchPaddings","inHeight","inWidth","convertedPad","convertedX","forwardOp","y","res","inputShape","blockShape","padStart","map","b","origPadEnd","fullInputShape","concat","padEndExtra","i","padEnd","s","paddings","_","crops","filterShape","dilatedFilterShape","padExtraShape","padExtraStart","Math","floor","padExtraEnd","pool"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/pool.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { avgPool } from './avg_pool';\nimport { batchToSpaceND } from './batch_to_space_nd';\nimport * as conv_util from './conv_util';\nimport { maxPool } from './max_pool';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { spaceToBatchND } from './space_to_batch_nd';\n/**\n * Performs an N-D pooling operation\n *\n * @param input The input tensor, of rank 4 or rank 3 of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param windowShape The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param poolingType The type of pooling, either 'max' or 'avg'.\n * @param pad The type of padding algorithm:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *         https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in dilated pooling. Defaults to `[1, 1]`. If `dilationRate` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction pool_(input, windowShape, poolingType, pad, dilations, strides, dimRoundingMode) {\n    if (dilations == null) {\n        dilations = [1, 1];\n    }\n    if (strides == null) {\n        strides = 1;\n    }\n    if (pad === 0) {\n        pad = 'valid';\n    }\n    const $x = convertToTensor(input, 'x', 'maxPool');\n    let x4D = $x;\n    let reshapedTo4D = false;\n    if ($x.rank === 3) {\n        reshapedTo4D = true;\n        x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n    }\n    util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in pool: Either strides or dilations must be 1. ' +\n        `Got strides ${strides} and dilations '${dilations}'`);\n    const convInfo = conv_util.computePool2DInfo(x4D.shape, windowShape, strides, dilations, pad);\n    const dilation = [convInfo.dilationHeight, convInfo.dilationWidth];\n    // The following implementation does batchToSpace(pool(spaceToBatch(x)))\n    // whenever dilation > 1 since the TF kernels do not support dilation > 1.\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/nn_ops.py#L1037\n    let basePadding;\n    if (pad === 'same') {\n        basePadding = withSpaceToBatchBasePaddings([convInfo.filterHeight, convInfo.filterWidth], dilation);\n    }\n    else {\n        basePadding = [[0, 0], [0, 0]];\n    }\n    const isDilationOne = dilation[0] === 1 && dilation[1] === 1;\n    const [adjustedPadding, adjustedCrops] = requiredSpaceToBatchPaddings([convInfo.inHeight, convInfo.inWidth], dilation, basePadding);\n    const convertedPad = isDilationOne ? pad : 'valid';\n    const convertedX = isDilationOne ? x4D : spaceToBatchND(x4D, dilation, adjustedPadding);\n    const forwardOp = poolingType === 'avg' ?\n        () => avgPool(convertedX, windowShape, strides, convertedPad, dimRoundingMode) :\n        () => maxPool(convertedX, windowShape, strides, convertedPad, dimRoundingMode);\n    const y = forwardOp();\n    const res = isDilationOne ? y : batchToSpaceND(y, dilation, adjustedCrops);\n    if (reshapedTo4D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n    }\n    return res;\n}\n// Helper function to compute crops and paddings for pool with dilation > 1.\n// tslint:disable-next-line:max-line-length\n// https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/array_ops.py#L2184\nfunction requiredSpaceToBatchPaddings(inputShape, blockShape, basePadding) {\n    const padStart = basePadding.map(b => b[0]);\n    const origPadEnd = basePadding.map(b => b[1]);\n    const fullInputShape = inputShape.concat(padStart, origPadEnd);\n    const padEndExtra = blockShape.map((b, i) => (b - fullInputShape[i] % b) % b);\n    const padEnd = origPadEnd.map((s, i) => s + padEndExtra[i]);\n    const paddings = blockShape.map((_, i) => [padStart[i], padEnd[i]]);\n    const crops = blockShape.map((_, i) => [0, padEndExtra[i]]);\n    return [paddings, crops];\n}\n// Helper function to compute base paddings for pool with dilation > 1.\n// tslint:disable-next-line:max-line-length\n// https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/nn_ops.py#L524\nfunction withSpaceToBatchBasePaddings(filterShape, dilation) {\n    // Spatial dimensions of the filters and the upsampled filters in which we\n    // introduce (rate - 1) zeros between consecutive filter values.\n    const dilatedFilterShape = filterShape.map((s, i) => {\n        return s + (s - 1) * (dilation[i] - 1);\n    });\n    const padExtraShape = dilatedFilterShape.map(s => s - 1);\n    // When padding is odd, we pad more at end, following the same\n    // convention as conv2d.\n    const padExtraStart = padExtraShape.map(s => Math.floor(s / 2));\n    const padExtraEnd = padExtraShape.map((s, i) => s - padExtraStart[i]);\n    return padExtraShape.map((_, i) => {\n        return [padExtraStart[i], padExtraEnd[i]];\n    });\n}\nexport const pool = op({ pool_ });\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}