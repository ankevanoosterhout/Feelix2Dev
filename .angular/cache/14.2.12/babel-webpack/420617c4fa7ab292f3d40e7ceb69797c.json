{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Max } from '@tensorflow/tfjs-core';\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { maxImplCPU } from '../kernel_utils/shared';\nimport { maxImpl } from './Max_impl';\nimport { transposeImpl, transposeImplCPU } from './Transpose_impl';\nexport function max(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    reductionIndices,\n    keepDims\n  } = attrs;\n  const xRank = x.shape.length;\n  const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  const maxInputIsTransposed = permutedAxes != null;\n  const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n  let maxInput = x;\n\n  if (maxInputIsTransposed) {\n    if (shouldExecuteOnCPU) {\n      const xTexData = backend.texData.get(maxInput.dataId);\n      const values = xTexData.values;\n      const newShape = new Array(xRank);\n\n      for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = x.shape[permutedAxes[i]];\n      }\n\n      const maxInputValues = transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n      maxInput = backend.makeTensorInfo(newShape, x.dtype);\n      const maxInputData = backend.texData.get(maxInput.dataId);\n      maxInputData.values = maxInputValues;\n    } else {\n      maxInput = transposeImpl(x, permutedAxes, backend);\n    }\n\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n  const [maxOutShape, reduceShape] = backend_util.computeOutAndReduceShapes(maxInput.shape, axes);\n  let outShape = maxOutShape;\n\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    outShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n  }\n\n  let out;\n\n  if (shouldExecuteOnCPU) {\n    const xTexData = backend.texData.get(maxInput.dataId);\n    const values = xTexData.values;\n    const outValues = maxImplCPU(values, util.sizeFromShape(reduceShape), outShape, x.dtype);\n    out = backend.makeTensorInfo(outShape, x.dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n  } else {\n    out = maxImpl(maxInput, reduceShape, outShape, backend);\n  }\n\n  if (maxInputIsTransposed) {\n    backend.disposeIntermediateTensorInfo(maxInput);\n  }\n\n  return out;\n}\nexport const maxConfig = {\n  kernelName: Max,\n  backendName: 'webgl',\n  kernelFunc: max\n};","map":{"version":3,"names":["Max","backend_util","util","maxImplCPU","maxImpl","transposeImpl","transposeImplCPU","max","args","inputs","backend","attrs","x","reductionIndices","keepDims","xRank","shape","length","origAxes","parseAxisParam","axes","permutedAxes","getAxesPermutation","maxInputIsTransposed","shouldExecuteOnCPU","maxInput","xTexData","texData","get","dataId","values","newShape","Array","i","maxInputValues","dtype","makeTensorInfo","maxInputData","getInnerMostAxes","assertAxesAreInnerMostDims","maxOutShape","reduceShape","computeOutAndReduceShapes","outShape","expandShapeToKeepDim","out","outValues","sizeFromShape","outData","disposeIntermediateTensorInfo","maxConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Max.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Max } from '@tensorflow/tfjs-core';\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { maxImplCPU } from '../kernel_utils/shared';\nimport { maxImpl } from './Max_impl';\nimport { transposeImpl, transposeImplCPU } from './Transpose_impl';\nexport function max(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { reductionIndices, keepDims } = attrs;\n    const xRank = x.shape.length;\n    const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    const maxInputIsTransposed = permutedAxes != null;\n    const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n    let maxInput = x;\n    if (maxInputIsTransposed) {\n        if (shouldExecuteOnCPU) {\n            const xTexData = backend.texData.get(maxInput.dataId);\n            const values = xTexData.values;\n            const newShape = new Array(xRank);\n            for (let i = 0; i < newShape.length; i++) {\n                newShape[i] = x.shape[permutedAxes[i]];\n            }\n            const maxInputValues = transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n            maxInput = backend.makeTensorInfo(newShape, x.dtype);\n            const maxInputData = backend.texData.get(maxInput.dataId);\n            maxInputData.values = maxInputValues;\n        }\n        else {\n            maxInput = transposeImpl(x, permutedAxes, backend);\n        }\n        axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n    backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n    const [maxOutShape, reduceShape] = backend_util.computeOutAndReduceShapes(maxInput.shape, axes);\n    let outShape = maxOutShape;\n    if (keepDims) {\n        // rather than reshape at the end, set the target shape here.\n        outShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n    }\n    let out;\n    if (shouldExecuteOnCPU) {\n        const xTexData = backend.texData.get(maxInput.dataId);\n        const values = xTexData.values;\n        const outValues = maxImplCPU(values, util.sizeFromShape(reduceShape), outShape, x.dtype);\n        out = backend.makeTensorInfo(outShape, x.dtype);\n        const outData = backend.texData.get(out.dataId);\n        outData.values = outValues;\n    }\n    else {\n        out = maxImpl(maxInput, reduceShape, outShape, backend);\n    }\n    if (maxInputIsTransposed) {\n        backend.disposeIntermediateTensorInfo(maxInput);\n    }\n    return out;\n}\nexport const maxConfig = {\n    kernelName: Max,\n    backendName: 'webgl',\n    kernelFunc: max\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}