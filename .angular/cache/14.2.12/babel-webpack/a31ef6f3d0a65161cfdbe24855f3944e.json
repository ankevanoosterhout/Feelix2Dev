{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { add } from '../add';\nimport { log } from '../log';\nimport { Reduction } from '../loss_ops_utils';\nimport { mul } from '../mul';\nimport { neg } from '../neg';\nimport { op } from '../operation';\nimport { scalar } from '../scalar';\nimport { sub } from '../sub';\nimport { computeWeightedLoss } from './compute_weighted_loss';\n/**\n * Computes the log loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param epsilon A small increment to avoid taking log of zero\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\n\nfunction logLoss_(labels, predictions, weights, epsilon = 1e-7, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n  const $labels = convertToTensor(labels, 'labels', 'logLoss');\n  const $predictions = convertToTensor(predictions, 'predictions', 'logLoss');\n  let $weights = null;\n\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'logLoss');\n  }\n\n  assertShapesMatch($labels.shape, $predictions.shape, 'Error in logLoss: ');\n  const one = scalar(1);\n  const epsilonScalar = scalar(epsilon);\n  const l1 = neg(mul($labels, log(add($predictions, epsilonScalar))));\n  const l2 = mul(sub(one, $labels), log(add(sub(one, $predictions), epsilonScalar)));\n  const losses = sub(l1, l2);\n  return computeWeightedLoss(losses, $weights, reduction);\n}\n\nexport const logLoss = op({\n  logLoss_\n});","map":{"version":3,"names":["convertToTensor","assertShapesMatch","add","log","Reduction","mul","neg","op","scalar","sub","computeWeightedLoss","logLoss_","labels","predictions","weights","epsilon","reduction","SUM_BY_NONZERO_WEIGHTS","$labels","$predictions","$weights","shape","one","epsilonScalar","l1","l2","losses","logLoss"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/losses/log_loss.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { add } from '../add';\nimport { log } from '../log';\nimport { Reduction } from '../loss_ops_utils';\nimport { mul } from '../mul';\nimport { neg } from '../neg';\nimport { op } from '../operation';\nimport { scalar } from '../scalar';\nimport { sub } from '../sub';\nimport { computeWeightedLoss } from './compute_weighted_loss';\n/**\n * Computes the log loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param epsilon A small increment to avoid taking log of zero\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction logLoss_(labels, predictions, weights, epsilon = 1e-7, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    const $labels = convertToTensor(labels, 'labels', 'logLoss');\n    const $predictions = convertToTensor(predictions, 'predictions', 'logLoss');\n    let $weights = null;\n    if (weights != null) {\n        $weights = convertToTensor(weights, 'weights', 'logLoss');\n    }\n    assertShapesMatch($labels.shape, $predictions.shape, 'Error in logLoss: ');\n    const one = scalar(1);\n    const epsilonScalar = scalar(epsilon);\n    const l1 = neg(mul($labels, log(add($predictions, epsilonScalar))));\n    const l2 = mul(sub(one, $labels), log(add(sub(one, $predictions), epsilonScalar)));\n    const losses = sub(l1, l2);\n    return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const logLoss = op({ logLoss_ });\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,eAAT,QAAgC,uBAAhC;AACA,SAASC,iBAAT,QAAkC,YAAlC;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,SAASC,EAAT,QAAmB,cAAnB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,SAASC,mBAAT,QAAoC,yBAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,CAAkBC,MAAlB,EAA0BC,WAA1B,EAAuCC,OAAvC,EAAgDC,OAAO,GAAG,IAA1D,EAAgEC,SAAS,GAAGZ,SAAS,CAACa,sBAAtF,EAA8G;EAC1G,MAAMC,OAAO,GAAGlB,eAAe,CAACY,MAAD,EAAS,QAAT,EAAmB,SAAnB,CAA/B;EACA,MAAMO,YAAY,GAAGnB,eAAe,CAACa,WAAD,EAAc,aAAd,EAA6B,SAA7B,CAApC;EACA,IAAIO,QAAQ,GAAG,IAAf;;EACA,IAAIN,OAAO,IAAI,IAAf,EAAqB;IACjBM,QAAQ,GAAGpB,eAAe,CAACc,OAAD,EAAU,SAAV,EAAqB,SAArB,CAA1B;EACH;;EACDb,iBAAiB,CAACiB,OAAO,CAACG,KAAT,EAAgBF,YAAY,CAACE,KAA7B,EAAoC,oBAApC,CAAjB;EACA,MAAMC,GAAG,GAAGd,MAAM,CAAC,CAAD,CAAlB;EACA,MAAMe,aAAa,GAAGf,MAAM,CAACO,OAAD,CAA5B;EACA,MAAMS,EAAE,GAAGlB,GAAG,CAACD,GAAG,CAACa,OAAD,EAAUf,GAAG,CAACD,GAAG,CAACiB,YAAD,EAAeI,aAAf,CAAJ,CAAb,CAAJ,CAAd;EACA,MAAME,EAAE,GAAGpB,GAAG,CAACI,GAAG,CAACa,GAAD,EAAMJ,OAAN,CAAJ,EAAoBf,GAAG,CAACD,GAAG,CAACO,GAAG,CAACa,GAAD,EAAMH,YAAN,CAAJ,EAAyBI,aAAzB,CAAJ,CAAvB,CAAd;EACA,MAAMG,MAAM,GAAGjB,GAAG,CAACe,EAAD,EAAKC,EAAL,CAAlB;EACA,OAAOf,mBAAmB,CAACgB,MAAD,EAASN,QAAT,EAAmBJ,SAAnB,CAA1B;AACH;;AACD,OAAO,MAAMW,OAAO,GAAGpB,EAAE,CAAC;EAAEI;AAAF,CAAD,CAAlB"},"metadata":{},"sourceType":"module"}