{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, DataStorage, engine, env, kernel_impls, KernelBackend, util } from '@tensorflow/tfjs-core';\nconst whereImpl = kernel_impls.whereImpl;\nimport { assertNotComplex } from './cpu_util';\nexport class MathBackendCPU extends KernelBackend {\n  constructor() {\n    super();\n    this.blockSize = 48;\n    this.firstUse = true;\n    this.data = new DataStorage(this, engine());\n  }\n\n  nextDataId() {\n    return MathBackendCPU.nextDataId++;\n  }\n\n  write(values, shape, dtype) {\n    if (this.firstUse) {\n      this.firstUse = false;\n\n      if (env().get('IS_NODE')) {\n        backend_util.warn('\\n============================\\n' + 'Hi, looks like you are running TensorFlow.js in ' + 'Node.js. To speed things up dramatically, install our node ' + 'backend, visit https://github.com/tensorflow/tfjs-node for more details. ' + '\\n============================');\n      }\n    }\n\n    const dataId = {\n      id: this.nextDataId()\n    };\n    this.data.set(dataId, {\n      values,\n      dtype,\n      refCount: 1\n    });\n    return dataId;\n  }\n  /**\n   * Create a data bucket in cpu backend.\n   * @param shape Shape of the `TensorInfo`.\n   * @param dtype DType of the `TensorInfo`.\n   * @param values The value of the `TensorInfo` stored as a flattened array.\n   */\n\n\n  makeTensorInfo(shape, dtype, values) {\n    let outId;\n\n    if (dtype === 'string' && values != null && values.length > 0 && util.isString(values[0])) {\n      const encodedValues = values.map(d => util.encodeString(d));\n      outId = this.write(encodedValues, shape, dtype);\n    } else {\n      outId = this.write(values, shape, dtype);\n    }\n\n    return {\n      dataId: outId,\n      shape,\n      dtype\n    };\n  }\n  /** Return refCount of a `TensorData`. */\n\n\n  refCount(dataId) {\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n      return tensorData.refCount;\n    }\n\n    return 0;\n  }\n  /** Increase refCount of a `TensorData`. */\n\n\n  incRef(dataId) {\n    const tensorData = this.data.get(dataId);\n    tensorData.refCount++;\n  }\n  /** Decrease refCount of a `TensorData`. */\n\n\n  decRef(dataId) {\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n      tensorData.refCount--;\n    }\n  }\n\n  move(dataId, values, shape, dtype, refCount) {\n    this.data.set(dataId, {\n      values,\n      dtype,\n      refCount\n    });\n  }\n\n  numDataIds() {\n    return this.data.numDataIds();\n  }\n\n  read(dataId) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return _this.readSync(dataId);\n    })();\n  }\n\n  readSync(dataId) {\n    const {\n      dtype,\n      complexTensorInfos\n    } = this.data.get(dataId);\n\n    if (dtype === 'complex64') {\n      const realValues = this.readSync(complexTensorInfos.real.dataId);\n      const imagValues = this.readSync(complexTensorInfos.imag.dataId);\n      return backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    }\n\n    return this.data.get(dataId).values;\n  }\n\n  bufferSync(t) {\n    const data = this.readSync(t.dataId);\n\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        const strings = data.map(d => util.decodeString(d));\n        return buffer(t.shape, t.dtype, strings);\n      } catch (_a) {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n\n    return buffer(t.shape, t.dtype, data);\n  }\n\n  makeOutput(values, shape, dtype) {\n    return engine().makeTensorFromTensorInfo(this.makeTensorInfo(shape, dtype, values), this);\n  }\n  /**\n   * Dispose the memory if the dataId has 0 refCount. Return true if the memory\n   * is released or memory is not managed in this backend, false if memory is\n   * not cleared.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n\n\n  disposeData(dataId, force = false) {\n    if (this.data.has(dataId)) {\n      this.data.get(dataId).refCount--;\n\n      if (!force && this.data.get(dataId).refCount > 0) {\n        return false;\n      }\n\n      const {\n        complexTensorInfos\n      } = this.data.get(dataId);\n\n      if (complexTensorInfos != null) {\n        this.disposeData(complexTensorInfos.real.dataId, true);\n        this.disposeData(complexTensorInfos.imag.dataId, true);\n      }\n\n      this.data.delete(dataId);\n    }\n\n    return true;\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo) {\n    this.disposeData(tensorInfo.dataId);\n  }\n\n  time(f) {\n    return _asyncToGenerator(function* () {\n      const start = util.now();\n      f();\n      const kernelMs = util.now() - start;\n      return {\n        kernelMs\n      };\n    })();\n  }\n\n  memory() {\n    return {\n      // Unreliable due to automatic gc. The numbers above are cumulative.\n      unreliable: true,\n      reasons: ['The reported memory is an upper bound. Due to automatic garbage ' + 'collection, the true allocated memory may be less.']\n    };\n  }\n\n  where(condition) {\n    assertNotComplex([condition], 'where');\n    const condVals = this.readSync(condition.dataId);\n    return whereImpl(condition.shape, condVals);\n  }\n\n  dispose() {}\n\n  floatPrecision() {\n    return 32;\n  }\n  /** Returns the smallest representable number.  */\n\n\n  epsilon() {\n    return super.epsilon();\n  }\n\n}\nMathBackendCPU.nextDataId = 0;","map":{"version":3,"names":["backend_util","buffer","DataStorage","engine","env","kernel_impls","KernelBackend","util","whereImpl","assertNotComplex","MathBackendCPU","constructor","blockSize","firstUse","data","nextDataId","write","values","shape","dtype","get","warn","dataId","id","set","refCount","makeTensorInfo","outId","length","isString","encodedValues","map","d","encodeString","has","tensorData","incRef","decRef","move","numDataIds","read","readSync","complexTensorInfos","realValues","real","imagValues","imag","mergeRealAndImagArrays","bufferSync","t","strings","decodeString","_a","Error","makeOutput","makeTensorFromTensorInfo","disposeData","force","delete","disposeIntermediateTensorInfo","tensorInfo","time","f","start","now","kernelMs","memory","unreliable","reasons","where","condition","condVals","dispose","floatPrecision","epsilon"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/backend_cpu.js"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, DataStorage, engine, env, kernel_impls, KernelBackend, util } from '@tensorflow/tfjs-core';\nconst whereImpl = kernel_impls.whereImpl;\nimport { assertNotComplex } from './cpu_util';\nexport class MathBackendCPU extends KernelBackend {\n    constructor() {\n        super();\n        this.blockSize = 48;\n        this.firstUse = true;\n        this.data = new DataStorage(this, engine());\n    }\n    nextDataId() {\n        return MathBackendCPU.nextDataId++;\n    }\n    write(values, shape, dtype) {\n        if (this.firstUse) {\n            this.firstUse = false;\n            if (env().get('IS_NODE')) {\n                backend_util.warn('\\n============================\\n' +\n                    'Hi, looks like you are running TensorFlow.js in ' +\n                    'Node.js. To speed things up dramatically, install our node ' +\n                    'backend, visit https://github.com/tensorflow/tfjs-node for more details. ' +\n                    '\\n============================');\n            }\n        }\n        const dataId = { id: this.nextDataId() };\n        this.data.set(dataId, { values, dtype, refCount: 1 });\n        return dataId;\n    }\n    /**\n     * Create a data bucket in cpu backend.\n     * @param shape Shape of the `TensorInfo`.\n     * @param dtype DType of the `TensorInfo`.\n     * @param values The value of the `TensorInfo` stored as a flattened array.\n     */\n    makeTensorInfo(shape, dtype, values) {\n        let outId;\n        if (dtype === 'string' && values != null && values.length > 0 &&\n            util.isString(values[0])) {\n            const encodedValues = values.map(d => util.encodeString(d));\n            outId = this.write(encodedValues, shape, dtype);\n        }\n        else {\n            outId = this.write(values, shape, dtype);\n        }\n        return { dataId: outId, shape, dtype };\n    }\n    /** Return refCount of a `TensorData`. */\n    refCount(dataId) {\n        if (this.data.has(dataId)) {\n            const tensorData = this.data.get(dataId);\n            return tensorData.refCount;\n        }\n        return 0;\n    }\n    /** Increase refCount of a `TensorData`. */\n    incRef(dataId) {\n        const tensorData = this.data.get(dataId);\n        tensorData.refCount++;\n    }\n    /** Decrease refCount of a `TensorData`. */\n    decRef(dataId) {\n        if (this.data.has(dataId)) {\n            const tensorData = this.data.get(dataId);\n            tensorData.refCount--;\n        }\n    }\n    move(dataId, values, shape, dtype, refCount) {\n        this.data.set(dataId, { values, dtype, refCount });\n    }\n    numDataIds() {\n        return this.data.numDataIds();\n    }\n    async read(dataId) {\n        return this.readSync(dataId);\n    }\n    readSync(dataId) {\n        const { dtype, complexTensorInfos } = this.data.get(dataId);\n        if (dtype === 'complex64') {\n            const realValues = this.readSync(complexTensorInfos.real.dataId);\n            const imagValues = this.readSync(complexTensorInfos.imag.dataId);\n            return backend_util.mergeRealAndImagArrays(realValues, imagValues);\n        }\n        return this.data.get(dataId).values;\n    }\n    bufferSync(t) {\n        const data = this.readSync(t.dataId);\n        if (t.dtype === 'string') {\n            try {\n                // Decode the bytes into string.\n                const strings = data.map(d => util.decodeString(d));\n                return buffer(t.shape, t.dtype, strings);\n            }\n            catch (_a) {\n                throw new Error('Failed to decode encoded string bytes into utf-8');\n            }\n        }\n        return buffer(t.shape, t.dtype, data);\n    }\n    makeOutput(values, shape, dtype) {\n        return engine().makeTensorFromTensorInfo(this.makeTensorInfo(shape, dtype, values), this);\n    }\n    /**\n     * Dispose the memory if the dataId has 0 refCount. Return true if the memory\n     * is released or memory is not managed in this backend, false if memory is\n     * not cleared.\n     * @param dataId\n     * @oaram force Optional, remove the data regardless of refCount\n     */\n    disposeData(dataId, force = false) {\n        if (this.data.has(dataId)) {\n            this.data.get(dataId).refCount--;\n            if (!force && this.data.get(dataId).refCount > 0) {\n                return false;\n            }\n            const { complexTensorInfos } = this.data.get(dataId);\n            if (complexTensorInfos != null) {\n                this.disposeData(complexTensorInfos.real.dataId, true);\n                this.disposeData(complexTensorInfos.imag.dataId, true);\n            }\n            this.data.delete(dataId);\n        }\n        return true;\n    }\n    disposeIntermediateTensorInfo(tensorInfo) {\n        this.disposeData(tensorInfo.dataId);\n    }\n    async time(f) {\n        const start = util.now();\n        f();\n        const kernelMs = util.now() - start;\n        return { kernelMs };\n    }\n    memory() {\n        return {\n            // Unreliable due to automatic gc. The numbers above are cumulative.\n            unreliable: true,\n            reasons: ['The reported memory is an upper bound. Due to automatic garbage ' +\n                    'collection, the true allocated memory may be less.']\n        };\n    }\n    where(condition) {\n        assertNotComplex([condition], 'where');\n        const condVals = this.readSync(condition.dataId);\n        return whereImpl(condition.shape, condVals);\n    }\n    dispose() { }\n    floatPrecision() {\n        return 32;\n    }\n    /** Returns the smallest representable number.  */\n    epsilon() {\n        return super.epsilon();\n    }\n}\nMathBackendCPU.nextDataId = 0;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}