{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Mod } from '../kernel_names';\nimport { assertAndGetBroadcastShape, getReductionAxes } from '../ops/broadcast_util';\nimport { div } from '../ops/div';\nimport { floor } from '../ops/floor';\nimport { mul } from '../ops/mul';\nimport { neg } from '../ops/neg';\nimport { reshape } from '../ops/reshape';\nimport { sum } from '../ops/sum';\nexport const modGradConfig = {\n  kernelName: Mod,\n  inputsToSave: ['a', 'b'],\n  gradFunc: (dy, saved) => {\n    const [a, b] = saved;\n    const outShape = assertAndGetBroadcastShape(a.shape, b.shape);\n\n    const derA = () => {\n      const reduceAxes = getReductionAxes(a.shape, outShape);\n\n      if (reduceAxes.length > 0) {\n        return reshape(sum(dy, reduceAxes), a.shape);\n      }\n\n      return dy;\n    };\n\n    const derB = () => {\n      const res = mul(dy, neg(floor(div(a, b))));\n      const reduceAxes = getReductionAxes(b.shape, outShape);\n\n      if (reduceAxes.length > 0) {\n        return reshape(sum(res, reduceAxes), b.shape);\n      }\n\n      return res;\n    };\n\n    return {\n      a: derA,\n      b: derB\n    };\n  }\n};","map":{"version":3,"names":["Mod","assertAndGetBroadcastShape","getReductionAxes","div","floor","mul","neg","reshape","sum","modGradConfig","kernelName","inputsToSave","gradFunc","dy","saved","a","b","outShape","shape","derA","reduceAxes","length","derB","res"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/gradients/Mod_grad.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Mod } from '../kernel_names';\nimport { assertAndGetBroadcastShape, getReductionAxes } from '../ops/broadcast_util';\nimport { div } from '../ops/div';\nimport { floor } from '../ops/floor';\nimport { mul } from '../ops/mul';\nimport { neg } from '../ops/neg';\nimport { reshape } from '../ops/reshape';\nimport { sum } from '../ops/sum';\nexport const modGradConfig = {\n    kernelName: Mod,\n    inputsToSave: ['a', 'b'],\n    gradFunc: (dy, saved) => {\n        const [a, b] = saved;\n        const outShape = assertAndGetBroadcastShape(a.shape, b.shape);\n        const derA = () => {\n            const reduceAxes = getReductionAxes(a.shape, outShape);\n            if (reduceAxes.length > 0) {\n                return reshape(sum(dy, reduceAxes), a.shape);\n            }\n            return dy;\n        };\n        const derB = () => {\n            const res = mul(dy, neg(floor(div(a, b))));\n            const reduceAxes = getReductionAxes(b.shape, outShape);\n            if (reduceAxes.length > 0) {\n                return reshape(sum(res, reduceAxes), b.shape);\n            }\n            return res;\n        };\n        return { a: derA, b: derB };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,GAAT,QAAoB,iBAApB;AACA,SAASC,0BAAT,EAAqCC,gBAArC,QAA6D,uBAA7D;AACA,SAASC,GAAT,QAAoB,YAApB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,SAASC,GAAT,QAAoB,YAApB;AACA,SAASC,GAAT,QAAoB,YAApB;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,SAASC,GAAT,QAAoB,YAApB;AACA,OAAO,MAAMC,aAAa,GAAG;EACzBC,UAAU,EAAEV,GADa;EAEzBW,YAAY,EAAE,CAAC,GAAD,EAAM,GAAN,CAFW;EAGzBC,QAAQ,EAAE,CAACC,EAAD,EAAKC,KAAL,KAAe;IACrB,MAAM,CAACC,CAAD,EAAIC,CAAJ,IAASF,KAAf;IACA,MAAMG,QAAQ,GAAGhB,0BAA0B,CAACc,CAAC,CAACG,KAAH,EAAUF,CAAC,CAACE,KAAZ,CAA3C;;IACA,MAAMC,IAAI,GAAG,MAAM;MACf,MAAMC,UAAU,GAAGlB,gBAAgB,CAACa,CAAC,CAACG,KAAH,EAAUD,QAAV,CAAnC;;MACA,IAAIG,UAAU,CAACC,MAAX,GAAoB,CAAxB,EAA2B;QACvB,OAAOd,OAAO,CAACC,GAAG,CAACK,EAAD,EAAKO,UAAL,CAAJ,EAAsBL,CAAC,CAACG,KAAxB,CAAd;MACH;;MACD,OAAOL,EAAP;IACH,CAND;;IAOA,MAAMS,IAAI,GAAG,MAAM;MACf,MAAMC,GAAG,GAAGlB,GAAG,CAACQ,EAAD,EAAKP,GAAG,CAACF,KAAK,CAACD,GAAG,CAACY,CAAD,EAAIC,CAAJ,CAAJ,CAAN,CAAR,CAAf;MACA,MAAMI,UAAU,GAAGlB,gBAAgB,CAACc,CAAC,CAACE,KAAH,EAAUD,QAAV,CAAnC;;MACA,IAAIG,UAAU,CAACC,MAAX,GAAoB,CAAxB,EAA2B;QACvB,OAAOd,OAAO,CAACC,GAAG,CAACe,GAAD,EAAMH,UAAN,CAAJ,EAAuBJ,CAAC,CAACE,KAAzB,CAAd;MACH;;MACD,OAAOK,GAAP;IACH,CAPD;;IAQA,OAAO;MAAER,CAAC,EAAEI,IAAL;MAAWH,CAAC,EAAEM;IAAd,CAAP;EACH;AAtBwB,CAAtB"},"metadata":{},"sourceType":"module"}