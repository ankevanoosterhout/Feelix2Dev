{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * deeplearn.js backend.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { onesLike as coreOnesLike, scalar, tensor1d, tidy, where, zerosLike as coreZerosLike } from '@tensorflow/tfjs-core';\nimport { checkDataFormat } from '../common';\nimport { NotImplementedError, ValueError } from '../errors';\nimport * as math_utils from '../utils/math_utils';\nimport { imageDataFormat } from './common'; // tslint:enable\n\n/* Setting and getting backend from deeplearn.js. */\n// Default deeplearn.js backend is WebGL (GPU).\n\nlet backend = 'webgl';\nexport function setBackend(requestedBackend) {\n  tfc.setBackend(requestedBackend);\n  backend = requestedBackend;\n}\nexport function getBackend() {\n  return backend;\n}\n/**\n * Indicates whether the backend is operating symbolically.\n *\n * This function will be used to determine how to interpret user code. If\n * it returns true, calls to the backend construct a symbolic graph; if\n * it returns false, calls to the backend execute immediately.\n */\n\nexport function isBackendSymbolic() {\n  return false;\n}\n/**\n * Get the number of elements in a Tensor.\n * @param x The Tensor.\n * @return Number of elements in `x`.\n */\n\nexport function countParams(x) {\n  const shape = x.shape;\n\n  if (shape.length > 0) {\n    return shape.reduce((a, b) => a * b);\n  } else {\n    // Scalar.\n    return 1;\n  }\n}\n/**\n * Casts a tensor to a different dtype and returns it.\n * @param x Input tensor.\n * @param dtype String: 'float32'|'int32'|'bool'.\n * @returns Tensor of the specified `dtype`.\n */\n\nexport function cast(x, dtype) {\n  return tfc.cast(x, dtype);\n}\n/**\n * Adds a 1-sized dimension at index \"axis\".\n * @param x Input tensor.\n * @param axis Position where to add the new axis.\n * @returns Result of the dimension expansion.\n */\n\nexport function expandDims(x, axis = -1) {\n  const outShape = x.shape.slice();\n\n  if (axis < 0) {\n    axis = outShape.length + axis + 1;\n  }\n\n  outShape.splice(axis, 0, 1);\n  return tfc.reshape(x, outShape);\n}\n/**\n * Repeats a 2D tensor.\n *\n * If `x` has shape `[samples, dim]` and `n` is 2, for example, the output\n * will have shape `[samples, 2, dim]`.\n *\n * @param x Input tensor.\n * @param n Integer, number of times to repeat.\n * @returns The result of the repeat operation.\n * @throws ValueError: If input tensor is not 2D.\n */\n\nexport function repeat(x, n) {\n  return tidy(() => {\n    if (x.shape.length !== 2) {\n      throw new ValueError(`repeat() expects a rank-2 tensor, but received a ` + `rank-${x.shape.length} tensor.`);\n    }\n\n    const y = expandDims(x, 1);\n    return tile(y, [1, n, 1]);\n  });\n}\n/**\n * Flatten a Tensor into 1D.\n * @param x Input tensor.\n * @return The result of the flattening `x`.\n */\n\nexport function flatten(x) {\n  const newShape = [math_utils.arrayProd(x.shape)];\n  return tfc.reshape(x, newShape);\n}\n/**\n * Turn a nD tensor into a 2D tensor with same 0th dimension.\n * In other words, it flattens each data samples of a batch.\n *\n * @param x The tensor to flatten. The rank of this tensor is required to be 2\n *   or higher.\n * @return The result of the flattening.\n */\n\nexport function batchFlatten(x) {\n  if (x.rank <= 1) {\n    throw new ValueError(`batchFlatten requires a minimum rank of 2. Got rank: ${x.rank}.`);\n  }\n\n  const newShape = [x.shape[0], math_utils.arrayProd(x.shape, 1)];\n  return tfc.reshape(x, newShape);\n}\n/**\n * Do slicing along the first axis.\n * @param array input `tf.Tensor`.\n * @param start starting index, inclusive.\n * @param size size of the slice along the first axis.\n * @returns result of the slicing.\n * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.\n */\n\nexport function sliceAlongFirstAxis(array, start, size) {\n  return tidy(() => {\n    switch (array.rank) {\n      case 1:\n        return tfc.slice1d(array, start, size);\n\n      case 2:\n        return tfc.slice2d(array, [start, 0], [size, array.shape[1]]);\n\n      case 3:\n        return tfc.slice3d(array, [start, 0, 0], [size, array.shape[1], array.shape[2]]);\n\n      case 4:\n        return tfc.slice4d(array, [start, 0, 0, 0], [size, array.shape[1], array.shape[2], array.shape[3]]);\n\n      case 5:\n        return tfc.slice(array, [start, 0, 0, 0, 0], [size, array.shape[1], array.shape[2], array.shape[3], array.shape[4]]);\n\n      case 6:\n        return tfc.slice(array, [start, 0, 0, 0, 0, 0], [size, array.shape[1], array.shape[2], array.shape[3], array.shape[4], array.shape[5]]);\n\n      default:\n        throw new ValueError(`sliceAlongFirstAxis() received an unsupported tensor rank: ` + `${array.rank}`);\n    }\n  });\n}\n/**\n * Do slicing along the last axis.\n * @param array input `tf.Tensor`.\n * @param start starting index, inclusive.\n * @param size size of the slice along the last axis.\n * @returns result of the slicing.\n * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.\n */\n\nexport function sliceAlongLastAxis(array, start, size) {\n  return tidy(() => {\n    switch (array.rank) {\n      case 1:\n        return tfc.slice1d(array, start, size);\n\n      case 2:\n        return tfc.slice2d(array, [0, start], [array.shape[0], size]);\n\n      case 3:\n        return tfc.slice3d(array, [0, 0, start], [array.shape[0], array.shape[1], size]);\n\n      case 4:\n        return tfc.slice4d(array, [0, 0, 0, start], [array.shape[0], array.shape[1], array.shape[2], size]);\n\n      default:\n        throw new ValueError(`sliceAlongLastAxis() received an unsupported tensor rank: ` + `${array.rank}`);\n    }\n  });\n}\n/**\n * Do slicing along the sepcified axis.\n * @param array input `tf.Tensor`.\n * @param start starting index, inclusive.\n * @param size of the slice along the chosen axis.\n * @param choose an axis.\n * @returns result of the slicing.\n * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.\n */\n\nexport function sliceAlongAxis(array, start, size, axis) {\n  return tidy(() => {\n    switch (array.rank) {\n      case 1:\n        return tfc.slice1d(array, start, size);\n\n      case 2:\n        switch (axis) {\n          case 1:\n            return sliceAlongFirstAxis(array, start, size);\n\n          case 2:\n            return sliceAlongLastAxis(array, start, size);\n\n          default:\n            throw new ValueError(`The axis is not within the rank of the tensor ` + `${axis}`);\n        }\n\n      case 3:\n        switch (axis) {\n          case 1:\n            return sliceAlongFirstAxis(array, start, size);\n\n          case 2:\n            return tfc.slice3d(array, [0, start, 0], [array.shape[0], size, array.shape[2]]);\n\n          case 3:\n            return sliceAlongLastAxis(array, start, size);\n\n          default:\n            throw new ValueError(`The axis is not within the rank of the tensor ` + `${axis}`);\n        }\n\n      case 4:\n        switch (axis) {\n          case 1:\n            return sliceAlongFirstAxis(array, start, size);\n\n          case 2:\n            return tfc.slice4d(array, [0, start, 0, 0], [array.shape[0], size, array.shape[2], array.shape[3]]);\n\n          case 3:\n            return tfc.slice4d(array, [0, 0, start, 0], [array.shape[0], array.shape[1], size, array.shape[3]]);\n\n          case 4:\n            return sliceAlongLastAxis(array, start, size);\n\n          default:\n            throw new ValueError(`The axis is not within the rank of the tensor ` + `${axis}`);\n        }\n\n      default:\n        throw new ValueError(`sliceAlongLastAxis() received an unsupported tensor rank: ` + `${array.rank}`);\n    }\n  });\n}\n/**\n * Concatenates a list of tensors alongside the specified axis.\n * @param tensors `Array` of tensors to concatenate.\n * @param axis Concatenation axis.\n * @returns The result of the concatenation.\n */\n\nexport function concatenate(tensors, axis = -1) {\n  let rank;\n\n  if (axis < 0) {\n    rank = tensors[0].rank;\n\n    if (rank !== 0) {\n      axis = rank;\n    } else {\n      axis = 0;\n    }\n  }\n\n  if (axis === tensors[0].rank) {\n    // Porting Note: This is necessary because tfc.concat() requires axis to be\n    //   in the interval [-rank, rank).\n    axis = -1;\n  } // Porting Note: Sparse concat is not supported yet.\n\n\n  return tfc.concat(tensors, axis);\n}\n/**\n * Concatenate two arrays along the first dimension.\n * @param a The 1st `tf.Tensor` to concatenate.\n * @param b The 2nd `tf.Tensor` to concatenate.\n * @returns Result of the concatenation.\n * @throws ValueError: If `a` is of an unsupported subtype of `tf.Tensor`.\n */\n\nexport function concatAlongFirstAxis(a, b) {\n  switch (a.rank) {\n    case 1:\n      return tfc.concat1d([a, b]);\n\n    case 2:\n      return tfc.concat2d([a, b], 0);\n\n    case 3:\n      return tfc.concat3d([a, b], 0);\n\n    case 4:\n      return tfc.concat4d([a, b], 0);\n\n    default:\n      throw new ValueError(`concatAlongFirstAxis() received an unsupported ` + `tensor rank: ${a.rank}`);\n  }\n}\n/**\n * Creates a tensor by tiling `x` by `n`.\n * @param x A tensor.\n * @param n An Array of integers or a single integer. If an Array, the length\n *   must be the same as the number of dimensions in `x`. If a single integer,\n *   it will be treated as an Array of length 1.\n */\n\nexport function tile(x, n) {\n  if (!Array.isArray(n)) {\n    n = [n];\n  }\n\n  if (x.rank !== n.length) {\n    throw new ValueError(`The length of input n (${n.length}) does not match ` + `the number of dimensions in input x (${x.rank})`);\n  }\n\n  return tfc.tile(x, n);\n}\n/* Creation of random tensors. */\n\n/**\n * Get a tensor with normal distribution of values.\n *\n * @param shape Shape of the tensor.\n * @param mean mean value of the normal distribution.\n * @param stddev standard deviation of the normal distribution.\n * @param dtype\n * @param seed\n * @return The normal tensor.\n */\n\nexport function randomNormal(shape, mean = 0.0, stddev = 1.0, dtype, seed) {\n  return tfc.randomNormal(shape, mean, stddev, dtype, seed);\n}\n/* Linear Algebra */\n\n/**\n * Multiply two tensors and returns the result as a tensor.\n *\n * For 2D tensors, this is equivalent to matrix multiplication (matMul).\n * For tensors of higher ranks, it follows the Theano behavior,\n * (e.g. `(2, 3) * (4, 3, 5) -> (2, 4, 5)`).  From the Theano documentation:\n *\n * For N dimensions it is a sum product over the last axis of x and the\n * second-to-last of y:\n *\n * @param a A tensor of at least rank 2.\n * @param b A tensor of at least rank 2.\n * @param activation (optional) A string identifying the activation\n *   function.\n * @return Result of the dot operation.\n */\n\nexport function dot(a, b, activation, bias) {\n  if (a.rank < 2 || b.rank < 2) {\n    throw new NotImplementedError(`dot requires both inputs to be rank >= 2` + ` but got x shape = ${a.shape} and y shape = ${b.shape}`);\n  }\n\n  if (b.rank >= 3) {\n    const xLastDim = a.shape.slice(-1)[0];\n    const ySecondLastDim = b.shape.slice(-2)[0];\n\n    if (xLastDim !== ySecondLastDim) {\n      throw new NotImplementedError(`If rank y >= 3, then the second last dim` + ` of y must equal the last dim of x but got x shape = ${a.shape} and ` + ` y shape = ${b.shape}`);\n    }\n  } // Handle basic 2D x 2D case.\n\n\n  if (a.rank === 2 && b.rank === 2) {\n    const transposeA = false;\n    const transposeB = false; // tfc.fused.matMul only fuses certain activation functions. Unsupported\n    // activation functions are treated as 'linear' activations, which is\n    // equivalent to a no-op.\n\n    return tfc.fused.matMul({\n      a,\n      b: b,\n      transposeA,\n      transposeB,\n      bias: bias ? reshapeBias(a.rank, bias, imageDataFormat()) : null,\n      activation\n    });\n  } else {\n    // Reshape x into the analogous 2D Tensor.\n    const aFirstDims = a.shape.slice(); // Holds all but the last dim of x.\n\n    const aLastDim = aFirstDims.pop();\n    a = tfc.reshape(a, [-1, aLastDim]); // Reshape y into the analogous 2D Tensor, and keep track of the\n    // required dimensions to reproduce the output shape.\n\n    const bShape = b.shape.slice();\n    const bLastDim = bShape.pop();\n    const ySecondLastDim = bShape.pop();\n    const yOtherDims = [...bShape, bLastDim]; // permutation should be like [r-2, 0, 1, 2, ... r-4, r-3, r-1]\n    // where r is the rank of y.\n\n    const perm = Array.from({\n      length: b.rank\n    }, (_, i) => {\n      if (i === 0) {\n        return b.rank - 2;\n      } else if (i <= b.rank - 2) {\n        return i - 1;\n      }\n\n      return i;\n    });\n    b = tfc.reshape(tfc.transpose(b, perm), [ySecondLastDim, -1]); // Multiply x and y as 2D Tensors, and then reshape back to original.\n\n    const outputShape = [...aFirstDims, ...yOtherDims];\n    const transposeA = false;\n    const transposeB = false;\n    return tfc.reshape(tfc.fused.matMul({\n      a,\n      b,\n      transposeA,\n      transposeB,\n      bias: bias ? reshapeBias(a.rank, bias, imageDataFormat()) : null,\n      activation\n    }), outputShape);\n  }\n}\n/**\n * Compute the sign Tensor of an input Tensor.\n *\n * Elements of the input `tf.Tensor` that are === 0 are mapped to 0.\n * Elements of the input `tf.Tensor` that are > 0 are mapped to 1.\n * Elements of the input `tf.Tensor` that are < 0 are mapped to -1.\n *\n * @param x Input `tf.Tensor`.\n * @return The sign `tf.Tensor`.\n */\n\nexport function sign(x) {\n  // TODO(cais): Move to the core.\n  return tidy(() => {\n    const zerosLikeX = coreZerosLike(x);\n    const onesLikeX = coreOnesLike(x);\n    return where(tfc.equal(x, zerosLikeX), zerosLikeX, where(tfc.greater(x, coreZerosLike(x)), onesLikeX, tfc.mul(-1, onesLikeX)));\n  });\n}\n/**\n * Computes the one-hot representation of an integer tensor.\n * @param indices nD integer tensor of shape\n *   `(batch_size, dim1, dim2, ... dim(n-1))`\n * @param numClasses Integer, number of classes to consider.\n * @returns (n + 1)D one hot representation of the input\n *   with shape `(batch_size, dim1, dim2, ... dim(n-1), num_classes)`\n */\n\nexport function oneHot(indices, numClasses) {\n  return tidy(() => {\n    if (indices.rank !== 1) {\n      throw new Error('Only 1D one-hot tensors are supported in the ' + 'deeplearn backend, at present.');\n    }\n\n    indices = tfc.cast(indices, 'int32');\n    return tfc.cast(tfc.oneHot(indices, numClasses), 'float32');\n  });\n}\n/* Elementary math functions. */\n\n/**\n * Retrieves the elements of indices `indices` in the tensor `reference`.\n * @param reference A tensor.\n * @param indices An integer tensor of indices or an `Array` of integers.\n * @param axis Axis along which to perform the gather operation.\n * @returns The result of the gathering as a tensor.\n */\n\nexport function gather(reference, indices, axis) {\n  return tidy(() => {\n    if (Array.isArray(indices)) {\n      indices = tensor1d(indices, 'int32');\n    } else {\n      indices = tfc.cast(indices, 'int32');\n    }\n\n    return tfc.gather(reference, indices, axis);\n  });\n}\n/**\n * Element-wise square.\n * @param x Input tensor.\n * @return element-wise x^2\n */\n\nexport function square(x) {\n  return tfc.mul(x, x);\n}\n/**\n * Element-wise exponentiation.\n *\n * Porting Note: In PyKeras, `a` (the exponent) is a Python integer, which\n *   takes advatnage of the backend's (e.g., TensorFlow's) automatic\n * conversion to tensor. Here we allow `a` to be either a number or a tensor.\n *\n * @param x The base tensor.\n * @param a The exponent, tensor or number. If a number, it is rounded to the\n *   nearest integer and converted to a tensor.\n * @returns A tensor of the same shape as `x`.\n */\n\nexport function pow(x, a) {\n  return tidy(() => {\n    if (typeof a === 'number') {\n      a = scalar(Math.round(a), 'int32');\n    }\n\n    if (a.dtype !== 'int32') {\n      throw new NotImplementedError(`Non-int32 dtype (${a.dtype}) is not supported by pow() yet`);\n    }\n\n    return tfc.pow(x, a);\n  });\n}\n/**\n * Reshapes bias tensor according to rank of x.\n */\n\nfunction reshapeBias(xRank, bias, dataFormat) {\n  const biasShape = bias.shape;\n\n  if (bias.rank !== 1 && bias.rank !== xRank) {\n    throw new ValueError(`Unexpected bias dimensions: ${bias.rank}` + `; expected it to be 1 or ${xRank}`);\n  }\n\n  if (xRank === 5) {\n    if (dataFormat === 'channelsFirst') {\n      if (biasShape.length === 1) {\n        return tfc.reshape(bias, [1, biasShape[0], 1, 1, 1]);\n      } else {\n        return tfc.reshape(bias, [1, biasShape[3], biasShape[0], biasShape[1], biasShape[2]]);\n      }\n    } else if (dataFormat === 'channelsLast') {\n      if (biasShape.length === 1) {\n        return tfc.reshape(bias, [1, 1, 1, 1, biasShape[0]]);\n      } else {\n        return tfc.reshape(bias, [1].concat(biasShape));\n      }\n    }\n  } else if (xRank === 4) {\n    if (dataFormat === 'channelsFirst') {\n      if (biasShape.length === 1) {\n        return tfc.reshape(bias, [1, biasShape[0], 1, 1]);\n      } else {\n        return tfc.reshape(bias, [1, biasShape[2], biasShape[0], biasShape[1]]);\n      }\n    } else if (dataFormat === 'channelsLast') {\n      if (biasShape.length === 1) {\n        return tfc.reshape(bias, [1, 1, 1, biasShape[0]]);\n      } else {\n        return tfc.reshape(bias, [1].concat(biasShape));\n      }\n    }\n  } else if (xRank === 3) {\n    if (dataFormat === 'channelsFirst') {\n      if (biasShape.length === 1) {\n        return tfc.reshape(bias, [1, biasShape[0], 1]);\n      } else {\n        return tfc.reshape(bias, [1, biasShape[1], biasShape[0]]);\n      }\n    } else if (dataFormat === 'channelsLast') {\n      if (biasShape.length === 1) {\n        return tfc.reshape(bias, [1, 1, biasShape[0]]);\n      } else {\n        return tfc.reshape(bias, [1].concat(biasShape));\n      }\n    }\n  } else if (xRank < 3) {\n    return bias;\n  }\n\n  throw new ValueError(`Unsupported input rank by biasAdd: ${bias.rank}`);\n}\n/* Neural-network operations. */\n\n/**\n * Add a bias to a tensor.\n *\n * @param x The tensor to add the bias to.\n * @param bias The bias to add to `x`. Must be 1D or the same rank as `x`.\n * @return Result of the bias adding.\n * @throws ValueError: If the rank of `bias` is incorrect.\n */\n\n\nexport function biasAdd(x, bias, dataFormat) {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n\n    checkDataFormat(dataFormat);\n    return tfc.add(x, reshapeBias(x.rank, bias, dataFormat));\n  });\n}\n/**\n * Exponential linear unit (ELU).\n * @param x A tensor or variable to compute the activation function for.\n * @param alpha: A scalar, a scaling factor for the negative section.\n * @return Output of the ELU operation.\n */\n\nexport function elu(x, alpha = 1) {\n  // TODO(cais): Add support for alpha values other than 1.\n  if (alpha !== 1) {\n    throw new NotImplementedError(`Support for alpha values other than 1 (${alpha}) is not implemented ` + `yet.`);\n  }\n\n  return tfc.elu(x);\n}\n/**\n * Softsign of a tensor.\n *\n * Defined as x / (abs(x) + 1), element-wise.\n *\n * @param x: Input.\n * @returns Output.\n */\n\nexport function softsign(x) {\n  return tidy(() => tfc.div(x, tfc.add(tfc.abs(x), 1)));\n}\n/**\n * Sets entries in `x` to zero at random, while scaling the entire tensor.\n *\n * @param x input tensor.\n * @param level fraction of the entries in the tensor that will be set to 0.\n * @param noiseShape shape of randomly generated keep/drop flags, must be\n *   broadcastable to the shape of `x`. Optional.\n * @param seed random seed to ensure determinism. Optional.\n * @returns Result of the dropout operation.\n */\n\nexport function dropout(x, level, noiseShape, seed) {\n  return tidy(() => tfc.dropout(x, level, noiseShape, seed));\n}\n/**\n * Element-wise, segment-wise linear approximation of sigmoid.\n *\n * Returns `0.` if `x < -2.5`, `1.` if `x > 2.5`.\n * In `-2.5 <= x <= 2.5`, returns `0.2 * x + 0.5`.\n *\n * @param x Input tensor.\n * @returns Output tensor.\n */\n\nexport function hardSigmoid(x) {\n  return tidy(() => {\n    const y = tfc.add(.5, tfc.mul(.2, x));\n    return tfc.clipByValue(y, 0, 1);\n  });\n}\n/**\n * Invoke `x` in the training phase, and `alt` otherwise.\n *\n * Porting Note: We do not create placeholder tensors for the `training`\n * boolean flag here, because there is no such thing in the TF.js imperative\n * backend.\n *\n * @param x The function to invoke iff `training` is `true`.\n * @param alt The function to invoke iff `training` is `false`.\n * @param training Boolean flag for whether training phase is active.\n * @returns The return value of `x()` if `training` is `true`, or the return\n *   value of `alt()` if `training` is `false`.\n */\n\nexport function inTrainPhase(x, alt, training = false) {\n  return training ? x() : alt();\n}","map":{"version":3,"names":["tfc","onesLike","coreOnesLike","scalar","tensor1d","tidy","where","zerosLike","coreZerosLike","checkDataFormat","NotImplementedError","ValueError","math_utils","imageDataFormat","backend","setBackend","requestedBackend","getBackend","isBackendSymbolic","countParams","x","shape","length","reduce","a","b","cast","dtype","expandDims","axis","outShape","slice","splice","reshape","repeat","n","y","tile","flatten","newShape","arrayProd","batchFlatten","rank","sliceAlongFirstAxis","array","start","size","slice1d","slice2d","slice3d","slice4d","sliceAlongLastAxis","sliceAlongAxis","concatenate","tensors","concat","concatAlongFirstAxis","concat1d","concat2d","concat3d","concat4d","Array","isArray","randomNormal","mean","stddev","seed","dot","activation","bias","xLastDim","ySecondLastDim","transposeA","transposeB","fused","matMul","reshapeBias","aFirstDims","aLastDim","pop","bShape","bLastDim","yOtherDims","perm","from","_","i","transpose","outputShape","sign","zerosLikeX","onesLikeX","equal","greater","mul","oneHot","indices","numClasses","Error","gather","reference","square","pow","Math","round","xRank","dataFormat","biasShape","biasAdd","add","elu","alpha","softsign","div","abs","dropout","level","noiseShape","hardSigmoid","clipByValue","inTrainPhase","alt","training"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-layers/dist/backend/tfjs_backend.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * deeplearn.js backend.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { onesLike as coreOnesLike, scalar, tensor1d, tidy, where, zerosLike as coreZerosLike } from '@tensorflow/tfjs-core';\nimport { checkDataFormat } from '../common';\nimport { NotImplementedError, ValueError } from '../errors';\nimport * as math_utils from '../utils/math_utils';\nimport { imageDataFormat } from './common';\n// tslint:enable\n/* Setting and getting backend from deeplearn.js. */\n// Default deeplearn.js backend is WebGL (GPU).\nlet backend = 'webgl';\nexport function setBackend(requestedBackend) {\n    tfc.setBackend(requestedBackend);\n    backend = requestedBackend;\n}\nexport function getBackend() {\n    return backend;\n}\n/**\n * Indicates whether the backend is operating symbolically.\n *\n * This function will be used to determine how to interpret user code. If\n * it returns true, calls to the backend construct a symbolic graph; if\n * it returns false, calls to the backend execute immediately.\n */\nexport function isBackendSymbolic() {\n    return false;\n}\n/**\n * Get the number of elements in a Tensor.\n * @param x The Tensor.\n * @return Number of elements in `x`.\n */\nexport function countParams(x) {\n    const shape = x.shape;\n    if (shape.length > 0) {\n        return shape.reduce((a, b) => a * b);\n    }\n    else {\n        // Scalar.\n        return 1;\n    }\n}\n/**\n * Casts a tensor to a different dtype and returns it.\n * @param x Input tensor.\n * @param dtype String: 'float32'|'int32'|'bool'.\n * @returns Tensor of the specified `dtype`.\n */\nexport function cast(x, dtype) {\n    return tfc.cast(x, dtype);\n}\n/**\n * Adds a 1-sized dimension at index \"axis\".\n * @param x Input tensor.\n * @param axis Position where to add the new axis.\n * @returns Result of the dimension expansion.\n */\nexport function expandDims(x, axis = -1) {\n    const outShape = x.shape.slice();\n    if (axis < 0) {\n        axis = outShape.length + axis + 1;\n    }\n    outShape.splice(axis, 0, 1);\n    return tfc.reshape(x, outShape);\n}\n/**\n * Repeats a 2D tensor.\n *\n * If `x` has shape `[samples, dim]` and `n` is 2, for example, the output\n * will have shape `[samples, 2, dim]`.\n *\n * @param x Input tensor.\n * @param n Integer, number of times to repeat.\n * @returns The result of the repeat operation.\n * @throws ValueError: If input tensor is not 2D.\n */\nexport function repeat(x, n) {\n    return tidy(() => {\n        if (x.shape.length !== 2) {\n            throw new ValueError(`repeat() expects a rank-2 tensor, but received a ` +\n                `rank-${x.shape.length} tensor.`);\n        }\n        const y = expandDims(x, 1);\n        return tile(y, [1, n, 1]);\n    });\n}\n/**\n * Flatten a Tensor into 1D.\n * @param x Input tensor.\n * @return The result of the flattening `x`.\n */\nexport function flatten(x) {\n    const newShape = [math_utils.arrayProd(x.shape)];\n    return tfc.reshape(x, newShape);\n}\n/**\n * Turn a nD tensor into a 2D tensor with same 0th dimension.\n * In other words, it flattens each data samples of a batch.\n *\n * @param x The tensor to flatten. The rank of this tensor is required to be 2\n *   or higher.\n * @return The result of the flattening.\n */\nexport function batchFlatten(x) {\n    if (x.rank <= 1) {\n        throw new ValueError(`batchFlatten requires a minimum rank of 2. Got rank: ${x.rank}.`);\n    }\n    const newShape = [x.shape[0], math_utils.arrayProd(x.shape, 1)];\n    return tfc.reshape(x, newShape);\n}\n/**\n * Do slicing along the first axis.\n * @param array input `tf.Tensor`.\n * @param start starting index, inclusive.\n * @param size size of the slice along the first axis.\n * @returns result of the slicing.\n * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.\n */\nexport function sliceAlongFirstAxis(array, start, size) {\n    return tidy(() => {\n        switch (array.rank) {\n            case 1:\n                return tfc.slice1d(array, start, size);\n            case 2:\n                return tfc.slice2d(array, [start, 0], [size, array.shape[1]]);\n            case 3:\n                return tfc.slice3d(array, [start, 0, 0], [size, array.shape[1], array.shape[2]]);\n            case 4:\n                return tfc.slice4d(array, [start, 0, 0, 0], [size, array.shape[1], array.shape[2], array.shape[3]]);\n            case 5:\n                return tfc.slice(array, [start, 0, 0, 0, 0], [\n                    size, array.shape[1], array.shape[2], array.shape[3], array.shape[4]\n                ]);\n            case 6:\n                return tfc.slice(array, [start, 0, 0, 0, 0, 0], [\n                    size, array.shape[1], array.shape[2], array.shape[3], array.shape[4],\n                    array.shape[5]\n                ]);\n            default:\n                throw new ValueError(`sliceAlongFirstAxis() received an unsupported tensor rank: ` +\n                    `${array.rank}`);\n        }\n    });\n}\n/**\n * Do slicing along the last axis.\n * @param array input `tf.Tensor`.\n * @param start starting index, inclusive.\n * @param size size of the slice along the last axis.\n * @returns result of the slicing.\n * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.\n */\nexport function sliceAlongLastAxis(array, start, size) {\n    return tidy(() => {\n        switch (array.rank) {\n            case 1:\n                return tfc.slice1d(array, start, size);\n            case 2:\n                return tfc.slice2d(array, [0, start], [array.shape[0], size]);\n            case 3:\n                return tfc.slice3d(array, [0, 0, start], [array.shape[0], array.shape[1], size]);\n            case 4:\n                return tfc.slice4d(array, [0, 0, 0, start], [array.shape[0], array.shape[1], array.shape[2], size]);\n            default:\n                throw new ValueError(`sliceAlongLastAxis() received an unsupported tensor rank: ` +\n                    `${array.rank}`);\n        }\n    });\n}\n/**\n * Do slicing along the sepcified axis.\n * @param array input `tf.Tensor`.\n * @param start starting index, inclusive.\n * @param size of the slice along the chosen axis.\n * @param choose an axis.\n * @returns result of the slicing.\n * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.\n */\nexport function sliceAlongAxis(array, start, size, axis) {\n    return tidy(() => {\n        switch (array.rank) {\n            case 1:\n                return tfc.slice1d(array, start, size);\n            case 2:\n                switch (axis) {\n                    case 1:\n                        return sliceAlongFirstAxis(array, start, size);\n                    case 2:\n                        return sliceAlongLastAxis(array, start, size);\n                    default:\n                        throw new ValueError(`The axis is not within the rank of the tensor ` +\n                            `${axis}`);\n                }\n            case 3:\n                switch (axis) {\n                    case 1:\n                        return sliceAlongFirstAxis(array, start, size);\n                    case 2:\n                        return tfc.slice3d(array, [0, start, 0], [array.shape[0], size, array.shape[2]]);\n                    case 3:\n                        return sliceAlongLastAxis(array, start, size);\n                    default:\n                        throw new ValueError(`The axis is not within the rank of the tensor ` +\n                            `${axis}`);\n                }\n            case 4:\n                switch (axis) {\n                    case 1:\n                        return sliceAlongFirstAxis(array, start, size);\n                    case 2:\n                        return tfc.slice4d(array, [0, start, 0, 0], [array.shape[0], size, array.shape[2], array.shape[3]]);\n                    case 3:\n                        return tfc.slice4d(array, [0, 0, start, 0], [array.shape[0], array.shape[1], size, array.shape[3]]);\n                    case 4:\n                        return sliceAlongLastAxis(array, start, size);\n                    default:\n                        throw new ValueError(`The axis is not within the rank of the tensor ` +\n                            `${axis}`);\n                }\n            default:\n                throw new ValueError(`sliceAlongLastAxis() received an unsupported tensor rank: ` +\n                    `${array.rank}`);\n        }\n    });\n}\n/**\n * Concatenates a list of tensors alongside the specified axis.\n * @param tensors `Array` of tensors to concatenate.\n * @param axis Concatenation axis.\n * @returns The result of the concatenation.\n */\nexport function concatenate(tensors, axis = -1) {\n    let rank;\n    if (axis < 0) {\n        rank = tensors[0].rank;\n        if (rank !== 0) {\n            axis = rank;\n        }\n        else {\n            axis = 0;\n        }\n    }\n    if (axis === tensors[0].rank) {\n        // Porting Note: This is necessary because tfc.concat() requires axis to be\n        //   in the interval [-rank, rank).\n        axis = -1;\n    }\n    // Porting Note: Sparse concat is not supported yet.\n    return tfc.concat(tensors, axis);\n}\n/**\n * Concatenate two arrays along the first dimension.\n * @param a The 1st `tf.Tensor` to concatenate.\n * @param b The 2nd `tf.Tensor` to concatenate.\n * @returns Result of the concatenation.\n * @throws ValueError: If `a` is of an unsupported subtype of `tf.Tensor`.\n */\nexport function concatAlongFirstAxis(a, b) {\n    switch (a.rank) {\n        case 1:\n            return tfc.concat1d([a, b]);\n        case 2:\n            return tfc.concat2d([a, b], 0);\n        case 3:\n            return tfc.concat3d([a, b], 0);\n        case 4:\n            return tfc.concat4d([a, b], 0);\n        default:\n            throw new ValueError(`concatAlongFirstAxis() received an unsupported ` +\n                `tensor rank: ${a.rank}`);\n    }\n}\n/**\n * Creates a tensor by tiling `x` by `n`.\n * @param x A tensor.\n * @param n An Array of integers or a single integer. If an Array, the length\n *   must be the same as the number of dimensions in `x`. If a single integer,\n *   it will be treated as an Array of length 1.\n */\nexport function tile(x, n) {\n    if (!Array.isArray(n)) {\n        n = [n];\n    }\n    if (x.rank !== n.length) {\n        throw new ValueError(`The length of input n (${n.length}) does not match ` +\n            `the number of dimensions in input x (${x.rank})`);\n    }\n    return tfc.tile(x, n);\n}\n/* Creation of random tensors. */\n/**\n * Get a tensor with normal distribution of values.\n *\n * @param shape Shape of the tensor.\n * @param mean mean value of the normal distribution.\n * @param stddev standard deviation of the normal distribution.\n * @param dtype\n * @param seed\n * @return The normal tensor.\n */\nexport function randomNormal(shape, mean = 0.0, stddev = 1.0, dtype, seed) {\n    return tfc.randomNormal(shape, mean, stddev, dtype, seed);\n}\n/* Linear Algebra */\n/**\n * Multiply two tensors and returns the result as a tensor.\n *\n * For 2D tensors, this is equivalent to matrix multiplication (matMul).\n * For tensors of higher ranks, it follows the Theano behavior,\n * (e.g. `(2, 3) * (4, 3, 5) -> (2, 4, 5)`).  From the Theano documentation:\n *\n * For N dimensions it is a sum product over the last axis of x and the\n * second-to-last of y:\n *\n * @param a A tensor of at least rank 2.\n * @param b A tensor of at least rank 2.\n * @param activation (optional) A string identifying the activation\n *   function.\n * @return Result of the dot operation.\n */\nexport function dot(a, b, activation, bias) {\n    if ((a.rank < 2) || (b.rank < 2)) {\n        throw new NotImplementedError(`dot requires both inputs to be rank >= 2` +\n            ` but got x shape = ${a.shape} and y shape = ${b.shape}`);\n    }\n    if (b.rank >= 3) {\n        const xLastDim = a.shape.slice(-1)[0];\n        const ySecondLastDim = b.shape.slice(-2)[0];\n        if (xLastDim !== ySecondLastDim) {\n            throw new NotImplementedError(`If rank y >= 3, then the second last dim` +\n                ` of y must equal the last dim of x but got x shape = ${a.shape} and ` +\n                ` y shape = ${b.shape}`);\n        }\n    }\n    // Handle basic 2D x 2D case.\n    if ((a.rank === 2) && (b.rank === 2)) {\n        const transposeA = false;\n        const transposeB = false;\n        // tfc.fused.matMul only fuses certain activation functions. Unsupported\n        // activation functions are treated as 'linear' activations, which is\n        // equivalent to a no-op.\n        return tfc.fused.matMul({\n            a,\n            b: b,\n            transposeA,\n            transposeB,\n            bias: bias ? reshapeBias(a.rank, bias, imageDataFormat()) : null,\n            activation\n        });\n    }\n    else {\n        // Reshape x into the analogous 2D Tensor.\n        const aFirstDims = a.shape.slice(); // Holds all but the last dim of x.\n        const aLastDim = aFirstDims.pop();\n        a = tfc.reshape(a, [-1, aLastDim]);\n        // Reshape y into the analogous 2D Tensor, and keep track of the\n        // required dimensions to reproduce the output shape.\n        const bShape = b.shape.slice();\n        const bLastDim = bShape.pop();\n        const ySecondLastDim = bShape.pop();\n        const yOtherDims = [...bShape, bLastDim];\n        // permutation should be like [r-2, 0, 1, 2, ... r-4, r-3, r-1]\n        // where r is the rank of y.\n        const perm = Array.from({ length: b.rank }, (_, i) => {\n            if (i === 0) {\n                return b.rank - 2;\n            }\n            else if (i <= b.rank - 2) {\n                return i - 1;\n            }\n            return i;\n        });\n        b = tfc.reshape(tfc.transpose(b, perm), [ySecondLastDim, -1]);\n        // Multiply x and y as 2D Tensors, and then reshape back to original.\n        const outputShape = [...aFirstDims, ...yOtherDims];\n        const transposeA = false;\n        const transposeB = false;\n        return tfc.reshape(tfc.fused.matMul({\n            a,\n            b,\n            transposeA,\n            transposeB,\n            bias: bias ? reshapeBias(a.rank, bias, imageDataFormat()) : null,\n            activation\n        }), outputShape);\n    }\n}\n/**\n * Compute the sign Tensor of an input Tensor.\n *\n * Elements of the input `tf.Tensor` that are === 0 are mapped to 0.\n * Elements of the input `tf.Tensor` that are > 0 are mapped to 1.\n * Elements of the input `tf.Tensor` that are < 0 are mapped to -1.\n *\n * @param x Input `tf.Tensor`.\n * @return The sign `tf.Tensor`.\n */\nexport function sign(x) {\n    // TODO(cais): Move to the core.\n    return tidy(() => {\n        const zerosLikeX = coreZerosLike(x);\n        const onesLikeX = coreOnesLike(x);\n        return where(tfc.equal(x, zerosLikeX), zerosLikeX, where(tfc.greater(x, coreZerosLike(x)), onesLikeX, tfc.mul(-1, onesLikeX)));\n    });\n}\n/**\n * Computes the one-hot representation of an integer tensor.\n * @param indices nD integer tensor of shape\n *   `(batch_size, dim1, dim2, ... dim(n-1))`\n * @param numClasses Integer, number of classes to consider.\n * @returns (n + 1)D one hot representation of the input\n *   with shape `(batch_size, dim1, dim2, ... dim(n-1), num_classes)`\n */\nexport function oneHot(indices, numClasses) {\n    return tidy(() => {\n        if (indices.rank !== 1) {\n            throw new Error('Only 1D one-hot tensors are supported in the ' +\n                'deeplearn backend, at present.');\n        }\n        indices = tfc.cast(indices, 'int32');\n        return tfc.cast(tfc.oneHot(indices, numClasses), 'float32');\n    });\n}\n/* Elementary math functions. */\n/**\n * Retrieves the elements of indices `indices` in the tensor `reference`.\n * @param reference A tensor.\n * @param indices An integer tensor of indices or an `Array` of integers.\n * @param axis Axis along which to perform the gather operation.\n * @returns The result of the gathering as a tensor.\n */\nexport function gather(reference, indices, axis) {\n    return tidy(() => {\n        if (Array.isArray(indices)) {\n            indices = tensor1d(indices, 'int32');\n        }\n        else {\n            indices = tfc.cast(indices, 'int32');\n        }\n        return tfc.gather(reference, indices, axis);\n    });\n}\n/**\n * Element-wise square.\n * @param x Input tensor.\n * @return element-wise x^2\n */\nexport function square(x) {\n    return tfc.mul(x, x);\n}\n/**\n * Element-wise exponentiation.\n *\n * Porting Note: In PyKeras, `a` (the exponent) is a Python integer, which\n *   takes advatnage of the backend's (e.g., TensorFlow's) automatic\n * conversion to tensor. Here we allow `a` to be either a number or a tensor.\n *\n * @param x The base tensor.\n * @param a The exponent, tensor or number. If a number, it is rounded to the\n *   nearest integer and converted to a tensor.\n * @returns A tensor of the same shape as `x`.\n */\nexport function pow(x, a) {\n    return tidy(() => {\n        if (typeof (a) === 'number') {\n            a = scalar(Math.round(a), 'int32');\n        }\n        if (a.dtype !== 'int32') {\n            throw new NotImplementedError(`Non-int32 dtype (${a.dtype}) is not supported by pow() yet`);\n        }\n        return tfc.pow(x, a);\n    });\n}\n/**\n * Reshapes bias tensor according to rank of x.\n */\nfunction reshapeBias(xRank, bias, dataFormat) {\n    const biasShape = bias.shape;\n    if (bias.rank !== 1 && bias.rank !== xRank) {\n        throw new ValueError(`Unexpected bias dimensions: ${bias.rank}` +\n            `; expected it to be 1 or ${xRank}`);\n    }\n    if (xRank === 5) {\n        if (dataFormat === 'channelsFirst') {\n            if (biasShape.length === 1) {\n                return tfc.reshape(bias, [1, biasShape[0], 1, 1, 1]);\n            }\n            else {\n                return tfc.reshape(bias, [1, biasShape[3], biasShape[0], biasShape[1], biasShape[2]]);\n            }\n        }\n        else if (dataFormat === 'channelsLast') {\n            if (biasShape.length === 1) {\n                return tfc.reshape(bias, [1, 1, 1, 1, biasShape[0]]);\n            }\n            else {\n                return tfc.reshape(bias, [1].concat(biasShape));\n            }\n        }\n    }\n    else if (xRank === 4) {\n        if (dataFormat === 'channelsFirst') {\n            if (biasShape.length === 1) {\n                return tfc.reshape(bias, [1, biasShape[0], 1, 1]);\n            }\n            else {\n                return tfc.reshape(bias, [1, biasShape[2], biasShape[0], biasShape[1]]);\n            }\n        }\n        else if (dataFormat === 'channelsLast') {\n            if (biasShape.length === 1) {\n                return tfc.reshape(bias, [1, 1, 1, biasShape[0]]);\n            }\n            else {\n                return tfc.reshape(bias, [1].concat(biasShape));\n            }\n        }\n    }\n    else if (xRank === 3) {\n        if (dataFormat === 'channelsFirst') {\n            if (biasShape.length === 1) {\n                return tfc.reshape(bias, [1, biasShape[0], 1]);\n            }\n            else {\n                return tfc.reshape(bias, [1, biasShape[1], biasShape[0]]);\n            }\n        }\n        else if (dataFormat === 'channelsLast') {\n            if (biasShape.length === 1) {\n                return tfc.reshape(bias, [1, 1, biasShape[0]]);\n            }\n            else {\n                return tfc.reshape(bias, [1].concat(biasShape));\n            }\n        }\n    }\n    else if (xRank < 3) {\n        return bias;\n    }\n    throw new ValueError(`Unsupported input rank by biasAdd: ${bias.rank}`);\n}\n/* Neural-network operations. */\n/**\n * Add a bias to a tensor.\n *\n * @param x The tensor to add the bias to.\n * @param bias The bias to add to `x`. Must be 1D or the same rank as `x`.\n * @return Result of the bias adding.\n * @throws ValueError: If the rank of `bias` is incorrect.\n */\nexport function biasAdd(x, bias, dataFormat) {\n    return tidy(() => {\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        checkDataFormat(dataFormat);\n        return tfc.add(x, reshapeBias(x.rank, bias, dataFormat));\n    });\n}\n/**\n * Exponential linear unit (ELU).\n * @param x A tensor or variable to compute the activation function for.\n * @param alpha: A scalar, a scaling factor for the negative section.\n * @return Output of the ELU operation.\n */\nexport function elu(x, alpha = 1) {\n    // TODO(cais): Add support for alpha values other than 1.\n    if (alpha !== 1) {\n        throw new NotImplementedError(`Support for alpha values other than 1 (${alpha}) is not implemented ` +\n            `yet.`);\n    }\n    return tfc.elu(x);\n}\n/**\n * Softsign of a tensor.\n *\n * Defined as x / (abs(x) + 1), element-wise.\n *\n * @param x: Input.\n * @returns Output.\n */\nexport function softsign(x) {\n    return tidy(() => tfc.div(x, tfc.add(tfc.abs(x), 1)));\n}\n/**\n * Sets entries in `x` to zero at random, while scaling the entire tensor.\n *\n * @param x input tensor.\n * @param level fraction of the entries in the tensor that will be set to 0.\n * @param noiseShape shape of randomly generated keep/drop flags, must be\n *   broadcastable to the shape of `x`. Optional.\n * @param seed random seed to ensure determinism. Optional.\n * @returns Result of the dropout operation.\n */\nexport function dropout(x, level, noiseShape, seed) {\n    return tidy(() => tfc.dropout(x, level, noiseShape, seed));\n}\n/**\n * Element-wise, segment-wise linear approximation of sigmoid.\n *\n * Returns `0.` if `x < -2.5`, `1.` if `x > 2.5`.\n * In `-2.5 <= x <= 2.5`, returns `0.2 * x + 0.5`.\n *\n * @param x Input tensor.\n * @returns Output tensor.\n */\nexport function hardSigmoid(x) {\n    return tidy(() => {\n        const y = tfc.add(.5, tfc.mul(.2, x));\n        return tfc.clipByValue(y, 0, 1);\n    });\n}\n/**\n * Invoke `x` in the training phase, and `alt` otherwise.\n *\n * Porting Note: We do not create placeholder tensors for the `training`\n * boolean flag here, because there is no such thing in the TF.js imperative\n * backend.\n *\n * @param x The function to invoke iff `training` is `true`.\n * @param alt The function to invoke iff `training` is `false`.\n * @param training Boolean flag for whether training phase is active.\n * @returns The return value of `x()` if `training` is `true`, or the return\n *   value of `alt()` if `training` is `false`.\n */\nexport function inTrainPhase(x, alt, training = false) {\n    return training ? x() : alt();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}