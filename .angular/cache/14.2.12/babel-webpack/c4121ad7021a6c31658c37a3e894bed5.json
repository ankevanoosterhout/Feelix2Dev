{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { matMul } from './mat_mul';\nimport { ones } from './ones';\nimport { reshape } from './reshape';\nimport { Tensor } from '../tensor';\nimport { convertToTensor } from '../tensor_util_env';\nimport { sizeFromShape } from '../util_base';\n/**\n * Broadcasts parameters for evaluation on an N-D grid.\n *\n * Given N one-dimensional coordinate arrays `*args`, returns a list `outputs`\n * of N-D coordinate arrays for evaluating expressions on an N-D grid.\n *\n * Notes:\n * `meshgrid` supports cartesian ('xy') and matrix ('ij') indexing conventions.\n * When the `indexing` argument is set to 'xy' (the default), the broadcasting\n * instructions for the first two dimensions are swapped.\n * Examples:\n * Calling `const [X, Y] = meshgrid(x, y)` with the tensors\n *\n * ```javascript\n * const x = [1, 2, 3];\n * const y = [4, 5, 6];\n * const [X, Y] = tf.meshgrid(x, y);\n * // X = [[1, 2, 3],\n * //      [1, 2, 3],\n * //      [1, 2, 3]]\n * // Y = [[4, 4, 4],\n * //      [5, 5, 5],\n * //      [6, 6, 6]]\n * ```\n *\n * @param x Tensor with rank geq 1.\n * @param y Tensor with rank geq 1.\n * @param indexing\n *\n * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}\n */\n\nexport function meshgrid(x, y, {\n  indexing = 'xy'\n} = {}) {\n  if (indexing !== 'xy' && indexing !== 'ij') {\n    throw new TypeError(`${indexing} is not a valid third argument to meshgrid`);\n  }\n\n  if (x === undefined) {\n    return [];\n  }\n\n  let $x = convertToTensor(x, 'x', 'meshgrid', x instanceof Tensor ? x.dtype : 'float32');\n\n  if (y === undefined) {\n    return [$x];\n  }\n\n  let $y = convertToTensor(y, 'y', 'meshgrid', y instanceof Tensor ? y.dtype : 'float32');\n  const w = sizeFromShape($x.shape);\n  const h = sizeFromShape($y.shape);\n\n  if (indexing === 'xy') {\n    $x = reshape($x, [1, -1]);\n    $y = reshape($y, [-1, 1]);\n    return [matMul(ones([h, 1], $x.dtype), $x), matMul($y, ones([1, w], $y.dtype))];\n  }\n\n  $x = reshape($x, [-1, 1]);\n  $y = reshape($y, [1, -1]);\n  return [matMul($x, ones([1, h], $x.dtype)), matMul(ones([w, 1], $y.dtype), $y)];\n}","map":{"version":3,"names":["matMul","ones","reshape","Tensor","convertToTensor","sizeFromShape","meshgrid","x","y","indexing","TypeError","undefined","$x","dtype","$y","w","shape","h"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/meshgrid.js"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { matMul } from './mat_mul';\nimport { ones } from './ones';\nimport { reshape } from './reshape';\nimport { Tensor } from '../tensor';\nimport { convertToTensor } from '../tensor_util_env';\nimport { sizeFromShape } from '../util_base';\n/**\n * Broadcasts parameters for evaluation on an N-D grid.\n *\n * Given N one-dimensional coordinate arrays `*args`, returns a list `outputs`\n * of N-D coordinate arrays for evaluating expressions on an N-D grid.\n *\n * Notes:\n * `meshgrid` supports cartesian ('xy') and matrix ('ij') indexing conventions.\n * When the `indexing` argument is set to 'xy' (the default), the broadcasting\n * instructions for the first two dimensions are swapped.\n * Examples:\n * Calling `const [X, Y] = meshgrid(x, y)` with the tensors\n *\n * ```javascript\n * const x = [1, 2, 3];\n * const y = [4, 5, 6];\n * const [X, Y] = tf.meshgrid(x, y);\n * // X = [[1, 2, 3],\n * //      [1, 2, 3],\n * //      [1, 2, 3]]\n * // Y = [[4, 4, 4],\n * //      [5, 5, 5],\n * //      [6, 6, 6]]\n * ```\n *\n * @param x Tensor with rank geq 1.\n * @param y Tensor with rank geq 1.\n * @param indexing\n *\n * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}\n */\nexport function meshgrid(x, y, { indexing = 'xy' } = {}) {\n    if (indexing !== 'xy' && indexing !== 'ij') {\n        throw new TypeError(`${indexing} is not a valid third argument to meshgrid`);\n    }\n    if (x === undefined) {\n        return [];\n    }\n    let $x = convertToTensor(x, 'x', 'meshgrid', x instanceof Tensor ? x.dtype : 'float32');\n    if (y === undefined) {\n        return [$x];\n    }\n    let $y = convertToTensor(y, 'y', 'meshgrid', y instanceof Tensor ? y.dtype : 'float32');\n    const w = sizeFromShape($x.shape);\n    const h = sizeFromShape($y.shape);\n    if (indexing === 'xy') {\n        $x = reshape($x, [1, -1]);\n        $y = reshape($y, [-1, 1]);\n        return [\n            matMul(ones([h, 1], $x.dtype), $x),\n            matMul($y, ones([1, w], $y.dtype)),\n        ];\n    }\n    $x = reshape($x, [-1, 1]);\n    $y = reshape($y, [1, -1]);\n    return [\n        matMul($x, ones([1, h], $x.dtype)),\n        matMul(ones([w, 1], $y.dtype), $y),\n    ];\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,WAAvB;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,QAAT,CAAkBC,CAAlB,EAAqBC,CAArB,EAAwB;EAAEC,QAAQ,GAAG;AAAb,IAAsB,EAA9C,EAAkD;EACrD,IAAIA,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,IAAtC,EAA4C;IACxC,MAAM,IAAIC,SAAJ,CAAe,GAAED,QAAS,4CAA1B,CAAN;EACH;;EACD,IAAIF,CAAC,KAAKI,SAAV,EAAqB;IACjB,OAAO,EAAP;EACH;;EACD,IAAIC,EAAE,GAAGR,eAAe,CAACG,CAAD,EAAI,GAAJ,EAAS,UAAT,EAAqBA,CAAC,YAAYJ,MAAb,GAAsBI,CAAC,CAACM,KAAxB,GAAgC,SAArD,CAAxB;;EACA,IAAIL,CAAC,KAAKG,SAAV,EAAqB;IACjB,OAAO,CAACC,EAAD,CAAP;EACH;;EACD,IAAIE,EAAE,GAAGV,eAAe,CAACI,CAAD,EAAI,GAAJ,EAAS,UAAT,EAAqBA,CAAC,YAAYL,MAAb,GAAsBK,CAAC,CAACK,KAAxB,GAAgC,SAArD,CAAxB;EACA,MAAME,CAAC,GAAGV,aAAa,CAACO,EAAE,CAACI,KAAJ,CAAvB;EACA,MAAMC,CAAC,GAAGZ,aAAa,CAACS,EAAE,CAACE,KAAJ,CAAvB;;EACA,IAAIP,QAAQ,KAAK,IAAjB,EAAuB;IACnBG,EAAE,GAAGV,OAAO,CAACU,EAAD,EAAK,CAAC,CAAD,EAAI,CAAC,CAAL,CAAL,CAAZ;IACAE,EAAE,GAAGZ,OAAO,CAACY,EAAD,EAAK,CAAC,CAAC,CAAF,EAAK,CAAL,CAAL,CAAZ;IACA,OAAO,CACHd,MAAM,CAACC,IAAI,CAAC,CAACgB,CAAD,EAAI,CAAJ,CAAD,EAASL,EAAE,CAACC,KAAZ,CAAL,EAAyBD,EAAzB,CADH,EAEHZ,MAAM,CAACc,EAAD,EAAKb,IAAI,CAAC,CAAC,CAAD,EAAIc,CAAJ,CAAD,EAASD,EAAE,CAACD,KAAZ,CAAT,CAFH,CAAP;EAIH;;EACDD,EAAE,GAAGV,OAAO,CAACU,EAAD,EAAK,CAAC,CAAC,CAAF,EAAK,CAAL,CAAL,CAAZ;EACAE,EAAE,GAAGZ,OAAO,CAACY,EAAD,EAAK,CAAC,CAAD,EAAI,CAAC,CAAL,CAAL,CAAZ;EACA,OAAO,CACHd,MAAM,CAACY,EAAD,EAAKX,IAAI,CAAC,CAAC,CAAD,EAAIgB,CAAJ,CAAD,EAASL,EAAE,CAACC,KAAZ,CAAT,CADH,EAEHb,MAAM,CAACC,IAAI,CAAC,CAACc,CAAD,EAAI,CAAJ,CAAD,EAASD,EAAE,CAACD,KAAZ,CAAL,EAAyBC,EAAzB,CAFH,CAAP;AAIH"},"metadata":{},"sourceType":"module"}