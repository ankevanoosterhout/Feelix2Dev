{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat, keep, reshape, scalar, slice, stack, tensor, tidy, unstack } from '@tensorflow/tfjs-core';\nimport { assertShapesMatchAllowUndefinedSize } from './tensor_utils';\n/**\n * The TensorArray object keeps an array of Tensors.  It\n * allows reading from the array and writing to the array.\n */\n\nexport class TensorArray {\n  constructor(name, dtype, maxSize, elementShape, identicalElementShapes, dynamicSize, clearAfterRead) {\n    this.name = name;\n    this.dtype = dtype;\n    this.maxSize = maxSize;\n    this.elementShape = elementShape;\n    this.identicalElementShapes = identicalElementShapes;\n    this.dynamicSize = dynamicSize;\n    this.clearAfterRead = clearAfterRead;\n    this.tensors = [];\n    this.closed_ = false;\n    this.idTensor = scalar(0);\n    keep(this.idTensor);\n  }\n\n  get id() {\n    return this.idTensor.id;\n  }\n\n  get closed() {\n    return this.closed_;\n  }\n  /**\n   * Dispose the tensors and idTensor and mark the TensoryArray as closed.\n   */\n\n\n  clearAndClose(keepIds) {\n    this.tensors.forEach(tensor => {\n      if (keepIds == null || !keepIds.has(tensor.tensor.id)) {\n        tensor.tensor.dispose();\n      }\n    });\n    this.tensors = [];\n    this.closed_ = true;\n    this.idTensor.dispose();\n  }\n\n  size() {\n    return this.tensors.length;\n  }\n  /**\n   * Read the value at location index in the TensorArray.\n   * @param index Number the index to read from.\n   */\n\n\n  read(index) {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || index >= this.size()) {\n      throw new Error(`Tried to read from index ${index}, but array size is: ${this.size()}`);\n    }\n\n    const tensorWithState = this.tensors[index];\n\n    if (tensorWithState.cleared) {\n      throw new Error(`TensorArray ${this.name}: Could not read index ${index} twice because it was cleared after a previous read ` + `(perhaps try setting clear_after_read = false?).`);\n    }\n\n    if (this.clearAfterRead) {\n      tensorWithState.cleared = true;\n    }\n\n    tensorWithState.read = true;\n    return tensorWithState.tensor;\n  }\n  /**\n   * Helper method to read multiple tensors from the specified indices.\n   */\n\n\n  readMany(indices) {\n    return indices.map(index => this.read(index));\n  }\n  /**\n   * Write value into the index of the TensorArray.\n   * @param index number the index to write to.\n   * @param tensor\n   */\n\n\n  write(index, tensor) {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || !this.dynamicSize && index >= this.maxSize) {\n      throw new Error(`Tried to write to index ${index}, but array is not resizeable and size is: ${this.maxSize}`);\n    }\n\n    const t = this.tensors[index] || {};\n\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index},\n          because the value dtype is ${tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);\n    } // Set the shape for the first time write to unknow shape tensor array\n\n\n    if (this.size() === 0 && (this.elementShape == null || this.elementShape.length === 0)) {\n      this.elementShape = tensor.shape;\n    }\n\n    assertShapesMatchAllowUndefinedSize(this.elementShape, tensor.shape, `TensorArray ${this.name}: Could not write to TensorArray index ${index}.`);\n\n    if (t.read) {\n      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index}, because it has already been read.`);\n    }\n\n    if (t.written) {\n      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index}, because it has already been written.`);\n    }\n\n    t.tensor = tensor;\n    keep(tensor);\n    t.written = true;\n    this.tensors[index] = t;\n  }\n  /**\n   * Helper method to write multiple tensors to the specified indices.\n   */\n\n\n  writeMany(indices, tensors) {\n    if (indices.length !== tensors.length) {\n      throw new Error(`TensorArray ${this.name}: could not write multiple tensors,` + `because the index size: ${indices.length} is not the same as tensors size: ${tensors.length}.`);\n    }\n\n    indices.forEach((i, index) => this.write(i, tensors[index]));\n  }\n  /**\n   * Return selected values in the TensorArray as a packed Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param [indices] number[] Optional. Taking values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size(). If not specified returns\n   *    all tensors in the original order.\n   * @param [dtype]\n   */\n\n\n  gather(indices, dtype) {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${dtype}`);\n    }\n\n    if (!indices) {\n      indices = [];\n\n      for (let i = 0; i < this.size(); i++) {\n        indices.push(i);\n      }\n    } else {\n      indices = indices.slice(0, this.size());\n    }\n\n    if (indices.length === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    } // Read all the PersistentTensors into a vector to keep track of\n    // their memory.\n\n\n    const tensors = this.readMany(indices);\n    assertShapesMatchAllowUndefinedSize(this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');\n    return stack(tensors, 0);\n  }\n  /**\n   * Return the values in the TensorArray as a concatenated Tensor.\n   */\n\n\n  concat(dtype) {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${dtype}`);\n    }\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    const indices = [];\n\n    for (let i = 0; i < this.size(); i++) {\n      indices.push(i);\n    } // Collect all the tensors from the tensors array.\n\n\n    const tensors = this.readMany(indices);\n    assertShapesMatchAllowUndefinedSize(this.elementShape, tensors[0].shape, `TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${tensors[0].shape})`);\n    return concat(tensors, 0);\n  }\n  /**\n   * Scatter the values of a Tensor in specific indices of a TensorArray.\n   * @param indices nummber[] values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size().\n   * @param tensor Tensor input tensor.\n   */\n\n\n  scatter(indices, tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n\n    if (indices.length !== tensor.shape[0]) {\n      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${indices.length} vs. ${tensor.shape[0]}`);\n    }\n\n    const maxIndex = Math.max(...indices);\n\n    if (!this.dynamicSize && maxIndex >= this.maxSize) {\n      throw new Error(`Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);\n    }\n\n    this.writeMany(indices, unstack(tensor, 0));\n  }\n  /**\n   * Split the values of a Tensor into the TensorArray.\n   * @param length number[] with the lengths to use when splitting value along\n   *    its first dimension.\n   * @param tensor Tensor, the tensor to split.\n   */\n\n\n  split(length, tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n\n    let totalLength = 0;\n    const cumulativeLengths = length.map(len => {\n      totalLength += len;\n      return totalLength;\n    });\n\n    if (totalLength !== tensor.shape[0]) {\n      throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n    }\n\n    if (!this.dynamicSize && length.length !== this.maxSize) {\n      throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${length.length}), ` + 'and the TensorArray is not marked as dynamically resizeable');\n    }\n\n    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n    const tensors = [];\n    tidy(() => {\n      tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n\n      for (let i = 0; i < length.length; ++i) {\n        const previousLength = i === 0 ? 0 : cumulativeLengths[i - 1];\n        const indices = [0, previousLength, 0];\n        const sizes = [1, length[i], elementPerRow];\n        tensors[i] = reshape(slice(tensor, indices, sizes), this.elementShape);\n      }\n\n      return tensors;\n    });\n    const indices = [];\n\n    for (let i = 0; i < length.length; i++) {\n      indices[i] = i;\n    }\n\n    this.writeMany(indices, tensors);\n  }\n\n}","map":{"version":3,"names":["concat","keep","reshape","scalar","slice","stack","tensor","tidy","unstack","assertShapesMatchAllowUndefinedSize","TensorArray","constructor","name","dtype","maxSize","elementShape","identicalElementShapes","dynamicSize","clearAfterRead","tensors","closed_","idTensor","id","closed","clearAndClose","keepIds","forEach","has","dispose","size","length","read","index","Error","tensorWithState","cleared","readMany","indices","map","write","t","shape","written","writeMany","i","gather","push","scatter","maxIndex","Math","max","split","totalLength","cumulativeLengths","len","elementPerRow","previousLength","sizes"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_array.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat, keep, reshape, scalar, slice, stack, tensor, tidy, unstack } from '@tensorflow/tfjs-core';\nimport { assertShapesMatchAllowUndefinedSize } from './tensor_utils';\n/**\n * The TensorArray object keeps an array of Tensors.  It\n * allows reading from the array and writing to the array.\n */\nexport class TensorArray {\n    constructor(name, dtype, maxSize, elementShape, identicalElementShapes, dynamicSize, clearAfterRead) {\n        this.name = name;\n        this.dtype = dtype;\n        this.maxSize = maxSize;\n        this.elementShape = elementShape;\n        this.identicalElementShapes = identicalElementShapes;\n        this.dynamicSize = dynamicSize;\n        this.clearAfterRead = clearAfterRead;\n        this.tensors = [];\n        this.closed_ = false;\n        this.idTensor = scalar(0);\n        keep(this.idTensor);\n    }\n    get id() {\n        return this.idTensor.id;\n    }\n    get closed() {\n        return this.closed_;\n    }\n    /**\n     * Dispose the tensors and idTensor and mark the TensoryArray as closed.\n     */\n    clearAndClose(keepIds) {\n        this.tensors.forEach(tensor => {\n            if (keepIds == null || !keepIds.has(tensor.tensor.id)) {\n                tensor.tensor.dispose();\n            }\n        });\n        this.tensors = [];\n        this.closed_ = true;\n        this.idTensor.dispose();\n    }\n    size() {\n        return this.tensors.length;\n    }\n    /**\n     * Read the value at location index in the TensorArray.\n     * @param index Number the index to read from.\n     */\n    read(index) {\n        if (this.closed_) {\n            throw new Error(`TensorArray ${this.name} has already been closed.`);\n        }\n        if (index < 0 || index >= this.size()) {\n            throw new Error(`Tried to read from index ${index}, but array size is: ${this.size()}`);\n        }\n        const tensorWithState = this.tensors[index];\n        if (tensorWithState.cleared) {\n            throw new Error(`TensorArray ${this.name}: Could not read index ${index} twice because it was cleared after a previous read ` +\n                `(perhaps try setting clear_after_read = false?).`);\n        }\n        if (this.clearAfterRead) {\n            tensorWithState.cleared = true;\n        }\n        tensorWithState.read = true;\n        return tensorWithState.tensor;\n    }\n    /**\n     * Helper method to read multiple tensors from the specified indices.\n     */\n    readMany(indices) {\n        return indices.map(index => this.read(index));\n    }\n    /**\n     * Write value into the index of the TensorArray.\n     * @param index number the index to write to.\n     * @param tensor\n     */\n    write(index, tensor) {\n        if (this.closed_) {\n            throw new Error(`TensorArray ${this.name} has already been closed.`);\n        }\n        if (index < 0 || !this.dynamicSize && index >= this.maxSize) {\n            throw new Error(`Tried to write to index ${index}, but array is not resizeable and size is: ${this.maxSize}`);\n        }\n        const t = this.tensors[index] || {};\n        if (tensor.dtype !== this.dtype) {\n            throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index},\n          because the value dtype is ${tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);\n        }\n        // Set the shape for the first time write to unknow shape tensor array\n        if (this.size() === 0 &&\n            (this.elementShape == null || this.elementShape.length === 0)) {\n            this.elementShape = tensor.shape;\n        }\n        assertShapesMatchAllowUndefinedSize(this.elementShape, tensor.shape, `TensorArray ${this.name}: Could not write to TensorArray index ${index}.`);\n        if (t.read) {\n            throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index}, because it has already been read.`);\n        }\n        if (t.written) {\n            throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index}, because it has already been written.`);\n        }\n        t.tensor = tensor;\n        keep(tensor);\n        t.written = true;\n        this.tensors[index] = t;\n    }\n    /**\n     * Helper method to write multiple tensors to the specified indices.\n     */\n    writeMany(indices, tensors) {\n        if (indices.length !== tensors.length) {\n            throw new Error(`TensorArray ${this.name}: could not write multiple tensors,` +\n                `because the index size: ${indices.length} is not the same as tensors size: ${tensors.length}.`);\n        }\n        indices.forEach((i, index) => this.write(i, tensors[index]));\n    }\n    /**\n     * Return selected values in the TensorArray as a packed Tensor. All of\n     * selected values must have been written and their shapes must all match.\n     * @param [indices] number[] Optional. Taking values in [0, max_value). If the\n     *    TensorArray is not dynamic, max_value=size(). If not specified returns\n     *    all tensors in the original order.\n     * @param [dtype]\n     */\n    gather(indices, dtype) {\n        if (!!dtype && dtype !== this.dtype) {\n            throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${dtype}`);\n        }\n        if (!indices) {\n            indices = [];\n            for (let i = 0; i < this.size(); i++) {\n                indices.push(i);\n            }\n        }\n        else {\n            indices = indices.slice(0, this.size());\n        }\n        if (indices.length === 0) {\n            return tensor([], [0].concat(this.elementShape));\n        }\n        // Read all the PersistentTensors into a vector to keep track of\n        // their memory.\n        const tensors = this.readMany(indices);\n        assertShapesMatchAllowUndefinedSize(this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');\n        return stack(tensors, 0);\n    }\n    /**\n     * Return the values in the TensorArray as a concatenated Tensor.\n     */\n    concat(dtype) {\n        if (!!dtype && dtype !== this.dtype) {\n            throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${dtype}`);\n        }\n        if (this.size() === 0) {\n            return tensor([], [0].concat(this.elementShape));\n        }\n        const indices = [];\n        for (let i = 0; i < this.size(); i++) {\n            indices.push(i);\n        }\n        // Collect all the tensors from the tensors array.\n        const tensors = this.readMany(indices);\n        assertShapesMatchAllowUndefinedSize(this.elementShape, tensors[0].shape, `TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${tensors[0].shape})`);\n        return concat(tensors, 0);\n    }\n    /**\n     * Scatter the values of a Tensor in specific indices of a TensorArray.\n     * @param indices nummber[] values in [0, max_value). If the\n     *    TensorArray is not dynamic, max_value=size().\n     * @param tensor Tensor input tensor.\n     */\n    scatter(indices, tensor) {\n        if (tensor.dtype !== this.dtype) {\n            throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${tensor.dtype}`);\n        }\n        if (indices.length !== tensor.shape[0]) {\n            throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${indices.length} vs. ${tensor.shape[0]}`);\n        }\n        const maxIndex = Math.max(...indices);\n        if (!this.dynamicSize && maxIndex >= this.maxSize) {\n            throw new Error(`Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);\n        }\n        this.writeMany(indices, unstack(tensor, 0));\n    }\n    /**\n     * Split the values of a Tensor into the TensorArray.\n     * @param length number[] with the lengths to use when splitting value along\n     *    its first dimension.\n     * @param tensor Tensor, the tensor to split.\n     */\n    split(length, tensor) {\n        if (tensor.dtype !== this.dtype) {\n            throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${tensor.dtype}`);\n        }\n        let totalLength = 0;\n        const cumulativeLengths = length.map(len => {\n            totalLength += len;\n            return totalLength;\n        });\n        if (totalLength !== tensor.shape[0]) {\n            throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n        }\n        if (!this.dynamicSize && length.length !== this.maxSize) {\n            throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${length.length}), ` +\n                'and the TensorArray is not marked as dynamically resizeable');\n        }\n        const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n        const tensors = [];\n        tidy(() => {\n            tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n            for (let i = 0; i < length.length; ++i) {\n                const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n                const indices = [0, previousLength, 0];\n                const sizes = [1, length[i], elementPerRow];\n                tensors[i] = reshape(slice(tensor, indices, sizes), this.elementShape);\n            }\n            return tensors;\n        });\n        const indices = [];\n        for (let i = 0; i < length.length; i++) {\n            indices[i] = i;\n        }\n        this.writeMany(indices, tensors);\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,EAAiBC,IAAjB,EAAuBC,OAAvB,EAAgCC,MAAhC,EAAwCC,KAAxC,EAA+CC,KAA/C,EAAsDC,MAAtD,EAA8DC,IAA9D,EAAoEC,OAApE,QAAmF,uBAAnF;AACA,SAASC,mCAAT,QAAoD,gBAApD;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,WAAN,CAAkB;EACrBC,WAAW,CAACC,IAAD,EAAOC,KAAP,EAAcC,OAAd,EAAuBC,YAAvB,EAAqCC,sBAArC,EAA6DC,WAA7D,EAA0EC,cAA1E,EAA0F;IACjG,KAAKN,IAAL,GAAYA,IAAZ;IACA,KAAKC,KAAL,GAAaA,KAAb;IACA,KAAKC,OAAL,GAAeA,OAAf;IACA,KAAKC,YAAL,GAAoBA,YAApB;IACA,KAAKC,sBAAL,GAA8BA,sBAA9B;IACA,KAAKC,WAAL,GAAmBA,WAAnB;IACA,KAAKC,cAAL,GAAsBA,cAAtB;IACA,KAAKC,OAAL,GAAe,EAAf;IACA,KAAKC,OAAL,GAAe,KAAf;IACA,KAAKC,QAAL,GAAgBlB,MAAM,CAAC,CAAD,CAAtB;IACAF,IAAI,CAAC,KAAKoB,QAAN,CAAJ;EACH;;EACK,IAAFC,EAAE,GAAG;IACL,OAAO,KAAKD,QAAL,CAAcC,EAArB;EACH;;EACS,IAANC,MAAM,GAAG;IACT,OAAO,KAAKH,OAAZ;EACH;EACD;AACJ;AACA;;;EACII,aAAa,CAACC,OAAD,EAAU;IACnB,KAAKN,OAAL,CAAaO,OAAb,CAAqBpB,MAAM,IAAI;MAC3B,IAAImB,OAAO,IAAI,IAAX,IAAmB,CAACA,OAAO,CAACE,GAAR,CAAYrB,MAAM,CAACA,MAAP,CAAcgB,EAA1B,CAAxB,EAAuD;QACnDhB,MAAM,CAACA,MAAP,CAAcsB,OAAd;MACH;IACJ,CAJD;IAKA,KAAKT,OAAL,GAAe,EAAf;IACA,KAAKC,OAAL,GAAe,IAAf;IACA,KAAKC,QAAL,CAAcO,OAAd;EACH;;EACDC,IAAI,GAAG;IACH,OAAO,KAAKV,OAAL,CAAaW,MAApB;EACH;EACD;AACJ;AACA;AACA;;;EACIC,IAAI,CAACC,KAAD,EAAQ;IACR,IAAI,KAAKZ,OAAT,EAAkB;MACd,MAAM,IAAIa,KAAJ,CAAW,eAAc,KAAKrB,IAAK,2BAAnC,CAAN;IACH;;IACD,IAAIoB,KAAK,GAAG,CAAR,IAAaA,KAAK,IAAI,KAAKH,IAAL,EAA1B,EAAuC;MACnC,MAAM,IAAII,KAAJ,CAAW,4BAA2BD,KAAM,wBAAuB,KAAKH,IAAL,EAAY,EAA/E,CAAN;IACH;;IACD,MAAMK,eAAe,GAAG,KAAKf,OAAL,CAAaa,KAAb,CAAxB;;IACA,IAAIE,eAAe,CAACC,OAApB,EAA6B;MACzB,MAAM,IAAIF,KAAJ,CAAW,eAAc,KAAKrB,IAAK,0BAAyBoB,KAAM,sDAAxD,GACX,kDADC,CAAN;IAEH;;IACD,IAAI,KAAKd,cAAT,EAAyB;MACrBgB,eAAe,CAACC,OAAhB,GAA0B,IAA1B;IACH;;IACDD,eAAe,CAACH,IAAhB,GAAuB,IAAvB;IACA,OAAOG,eAAe,CAAC5B,MAAvB;EACH;EACD;AACJ;AACA;;;EACI8B,QAAQ,CAACC,OAAD,EAAU;IACd,OAAOA,OAAO,CAACC,GAAR,CAAYN,KAAK,IAAI,KAAKD,IAAL,CAAUC,KAAV,CAArB,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIO,KAAK,CAACP,KAAD,EAAQ1B,MAAR,EAAgB;IACjB,IAAI,KAAKc,OAAT,EAAkB;MACd,MAAM,IAAIa,KAAJ,CAAW,eAAc,KAAKrB,IAAK,2BAAnC,CAAN;IACH;;IACD,IAAIoB,KAAK,GAAG,CAAR,IAAa,CAAC,KAAKf,WAAN,IAAqBe,KAAK,IAAI,KAAKlB,OAApD,EAA6D;MACzD,MAAM,IAAImB,KAAJ,CAAW,2BAA0BD,KAAM,8CAA6C,KAAKlB,OAAQ,EAArG,CAAN;IACH;;IACD,MAAM0B,CAAC,GAAG,KAAKrB,OAAL,CAAaa,KAAb,KAAuB,EAAjC;;IACA,IAAI1B,MAAM,CAACO,KAAP,KAAiB,KAAKA,KAA1B,EAAiC;MAC7B,MAAM,IAAIoB,KAAJ,CAAW,eAAc,KAAKrB,IAAK,0CAAyCoB,KAAM;AACpG,uCAAuC1B,MAAM,CAACO,KAAM,8BAA6B,KAAKA,KAAM,GAD1E,CAAN;IAEH,CAXgB,CAYjB;;;IACA,IAAI,KAAKgB,IAAL,OAAgB,CAAhB,KACC,KAAKd,YAAL,IAAqB,IAArB,IAA6B,KAAKA,YAAL,CAAkBe,MAAlB,KAA6B,CAD3D,CAAJ,EACmE;MAC/D,KAAKf,YAAL,GAAoBT,MAAM,CAACmC,KAA3B;IACH;;IACDhC,mCAAmC,CAAC,KAAKM,YAAN,EAAoBT,MAAM,CAACmC,KAA3B,EAAmC,eAAc,KAAK7B,IAAK,0CAAyCoB,KAAM,GAA1G,CAAnC;;IACA,IAAIQ,CAAC,CAACT,IAAN,EAAY;MACR,MAAM,IAAIE,KAAJ,CAAW,eAAc,KAAKrB,IAAK,0CAAyCoB,KAAM,qCAAlF,CAAN;IACH;;IACD,IAAIQ,CAAC,CAACE,OAAN,EAAe;MACX,MAAM,IAAIT,KAAJ,CAAW,eAAc,KAAKrB,IAAK,0CAAyCoB,KAAM,wCAAlF,CAAN;IACH;;IACDQ,CAAC,CAAClC,MAAF,GAAWA,MAAX;IACAL,IAAI,CAACK,MAAD,CAAJ;IACAkC,CAAC,CAACE,OAAF,GAAY,IAAZ;IACA,KAAKvB,OAAL,CAAaa,KAAb,IAAsBQ,CAAtB;EACH;EACD;AACJ;AACA;;;EACIG,SAAS,CAACN,OAAD,EAAUlB,OAAV,EAAmB;IACxB,IAAIkB,OAAO,CAACP,MAAR,KAAmBX,OAAO,CAACW,MAA/B,EAAuC;MACnC,MAAM,IAAIG,KAAJ,CAAW,eAAc,KAAKrB,IAAK,qCAAzB,GACX,2BAA0ByB,OAAO,CAACP,MAAO,qCAAoCX,OAAO,CAACW,MAAO,GAD3F,CAAN;IAEH;;IACDO,OAAO,CAACX,OAAR,CAAgB,CAACkB,CAAD,EAAIZ,KAAJ,KAAc,KAAKO,KAAL,CAAWK,CAAX,EAAczB,OAAO,CAACa,KAAD,CAArB,CAA9B;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIa,MAAM,CAACR,OAAD,EAAUxB,KAAV,EAAiB;IACnB,IAAI,CAAC,CAACA,KAAF,IAAWA,KAAK,KAAK,KAAKA,KAA9B,EAAqC;MACjC,MAAM,IAAIoB,KAAJ,CAAW,wBAAuB,KAAKpB,KAAM,+BAA8BA,KAAM,EAAjF,CAAN;IACH;;IACD,IAAI,CAACwB,OAAL,EAAc;MACVA,OAAO,GAAG,EAAV;;MACA,KAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKf,IAAL,EAApB,EAAiCe,CAAC,EAAlC,EAAsC;QAClCP,OAAO,CAACS,IAAR,CAAaF,CAAb;MACH;IACJ,CALD,MAMK;MACDP,OAAO,GAAGA,OAAO,CAACjC,KAAR,CAAc,CAAd,EAAiB,KAAKyB,IAAL,EAAjB,CAAV;IACH;;IACD,IAAIQ,OAAO,CAACP,MAAR,KAAmB,CAAvB,EAA0B;MACtB,OAAOxB,MAAM,CAAC,EAAD,EAAK,CAAC,CAAD,EAAIN,MAAJ,CAAW,KAAKe,YAAhB,CAAL,CAAb;IACH,CAfkB,CAgBnB;IACA;;;IACA,MAAMI,OAAO,GAAG,KAAKiB,QAAL,CAAcC,OAAd,CAAhB;IACA5B,mCAAmC,CAAC,KAAKM,YAAN,EAAoBI,OAAO,CAAC,CAAD,CAAP,CAAWsB,KAA/B,EAAsC,8BAAtC,CAAnC;IACA,OAAOpC,KAAK,CAACc,OAAD,EAAU,CAAV,CAAZ;EACH;EACD;AACJ;AACA;;;EACInB,MAAM,CAACa,KAAD,EAAQ;IACV,IAAI,CAAC,CAACA,KAAF,IAAWA,KAAK,KAAK,KAAKA,KAA9B,EAAqC;MACjC,MAAM,IAAIoB,KAAJ,CAAW,wBAAuB,KAAKpB,KAAM,+BAA8BA,KAAM,EAAjF,CAAN;IACH;;IACD,IAAI,KAAKgB,IAAL,OAAgB,CAApB,EAAuB;MACnB,OAAOvB,MAAM,CAAC,EAAD,EAAK,CAAC,CAAD,EAAIN,MAAJ,CAAW,KAAKe,YAAhB,CAAL,CAAb;IACH;;IACD,MAAMsB,OAAO,GAAG,EAAhB;;IACA,KAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKf,IAAL,EAApB,EAAiCe,CAAC,EAAlC,EAAsC;MAClCP,OAAO,CAACS,IAAR,CAAaF,CAAb;IACH,CAVS,CAWV;;;IACA,MAAMzB,OAAO,GAAG,KAAKiB,QAAL,CAAcC,OAAd,CAAhB;IACA5B,mCAAmC,CAAC,KAAKM,YAAN,EAAoBI,OAAO,CAAC,CAAD,CAAP,CAAWsB,KAA/B,EAAuC,mDAAkD,KAAK1B,YAAa,4BAA2BI,OAAO,CAAC,CAAD,CAAP,CAAWsB,KAAM,GAAvJ,CAAnC;IACA,OAAOzC,MAAM,CAACmB,OAAD,EAAU,CAAV,CAAb;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACI4B,OAAO,CAACV,OAAD,EAAU/B,MAAV,EAAkB;IACrB,IAAIA,MAAM,CAACO,KAAP,KAAiB,KAAKA,KAA1B,EAAiC;MAC7B,MAAM,IAAIoB,KAAJ,CAAW,wBAAuB,KAAKpB,KAAM,yBAAwBP,MAAM,CAACO,KAAM,EAAlF,CAAN;IACH;;IACD,IAAIwB,OAAO,CAACP,MAAR,KAAmBxB,MAAM,CAACmC,KAAP,CAAa,CAAb,CAAvB,EAAwC;MACpC,MAAM,IAAIR,KAAJ,CAAW,sDAAqDI,OAAO,CAACP,MAAO,QAAOxB,MAAM,CAACmC,KAAP,CAAa,CAAb,CAAgB,EAAtG,CAAN;IACH;;IACD,MAAMO,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAAS,GAAGb,OAAZ,CAAjB;;IACA,IAAI,CAAC,KAAKpB,WAAN,IAAqB+B,QAAQ,IAAI,KAAKlC,OAA1C,EAAmD;MAC/C,MAAM,IAAImB,KAAJ,CAAW,mCAAkCe,QAAS,SAAQ,KAAKlC,OAAQ,GAA3E,CAAN;IACH;;IACD,KAAK6B,SAAL,CAAeN,OAAf,EAAwB7B,OAAO,CAACF,MAAD,EAAS,CAAT,CAA/B;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACI6C,KAAK,CAACrB,MAAD,EAASxB,MAAT,EAAiB;IAClB,IAAIA,MAAM,CAACO,KAAP,KAAiB,KAAKA,KAA1B,EAAiC;MAC7B,MAAM,IAAIoB,KAAJ,CAAW,wBAAuB,KAAKpB,KAAM,yBAAwBP,MAAM,CAACO,KAAM,EAAlF,CAAN;IACH;;IACD,IAAIuC,WAAW,GAAG,CAAlB;IACA,MAAMC,iBAAiB,GAAGvB,MAAM,CAACQ,GAAP,CAAWgB,GAAG,IAAI;MACxCF,WAAW,IAAIE,GAAf;MACA,OAAOF,WAAP;IACH,CAHyB,CAA1B;;IAIA,IAAIA,WAAW,KAAK9C,MAAM,CAACmC,KAAP,CAAa,CAAb,CAApB,EAAqC;MACjC,MAAM,IAAIR,KAAJ,CAAW;AAC7B;AACA,UAAUmB,WAAY,4BAA2B9C,MAAM,CAACmC,KAAM,EAF5C,CAAN;IAGH;;IACD,IAAI,CAAC,KAAKxB,WAAN,IAAqBa,MAAM,CAACA,MAAP,KAAkB,KAAKhB,OAAhD,EAAyD;MACrD,MAAM,IAAImB,KAAJ,CAAW,2DAA0D,KAAKnB,OAAQ,QAAOgB,MAAM,CAACA,MAAO,KAA7F,GACZ,6DADE,CAAN;IAEH;;IACD,MAAMyB,aAAa,GAAGH,WAAW,KAAK,CAAhB,GAAoB,CAApB,GAAwB9C,MAAM,CAACuB,IAAP,GAAcuB,WAA5D;IACA,MAAMjC,OAAO,GAAG,EAAhB;IACAZ,IAAI,CAAC,MAAM;MACPD,MAAM,GAAGJ,OAAO,CAACI,MAAD,EAAS,CAAC,CAAD,EAAI8C,WAAJ,EAAiBG,aAAjB,CAAT,CAAhB;;MACA,KAAK,IAAIX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,MAAM,CAACA,MAA3B,EAAmC,EAAEc,CAArC,EAAwC;QACpC,MAAMY,cAAc,GAAIZ,CAAC,KAAK,CAAP,GAAY,CAAZ,GAAgBS,iBAAiB,CAACT,CAAC,GAAG,CAAL,CAAxD;QACA,MAAMP,OAAO,GAAG,CAAC,CAAD,EAAImB,cAAJ,EAAoB,CAApB,CAAhB;QACA,MAAMC,KAAK,GAAG,CAAC,CAAD,EAAI3B,MAAM,CAACc,CAAD,CAAV,EAAeW,aAAf,CAAd;QACApC,OAAO,CAACyB,CAAD,CAAP,GAAa1C,OAAO,CAACE,KAAK,CAACE,MAAD,EAAS+B,OAAT,EAAkBoB,KAAlB,CAAN,EAAgC,KAAK1C,YAArC,CAApB;MACH;;MACD,OAAOI,OAAP;IACH,CATG,CAAJ;IAUA,MAAMkB,OAAO,GAAG,EAAhB;;IACA,KAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,MAAM,CAACA,MAA3B,EAAmCc,CAAC,EAApC,EAAwC;MACpCP,OAAO,CAACO,CAAD,CAAP,GAAaA,CAAb;IACH;;IACD,KAAKD,SAAL,CAAeN,OAAf,EAAwBlB,OAAxB;EACH;;AAzNoB"},"metadata":{},"sourceType":"module"}