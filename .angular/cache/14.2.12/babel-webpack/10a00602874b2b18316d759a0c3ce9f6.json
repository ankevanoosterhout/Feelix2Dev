{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { CumProgram } from '../cum_gpu';\nimport { identity } from './Identity';\nimport { transpose } from './Transpose';\nexport function cumImpl(op, x, backend, axis, exclusive, reverse) {\n  const xRank = x.shape.length;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n\n  if (permutation != null) {\n    permutedX = transpose({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        perm: permutation\n      }\n    });\n  }\n\n  const permutedAxis = backend_util.getInnerMostAxes(1, xRank)[0];\n\n  if (permutedAxis !== xRank - 1) {\n    throw new Error(`WebGL cumprod shader expects an inner-most axis=${x.shape.length - 1} ` + `but got axis=${axis}`);\n  }\n\n  const size = permutedX.shape[permutedAxis];\n  let result = identity({\n    inputs: {\n      x: permutedX\n    },\n    backend\n  }); // Use cum parallel algorithm, inspired by:\n  // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda\n  // Note: although the algorithm is called sum, it works for any associtative\n  // operator with an identity.\n\n  for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {\n    const program = new CumProgram(op, permutedX.shape, false, reverse);\n    const customValues = [[i]];\n    const prevResult = result;\n    result = backend.runWebGLProgram(program, [result], result.dtype, customValues);\n    backend.disposeIntermediateTensorInfo(prevResult);\n  } // For exclusive cum, shift the end result in the direction of product or sum\n  // and add 1 for product or 0 for sum to the front index.\n\n\n  if (exclusive) {\n    const program = new CumProgram(op, permutedX.shape, exclusive, reverse);\n    const prevResult = result;\n    result = backend.runWebGLProgram(program, [result], result.dtype);\n    backend.disposeIntermediateTensorInfo(prevResult);\n  }\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose({\n      inputs: {\n        x: result\n      },\n      backend,\n      attrs: {\n        perm: reversePermutation\n      }\n    });\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo(permutedX);\n    return reverseTransposedResult;\n  }\n\n  return result;\n}","map":{"version":3,"names":["backend_util","CumProgram","identity","transpose","cumImpl","op","x","backend","axis","exclusive","reverse","xRank","shape","length","permutation","getAxesPermutation","permutedX","inputs","attrs","perm","permutedAxis","getInnerMostAxes","Error","size","result","i","Math","ceil","log2","program","customValues","prevResult","runWebGLProgram","dtype","disposeIntermediateTensorInfo","reversePermutation","getUndoAxesPermutation","reverseTransposedResult"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cum_impl.js"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { CumProgram } from '../cum_gpu';\nimport { identity } from './Identity';\nimport { transpose } from './Transpose';\nexport function cumImpl(op, x, backend, axis, exclusive, reverse) {\n    const xRank = x.shape.length;\n    const permutation = backend_util.getAxesPermutation([axis], xRank);\n    let permutedX = x;\n    if (permutation != null) {\n        permutedX = transpose({ inputs: { x }, backend, attrs: { perm: permutation } });\n    }\n    const permutedAxis = backend_util.getInnerMostAxes(1, xRank)[0];\n    if (permutedAxis !== xRank - 1) {\n        throw new Error(`WebGL cumprod shader expects an inner-most axis=${x.shape.length - 1} ` +\n            `but got axis=${axis}`);\n    }\n    const size = permutedX.shape[permutedAxis];\n    let result = identity({ inputs: { x: permutedX }, backend });\n    // Use cum parallel algorithm, inspired by:\n    // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda\n    // Note: although the algorithm is called sum, it works for any associtative\n    // operator with an identity.\n    for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {\n        const program = new CumProgram(op, permutedX.shape, false, reverse);\n        const customValues = [[i]];\n        const prevResult = result;\n        result =\n            backend.runWebGLProgram(program, [result], result.dtype, customValues);\n        backend.disposeIntermediateTensorInfo(prevResult);\n    }\n    // For exclusive cum, shift the end result in the direction of product or sum\n    // and add 1 for product or 0 for sum to the front index.\n    if (exclusive) {\n        const program = new CumProgram(op, permutedX.shape, exclusive, reverse);\n        const prevResult = result;\n        result = backend.runWebGLProgram(program, [result], result.dtype);\n        backend.disposeIntermediateTensorInfo(prevResult);\n    }\n    if (permutation != null) {\n        const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n        const reverseTransposedResult = transpose({ inputs: { x: result }, backend, attrs: { perm: reversePermutation } });\n        backend.disposeIntermediateTensorInfo(result);\n        backend.disposeIntermediateTensorInfo(permutedX);\n        return reverseTransposedResult;\n    }\n    return result;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}