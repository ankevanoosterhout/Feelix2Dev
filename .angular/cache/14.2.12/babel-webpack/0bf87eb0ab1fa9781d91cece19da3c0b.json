{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam } from '../util';\nimport { abs } from './abs';\nimport * as axis_util from './axis_util';\nimport { max } from './max';\nimport { min } from './min';\nimport { op } from './operation';\nimport { pow } from './pow';\nimport { reshape } from './reshape';\nimport { scalar } from './scalar';\nimport { sqrt } from './sqrt';\nimport { square } from './square';\nimport { sum } from './sum';\n/**\n * Computes the norm of scalar, vectors, and matrices.\n * This function can compute several different vector norms (the 1-norm, the\n * Euclidean or 2-norm, the inf-norm, and in general the p-norm for p > 0)\n * and matrix norms (Frobenius, 1-norm, and inf-norm).\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n *\n * x.norm().print();  // or tf.norm(x)\n * ```\n *\n * @param x The input array.\n * @param ord Optional. Order of the norm. Supported norm types are\n * following:\n *\n *  | ord        | norm for matrices         | norm for vectors\n *  |------------|---------------------------|---------------------\n *  |'euclidean' |Frobenius norm             |2-norm\n *  |'fro'       |Frobenius norm\t           |\n *  |Infinity    |max(sum(abs(x), axis=1))   |max(abs(x))\n *  |-Infinity   |min(sum(abs(x), axis=1))   |min(abs(x))\n *  |1           |max(sum(abs(x), axis=0))   |sum(abs(x))\n *  |2           |                           |sum(abs(x)^2)^(1/2)\n *\n * @param axis Optional. If axis is null (the default), the input is\n * considered a vector and a single vector norm is computed over the entire\n * set of values in the Tensor, i.e. norm(x, ord) is equivalent\n * to norm(x.reshape([-1]), ord). If axis is an integer, the input\n * is considered a batch of vectors, and axis determines the axis in x\n * over which to compute vector norms. If axis is a 2-tuple of integer it is\n * considered a batch of matrices and axis determines the axes in NDArray\n * over which to compute a matrix norm.\n * @param keepDims Optional. If true, the norm has the same dimensionality\n * as the input.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\n\nfunction norm_(x, ord = 'euclidean', axis = null, keepDims = false) {\n  x = convertToTensor(x, 'x', 'norm');\n  const norm = normImpl(x, ord, axis);\n  let keepDimsShape = norm.shape;\n\n  if (keepDims) {\n    const axes = parseAxisParam(axis, x.shape);\n    keepDimsShape = axis_util.expandShapeToKeepDim(norm.shape, axes);\n  }\n\n  return reshape(norm, keepDimsShape);\n}\n\nfunction normImpl(x, p, axis = null) {\n  if (x.rank === 0) {\n    return abs(x);\n  } // consider vector when no axis is specified\n\n\n  if (x.rank !== 1 && axis === null) {\n    return normImpl(reshape(x, [-1]), p, axis);\n  } // vector\n\n\n  if (x.rank === 1 || typeof axis === 'number' || Array.isArray(axis) && axis.length === 1) {\n    if (p === 1) {\n      return sum(abs(x), axis);\n    }\n\n    if (p === Infinity) {\n      return max(abs(x), axis);\n    }\n\n    if (p === -Infinity) {\n      return min(abs(x), axis);\n    }\n\n    if (p === 'euclidean' || p === 2) {\n      // norm(x, 2) = sum(abs(xi) ^ 2) ^ 1/2\n      return sqrt(sum(pow(abs(x), scalar(2, 'int32')), axis));\n    }\n\n    throw new Error(`Error in norm: invalid ord value: ${p}`);\n  } // matrix (assumption axis[0] < axis[1])\n\n\n  if (Array.isArray(axis) && axis.length === 2) {\n    if (p === 1) {\n      return max(sum(abs(x), axis[0]), axis[1] - 1);\n    }\n\n    if (p === Infinity) {\n      return max(sum(abs(x), axis[1]), axis[0]);\n    }\n\n    if (p === -Infinity) {\n      return min(sum(abs(x), axis[1]), axis[0]);\n    }\n\n    if (p === 'fro' || p === 'euclidean') {\n      // norm(x) = sqrt(sum(pow(x, 2)))\n      return sqrt(sum(square(x), axis));\n    }\n\n    throw new Error(`Error in norm: invalid ord value: ${p}`);\n  }\n\n  throw new Error(`Error in norm: invalid axis: ${axis}`);\n}\n\nexport const norm = op({\n  norm_\n});","map":{"version":3,"names":["convertToTensor","parseAxisParam","abs","axis_util","max","min","op","pow","reshape","scalar","sqrt","square","sum","norm_","x","ord","axis","keepDims","norm","normImpl","keepDimsShape","shape","axes","expandShapeToKeepDim","p","rank","Array","isArray","length","Infinity","Error"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/norm.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam } from '../util';\nimport { abs } from './abs';\nimport * as axis_util from './axis_util';\nimport { max } from './max';\nimport { min } from './min';\nimport { op } from './operation';\nimport { pow } from './pow';\nimport { reshape } from './reshape';\nimport { scalar } from './scalar';\nimport { sqrt } from './sqrt';\nimport { square } from './square';\nimport { sum } from './sum';\n/**\n * Computes the norm of scalar, vectors, and matrices.\n * This function can compute several different vector norms (the 1-norm, the\n * Euclidean or 2-norm, the inf-norm, and in general the p-norm for p > 0)\n * and matrix norms (Frobenius, 1-norm, and inf-norm).\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n *\n * x.norm().print();  // or tf.norm(x)\n * ```\n *\n * @param x The input array.\n * @param ord Optional. Order of the norm. Supported norm types are\n * following:\n *\n *  | ord        | norm for matrices         | norm for vectors\n *  |------------|---------------------------|---------------------\n *  |'euclidean' |Frobenius norm             |2-norm\n *  |'fro'       |Frobenius norm\t           |\n *  |Infinity    |max(sum(abs(x), axis=1))   |max(abs(x))\n *  |-Infinity   |min(sum(abs(x), axis=1))   |min(abs(x))\n *  |1           |max(sum(abs(x), axis=0))   |sum(abs(x))\n *  |2           |                           |sum(abs(x)^2)^(1/2)\n *\n * @param axis Optional. If axis is null (the default), the input is\n * considered a vector and a single vector norm is computed over the entire\n * set of values in the Tensor, i.e. norm(x, ord) is equivalent\n * to norm(x.reshape([-1]), ord). If axis is an integer, the input\n * is considered a batch of vectors, and axis determines the axis in x\n * over which to compute vector norms. If axis is a 2-tuple of integer it is\n * considered a batch of matrices and axis determines the axes in NDArray\n * over which to compute a matrix norm.\n * @param keepDims Optional. If true, the norm has the same dimensionality\n * as the input.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction norm_(x, ord = 'euclidean', axis = null, keepDims = false) {\n    x = convertToTensor(x, 'x', 'norm');\n    const norm = normImpl(x, ord, axis);\n    let keepDimsShape = norm.shape;\n    if (keepDims) {\n        const axes = parseAxisParam(axis, x.shape);\n        keepDimsShape = axis_util.expandShapeToKeepDim(norm.shape, axes);\n    }\n    return reshape(norm, keepDimsShape);\n}\nfunction normImpl(x, p, axis = null) {\n    if (x.rank === 0) {\n        return abs(x);\n    }\n    // consider vector when no axis is specified\n    if (x.rank !== 1 && axis === null) {\n        return normImpl(reshape(x, [-1]), p, axis);\n    }\n    // vector\n    if (x.rank === 1 || typeof axis === 'number' ||\n        Array.isArray(axis) && axis.length === 1) {\n        if (p === 1) {\n            return sum(abs(x), axis);\n        }\n        if (p === Infinity) {\n            return max(abs(x), axis);\n        }\n        if (p === -Infinity) {\n            return min(abs(x), axis);\n        }\n        if (p === 'euclidean' || p === 2) {\n            // norm(x, 2) = sum(abs(xi) ^ 2) ^ 1/2\n            return sqrt(sum(pow(abs(x), scalar(2, 'int32')), axis));\n        }\n        throw new Error(`Error in norm: invalid ord value: ${p}`);\n    }\n    // matrix (assumption axis[0] < axis[1])\n    if (Array.isArray(axis) && axis.length === 2) {\n        if (p === 1) {\n            return max(sum(abs(x), axis[0]), axis[1] - 1);\n        }\n        if (p === Infinity) {\n            return max(sum(abs(x), axis[1]), axis[0]);\n        }\n        if (p === -Infinity) {\n            return min(sum(abs(x), axis[1]), axis[0]);\n        }\n        if (p === 'fro' || p === 'euclidean') {\n            // norm(x) = sqrt(sum(pow(x, 2)))\n            return sqrt(sum(square(x), axis));\n        }\n        throw new Error(`Error in norm: invalid ord value: ${p}`);\n    }\n    throw new Error(`Error in norm: invalid axis: ${axis}`);\n}\nexport const norm = op({ norm_ });\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}