{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nexport function sparseReshapeImpl(inputIndices, inputIndicesShape, inputDType, inputShape, targetShape) {\n  const denseSize = util.sizeFromShape(inputShape);\n  const nnz = inputIndicesShape[0];\n  const outputRank = targetShape.length; // Compute the output shape. Determine product of specified dimensions, and\n  // find the index of the unspecified one.\n\n  const outputShape = [];\n  let product = 1;\n  let unknownIndex = -1;\n\n  for (let d = 0; d < outputRank; ++d) {\n    const size = targetShape[d];\n\n    if (size === -1) {\n      if (unknownIndex !== -1) {\n        throw new Error(backend_util.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(unknownIndex, d));\n      }\n\n      unknownIndex = d;\n      outputShape.push(1);\n    } else {\n      if (size < 0) {\n        throw new Error(backend_util.getSparseReshapeNegativeOutputDimErrorMessage(d, size));\n      }\n\n      product *= size;\n      outputShape.push(size);\n    }\n  }\n\n  if (unknownIndex !== -1) {\n    if (product <= 0) {\n      throw new Error(backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());\n    }\n\n    const missing = Math.trunc(denseSize / product);\n\n    if (product * missing !== denseSize) {\n      throw new Error(backend_util.getSparseReshapeInputOutputMultipleErrorMessage(inputShape, outputShape));\n    }\n\n    outputShape[unknownIndex] = missing;\n  }\n\n  const outputSize = util.sizeFromShape(outputShape);\n\n  if (outputSize !== denseSize) {\n    throw new Error(backend_util.getSparseReshapeInputOutputMismatchErrorMessage(inputShape, outputShape));\n  }\n\n  const inputRank = inputShape.length;\n  const inputStrides = [];\n\n  if (inputRank > 0) {\n    inputStrides[inputRank - 1] = 1;\n\n    for (let d = inputRank - 2; d >= 0; --d) {\n      inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n    }\n  }\n\n  const outputStrides = [];\n\n  if (outputRank > 0) {\n    outputStrides[outputRank - 1] = 1;\n\n    for (let d = outputRank - 2; d >= 0; --d) {\n      outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n    }\n  }\n\n  const newIndices = util.getArrayFromDType(inputDType, nnz * outputRank);\n\n  for (let i = 0; i < nnz; ++i) {\n    let id = 0;\n\n    for (let j = 0; j < inputRank; ++j) {\n      // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n      id += inputIndices[i * inputRank + j] * inputStrides[j];\n    }\n\n    for (let j = 0; j < outputRank; ++j) {\n      // newIndices is a 2d tensor with shape of [nnz, outputRank]\n      newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n      id %= outputStrides[j];\n    }\n  }\n\n  return [newIndices, [nnz, outputRank], outputShape];\n}","map":{"version":3,"names":["backend_util","util","sparseReshapeImpl","inputIndices","inputIndicesShape","inputDType","inputShape","targetShape","denseSize","sizeFromShape","nnz","outputRank","length","outputShape","product","unknownIndex","d","size","Error","getSparseReshapeMultipleNegativeOneOutputDimErrorMessage","push","getSparseReshapeNegativeOutputDimErrorMessage","getSparseReshapeEmptyTensorZeroOutputDimErrorMessage","missing","Math","trunc","getSparseReshapeInputOutputMultipleErrorMessage","outputSize","getSparseReshapeInputOutputMismatchErrorMessage","inputRank","inputStrides","outputStrides","newIndices","getArrayFromDType","i","id","j"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseReshape_impl.js"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nexport function sparseReshapeImpl(inputIndices, inputIndicesShape, inputDType, inputShape, targetShape) {\n    const denseSize = util.sizeFromShape(inputShape);\n    const nnz = inputIndicesShape[0];\n    const outputRank = targetShape.length;\n    // Compute the output shape. Determine product of specified dimensions, and\n    // find the index of the unspecified one.\n    const outputShape = [];\n    let product = 1;\n    let unknownIndex = -1;\n    for (let d = 0; d < outputRank; ++d) {\n        const size = targetShape[d];\n        if (size === -1) {\n            if (unknownIndex !== -1) {\n                throw new Error(backend_util\n                    .getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(unknownIndex, d));\n            }\n            unknownIndex = d;\n            outputShape.push(1);\n        }\n        else {\n            if (size < 0) {\n                throw new Error(backend_util.getSparseReshapeNegativeOutputDimErrorMessage(d, size));\n            }\n            product *= size;\n            outputShape.push(size);\n        }\n    }\n    if (unknownIndex !== -1) {\n        if (product <= 0) {\n            throw new Error(backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());\n        }\n        const missing = Math.trunc(denseSize / product);\n        if (product * missing !== denseSize) {\n            throw new Error(backend_util.getSparseReshapeInputOutputMultipleErrorMessage(inputShape, outputShape));\n        }\n        outputShape[unknownIndex] = missing;\n    }\n    const outputSize = util.sizeFromShape(outputShape);\n    if (outputSize !== denseSize) {\n        throw new Error(backend_util.getSparseReshapeInputOutputMismatchErrorMessage(inputShape, outputShape));\n    }\n    const inputRank = inputShape.length;\n    const inputStrides = [];\n    if (inputRank > 0) {\n        inputStrides[inputRank - 1] = 1;\n        for (let d = inputRank - 2; d >= 0; --d) {\n            inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n        }\n    }\n    const outputStrides = [];\n    if (outputRank > 0) {\n        outputStrides[outputRank - 1] = 1;\n        for (let d = outputRank - 2; d >= 0; --d) {\n            outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n        }\n    }\n    const newIndices = util.getArrayFromDType(inputDType, nnz * outputRank);\n    for (let i = 0; i < nnz; ++i) {\n        let id = 0;\n        for (let j = 0; j < inputRank; ++j) {\n            // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n            id += inputIndices[i * inputRank + j] * inputStrides[j];\n        }\n        for (let j = 0; j < outputRank; ++j) {\n            // newIndices is a 2d tensor with shape of [nnz, outputRank]\n            newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n            id %= outputStrides[j];\n        }\n    }\n    return [newIndices, [nnz, outputRank], outputShape];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}