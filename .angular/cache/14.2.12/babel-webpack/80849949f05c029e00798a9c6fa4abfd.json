{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport './engine';\nimport * as device_util from './device_util';\nimport { env } from './environment';\nconst ENV = env();\n/**\n * This file contains environment-related flag registrations.\n */\n\n/** Whether to enable debug mode. */\n\nENV.registerFlag('DEBUG', () => false, debugValue => {\n  if (debugValue) {\n    console.warn('Debugging mode is ON. The output of every math call will ' + 'be downloaded to CPU and checked for NaNs. ' + 'This significantly impacts performance.');\n  }\n});\n/** Whether we are in a browser (as versus, say, node.js) environment. */\n\nENV.registerFlag('IS_BROWSER', () => device_util.isBrowser());\n/** Whether we are in a browser (as versus, say, node.js) environment. */\n\nENV.registerFlag('IS_NODE', () => typeof process !== 'undefined' && typeof process.versions !== 'undefined' && typeof process.versions.node !== 'undefined');\n/** Whether this browser is Chrome. */\n\nENV.registerFlag('IS_CHROME', () => typeof navigator !== 'undefined' && navigator != null && navigator.userAgent != null && /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor));\n/**\n * True when the environment is \"production\" where we disable safety checks\n * to gain performance.\n */\n\nENV.registerFlag('PROD', () => false);\n/**\n * Whether to do sanity checks when inferring a shape from user-provided\n * values, used when creating a new tensor.\n */\n\nENV.registerFlag('TENSORLIKE_CHECK_SHAPE_CONSISTENCY', () => ENV.getBool('DEBUG'));\n/** Whether deprecation warnings are enabled. */\n\nENV.registerFlag('DEPRECATION_WARNINGS_ENABLED', () => true);\n/** True if running unit tests. */\n\nENV.registerFlag('IS_TEST', () => false);\n/** Whether to check computation result for errors. */\n\nENV.registerFlag('CHECK_COMPUTATION_FOR_ERRORS', () => true);\n/** Whether the backend needs to wrap input to imageBitmap. */\n\nENV.registerFlag('WRAP_TO_IMAGEBITMAP', () => false);\n/** Experimental flag, whether enter compile only phase. */\n\nENV.registerFlag('ENGINE_COMPILE_ONLY', () => false);\n/** Whether to enable canvas2d willReadFrequently for GPU backends */\n\nENV.registerFlag('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU', () => false);\n/** Whether to use setTimeoutCustom */\n\nENV.registerFlag('USE_SETTIMEOUTCUSTOM', () => false);","map":{"version":3,"names":["device_util","env","ENV","registerFlag","debugValue","console","warn","isBrowser","process","versions","node","navigator","userAgent","test","vendor","getBool"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/flags.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport './engine';\nimport * as device_util from './device_util';\nimport { env } from './environment';\nconst ENV = env();\n/**\n * This file contains environment-related flag registrations.\n */\n/** Whether to enable debug mode. */\nENV.registerFlag('DEBUG', () => false, debugValue => {\n    if (debugValue) {\n        console.warn('Debugging mode is ON. The output of every math call will ' +\n            'be downloaded to CPU and checked for NaNs. ' +\n            'This significantly impacts performance.');\n    }\n});\n/** Whether we are in a browser (as versus, say, node.js) environment. */\nENV.registerFlag('IS_BROWSER', () => device_util.isBrowser());\n/** Whether we are in a browser (as versus, say, node.js) environment. */\nENV.registerFlag('IS_NODE', () => (typeof process !== 'undefined') &&\n    (typeof process.versions !== 'undefined') &&\n    (typeof process.versions.node !== 'undefined'));\n/** Whether this browser is Chrome. */\nENV.registerFlag('IS_CHROME', () => typeof navigator !== 'undefined' && navigator != null &&\n    navigator.userAgent != null && /Chrome/.test(navigator.userAgent) &&\n    /Google Inc/.test(navigator.vendor));\n/**\n * True when the environment is \"production\" where we disable safety checks\n * to gain performance.\n */\nENV.registerFlag('PROD', () => false);\n/**\n * Whether to do sanity checks when inferring a shape from user-provided\n * values, used when creating a new tensor.\n */\nENV.registerFlag('TENSORLIKE_CHECK_SHAPE_CONSISTENCY', () => ENV.getBool('DEBUG'));\n/** Whether deprecation warnings are enabled. */\nENV.registerFlag('DEPRECATION_WARNINGS_ENABLED', () => true);\n/** True if running unit tests. */\nENV.registerFlag('IS_TEST', () => false);\n/** Whether to check computation result for errors. */\nENV.registerFlag('CHECK_COMPUTATION_FOR_ERRORS', () => true);\n/** Whether the backend needs to wrap input to imageBitmap. */\nENV.registerFlag('WRAP_TO_IMAGEBITMAP', () => false);\n/** Experimental flag, whether enter compile only phase. */\nENV.registerFlag('ENGINE_COMPILE_ONLY', () => false);\n/** Whether to enable canvas2d willReadFrequently for GPU backends */\nENV.registerFlag('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU', () => false);\n/** Whether to use setTimeoutCustom */\nENV.registerFlag('USE_SETTIMEOUTCUSTOM', () => false);\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,UAAP;AACA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,SAASC,GAAT,QAAoB,eAApB;AACA,MAAMC,GAAG,GAAGD,GAAG,EAAf;AACA;AACA;AACA;;AACA;;AACAC,GAAG,CAACC,YAAJ,CAAiB,OAAjB,EAA0B,MAAM,KAAhC,EAAuCC,UAAU,IAAI;EACjD,IAAIA,UAAJ,EAAgB;IACZC,OAAO,CAACC,IAAR,CAAa,8DACT,6CADS,GAET,yCAFJ;EAGH;AACJ,CAND;AAOA;;AACAJ,GAAG,CAACC,YAAJ,CAAiB,YAAjB,EAA+B,MAAMH,WAAW,CAACO,SAAZ,EAArC;AACA;;AACAL,GAAG,CAACC,YAAJ,CAAiB,SAAjB,EAA4B,MAAO,OAAOK,OAAP,KAAmB,WAApB,IAC7B,OAAOA,OAAO,CAACC,QAAf,KAA4B,WADC,IAE7B,OAAOD,OAAO,CAACC,QAAR,CAAiBC,IAAxB,KAAiC,WAFtC;AAGA;;AACAR,GAAG,CAACC,YAAJ,CAAiB,WAAjB,EAA8B,MAAM,OAAOQ,SAAP,KAAqB,WAArB,IAAoCA,SAAS,IAAI,IAAjD,IAChCA,SAAS,CAACC,SAAV,IAAuB,IADS,IACD,SAASC,IAAT,CAAcF,SAAS,CAACC,SAAxB,CADC,IAEhC,aAAaC,IAAb,CAAkBF,SAAS,CAACG,MAA5B,CAFJ;AAGA;AACA;AACA;AACA;;AACAZ,GAAG,CAACC,YAAJ,CAAiB,MAAjB,EAAyB,MAAM,KAA/B;AACA;AACA;AACA;AACA;;AACAD,GAAG,CAACC,YAAJ,CAAiB,oCAAjB,EAAuD,MAAMD,GAAG,CAACa,OAAJ,CAAY,OAAZ,CAA7D;AACA;;AACAb,GAAG,CAACC,YAAJ,CAAiB,8BAAjB,EAAiD,MAAM,IAAvD;AACA;;AACAD,GAAG,CAACC,YAAJ,CAAiB,SAAjB,EAA4B,MAAM,KAAlC;AACA;;AACAD,GAAG,CAACC,YAAJ,CAAiB,8BAAjB,EAAiD,MAAM,IAAvD;AACA;;AACAD,GAAG,CAACC,YAAJ,CAAiB,qBAAjB,EAAwC,MAAM,KAA9C;AACA;;AACAD,GAAG,CAACC,YAAJ,CAAiB,qBAAjB,EAAwC,MAAM,KAA9C;AACA;;AACAD,GAAG,CAACC,YAAJ,CAAiB,uCAAjB,EAA0D,MAAM,KAAhE;AACA;;AACAD,GAAG,CAACC,YAAJ,CAAiB,sBAAjB,EAAyC,MAAM,KAA/C"},"metadata":{},"sourceType":"module"}