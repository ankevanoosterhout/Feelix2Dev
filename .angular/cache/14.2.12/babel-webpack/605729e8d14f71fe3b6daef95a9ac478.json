{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Abs, env } from '@tensorflow/tfjs-core';\nimport { simpleAbsImplCPU } from '../kernel_utils/shared';\nimport { UnaryOpProgram } from '../unaryop_gpu';\nimport { UnaryOpPackedProgram } from '../unaryop_packed_gpu';\nconst ABS = `return abs(x);`;\nexport function abs(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x\n  } = inputs; // TODO: handle cases when x is complex. Once the cpu implementation\n  // can handle complex values, refactor to use unaryKernelFunc.\n\n  if (backend.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n    const xData = backend.texData.get(x.dataId);\n    const outValues = simpleAbsImplCPU(xData.values);\n    return backend.makeTensorInfo(x.shape, x.dtype, outValues);\n  }\n\n  let program;\n\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, ABS);\n  } else {\n    program = new UnaryOpProgram(x.shape, ABS);\n  }\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\nexport const absConfig = {\n  kernelName: Abs,\n  backendName: 'webgl',\n  kernelFunc: abs\n};","map":{"version":3,"names":["Abs","env","simpleAbsImplCPU","UnaryOpProgram","UnaryOpPackedProgram","ABS","abs","args","inputs","backend","x","shouldExecuteOnCPU","dtype","xData","texData","get","dataId","outValues","values","makeTensorInfo","shape","program","getBool","runWebGLProgram","absConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Abs.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Abs, env } from '@tensorflow/tfjs-core';\nimport { simpleAbsImplCPU } from '../kernel_utils/shared';\nimport { UnaryOpProgram } from '../unaryop_gpu';\nimport { UnaryOpPackedProgram } from '../unaryop_packed_gpu';\nconst ABS = `return abs(x);`;\nexport function abs(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    // TODO: handle cases when x is complex. Once the cpu implementation\n    // can handle complex values, refactor to use unaryKernelFunc.\n    if (backend.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n        const xData = backend.texData.get(x.dataId);\n        const outValues = simpleAbsImplCPU(xData.values);\n        return backend.makeTensorInfo(x.shape, x.dtype, outValues);\n    }\n    let program;\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n        program = new UnaryOpPackedProgram(x.shape, ABS);\n    }\n    else {\n        program = new UnaryOpProgram(x.shape, ABS);\n    }\n    return backend.runWebGLProgram(program, [x], x.dtype);\n}\nexport const absConfig = {\n    kernelName: Abs,\n    backendName: 'webgl',\n    kernelFunc: abs\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,GAAT,EAAcC,GAAd,QAAyB,uBAAzB;AACA,SAASC,gBAAT,QAAiC,wBAAjC;AACA,SAASC,cAAT,QAA+B,gBAA/B;AACA,SAASC,oBAAT,QAAqC,uBAArC;AACA,MAAMC,GAAG,GAAI,gBAAb;AACA,OAAO,SAASC,GAAT,CAAaC,IAAb,EAAmB;EACtB,MAAM;IAAEC,MAAF;IAAUC;EAAV,IAAsBF,IAA5B;EACA,MAAM;IAAEG;EAAF,IAAQF,MAAd,CAFsB,CAGtB;EACA;;EACA,IAAIC,OAAO,CAACE,kBAAR,CAA2B,CAACD,CAAD,CAA3B,KAAmCA,CAAC,CAACE,KAAF,KAAY,WAAnD,EAAgE;IAC5D,MAAMC,KAAK,GAAGJ,OAAO,CAACK,OAAR,CAAgBC,GAAhB,CAAoBL,CAAC,CAACM,MAAtB,CAAd;IACA,MAAMC,SAAS,GAAGf,gBAAgB,CAACW,KAAK,CAACK,MAAP,CAAlC;IACA,OAAOT,OAAO,CAACU,cAAR,CAAuBT,CAAC,CAACU,KAAzB,EAAgCV,CAAC,CAACE,KAAlC,EAAyCK,SAAzC,CAAP;EACH;;EACD,IAAII,OAAJ;;EACA,IAAIpB,GAAG,GAAGqB,OAAN,CAAc,6BAAd,CAAJ,EAAkD;IAC9CD,OAAO,GAAG,IAAIjB,oBAAJ,CAAyBM,CAAC,CAACU,KAA3B,EAAkCf,GAAlC,CAAV;EACH,CAFD,MAGK;IACDgB,OAAO,GAAG,IAAIlB,cAAJ,CAAmBO,CAAC,CAACU,KAArB,EAA4Bf,GAA5B,CAAV;EACH;;EACD,OAAOI,OAAO,CAACc,eAAR,CAAwBF,OAAxB,EAAiC,CAACX,CAAD,CAAjC,EAAsCA,CAAC,CAACE,KAAxC,CAAP;AACH;AACD,OAAO,MAAMY,SAAS,GAAG;EACrBC,UAAU,EAAEzB,GADS;EAErB0B,WAAW,EAAE,OAFQ;EAGrBC,UAAU,EAAErB;AAHS,CAAlB"},"metadata":{},"sourceType":"module"}