{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { FFTProgram } from '../fft_gpu';\nimport { complex } from './Complex';\nimport { reshape } from './Reshape';\nexport function fftImpl(x, inverse, backend) {\n  const xData = backend.texData.get(x.dataId);\n  const inputSize = util.sizeFromShape(x.shape); // Collapse all outer dimensions to a single batch dimension.\n\n  const innerDimensionSize = x.shape[x.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n  const input2D = reshape({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      shape: [batch, innerDimensionSize]\n    }\n  });\n  const xShape = input2D.shape;\n  const realProgram = new FFTProgram('real', xShape, inverse);\n  const imagProgram = new FFTProgram('imag', xShape, inverse);\n  const inputs = [{\n    dataId: xData.complexTensorInfos.real.dataId,\n    dtype: xData.complexTensorInfos.real.dtype,\n    shape: xShape\n  }, {\n    dataId: xData.complexTensorInfos.imag.dataId,\n    dtype: xData.complexTensorInfos.imag.dtype,\n    shape: xShape\n  }];\n  const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n  const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n  const complexOutput = complex({\n    inputs: {\n      real: realPart,\n      imag: imagPart\n    },\n    backend\n  });\n  backend.disposeIntermediateTensorInfo(realPart);\n  backend.disposeIntermediateTensorInfo(imagPart);\n  const complexOutputReshaped = reshape({\n    inputs: {\n      x: complexOutput\n    },\n    backend,\n    attrs: {\n      shape: x.shape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(complexOutput);\n  return complexOutputReshaped;\n}","map":{"version":3,"names":["util","FFTProgram","complex","reshape","fftImpl","x","inverse","backend","xData","texData","get","dataId","inputSize","sizeFromShape","shape","innerDimensionSize","length","batch","input2D","inputs","attrs","xShape","realProgram","imagProgram","complexTensorInfos","real","dtype","imag","realPart","runWebGLProgram","imagPart","complexOutput","disposeIntermediateTensorInfo","complexOutputReshaped"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FFT_impl.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { FFTProgram } from '../fft_gpu';\nimport { complex } from './Complex';\nimport { reshape } from './Reshape';\nexport function fftImpl(x, inverse, backend) {\n    const xData = backend.texData.get(x.dataId);\n    const inputSize = util.sizeFromShape(x.shape);\n    // Collapse all outer dimensions to a single batch dimension.\n    const innerDimensionSize = x.shape[x.shape.length - 1];\n    const batch = inputSize / innerDimensionSize;\n    const input2D = reshape({ inputs: { x }, backend, attrs: { shape: [batch, innerDimensionSize] } });\n    const xShape = input2D.shape;\n    const realProgram = new FFTProgram('real', xShape, inverse);\n    const imagProgram = new FFTProgram('imag', xShape, inverse);\n    const inputs = [\n        {\n            dataId: xData.complexTensorInfos.real.dataId,\n            dtype: xData.complexTensorInfos.real.dtype,\n            shape: xShape\n        },\n        {\n            dataId: xData.complexTensorInfos.imag.dataId,\n            dtype: xData.complexTensorInfos.imag.dtype,\n            shape: xShape\n        }\n    ];\n    const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n    const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n    const complexOutput = complex({ inputs: { real: realPart, imag: imagPart }, backend });\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    const complexOutputReshaped = reshape({ inputs: { x: complexOutput }, backend, attrs: { shape: x.shape } });\n    backend.disposeIntermediateTensorInfo(input2D);\n    backend.disposeIntermediateTensorInfo(complexOutput);\n    return complexOutputReshaped;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,IAAT,QAAqB,uBAArB;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAO,SAASC,OAAT,CAAiBC,CAAjB,EAAoBC,OAApB,EAA6BC,OAA7B,EAAsC;EACzC,MAAMC,KAAK,GAAGD,OAAO,CAACE,OAAR,CAAgBC,GAAhB,CAAoBL,CAAC,CAACM,MAAtB,CAAd;EACA,MAAMC,SAAS,GAAGZ,IAAI,CAACa,aAAL,CAAmBR,CAAC,CAACS,KAArB,CAAlB,CAFyC,CAGzC;;EACA,MAAMC,kBAAkB,GAAGV,CAAC,CAACS,KAAF,CAAQT,CAAC,CAACS,KAAF,CAAQE,MAAR,GAAiB,CAAzB,CAA3B;EACA,MAAMC,KAAK,GAAGL,SAAS,GAAGG,kBAA1B;EACA,MAAMG,OAAO,GAAGf,OAAO,CAAC;IAAEgB,MAAM,EAAE;MAAEd;IAAF,CAAV;IAAiBE,OAAjB;IAA0Ba,KAAK,EAAE;MAAEN,KAAK,EAAE,CAACG,KAAD,EAAQF,kBAAR;IAAT;EAAjC,CAAD,CAAvB;EACA,MAAMM,MAAM,GAAGH,OAAO,CAACJ,KAAvB;EACA,MAAMQ,WAAW,GAAG,IAAIrB,UAAJ,CAAe,MAAf,EAAuBoB,MAAvB,EAA+Bf,OAA/B,CAApB;EACA,MAAMiB,WAAW,GAAG,IAAItB,UAAJ,CAAe,MAAf,EAAuBoB,MAAvB,EAA+Bf,OAA/B,CAApB;EACA,MAAMa,MAAM,GAAG,CACX;IACIR,MAAM,EAAEH,KAAK,CAACgB,kBAAN,CAAyBC,IAAzB,CAA8Bd,MAD1C;IAEIe,KAAK,EAAElB,KAAK,CAACgB,kBAAN,CAAyBC,IAAzB,CAA8BC,KAFzC;IAGIZ,KAAK,EAAEO;EAHX,CADW,EAMX;IACIV,MAAM,EAAEH,KAAK,CAACgB,kBAAN,CAAyBG,IAAzB,CAA8BhB,MAD1C;IAEIe,KAAK,EAAElB,KAAK,CAACgB,kBAAN,CAAyBG,IAAzB,CAA8BD,KAFzC;IAGIZ,KAAK,EAAEO;EAHX,CANW,CAAf;EAYA,MAAMO,QAAQ,GAAGrB,OAAO,CAACsB,eAAR,CAAwBP,WAAxB,EAAqCH,MAArC,EAA6C,SAA7C,CAAjB;EACA,MAAMW,QAAQ,GAAGvB,OAAO,CAACsB,eAAR,CAAwBN,WAAxB,EAAqCJ,MAArC,EAA6C,SAA7C,CAAjB;EACA,MAAMY,aAAa,GAAG7B,OAAO,CAAC;IAAEiB,MAAM,EAAE;MAAEM,IAAI,EAAEG,QAAR;MAAkBD,IAAI,EAAEG;IAAxB,CAAV;IAA8CvB;EAA9C,CAAD,CAA7B;EACAA,OAAO,CAACyB,6BAAR,CAAsCJ,QAAtC;EACArB,OAAO,CAACyB,6BAAR,CAAsCF,QAAtC;EACA,MAAMG,qBAAqB,GAAG9B,OAAO,CAAC;IAAEgB,MAAM,EAAE;MAAEd,CAAC,EAAE0B;IAAL,CAAV;IAAgCxB,OAAhC;IAAyCa,KAAK,EAAE;MAAEN,KAAK,EAAET,CAAC,CAACS;IAAX;EAAhD,CAAD,CAArC;EACAP,OAAO,CAACyB,6BAAR,CAAsCd,OAAtC;EACAX,OAAO,CAACyB,6BAAR,CAAsCD,aAAtC;EACA,OAAOE,qBAAP;AACH"},"metadata":{},"sourceType":"module"}