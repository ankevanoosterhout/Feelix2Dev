{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FusedDepthwiseConv2D } from '@tensorflow/tfjs-core';\nimport { applyActivation } from '../utils/fused_utils';\nimport { add } from './Add';\nimport { depthwiseConv2dNative } from './DepthwiseConv2dNative';\nexport function fusedDepthwiseConv2D(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter,\n    bias,\n    preluActivationWeights\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n  let result = depthwiseConv2dNative({\n    inputs: {\n      x,\n      filter\n    },\n    backend,\n    attrs: {\n      strides,\n      pad,\n      dataFormat,\n      dilations,\n      dimRoundingMode\n    }\n  });\n\n  if (bias) {\n    const oldResult = result;\n    result = add({\n      inputs: {\n        a: result,\n        b: bias\n      },\n      backend\n    });\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  if (activation) {\n    const oldResult = result;\n    result = applyActivation(backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  return result;\n}\nexport const fusedDepthwiseConv2DConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedDepthwiseConv2D\n};","map":{"version":3,"names":["FusedDepthwiseConv2D","applyActivation","add","depthwiseConv2dNative","fusedDepthwiseConv2D","args","inputs","backend","attrs","x","filter","bias","preluActivationWeights","strides","pad","dataFormat","dilations","dimRoundingMode","activation","leakyreluAlpha","result","oldResult","a","b","disposeIntermediateTensorInfo","fusedDepthwiseConv2DConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/FusedDepthwiseConv2D.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FusedDepthwiseConv2D } from '@tensorflow/tfjs-core';\nimport { applyActivation } from '../utils/fused_utils';\nimport { add } from './Add';\nimport { depthwiseConv2dNative } from './DepthwiseConv2dNative';\nexport function fusedDepthwiseConv2D(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter, bias, preluActivationWeights } = inputs;\n    const { strides, pad, dataFormat, dilations, dimRoundingMode, activation, leakyreluAlpha } = attrs;\n    let result = depthwiseConv2dNative({\n        inputs: { x, filter },\n        backend,\n        attrs: { strides, pad, dataFormat, dilations, dimRoundingMode }\n    });\n    if (bias) {\n        const oldResult = result;\n        result = add({ inputs: { a: result, b: bias }, backend });\n        backend.disposeIntermediateTensorInfo(oldResult);\n    }\n    if (activation) {\n        const oldResult = result;\n        result = applyActivation(backend, result, activation, preluActivationWeights, leakyreluAlpha);\n        backend.disposeIntermediateTensorInfo(oldResult);\n    }\n    return result;\n}\nexport const fusedDepthwiseConv2DConfig = {\n    kernelName: FusedDepthwiseConv2D,\n    backendName: 'cpu',\n    kernelFunc: fusedDepthwiseConv2D\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,oBAAT,QAAqC,uBAArC;AACA,SAASC,eAAT,QAAgC,sBAAhC;AACA,SAASC,GAAT,QAAoB,OAApB;AACA,SAASC,qBAAT,QAAsC,yBAAtC;AACA,OAAO,SAASC,oBAAT,CAA8BC,IAA9B,EAAoC;EACvC,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BH,IAAnC;EACA,MAAM;IAAEI,CAAF;IAAKC,MAAL;IAAaC,IAAb;IAAmBC;EAAnB,IAA8CN,MAApD;EACA,MAAM;IAAEO,OAAF;IAAWC,GAAX;IAAgBC,UAAhB;IAA4BC,SAA5B;IAAuCC,eAAvC;IAAwDC,UAAxD;IAAoEC;EAApE,IAAuFX,KAA7F;EACA,IAAIY,MAAM,GAAGjB,qBAAqB,CAAC;IAC/BG,MAAM,EAAE;MAAEG,CAAF;MAAKC;IAAL,CADuB;IAE/BH,OAF+B;IAG/BC,KAAK,EAAE;MAAEK,OAAF;MAAWC,GAAX;MAAgBC,UAAhB;MAA4BC,SAA5B;MAAuCC;IAAvC;EAHwB,CAAD,CAAlC;;EAKA,IAAIN,IAAJ,EAAU;IACN,MAAMU,SAAS,GAAGD,MAAlB;IACAA,MAAM,GAAGlB,GAAG,CAAC;MAAEI,MAAM,EAAE;QAAEgB,CAAC,EAAEF,MAAL;QAAaG,CAAC,EAAEZ;MAAhB,CAAV;MAAkCJ;IAAlC,CAAD,CAAZ;IACAA,OAAO,CAACiB,6BAAR,CAAsCH,SAAtC;EACH;;EACD,IAAIH,UAAJ,EAAgB;IACZ,MAAMG,SAAS,GAAGD,MAAlB;IACAA,MAAM,GAAGnB,eAAe,CAACM,OAAD,EAAUa,MAAV,EAAkBF,UAAlB,EAA8BN,sBAA9B,EAAsDO,cAAtD,CAAxB;IACAZ,OAAO,CAACiB,6BAAR,CAAsCH,SAAtC;EACH;;EACD,OAAOD,MAAP;AACH;AACD,OAAO,MAAMK,0BAA0B,GAAG;EACtCC,UAAU,EAAE1B,oBAD0B;EAEtC2B,WAAW,EAAE,KAFyB;EAGtCC,UAAU,EAAExB;AAH0B,CAAnC"},"metadata":{},"sourceType":"module"}