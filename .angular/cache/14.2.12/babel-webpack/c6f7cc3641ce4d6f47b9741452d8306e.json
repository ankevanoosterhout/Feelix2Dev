{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat, keep, reshape, scalar, slice, stack, tensor, tidy, unstack } from '@tensorflow/tfjs-core';\nimport { assertShapesMatchAllowUndefinedSize, inferElementShape, mergeElementShape } from './tensor_utils';\n/**\n * TensorList stores a container of `tf.Tensor` objects, which are accessible\n * via tensors field.\n *\n * In order to get a copy of the underlying list, use the copy method:\n * ```\n *    TensorList b = a.copy();\n *    b.tensors().pushBack(t);  // This does not modify a.tensors().\n * ```\n *\n * Note that this is not a deep copy: the memory locations of the underlying\n * tensors will still point to the same locations of the corresponding tensors\n * in the original.\n */\n\nexport class TensorList {\n  /**\n   *\n   * @param tensors list of tensors\n   * @param elementShape shape of each tensor, this can be a single number (any\n   * shape is allowed) or partial shape (dim = -1).\n   * @param elementDtype data type of each tensor\n   * @param maxNumElements The maximum allowed size of `tensors`. Defaults to -1\n   *   meaning that the size of `tensors` is unbounded.\n   */\n  constructor(tensors, elementShape, elementDtype, maxNumElements = -1) {\n    this.tensors = tensors;\n    this.elementShape = elementShape;\n    this.elementDtype = elementDtype;\n\n    if (tensors != null) {\n      tensors.forEach(tensor => {\n        if (elementDtype !== tensor.dtype) {\n          throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${tensor.dtype}`);\n        }\n\n        assertShapesMatchAllowUndefinedSize(elementShape, tensor.shape, 'TensorList shape mismatch: ');\n        keep(tensor);\n      });\n    }\n\n    this.idTensor = scalar(0);\n    this.maxNumElements = maxNumElements;\n    keep(this.idTensor);\n  }\n\n  get id() {\n    return this.idTensor.id;\n  }\n  /**\n   * Get a new TensorList containing a copy of the underlying tensor container.\n   */\n\n\n  copy() {\n    return new TensorList([...this.tensors], this.elementShape, this.elementDtype);\n  }\n  /**\n   * Dispose the tensors and idTensor and clear the tensor list.\n   */\n\n\n  clearAndClose(keepIds) {\n    this.tensors.forEach(tensor => {\n      if (keepIds == null || !keepIds.has(tensor.id)) {\n        tensor.dispose();\n      }\n    });\n    this.tensors.length = 0;\n    this.idTensor.dispose();\n  }\n  /**\n   * The size of the tensors in the tensor list.\n   */\n\n\n  size() {\n    return this.tensors.length;\n  }\n  /**\n   * Return a tensor that stacks a list of rank-R tf.Tensors into one rank-(R+1)\n   * tf.Tensor.\n   * @param elementShape shape of each tensor\n   * @param elementDtype data type of each tensor\n   * @param numElements the number of elements to stack\n   */\n\n\n  stack(elementShape, elementDtype, numElements = -1) {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (numElements !== -1 && this.tensors.length !== numElements) {\n      throw new Error(`Operation expected a list with ${numElements} elements but got a list with ${this.tensors.length} elements.`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(elementShape, this.elementShape, 'TensorList shape mismatch: ');\n    const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n    return tidy(() => {\n      const reshapedTensors = this.tensors.map(tensor => reshape(tensor, outputElementShape));\n      return stack(reshapedTensors, 0);\n    });\n  }\n  /**\n   * Pop a tensor from the end of the list.\n   * @param elementShape shape of the tensor\n   * @param elementDtype data type of the tensor\n   */\n\n\n  popBack(elementShape, elementDtype) {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (this.size() === 0) {\n      throw new Error('Trying to pop from an empty list.');\n    }\n\n    const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n    const tensor = this.tensors.pop();\n    tensor.kept = false;\n    assertShapesMatchAllowUndefinedSize(tensor.shape, elementShape, 'TensorList shape mismatch: ');\n    return reshape(tensor, outputElementShape);\n  }\n  /**\n   * Push a tensor to the end of the list.\n   * @param tensor Tensor to be pushed.\n   */\n\n\n  pushBack(tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${this.elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(tensor.shape, this.elementShape, 'TensorList shape mismatch: ');\n\n    if (this.maxNumElements === this.size()) {\n      throw new Error(`Trying to push element into a full list.`);\n    }\n\n    keep(tensor);\n    this.tensors.push(tensor);\n  }\n  /**\n   * Update the size of the list.\n   * @param size the new size of the list.\n   */\n\n\n  resize(size) {\n    if (size < 0) {\n      throw new Error(`TensorListResize expects size to be non-negative. Got: ${size}`);\n    }\n\n    if (this.maxNumElements !== -1 && size > this.maxNumElements) {\n      throw new Error(`TensorListResize input size ${size} is greater maxNumElement ${this.maxNumElements}.`);\n    }\n\n    const destTensorList = new TensorList([], this.elementShape, this.elementDtype, this.maxNumElements);\n    destTensorList.tensors.length = size;\n\n    for (let i = 0; i < Math.min(this.tensors.length, size); ++i) {\n      destTensorList.tensors[i] = this.tensors[i];\n    }\n\n    return destTensorList;\n  }\n  /**\n   * Retrieve the element at the provided index\n   * @param elementShape shape of the tensor\n   * @param elementDtype dtype of the tensor\n   * @param elementIndex index of the tensor\n   */\n\n\n  getItem(elementIndex, elementShape, elementDtype) {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (elementIndex < 0 || elementIndex > this.tensors.length) {\n      throw new Error(`Trying to access element ${elementIndex} in a list with ${this.tensors.length} elements.`);\n    }\n\n    if (this.tensors[elementIndex] == null) {\n      throw new Error(`element at index ${elementIndex} is null.`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(this.tensors[elementIndex].shape, elementShape, 'TensorList shape mismatch: ');\n    const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n    return reshape(this.tensors[elementIndex], outputElementShape);\n  }\n  /**\n   * Set the tensor at the index\n   * @param elementIndex index of the tensor\n   * @param tensor the tensor to be inserted into the list\n   */\n\n\n  setItem(elementIndex, tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (elementIndex < 0 || this.maxNumElements !== -1 && elementIndex >= this.maxNumElements) {\n      throw new Error(`Trying to set element ${elementIndex} in a list with max ${this.maxNumElements} elements.`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(this.elementShape, tensor.shape, 'TensorList shape mismatch: ');\n    keep(tensor); // dispose the previous value if it is replacing.\n\n    if (this.tensors[elementIndex] != null) {\n      this.tensors[elementIndex].kept = false;\n    }\n\n    this.tensors[elementIndex] = tensor;\n  }\n  /**\n   * Return selected values in the TensorList as a stacked Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param indices indices of tensors to gather\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n\n\n  gather(indices, elementDtype, elementShape) {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, 'TensorList shape mismatch: '); // When indices is greater than the size of the list, indices beyond the\n    // size of the list are ignored.\n\n    indices = indices.slice(0, this.size());\n    const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n\n    if (indices.length === 0) {\n      return tensor([], [0].concat(outputElementShape));\n    }\n\n    return tidy(() => {\n      const tensors = indices.map(i => reshape(this.tensors[i], outputElementShape));\n      return stack(tensors, 0);\n    });\n  }\n  /**\n   * Return the values in the TensorList as a concatenated Tensor.\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n\n\n  concat(elementDtype, elementShape) {\n    if (!!elementDtype && elementDtype !== this.elementDtype) {\n      throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, 'TensorList shape mismatch: ');\n    const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(outputElementShape));\n    }\n\n    return tidy(() => {\n      const tensors = this.tensors.map(t => reshape(t, outputElementShape));\n      return concat(tensors, 0);\n    });\n  }\n\n}\n/**\n * Creates a TensorList which, when stacked, has the value of tensor.\n * @param tensor from tensor\n * @param elementShape output tensor element shape\n */\n\nexport function fromTensor(tensor, elementShape, elementDtype) {\n  const dtype = tensor.dtype;\n\n  if (tensor.shape.length < 1) {\n    throw new Error(`Tensor must be at least a vector, but saw shape: ${tensor.shape}`);\n  }\n\n  if (tensor.dtype !== elementDtype) {\n    throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${elementDtype}`);\n  }\n\n  const tensorElementShape = tensor.shape.slice(1);\n  assertShapesMatchAllowUndefinedSize(tensorElementShape, elementShape, 'TensorList shape mismatch: ');\n  const tensorList = unstack(tensor);\n  return new TensorList(tensorList, elementShape, dtype);\n}\n/**\n * Return a TensorList of the given size with empty elements.\n * @param elementShape the shape of the future elements of the list\n * @param elementDtype the desired type of elements in the list\n * @param numElements the number of elements to reserve\n * @param maxNumElements the maximum number of elements in th list\n */\n\nexport function reserve(elementShape, elementDtype, numElements, maxNumElements) {\n  return new TensorList([], elementShape, elementDtype, maxNumElements);\n}\n/**\n * Put tensors at specific indices of a stacked tensor into a TensorList.\n * @param indices list of indices on how to scatter the tensor.\n * @param tensor input tensor.\n * @param elementShape the shape of the future elements of the list\n * @param numElements the number of elements to scatter\n */\n\nexport function scatter(tensor, indices, elementShape, numElements) {\n  if (indices.length !== tensor.shape[0]) {\n    throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${indices.length} vs. ${tensor.shape[0]}`);\n  }\n\n  const maxIndex = Math.max(...indices);\n\n  if (numElements != null && numElements !== -1 && maxIndex >= numElements) {\n    throw new Error(`Max index must be < array size (${maxIndex}  vs. ${numElements})`);\n  }\n\n  const list = new TensorList([], elementShape, tensor.dtype, numElements);\n  const tensors = unstack(tensor, 0);\n  indices.forEach((value, index) => {\n    list.setItem(value, tensors[index]);\n  });\n  return list;\n}\n/**\n * Split the values of a Tensor into a TensorList.\n * @param length the lengths to use when splitting value along\n *    its first dimension.\n * @param tensor the tensor to split.\n * @param elementShape the shape of the future elements of the list\n */\n\nexport function split(tensor, length, elementShape) {\n  let totalLength = 0;\n  const cumulativeLengths = length.map(len => {\n    totalLength += len;\n    return totalLength;\n  });\n\n  if (totalLength !== tensor.shape[0]) {\n    throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n  }\n\n  const shapeWithoutFirstDim = tensor.shape.slice(1);\n  const outputElementShape = mergeElementShape(shapeWithoutFirstDim, elementShape);\n  const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n  const tensors = tidy(() => {\n    const tensors = [];\n    tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n\n    for (let i = 0; i < length.length; ++i) {\n      const previousLength = i === 0 ? 0 : cumulativeLengths[i - 1];\n      const indices = [0, previousLength, 0];\n      const sizes = [1, length[i], elementPerRow];\n      tensors[i] = reshape(slice(tensor, indices, sizes), outputElementShape);\n    }\n\n    tensor.dispose();\n    return tensors;\n  });\n  const list = new TensorList([], elementShape, tensor.dtype, length.length);\n\n  for (let i = 0; i < tensors.length; i++) {\n    list.setItem(i, tensors[i]);\n  }\n\n  return list;\n}","map":{"version":3,"names":["concat","keep","reshape","scalar","slice","stack","tensor","tidy","unstack","assertShapesMatchAllowUndefinedSize","inferElementShape","mergeElementShape","TensorList","constructor","tensors","elementShape","elementDtype","maxNumElements","forEach","dtype","Error","shape","idTensor","id","copy","clearAndClose","keepIds","has","dispose","length","size","numElements","outputElementShape","reshapedTensors","map","popBack","pop","kept","pushBack","push","resize","destTensorList","i","Math","min","getItem","elementIndex","setItem","gather","indices","t","fromTensor","tensorElementShape","tensorList","reserve","scatter","maxIndex","max","list","value","index","split","totalLength","cumulativeLengths","len","shapeWithoutFirstDim","elementPerRow","previousLength","sizes"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_list.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat, keep, reshape, scalar, slice, stack, tensor, tidy, unstack } from '@tensorflow/tfjs-core';\nimport { assertShapesMatchAllowUndefinedSize, inferElementShape, mergeElementShape } from './tensor_utils';\n/**\n * TensorList stores a container of `tf.Tensor` objects, which are accessible\n * via tensors field.\n *\n * In order to get a copy of the underlying list, use the copy method:\n * ```\n *    TensorList b = a.copy();\n *    b.tensors().pushBack(t);  // This does not modify a.tensors().\n * ```\n *\n * Note that this is not a deep copy: the memory locations of the underlying\n * tensors will still point to the same locations of the corresponding tensors\n * in the original.\n */\nexport class TensorList {\n    /**\n     *\n     * @param tensors list of tensors\n     * @param elementShape shape of each tensor, this can be a single number (any\n     * shape is allowed) or partial shape (dim = -1).\n     * @param elementDtype data type of each tensor\n     * @param maxNumElements The maximum allowed size of `tensors`. Defaults to -1\n     *   meaning that the size of `tensors` is unbounded.\n     */\n    constructor(tensors, elementShape, elementDtype, maxNumElements = -1) {\n        this.tensors = tensors;\n        this.elementShape = elementShape;\n        this.elementDtype = elementDtype;\n        if (tensors != null) {\n            tensors.forEach(tensor => {\n                if (elementDtype !== tensor.dtype) {\n                    throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${tensor.dtype}`);\n                }\n                assertShapesMatchAllowUndefinedSize(elementShape, tensor.shape, 'TensorList shape mismatch: ');\n                keep(tensor);\n            });\n        }\n        this.idTensor = scalar(0);\n        this.maxNumElements = maxNumElements;\n        keep(this.idTensor);\n    }\n    get id() {\n        return this.idTensor.id;\n    }\n    /**\n     * Get a new TensorList containing a copy of the underlying tensor container.\n     */\n    copy() {\n        return new TensorList([...this.tensors], this.elementShape, this.elementDtype);\n    }\n    /**\n     * Dispose the tensors and idTensor and clear the tensor list.\n     */\n    clearAndClose(keepIds) {\n        this.tensors.forEach(tensor => {\n            if (keepIds == null || !keepIds.has(tensor.id)) {\n                tensor.dispose();\n            }\n        });\n        this.tensors.length = 0;\n        this.idTensor.dispose();\n    }\n    /**\n     * The size of the tensors in the tensor list.\n     */\n    size() {\n        return this.tensors.length;\n    }\n    /**\n     * Return a tensor that stacks a list of rank-R tf.Tensors into one rank-(R+1)\n     * tf.Tensor.\n     * @param elementShape shape of each tensor\n     * @param elementDtype data type of each tensor\n     * @param numElements the number of elements to stack\n     */\n    stack(elementShape, elementDtype, numElements = -1) {\n        if (elementDtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n        }\n        if (numElements !== -1 && this.tensors.length !== numElements) {\n            throw new Error(`Operation expected a list with ${numElements} elements but got a list with ${this.tensors.length} elements.`);\n        }\n        assertShapesMatchAllowUndefinedSize(elementShape, this.elementShape, 'TensorList shape mismatch: ');\n        const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n        return tidy(() => {\n            const reshapedTensors = this.tensors.map(tensor => reshape(tensor, outputElementShape));\n            return stack(reshapedTensors, 0);\n        });\n    }\n    /**\n     * Pop a tensor from the end of the list.\n     * @param elementShape shape of the tensor\n     * @param elementDtype data type of the tensor\n     */\n    popBack(elementShape, elementDtype) {\n        if (elementDtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n        }\n        if (this.size() === 0) {\n            throw new Error('Trying to pop from an empty list.');\n        }\n        const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n        const tensor = this.tensors.pop();\n        tensor.kept = false;\n        assertShapesMatchAllowUndefinedSize(tensor.shape, elementShape, 'TensorList shape mismatch: ');\n        return reshape(tensor, outputElementShape);\n    }\n    /**\n     * Push a tensor to the end of the list.\n     * @param tensor Tensor to be pushed.\n     */\n    pushBack(tensor) {\n        if (tensor.dtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${this.elementDtype}`);\n        }\n        assertShapesMatchAllowUndefinedSize(tensor.shape, this.elementShape, 'TensorList shape mismatch: ');\n        if (this.maxNumElements === this.size()) {\n            throw new Error(`Trying to push element into a full list.`);\n        }\n        keep(tensor);\n        this.tensors.push(tensor);\n    }\n    /**\n     * Update the size of the list.\n     * @param size the new size of the list.\n     */\n    resize(size) {\n        if (size < 0) {\n            throw new Error(`TensorListResize expects size to be non-negative. Got: ${size}`);\n        }\n        if (this.maxNumElements !== -1 && size > this.maxNumElements) {\n            throw new Error(`TensorListResize input size ${size} is greater maxNumElement ${this.maxNumElements}.`);\n        }\n        const destTensorList = new TensorList([], this.elementShape, this.elementDtype, this.maxNumElements);\n        destTensorList.tensors.length = size;\n        for (let i = 0; i < Math.min(this.tensors.length, size); ++i) {\n            destTensorList.tensors[i] = this.tensors[i];\n        }\n        return destTensorList;\n    }\n    /**\n     * Retrieve the element at the provided index\n     * @param elementShape shape of the tensor\n     * @param elementDtype dtype of the tensor\n     * @param elementIndex index of the tensor\n     */\n    getItem(elementIndex, elementShape, elementDtype) {\n        if (elementDtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n        }\n        if (elementIndex < 0 || elementIndex > this.tensors.length) {\n            throw new Error(`Trying to access element ${elementIndex} in a list with ${this.tensors.length} elements.`);\n        }\n        if (this.tensors[elementIndex] == null) {\n            throw new Error(`element at index ${elementIndex} is null.`);\n        }\n        assertShapesMatchAllowUndefinedSize(this.tensors[elementIndex].shape, elementShape, 'TensorList shape mismatch: ');\n        const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n        return reshape(this.tensors[elementIndex], outputElementShape);\n    }\n    /**\n     * Set the tensor at the index\n     * @param elementIndex index of the tensor\n     * @param tensor the tensor to be inserted into the list\n     */\n    setItem(elementIndex, tensor) {\n        if (tensor.dtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${this.elementDtype}`);\n        }\n        if (elementIndex < 0 ||\n            this.maxNumElements !== -1 && elementIndex >= this.maxNumElements) {\n            throw new Error(`Trying to set element ${elementIndex} in a list with max ${this.maxNumElements} elements.`);\n        }\n        assertShapesMatchAllowUndefinedSize(this.elementShape, tensor.shape, 'TensorList shape mismatch: ');\n        keep(tensor);\n        // dispose the previous value if it is replacing.\n        if (this.tensors[elementIndex] != null) {\n            this.tensors[elementIndex].kept = false;\n        }\n        this.tensors[elementIndex] = tensor;\n    }\n    /**\n     * Return selected values in the TensorList as a stacked Tensor. All of\n     * selected values must have been written and their shapes must all match.\n     * @param indices indices of tensors to gather\n     * @param elementDtype output tensor dtype\n     * @param elementShape output tensor element shape\n     */\n    gather(indices, elementDtype, elementShape) {\n        if (elementDtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n        }\n        assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, 'TensorList shape mismatch: ');\n        // When indices is greater than the size of the list, indices beyond the\n        // size of the list are ignored.\n        indices = indices.slice(0, this.size());\n        const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n        if (indices.length === 0) {\n            return tensor([], [0].concat(outputElementShape));\n        }\n        return tidy(() => {\n            const tensors = indices.map(i => reshape(this.tensors[i], outputElementShape));\n            return stack(tensors, 0);\n        });\n    }\n    /**\n     * Return the values in the TensorList as a concatenated Tensor.\n     * @param elementDtype output tensor dtype\n     * @param elementShape output tensor element shape\n     */\n    concat(elementDtype, elementShape) {\n        if (!!elementDtype && elementDtype !== this.elementDtype) {\n            throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${elementDtype}`);\n        }\n        assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, 'TensorList shape mismatch: ');\n        const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n        if (this.size() === 0) {\n            return tensor([], [0].concat(outputElementShape));\n        }\n        return tidy(() => {\n            const tensors = this.tensors.map(t => reshape(t, outputElementShape));\n            return concat(tensors, 0);\n        });\n    }\n}\n/**\n * Creates a TensorList which, when stacked, has the value of tensor.\n * @param tensor from tensor\n * @param elementShape output tensor element shape\n */\nexport function fromTensor(tensor, elementShape, elementDtype) {\n    const dtype = tensor.dtype;\n    if (tensor.shape.length < 1) {\n        throw new Error(`Tensor must be at least a vector, but saw shape: ${tensor.shape}`);\n    }\n    if (tensor.dtype !== elementDtype) {\n        throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${elementDtype}`);\n    }\n    const tensorElementShape = tensor.shape.slice(1);\n    assertShapesMatchAllowUndefinedSize(tensorElementShape, elementShape, 'TensorList shape mismatch: ');\n    const tensorList = unstack(tensor);\n    return new TensorList(tensorList, elementShape, dtype);\n}\n/**\n * Return a TensorList of the given size with empty elements.\n * @param elementShape the shape of the future elements of the list\n * @param elementDtype the desired type of elements in the list\n * @param numElements the number of elements to reserve\n * @param maxNumElements the maximum number of elements in th list\n */\nexport function reserve(elementShape, elementDtype, numElements, maxNumElements) {\n    return new TensorList([], elementShape, elementDtype, maxNumElements);\n}\n/**\n * Put tensors at specific indices of a stacked tensor into a TensorList.\n * @param indices list of indices on how to scatter the tensor.\n * @param tensor input tensor.\n * @param elementShape the shape of the future elements of the list\n * @param numElements the number of elements to scatter\n */\nexport function scatter(tensor, indices, elementShape, numElements) {\n    if (indices.length !== tensor.shape[0]) {\n        throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${indices.length} vs. ${tensor.shape[0]}`);\n    }\n    const maxIndex = Math.max(...indices);\n    if (numElements != null && numElements !== -1 && maxIndex >= numElements) {\n        throw new Error(`Max index must be < array size (${maxIndex}  vs. ${numElements})`);\n    }\n    const list = new TensorList([], elementShape, tensor.dtype, numElements);\n    const tensors = unstack(tensor, 0);\n    indices.forEach((value, index) => {\n        list.setItem(value, tensors[index]);\n    });\n    return list;\n}\n/**\n * Split the values of a Tensor into a TensorList.\n * @param length the lengths to use when splitting value along\n *    its first dimension.\n * @param tensor the tensor to split.\n * @param elementShape the shape of the future elements of the list\n */\nexport function split(tensor, length, elementShape) {\n    let totalLength = 0;\n    const cumulativeLengths = length.map(len => {\n        totalLength += len;\n        return totalLength;\n    });\n    if (totalLength !== tensor.shape[0]) {\n        throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n    }\n    const shapeWithoutFirstDim = tensor.shape.slice(1);\n    const outputElementShape = mergeElementShape(shapeWithoutFirstDim, elementShape);\n    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n    const tensors = tidy(() => {\n        const tensors = [];\n        tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n        for (let i = 0; i < length.length; ++i) {\n            const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n            const indices = [0, previousLength, 0];\n            const sizes = [1, length[i], elementPerRow];\n            tensors[i] = reshape(slice(tensor, indices, sizes), outputElementShape);\n        }\n        tensor.dispose();\n        return tensors;\n    });\n    const list = new TensorList([], elementShape, tensor.dtype, length.length);\n    for (let i = 0; i < tensors.length; i++) {\n        list.setItem(i, tensors[i]);\n    }\n    return list;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}