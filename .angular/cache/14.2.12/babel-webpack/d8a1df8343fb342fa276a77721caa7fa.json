{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Conv3DBackpropFilterV2 } from '../kernel_names';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the derivative of the filter of a 3D convolution.\n *\n * @param x The input tensor, of rank 5 or rank 4 of shape\n *     [batch, depth, height, width, inChannels]. If rank 4, batch of 1 is\n *     assumed.\n * @param dy The dy image, of rank 5 or rank 4, of shape\n *     [batch, depth, height, width, outDepth]. If rank 4, batch of 1 is\n *     assumed.\n * @param filterShape The shape of the filter, length 5,\n *     [filterDepth, filterHeight, filterWidth, inDepth, outDepth].\n * @param strides The strides of the convolution: [strideDepth, strideHeight,\n * strideWidth].\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n */\n\nfunction conv3DBackpropFilter_(x, dy, filterShape, strides, pad) {\n  let x5D = x;\n\n  if (x.rank === 4) {\n    x5D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2], x.shape[3]]);\n  }\n\n  let dy5D = dy;\n\n  if (dy5D.rank === 4) {\n    dy5D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]]);\n  }\n\n  util.assert(x5D.rank === 5, () => `Error in conv3dDerFilter: input must be rank 5, but got shape ` + `${x5D.shape}.`);\n  util.assert(dy5D.rank === 5, () => `Error in conv3dDerFilter: dy must be rank 5, but got shape ` + `${dy5D.shape}.`);\n  util.assert(filterShape.length === 5, () => `Error in conv3dDerFilter: filterShape must be length 5, but got ` + `${filterShape}.`);\n  util.assert(x5D.shape[4] === filterShape[3], () => `Error in conv3dDerFilter: depth of input ${x5D.shape[4]}) must ` + `match input depth in filter (${filterShape[3]}.`);\n  util.assert(dy5D.shape[4] === filterShape[4], () => `Error in conv3dDerFilter: depth of dy (${dy5D.shape[4]}) must ` + `match output depth for filter (${filterShape[4]}).`);\n  const inputs = {\n    x: x5D,\n    dy: dy5D\n  };\n  const attrs = {\n    strides,\n    pad,\n    filterShape\n  }; // tslint:disable-next-line: no-unnecessary-type-assertion\n\n  return ENGINE.runKernel(Conv3DBackpropFilterV2, inputs, attrs);\n}\n\nexport const conv3DBackpropFilter = op({\n  conv3DBackpropFilter_\n});","map":{"version":3,"names":["ENGINE","Conv3DBackpropFilterV2","util","op","reshape","conv3DBackpropFilter_","x","dy","filterShape","strides","pad","x5D","rank","shape","dy5D","assert","length","inputs","attrs","runKernel","conv3DBackpropFilter"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_backprop_filter.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Conv3DBackpropFilterV2 } from '../kernel_names';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the derivative of the filter of a 3D convolution.\n *\n * @param x The input tensor, of rank 5 or rank 4 of shape\n *     [batch, depth, height, width, inChannels]. If rank 4, batch of 1 is\n *     assumed.\n * @param dy The dy image, of rank 5 or rank 4, of shape\n *     [batch, depth, height, width, outDepth]. If rank 4, batch of 1 is\n *     assumed.\n * @param filterShape The shape of the filter, length 5,\n *     [filterDepth, filterHeight, filterWidth, inDepth, outDepth].\n * @param strides The strides of the convolution: [strideDepth, strideHeight,\n * strideWidth].\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n */\nfunction conv3DBackpropFilter_(x, dy, filterShape, strides, pad) {\n    let x5D = x;\n    if (x.rank === 4) {\n        x5D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2], x.shape[3]]);\n    }\n    let dy5D = dy;\n    if (dy5D.rank === 4) {\n        dy5D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]]);\n    }\n    util.assert(x5D.rank === 5, () => `Error in conv3dDerFilter: input must be rank 5, but got shape ` +\n        `${x5D.shape}.`);\n    util.assert(dy5D.rank === 5, () => `Error in conv3dDerFilter: dy must be rank 5, but got shape ` +\n        `${dy5D.shape}.`);\n    util.assert(filterShape.length === 5, () => `Error in conv3dDerFilter: filterShape must be length 5, but got ` +\n        `${filterShape}.`);\n    util.assert(x5D.shape[4] === filterShape[3], () => `Error in conv3dDerFilter: depth of input ${x5D.shape[4]}) must ` +\n        `match input depth in filter (${filterShape[3]}.`);\n    util.assert(dy5D.shape[4] === filterShape[4], () => `Error in conv3dDerFilter: depth of dy (${dy5D.shape[4]}) must ` +\n        `match output depth for filter (${filterShape[4]}).`);\n    const inputs = { x: x5D, dy: dy5D };\n    const attrs = { strides, pad, filterShape };\n    // tslint:disable-next-line: no-unnecessary-type-assertion\n    return ENGINE.runKernel(Conv3DBackpropFilterV2, inputs, attrs);\n}\nexport const conv3DBackpropFilter = op({ conv3DBackpropFilter_ });\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,WAAvB;AACA,SAASC,sBAAT,QAAuC,iBAAvC;AACA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AACA,SAASC,EAAT,QAAmB,aAAnB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,qBAAT,CAA+BC,CAA/B,EAAkCC,EAAlC,EAAsCC,WAAtC,EAAmDC,OAAnD,EAA4DC,GAA5D,EAAiE;EAC7D,IAAIC,GAAG,GAAGL,CAAV;;EACA,IAAIA,CAAC,CAACM,IAAF,KAAW,CAAf,EAAkB;IACdD,GAAG,GAAGP,OAAO,CAACE,CAAD,EAAI,CAAC,CAAD,EAAIA,CAAC,CAACO,KAAF,CAAQ,CAAR,CAAJ,EAAgBP,CAAC,CAACO,KAAF,CAAQ,CAAR,CAAhB,EAA4BP,CAAC,CAACO,KAAF,CAAQ,CAAR,CAA5B,EAAwCP,CAAC,CAACO,KAAF,CAAQ,CAAR,CAAxC,CAAJ,CAAb;EACH;;EACD,IAAIC,IAAI,GAAGP,EAAX;;EACA,IAAIO,IAAI,CAACF,IAAL,KAAc,CAAlB,EAAqB;IACjBE,IAAI,GAAGV,OAAO,CAACG,EAAD,EAAK,CAAC,CAAD,EAAIA,EAAE,CAACM,KAAH,CAAS,CAAT,CAAJ,EAAiBN,EAAE,CAACM,KAAH,CAAS,CAAT,CAAjB,EAA8BN,EAAE,CAACM,KAAH,CAAS,CAAT,CAA9B,EAA2CN,EAAE,CAACM,KAAH,CAAS,CAAT,CAA3C,CAAL,CAAd;EACH;;EACDX,IAAI,CAACa,MAAL,CAAYJ,GAAG,CAACC,IAAJ,KAAa,CAAzB,EAA4B,MAAO,gEAAD,GAC7B,GAAED,GAAG,CAACE,KAAM,GADjB;EAEAX,IAAI,CAACa,MAAL,CAAYD,IAAI,CAACF,IAAL,KAAc,CAA1B,EAA6B,MAAO,6DAAD,GAC9B,GAAEE,IAAI,CAACD,KAAM,GADlB;EAEAX,IAAI,CAACa,MAAL,CAAYP,WAAW,CAACQ,MAAZ,KAAuB,CAAnC,EAAsC,MAAO,kEAAD,GACvC,GAAER,WAAY,GADnB;EAEAN,IAAI,CAACa,MAAL,CAAYJ,GAAG,CAACE,KAAJ,CAAU,CAAV,MAAiBL,WAAW,CAAC,CAAD,CAAxC,EAA6C,MAAO,4CAA2CG,GAAG,CAACE,KAAJ,CAAU,CAAV,CAAa,SAAzD,GAC9C,gCAA+BL,WAAW,CAAC,CAAD,CAAI,GADnD;EAEAN,IAAI,CAACa,MAAL,CAAYD,IAAI,CAACD,KAAL,CAAW,CAAX,MAAkBL,WAAW,CAAC,CAAD,CAAzC,EAA8C,MAAO,0CAAyCM,IAAI,CAACD,KAAL,CAAW,CAAX,CAAc,SAAxD,GAC/C,kCAAiCL,WAAW,CAAC,CAAD,CAAI,IADrD;EAEA,MAAMS,MAAM,GAAG;IAAEX,CAAC,EAAEK,GAAL;IAAUJ,EAAE,EAAEO;EAAd,CAAf;EACA,MAAMI,KAAK,GAAG;IAAET,OAAF;IAAWC,GAAX;IAAgBF;EAAhB,CAAd,CApB6D,CAqB7D;;EACA,OAAOR,MAAM,CAACmB,SAAP,CAAiBlB,sBAAjB,EAAyCgB,MAAzC,EAAiDC,KAAjD,CAAP;AACH;;AACD,OAAO,MAAME,oBAAoB,GAAGjB,EAAE,CAAC;EAAEE;AAAF,CAAD,CAA/B"},"metadata":{},"sourceType":"module"}