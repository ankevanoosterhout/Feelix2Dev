{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ArgMax, backend_util, util } from '@tensorflow/tfjs-core';\nimport { argMinMaxReduce } from '../kernel_utils/arg_min_max';\nimport { transpose } from './Transpose';\nexport function argMax(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis\n  } = attrs;\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n\n  if (permutedAxes != null) {\n    $x = transpose({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        perm: permutedAxes\n      }\n    });\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('argMax', [axes[0]], $x.shape.length);\n  const out = argMinMaxReduce(backend, $x, axes[0], 'max');\n  intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return out;\n}\nexport const argMaxConfig = {\n  kernelName: ArgMax,\n  backendName: 'webgl',\n  kernelFunc: argMax\n};","map":{"version":3,"names":["ArgMax","backend_util","util","argMinMaxReduce","transpose","argMax","args","inputs","backend","attrs","x","axis","axes","parseAxisParam","shape","permutedAxes","getAxesPermutation","length","$x","intermediateTensorInfos","perm","push","getInnerMostAxes","assertAxesAreInnerMostDims","out","forEach","t","disposeIntermediateTensorInfo","argMaxConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ArgMax.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ArgMax, backend_util, util } from '@tensorflow/tfjs-core';\nimport { argMinMaxReduce } from '../kernel_utils/arg_min_max';\nimport { transpose } from './Transpose';\nexport function argMax(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis } = attrs;\n    let axes = util.parseAxisParam(axis, x.shape);\n    const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n    let $x = x;\n    const intermediateTensorInfos = [];\n    if (permutedAxes != null) {\n        $x = transpose({ inputs: { x }, backend, attrs: { perm: permutedAxes } });\n        intermediateTensorInfos.push($x);\n        axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n    }\n    backend_util.assertAxesAreInnerMostDims('argMax', [axes[0]], $x.shape.length);\n    const out = argMinMaxReduce(backend, $x, axes[0], 'max');\n    intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return out;\n}\nexport const argMaxConfig = {\n    kernelName: ArgMax,\n    backendName: 'webgl',\n    kernelFunc: argMax\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,EAAiBC,YAAjB,EAA+BC,IAA/B,QAA2C,uBAA3C;AACA,SAASC,eAAT,QAAgC,6BAAhC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAO,SAASC,MAAT,CAAgBC,IAAhB,EAAsB;EACzB,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BH,IAAnC;EACA,MAAM;IAAEI;EAAF,IAAQH,MAAd;EACA,MAAM;IAAEI;EAAF,IAAWF,KAAjB;EACA,IAAIG,IAAI,GAAGV,IAAI,CAACW,cAAL,CAAoBF,IAApB,EAA0BD,CAAC,CAACI,KAA5B,CAAX;EACA,MAAMC,YAAY,GAAGd,YAAY,CAACe,kBAAb,CAAgCJ,IAAhC,EAAsCF,CAAC,CAACI,KAAF,CAAQG,MAA9C,CAArB;EACA,IAAIC,EAAE,GAAGR,CAAT;EACA,MAAMS,uBAAuB,GAAG,EAAhC;;EACA,IAAIJ,YAAY,IAAI,IAApB,EAA0B;IACtBG,EAAE,GAAGd,SAAS,CAAC;MAAEG,MAAM,EAAE;QAAEG;MAAF,CAAV;MAAiBF,OAAjB;MAA0BC,KAAK,EAAE;QAAEW,IAAI,EAAEL;MAAR;IAAjC,CAAD,CAAd;IACAI,uBAAuB,CAACE,IAAxB,CAA6BH,EAA7B;IACAN,IAAI,GAAGX,YAAY,CAACqB,gBAAb,CAA8BV,IAAI,CAACK,MAAnC,EAA2CC,EAAE,CAACJ,KAAH,CAASG,MAApD,CAAP;EACH;;EACDhB,YAAY,CAACsB,0BAAb,CAAwC,QAAxC,EAAkD,CAACX,IAAI,CAAC,CAAD,CAAL,CAAlD,EAA6DM,EAAE,CAACJ,KAAH,CAASG,MAAtE;EACA,MAAMO,GAAG,GAAGrB,eAAe,CAACK,OAAD,EAAUU,EAAV,EAAcN,IAAI,CAAC,CAAD,CAAlB,EAAuB,KAAvB,CAA3B;EACAO,uBAAuB,CAACM,OAAxB,CAAgCC,CAAC,IAAIlB,OAAO,CAACmB,6BAAR,CAAsCD,CAAtC,CAArC;EACA,OAAOF,GAAP;AACH;AACD,OAAO,MAAMI,YAAY,GAAG;EACxBC,UAAU,EAAE7B,MADY;EAExB8B,WAAW,EAAE,OAFW;EAGxBC,UAAU,EAAE1B;AAHY,CAArB"},"metadata":{},"sourceType":"module"}