{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n  switch (node.op) {\n    case 'LowerBound':\n      {\n        const sortedSequence = getParamValue('sortedSequence', node, tensorMap, context);\n        const values = getParamValue('values', node, tensorMap, context);\n        return [ops.lowerBound(sortedSequence, values)];\n      }\n\n    case 'TopKV2':\n      {\n        const x = getParamValue('x', node, tensorMap, context);\n        const k = getParamValue('k', node, tensorMap, context);\n        const sorted = getParamValue('sorted', node, tensorMap, context);\n        const result = ops.topk(x, k, sorted);\n        return [result.values, result.indices];\n      }\n\n    case 'UpperBound':\n      {\n        const sortedSequence = getParamValue('sortedSequence', node, tensorMap, context);\n        const values = getParamValue('values', node, tensorMap, context);\n        return [ops.upperBound(sortedSequence, values)];\n      }\n\n    case 'Unique':\n      {\n        const x = getParamValue('x', node, tensorMap, context);\n        const result = ops.unique(x);\n        return [result.values, result.indices];\n      }\n\n    case 'UniqueV2':\n      {\n        const x = getParamValue('x', node, tensorMap, context);\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const result = ops.unique(x, axis);\n        return [result.values, result.indices];\n      }\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'evaluation';","map":{"version":3,"names":["tfOps","getParamValue","executeOp","node","tensorMap","context","ops","op","sortedSequence","values","lowerBound","x","k","sorted","result","topk","indices","upperBound","unique","axis","TypeError","CATEGORY"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/evaluation_executor.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'LowerBound': {\n            const sortedSequence = getParamValue('sortedSequence', node, tensorMap, context);\n            const values = getParamValue('values', node, tensorMap, context);\n            return [ops.lowerBound(sortedSequence, values)];\n        }\n        case 'TopKV2': {\n            const x = getParamValue('x', node, tensorMap, context);\n            const k = getParamValue('k', node, tensorMap, context);\n            const sorted = getParamValue('sorted', node, tensorMap, context);\n            const result = ops.topk(x, k, sorted);\n            return [result.values, result.indices];\n        }\n        case 'UpperBound': {\n            const sortedSequence = getParamValue('sortedSequence', node, tensorMap, context);\n            const values = getParamValue('values', node, tensorMap, context);\n            return [ops.upperBound(sortedSequence, values)];\n        }\n        case 'Unique': {\n            const x = getParamValue('x', node, tensorMap, context);\n            const result = ops.unique(x);\n            return [result.values, result.indices];\n        }\n        case 'UniqueV2': {\n            const x = getParamValue('x', node, tensorMap, context);\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const result = ops.unique(x, axis);\n            return [result.values, result.indices];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'evaluation';\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,KAAKA,KAAZ,MAAuB,kDAAvB;AACA,SAASC,aAAT,QAA8B,SAA9B;AACA,OAAO,MAAMC,SAAS,GAAG,CAACC,IAAD,EAAOC,SAAP,EAAkBC,OAAlB,EAA2BC,GAAG,GAAGN,KAAjC,KAA2C;EAChE,QAAQG,IAAI,CAACI,EAAb;IACI,KAAK,YAAL;MAAmB;QACf,MAAMC,cAAc,GAAGP,aAAa,CAAC,gBAAD,EAAmBE,IAAnB,EAAyBC,SAAzB,EAAoCC,OAApC,CAApC;QACA,MAAMI,MAAM,GAAGR,aAAa,CAAC,QAAD,EAAWE,IAAX,EAAiBC,SAAjB,EAA4BC,OAA5B,CAA5B;QACA,OAAO,CAACC,GAAG,CAACI,UAAJ,CAAeF,cAAf,EAA+BC,MAA/B,CAAD,CAAP;MACH;;IACD,KAAK,QAAL;MAAe;QACX,MAAME,CAAC,GAAGV,aAAa,CAAC,GAAD,EAAME,IAAN,EAAYC,SAAZ,EAAuBC,OAAvB,CAAvB;QACA,MAAMO,CAAC,GAAGX,aAAa,CAAC,GAAD,EAAME,IAAN,EAAYC,SAAZ,EAAuBC,OAAvB,CAAvB;QACA,MAAMQ,MAAM,GAAGZ,aAAa,CAAC,QAAD,EAAWE,IAAX,EAAiBC,SAAjB,EAA4BC,OAA5B,CAA5B;QACA,MAAMS,MAAM,GAAGR,GAAG,CAACS,IAAJ,CAASJ,CAAT,EAAYC,CAAZ,EAAeC,MAAf,CAAf;QACA,OAAO,CAACC,MAAM,CAACL,MAAR,EAAgBK,MAAM,CAACE,OAAvB,CAAP;MACH;;IACD,KAAK,YAAL;MAAmB;QACf,MAAMR,cAAc,GAAGP,aAAa,CAAC,gBAAD,EAAmBE,IAAnB,EAAyBC,SAAzB,EAAoCC,OAApC,CAApC;QACA,MAAMI,MAAM,GAAGR,aAAa,CAAC,QAAD,EAAWE,IAAX,EAAiBC,SAAjB,EAA4BC,OAA5B,CAA5B;QACA,OAAO,CAACC,GAAG,CAACW,UAAJ,CAAeT,cAAf,EAA+BC,MAA/B,CAAD,CAAP;MACH;;IACD,KAAK,QAAL;MAAe;QACX,MAAME,CAAC,GAAGV,aAAa,CAAC,GAAD,EAAME,IAAN,EAAYC,SAAZ,EAAuBC,OAAvB,CAAvB;QACA,MAAMS,MAAM,GAAGR,GAAG,CAACY,MAAJ,CAAWP,CAAX,CAAf;QACA,OAAO,CAACG,MAAM,CAACL,MAAR,EAAgBK,MAAM,CAACE,OAAvB,CAAP;MACH;;IACD,KAAK,UAAL;MAAiB;QACb,MAAML,CAAC,GAAGV,aAAa,CAAC,GAAD,EAAME,IAAN,EAAYC,SAAZ,EAAuBC,OAAvB,CAAvB;QACA,MAAMc,IAAI,GAAGlB,aAAa,CAAC,MAAD,EAASE,IAAT,EAAeC,SAAf,EAA0BC,OAA1B,CAA1B;QACA,MAAMS,MAAM,GAAGR,GAAG,CAACY,MAAJ,CAAWP,CAAX,EAAcQ,IAAd,CAAf;QACA,OAAO,CAACL,MAAM,CAACL,MAAR,EAAgBK,MAAM,CAACE,OAAvB,CAAP;MACH;;IACD;MACI,MAAMI,SAAS,CAAE,aAAYjB,IAAI,CAACI,EAAG,qBAAtB,CAAf;EA9BR;AAgCH,CAjCM;AAkCP,OAAO,MAAMc,QAAQ,GAAG,YAAjB"},"metadata":{},"sourceType":"module"}