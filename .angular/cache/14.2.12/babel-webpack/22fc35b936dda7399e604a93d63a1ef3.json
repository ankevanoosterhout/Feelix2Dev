{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, BatchToSpaceND } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nimport { transpose } from './Transpose';\nexport function batchToSpaceND(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    blockShape,\n    crops\n  } = attrs;\n  assertNotComplex([x], 'batchToSpaceND');\n  const prod = blockShape.reduce((a, b) => a * b);\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted = backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords = backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize = backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n  const xReshaped = reshape({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      shape: reshaped\n    }\n  });\n  const xTransposed = transpose({\n    inputs: {\n      x: xReshaped\n    },\n    backend,\n    attrs: {\n      perm: permuted\n    }\n  });\n  const xTransposedReshaped = reshape({\n    inputs: {\n      x: xTransposed\n    },\n    backend,\n    attrs: {\n      shape: reshapedPermuted\n    }\n  });\n  const result = slice({\n    inputs: {\n      x: xTransposedReshaped\n    },\n    backend,\n    attrs: {\n      begin: sliceBeginCoords,\n      size: sliceSize\n    }\n  });\n  backend.disposeIntermediateTensorInfo(xReshaped);\n  backend.disposeIntermediateTensorInfo(xTransposed);\n  backend.disposeIntermediateTensorInfo(xTransposedReshaped);\n  return result;\n}\nexport const batchToSpaceNDConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'cpu',\n  kernelFunc: batchToSpaceND\n};","map":{"version":3,"names":["backend_util","BatchToSpaceND","assertNotComplex","reshape","slice","transpose","batchToSpaceND","args","inputs","backend","attrs","x","blockShape","crops","prod","reduce","a","b","reshaped","getReshaped","shape","permuted","getPermuted","length","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","sliceSize","getSliceSize","xReshaped","xTransposed","perm","xTransposedReshaped","result","begin","size","disposeIntermediateTensorInfo","batchToSpaceNDConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/BatchToSpaceND.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, BatchToSpaceND } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nimport { transpose } from './Transpose';\nexport function batchToSpaceND(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { blockShape, crops } = attrs;\n    assertNotComplex([x], 'batchToSpaceND');\n    const prod = blockShape.reduce((a, b) => a * b);\n    const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n    const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n    const reshapedPermuted = backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n    const sliceBeginCoords = backend_util.getSliceBeginCoords(crops, blockShape.length);\n    const sliceSize = backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n    const xReshaped = reshape({ inputs: { x }, backend, attrs: { shape: reshaped } });\n    const xTransposed = transpose({ inputs: { x: xReshaped }, backend, attrs: { perm: permuted } });\n    const xTransposedReshaped = reshape({ inputs: { x: xTransposed }, backend, attrs: { shape: reshapedPermuted } });\n    const result = slice({\n        inputs: { x: xTransposedReshaped },\n        backend,\n        attrs: { begin: sliceBeginCoords, size: sliceSize }\n    });\n    backend.disposeIntermediateTensorInfo(xReshaped);\n    backend.disposeIntermediateTensorInfo(xTransposed);\n    backend.disposeIntermediateTensorInfo(xTransposedReshaped);\n    return result;\n}\nexport const batchToSpaceNDConfig = {\n    kernelName: BatchToSpaceND,\n    backendName: 'cpu',\n    kernelFunc: batchToSpaceND\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,EAAuBC,cAAvB,QAA6C,uBAA7C;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAO,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;EACjC,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BH,IAAnC;EACA,MAAM;IAAEI;EAAF,IAAQH,MAAd;EACA,MAAM;IAAEI,UAAF;IAAcC;EAAd,IAAwBH,KAA9B;EACAR,gBAAgB,CAAC,CAACS,CAAD,CAAD,EAAM,gBAAN,CAAhB;EACA,MAAMG,IAAI,GAAGF,UAAU,CAACG,MAAX,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAAhC,CAAb;EACA,MAAMC,QAAQ,GAAGlB,YAAY,CAACmB,WAAb,CAAyBR,CAAC,CAACS,KAA3B,EAAkCR,UAAlC,EAA8CE,IAA9C,CAAjB;EACA,MAAMO,QAAQ,GAAGrB,YAAY,CAACsB,WAAb,CAAyBJ,QAAQ,CAACK,MAAlC,EAA0CX,UAAU,CAACW,MAArD,CAAjB;EACA,MAAMC,gBAAgB,GAAGxB,YAAY,CAACyB,mBAAb,CAAiCd,CAAC,CAACS,KAAnC,EAA0CR,UAA1C,EAAsDE,IAAtD,CAAzB;EACA,MAAMY,gBAAgB,GAAG1B,YAAY,CAAC2B,mBAAb,CAAiCd,KAAjC,EAAwCD,UAAU,CAACW,MAAnD,CAAzB;EACA,MAAMK,SAAS,GAAG5B,YAAY,CAAC6B,YAAb,CAA0BL,gBAA1B,EAA4CX,KAA5C,EAAmDD,UAAU,CAACW,MAA9D,CAAlB;EACA,MAAMO,SAAS,GAAG3B,OAAO,CAAC;IAAEK,MAAM,EAAE;MAAEG;IAAF,CAAV;IAAiBF,OAAjB;IAA0BC,KAAK,EAAE;MAAEU,KAAK,EAAEF;IAAT;EAAjC,CAAD,CAAzB;EACA,MAAMa,WAAW,GAAG1B,SAAS,CAAC;IAAEG,MAAM,EAAE;MAAEG,CAAC,EAAEmB;IAAL,CAAV;IAA4BrB,OAA5B;IAAqCC,KAAK,EAAE;MAAEsB,IAAI,EAAEX;IAAR;EAA5C,CAAD,CAA7B;EACA,MAAMY,mBAAmB,GAAG9B,OAAO,CAAC;IAAEK,MAAM,EAAE;MAAEG,CAAC,EAAEoB;IAAL,CAAV;IAA8BtB,OAA9B;IAAuCC,KAAK,EAAE;MAAEU,KAAK,EAAEI;IAAT;EAA9C,CAAD,CAAnC;EACA,MAAMU,MAAM,GAAG9B,KAAK,CAAC;IACjBI,MAAM,EAAE;MAAEG,CAAC,EAAEsB;IAAL,CADS;IAEjBxB,OAFiB;IAGjBC,KAAK,EAAE;MAAEyB,KAAK,EAAET,gBAAT;MAA2BU,IAAI,EAAER;IAAjC;EAHU,CAAD,CAApB;EAKAnB,OAAO,CAAC4B,6BAAR,CAAsCP,SAAtC;EACArB,OAAO,CAAC4B,6BAAR,CAAsCN,WAAtC;EACAtB,OAAO,CAAC4B,6BAAR,CAAsCJ,mBAAtC;EACA,OAAOC,MAAP;AACH;AACD,OAAO,MAAMI,oBAAoB,GAAG;EAChCC,UAAU,EAAEtC,cADoB;EAEhCuC,WAAW,EAAE,KAFmB;EAGhCC,UAAU,EAAEnC;AAHoB,CAA7B"},"metadata":{},"sourceType":"module"}