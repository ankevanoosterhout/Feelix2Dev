{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: utils/generic_utils.py */\nimport { util } from '@tensorflow/tfjs-core';\nimport { AssertionError, ValueError } from '../errors'; // tslint:enable\n\n/**\n * If `value` is an Array, equivalent to Python's `value * numValues`.\n * If `value` is not an Array, equivalent to Python's `[value] * numValues`\n */\n// tslint:disable-next-line:no-any\n\nexport function pyListRepeat(value, numValues) {\n  if (Array.isArray(value)) {\n    // tslint:disable-next-line:no-any\n    let newArray = [];\n\n    for (let i = 0; i < numValues; i++) {\n      newArray = newArray.concat(value);\n    }\n\n    return newArray;\n  } else {\n    const newArray = new Array(numValues);\n    newArray.fill(value);\n    return newArray;\n  }\n}\nexport function assert(val, message) {\n  if (!val) {\n    throw new AssertionError(message);\n  }\n}\n/**\n * Count the number of elements of the `array` that are equal to `reference`.\n */\n\nexport function count(array, refernce) {\n  let counter = 0;\n\n  for (const item of array) {\n    if (item === refernce) {\n      counter++;\n    }\n  }\n\n  return counter;\n}\n/**\n * If an array is of length 1, just return the first element. Otherwise, return\n * the full array.\n * @param tensors\n */\n\nexport function singletonOrArray(xs) {\n  if (xs.length === 1) {\n    return xs[0];\n  }\n\n  return xs;\n}\n/**\n * Normalizes a list/tensor into a list.\n *\n * If a tensor is passed, we return\n * a list of size 1 containing the tensor.\n *\n * @param x target object to be normalized.\n */\n// tslint:disable-next-line:no-any\n\nexport function toList(x) {\n  if (Array.isArray(x)) {\n    return x;\n  }\n\n  return [x];\n}\n/**\n * Generate a UID for a list\n */\n// tslint:disable-next-line:no-any\n\nexport function objectListUid(objs) {\n  const objectList = toList(objs);\n  let retVal = '';\n\n  for (const obj of objectList) {\n    if (obj.id == null) {\n      throw new ValueError(`Object ${obj} passed to objectListUid without an id`);\n    }\n\n    if (retVal !== '') {\n      retVal = retVal + ', ';\n    }\n\n    retVal = `${retVal}${Math.abs(obj.id)}`;\n  }\n\n  return retVal;\n}\n/**\n * Converts string to snake-case.\n * @param name\n */\n\nexport function toSnakeCase(name) {\n  const intermediate = name.replace(/(.)([A-Z][a-z0-9]+)/g, '$1_$2');\n  const insecure = intermediate.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();\n  /*\n   If the class is private the name starts with \"_\" which is not secure\n   for creating scopes. We prefix the name with \"private\" in this case.\n   */\n\n  if (insecure[0] !== '_') {\n    return insecure;\n  }\n\n  return 'private' + insecure;\n}\nexport function toCamelCase(identifier) {\n  // quick return for empty string or single character strings\n  if (identifier.length <= 1) {\n    return identifier;\n  } // Check for the underscore indicating snake_case\n\n\n  if (identifier.indexOf('_') === -1) {\n    return identifier;\n  }\n\n  return identifier.replace(/[_]+(\\w|$)/g, (m, p1) => p1.toUpperCase());\n} // tslint:disable-next-line:no-any\n\nlet _GLOBAL_CUSTOM_OBJECTS = {};\nexport function serializeKerasObject(instance) {\n  if (instance === null || instance === undefined) {\n    return null;\n  }\n\n  const dict = {};\n  dict['className'] = instance.getClassName();\n  dict['config'] = instance.getConfig();\n  return dict;\n}\n/**\n * Replace ndarray-style scalar objects in serialization objects with numbers.\n *\n * Background: In some versions of tf.keras, certain scalar values in the HDF5\n * model save file can be serialized as: `{'type': 'ndarray', 'value': num}`,\n * where in `num` is a plain number. This method converts such serialization\n * to a `number`.\n *\n * @param config The keras-format serialization object to be processed\n *   (in place).\n */\n\nfunction convertNDArrayScalarsInConfig(config) {\n  if (config == null || typeof config !== 'object') {\n    return;\n  } else if (Array.isArray(config)) {\n    config.forEach(configItem => convertNDArrayScalarsInConfig(configItem));\n  } else {\n    const fields = Object.keys(config);\n\n    for (const field of fields) {\n      const value = config[field];\n\n      if (value != null && typeof value === 'object') {\n        if (!Array.isArray(value) && value['type'] === 'ndarray' && typeof value['value'] === 'number') {\n          config[field] = value['value'];\n        } else {\n          convertNDArrayScalarsInConfig(value);\n        }\n      }\n    }\n  }\n}\n/**\n * Deserialize a saved Keras Object\n * @param identifier either a string ID or a saved Keras dictionary\n * @param moduleObjects a list of Python class names to object constructors\n * @param customObjects a list of Python class names to object constructors\n * @param printableModuleName debug text for the object being reconstituted\n * @param fastWeightInit Optional flag to use fast weight initialization\n *   during deserialization. This is applicable to cases in which\n *   the initialization will be immediately overwritten by loaded weight\n *   values. Default: `false`.\n * @returns a TensorFlow.js Layers object\n */\n// tslint:disable:no-any\n\n\nexport function deserializeKerasObject(identifier, moduleObjects = {}, customObjects = {}, printableModuleName = 'object', fastWeightInit = false) {\n  // tslint:enable\n  if (typeof identifier === 'string') {\n    const functionName = identifier;\n    let fn;\n\n    if (functionName in customObjects) {\n      fn = customObjects[functionName];\n    } else if (functionName in _GLOBAL_CUSTOM_OBJECTS) {\n      fn = _GLOBAL_CUSTOM_OBJECTS[functionName];\n    } else {\n      fn = moduleObjects[functionName];\n\n      if (fn == null) {\n        throw new ValueError(`Unknown ${printableModuleName}: ${identifier}. ` + `This may be due to one of the following reasons:\\n` + `1. The ${printableModuleName} is defined in Python, in which ` + `case it needs to be ported to TensorFlow.js or your JavaScript ` + `code.\\n` + `2. The custom ${printableModuleName} is defined in JavaScript, ` + `but is not registered properly with ` + `tf.serialization.registerClass().`); // TODO(cais): Add link to tutorial page on custom layers.\n      }\n    }\n\n    return fn;\n  } else {\n    // In this case we are dealing with a Keras config dictionary.\n    const config = identifier;\n\n    if (config['className'] == null || config['config'] == null) {\n      throw new ValueError(`${printableModuleName}: Improper config format: ` + `${JSON.stringify(config)}.\\n` + `'className' and 'config' must set.`);\n    }\n\n    const className = config['className'];\n    let cls, fromConfig;\n\n    if (className in customObjects) {\n      [cls, fromConfig] = customObjects[className];\n    } else if (className in _GLOBAL_CUSTOM_OBJECTS) {\n      [cls, fromConfig] = _GLOBAL_CUSTOM_OBJECTS['className'];\n    } else if (className in moduleObjects) {\n      [cls, fromConfig] = moduleObjects[className];\n    }\n\n    if (cls == null) {\n      throw new ValueError(`Unknown ${printableModuleName}: ${className}. ` + `This may be due to one of the following reasons:\\n` + `1. The ${printableModuleName} is defined in Python, in which ` + `case it needs to be ported to TensorFlow.js or your JavaScript ` + `code.\\n` + `2. The custom ${printableModuleName} is defined in JavaScript, ` + `but is not registered properly with ` + `tf.serialization.registerClass().`); // TODO(cais): Add link to tutorial page on custom layers.\n    }\n\n    if (fromConfig != null) {\n      // Porting notes: Instead of checking to see whether fromConfig accepts\n      // customObjects, we create a customObjects dictionary and tack it on to\n      // config['config'] as config['config'].customObjects. Objects can use it,\n      // if they want.\n      // tslint:disable-next-line:no-any\n      const customObjectsCombined = {};\n\n      for (const key of Object.keys(_GLOBAL_CUSTOM_OBJECTS)) {\n        customObjectsCombined[key] = _GLOBAL_CUSTOM_OBJECTS[key];\n      }\n\n      for (const key of Object.keys(customObjects)) {\n        customObjectsCombined[key] = customObjects[key];\n      } // Add the customObjects to config\n\n\n      const nestedConfig = config['config'];\n      nestedConfig['customObjects'] = customObjectsCombined;\n      const backupCustomObjects = Object.assign({}, _GLOBAL_CUSTOM_OBJECTS);\n\n      for (const key of Object.keys(customObjects)) {\n        _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n      }\n\n      convertNDArrayScalarsInConfig(config['config']);\n      const returnObj = fromConfig(cls, config['config'], customObjects, fastWeightInit);\n      _GLOBAL_CUSTOM_OBJECTS = Object.assign({}, backupCustomObjects);\n      return returnObj;\n    } else {\n      // Then `cls` may be a function returning a class.\n      // In this case by convention `config` holds\n      // the kwargs of the function.\n      const backupCustomObjects = Object.assign({}, _GLOBAL_CUSTOM_OBJECTS);\n\n      for (const key of Object.keys(customObjects)) {\n        _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n      } // In python this is **config['config'], for tfjs-layers we require\n      // classes that use this fall-through construction method to take\n      // a config interface that mimics the expansion of named parameters.\n\n\n      const returnObj = new cls(config['config']);\n      _GLOBAL_CUSTOM_OBJECTS = Object.assign({}, backupCustomObjects);\n      return returnObj;\n    }\n  }\n}\n/**\n * Compares two numbers for sorting.\n * @param a\n * @param b\n */\n\nexport function numberCompare(a, b) {\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n/**\n * Comparison of two numbers for reverse sorting.\n * @param a\n * @param b\n */\n\nexport function reverseNumberCompare(a, b) {\n  return -1 * numberCompare(a, b);\n}\n/**\n * Convert a string into the corresponding DType.\n * @param dtype\n * @returns An instance of DType.\n */\n\nexport function stringToDType(dtype) {\n  switch (dtype) {\n    case 'float32':\n      return 'float32';\n\n    default:\n      throw new ValueError(`Invalid dtype: ${dtype}`);\n  }\n}\n/**\n * Test the element-by-element equality of two Arrays of strings.\n * @param xs First array of strings.\n * @param ys Second array of strings.\n * @returns Wether the two arrays are all equal, element by element.\n */\n\nexport function stringsEqual(xs, ys) {\n  if (xs == null || ys == null) {\n    return xs === ys;\n  }\n\n  if (xs.length !== ys.length) {\n    return false;\n  }\n\n  for (let i = 0; i < xs.length; ++i) {\n    if (xs[i] !== ys[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Get the unique elements of an array.\n * @param xs Array.\n * @returns An Array consisting of the unique elements in `xs`.\n */\n\nexport function unique(xs) {\n  if (xs == null) {\n    return xs;\n  }\n\n  const out = []; // TODO(cais): Maybe improve performance by sorting.\n\n  for (const x of xs) {\n    if (out.indexOf(x) === -1) {\n      out.push(x);\n    }\n  }\n\n  return out;\n}\n/**\n * Determine if an Object is empty (i.e., does not have own properties).\n * @param obj Object\n * @returns Whether the Object is empty.\n * @throws ValueError: If object is `null` or `undefined`.\n */\n\nexport function isObjectEmpty(obj) {\n  if (obj == null) {\n    throw new ValueError(`Invalid value in obj: ${JSON.stringify(obj)}`);\n  }\n\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Helper function used to build type union/enum run-time checkers.\n * @param values The list of allowed values.\n * @param label A string name for the type\n * @param value The value to test.\n * @throws ValueError: If the value is not in values nor `undefined`/`null`.\n */\n\nexport function checkStringTypeUnionValue(values, label, value) {\n  if (value == null) {\n    return;\n  }\n\n  if (values.indexOf(value) < 0) {\n    throw new ValueError(`${value} is not a valid ${label}.  Valid values are ${values} or null/undefined.`);\n  }\n}\n/**\n * Helper function for verifying the types of inputs.\n *\n * Ensures that the elements of `x` are all of type `expectedType`.\n * Also verifies that the length of `x` is within bounds.\n *\n * @param x Object to test.\n * @param expectedType The string expected type of all of the elements in the\n * Array.\n * @param minLength Return false if x.length is less than this.\n * @param maxLength Return false if x.length is greater than this.\n * @returns true if and only if `x` is an `Array<expectedType>` with\n * length >= `minLength` and <= `maxLength`.\n */\n// tslint:disable:no-any\n\nexport function checkArrayTypeAndLength(x, expectedType, minLength = 0, maxLength = Infinity) {\n  assert(minLength >= 0);\n  assert(maxLength >= minLength);\n  return Array.isArray(x) && x.length >= minLength && x.length <= maxLength && x.every(e => typeof e === expectedType);\n} // tslint:enable:no-any\n\n/**\n * Assert that a value or an array of value are positive integer.\n *\n * @param value The value being asserted on. May be a single number or an array\n *   of numbers.\n * @param name Name of the value, used to make the error message.\n */\n\nexport function assertPositiveInteger(value, name) {\n  if (Array.isArray(value)) {\n    util.assert(value.length > 0, () => `${name} is unexpectedly an empty array.`);\n    value.forEach((v, i) => assertPositiveInteger(v, `element ${i + 1} of ${name}`));\n  } else {\n    util.assert(Number.isInteger(value) && value > 0, () => `Expected ${name} to be a positive integer, but got ` + `${formatAsFriendlyString(value)}.`);\n  }\n}\n/**\n * Format a value into a display-friendly, human-readable fashion.\n *\n * - `null` is formatted as `'null'`\n * - Strings are formated with flanking pair of quotes.\n * - Arrays are formatted with flanking pair of square brackets.\n *\n * @param value The value to display.\n * @return Formatted string.\n */\n// tslint:disable-next-line:no-any\n\nexport function formatAsFriendlyString(value) {\n  if (value === null) {\n    return 'null';\n  } else if (Array.isArray(value)) {\n    return '[' + value.map(v => formatAsFriendlyString(v)).join(',') + ']';\n  } else if (typeof value === 'string') {\n    return `\"${value}\"`;\n  } else {\n    return `${value}`;\n  }\n}\n/**\n * Returns a function `f2` (decorator) which wraps the original function\n * `f`. `f2` guarantees that `f` can be called at most once\n * every `waitMs` ms. If `f2` is called more often, it will return\n * the last returned result of `f`.\n *\n * @param f The original function `f` to wrap.\n * @param waitMs The time between two consecutive calls to `f` in ms.\n */\n\nexport function debounce(f, waitMs, nowFunc) {\n  let lastTime = nowFunc != null ? nowFunc() : util.now();\n  let lastResult;\n\n  const f2 = (...args) => {\n    const now = nowFunc != null ? nowFunc() : util.now();\n\n    if (now - lastTime < waitMs) {\n      return lastResult;\n    }\n\n    lastTime = now;\n    lastResult = f(...args);\n    return lastResult;\n  };\n\n  return f2;\n}\n/**\n * Returns the fusable activation given a layers identifier.\n *\n * @param activationName The layers identifier string.\n * @return The name of the fusable activation.\n */\n\nexport function mapActivationToFusedKernel(activationName) {\n  if (activationName === 'relu') {\n    return 'relu';\n  }\n\n  if (activationName === 'linear') {\n    return 'linear';\n  }\n\n  if (activationName === 'elu') {\n    return 'elu';\n  }\n\n  return null;\n}\n/**\n * Returns the cartesian product of sets of values.\n * This works the same as itertools.product in Python.\n *\n * Example:\n *\n * filters = [128, 256, 512]\n * paddings = ['same', 'valid']\n *\n * product = [ [128, 'same'], [128, 'valid'], [256, 'same'], [256, 'valid'],\n * [512, 'same'], [512, 'valid']]\n *\n * @param arrayOfValues List/array of values.\n * @return The cartesian product.\n */\n\nexport function getCartesianProductOfValues(...arrayOfValues) {\n  assert(arrayOfValues.length > 0, 'arrayOfValues is empty');\n\n  for (const values of arrayOfValues) {\n    assert(Array.isArray(values), 'one of the values is not an array');\n    assert(values.length > 0, 'one of the values is empty');\n  }\n\n  return arrayOfValues.reduce((products, values) => {\n    if (products.length === 0) {\n      return values.map(value => [value]);\n    }\n\n    return values.map(value => {\n      return products.map(prevValue => [...prevValue, value]);\n    }).reduce((flattenedProduct, unflattenedProduct) => {\n      return flattenedProduct.concat(unflattenedProduct);\n    }, []);\n  }, []);\n}","map":{"version":3,"names":["util","AssertionError","ValueError","pyListRepeat","value","numValues","Array","isArray","newArray","i","concat","fill","assert","val","message","count","array","refernce","counter","item","singletonOrArray","xs","length","toList","x","objectListUid","objs","objectList","retVal","obj","id","Math","abs","toSnakeCase","name","intermediate","replace","insecure","toLowerCase","toCamelCase","identifier","indexOf","m","p1","toUpperCase","_GLOBAL_CUSTOM_OBJECTS","serializeKerasObject","instance","undefined","dict","getClassName","getConfig","convertNDArrayScalarsInConfig","config","forEach","configItem","fields","Object","keys","field","deserializeKerasObject","moduleObjects","customObjects","printableModuleName","fastWeightInit","functionName","fn","JSON","stringify","className","cls","fromConfig","customObjectsCombined","key","nestedConfig","backupCustomObjects","assign","returnObj","numberCompare","a","b","reverseNumberCompare","stringToDType","dtype","stringsEqual","ys","unique","out","push","isObjectEmpty","hasOwnProperty","checkStringTypeUnionValue","values","label","checkArrayTypeAndLength","expectedType","minLength","maxLength","Infinity","every","e","assertPositiveInteger","v","Number","isInteger","formatAsFriendlyString","map","join","debounce","f","waitMs","nowFunc","lastTime","now","lastResult","f2","args","mapActivationToFusedKernel","activationName","getCartesianProductOfValues","arrayOfValues","reduce","products","prevValue","flattenedProduct","unflattenedProduct"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original source: utils/generic_utils.py */\nimport { util } from '@tensorflow/tfjs-core';\nimport { AssertionError, ValueError } from '../errors';\n// tslint:enable\n/**\n * If `value` is an Array, equivalent to Python's `value * numValues`.\n * If `value` is not an Array, equivalent to Python's `[value] * numValues`\n */\n// tslint:disable-next-line:no-any\nexport function pyListRepeat(value, numValues) {\n    if (Array.isArray(value)) {\n        // tslint:disable-next-line:no-any\n        let newArray = [];\n        for (let i = 0; i < numValues; i++) {\n            newArray = newArray.concat(value);\n        }\n        return newArray;\n    }\n    else {\n        const newArray = new Array(numValues);\n        newArray.fill(value);\n        return newArray;\n    }\n}\nexport function assert(val, message) {\n    if (!val) {\n        throw new AssertionError(message);\n    }\n}\n/**\n * Count the number of elements of the `array` that are equal to `reference`.\n */\nexport function count(array, refernce) {\n    let counter = 0;\n    for (const item of array) {\n        if (item === refernce) {\n            counter++;\n        }\n    }\n    return counter;\n}\n/**\n * If an array is of length 1, just return the first element. Otherwise, return\n * the full array.\n * @param tensors\n */\nexport function singletonOrArray(xs) {\n    if (xs.length === 1) {\n        return xs[0];\n    }\n    return xs;\n}\n/**\n * Normalizes a list/tensor into a list.\n *\n * If a tensor is passed, we return\n * a list of size 1 containing the tensor.\n *\n * @param x target object to be normalized.\n */\n// tslint:disable-next-line:no-any\nexport function toList(x) {\n    if (Array.isArray(x)) {\n        return x;\n    }\n    return [x];\n}\n/**\n * Generate a UID for a list\n */\n// tslint:disable-next-line:no-any\nexport function objectListUid(objs) {\n    const objectList = toList(objs);\n    let retVal = '';\n    for (const obj of objectList) {\n        if (obj.id == null) {\n            throw new ValueError(`Object ${obj} passed to objectListUid without an id`);\n        }\n        if (retVal !== '') {\n            retVal = retVal + ', ';\n        }\n        retVal = `${retVal}${Math.abs(obj.id)}`;\n    }\n    return retVal;\n}\n/**\n * Converts string to snake-case.\n * @param name\n */\nexport function toSnakeCase(name) {\n    const intermediate = name.replace(/(.)([A-Z][a-z0-9]+)/g, '$1_$2');\n    const insecure = intermediate.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();\n    /*\n     If the class is private the name starts with \"_\" which is not secure\n     for creating scopes. We prefix the name with \"private\" in this case.\n     */\n    if (insecure[0] !== '_') {\n        return insecure;\n    }\n    return 'private' + insecure;\n}\nexport function toCamelCase(identifier) {\n    // quick return for empty string or single character strings\n    if (identifier.length <= 1) {\n        return identifier;\n    }\n    // Check for the underscore indicating snake_case\n    if (identifier.indexOf('_') === -1) {\n        return identifier;\n    }\n    return identifier.replace(/[_]+(\\w|$)/g, (m, p1) => p1.toUpperCase());\n}\n// tslint:disable-next-line:no-any\nlet _GLOBAL_CUSTOM_OBJECTS = {};\nexport function serializeKerasObject(instance) {\n    if (instance === null || instance === undefined) {\n        return null;\n    }\n    const dict = {};\n    dict['className'] = instance.getClassName();\n    dict['config'] = instance.getConfig();\n    return dict;\n}\n/**\n * Replace ndarray-style scalar objects in serialization objects with numbers.\n *\n * Background: In some versions of tf.keras, certain scalar values in the HDF5\n * model save file can be serialized as: `{'type': 'ndarray', 'value': num}`,\n * where in `num` is a plain number. This method converts such serialization\n * to a `number`.\n *\n * @param config The keras-format serialization object to be processed\n *   (in place).\n */\nfunction convertNDArrayScalarsInConfig(config) {\n    if (config == null || typeof config !== 'object') {\n        return;\n    }\n    else if (Array.isArray(config)) {\n        config.forEach(configItem => convertNDArrayScalarsInConfig(configItem));\n    }\n    else {\n        const fields = Object.keys(config);\n        for (const field of fields) {\n            const value = config[field];\n            if (value != null && typeof value === 'object') {\n                if (!Array.isArray(value) && value['type'] === 'ndarray' &&\n                    typeof value['value'] === 'number') {\n                    config[field] = value['value'];\n                }\n                else {\n                    convertNDArrayScalarsInConfig(value);\n                }\n            }\n        }\n    }\n}\n/**\n * Deserialize a saved Keras Object\n * @param identifier either a string ID or a saved Keras dictionary\n * @param moduleObjects a list of Python class names to object constructors\n * @param customObjects a list of Python class names to object constructors\n * @param printableModuleName debug text for the object being reconstituted\n * @param fastWeightInit Optional flag to use fast weight initialization\n *   during deserialization. This is applicable to cases in which\n *   the initialization will be immediately overwritten by loaded weight\n *   values. Default: `false`.\n * @returns a TensorFlow.js Layers object\n */\n// tslint:disable:no-any\nexport function deserializeKerasObject(identifier, moduleObjects = {}, customObjects = {}, printableModuleName = 'object', fastWeightInit = false) {\n    // tslint:enable\n    if (typeof identifier === 'string') {\n        const functionName = identifier;\n        let fn;\n        if (functionName in customObjects) {\n            fn = customObjects[functionName];\n        }\n        else if (functionName in _GLOBAL_CUSTOM_OBJECTS) {\n            fn = _GLOBAL_CUSTOM_OBJECTS[functionName];\n        }\n        else {\n            fn = moduleObjects[functionName];\n            if (fn == null) {\n                throw new ValueError(`Unknown ${printableModuleName}: ${identifier}. ` +\n                    `This may be due to one of the following reasons:\\n` +\n                    `1. The ${printableModuleName} is defined in Python, in which ` +\n                    `case it needs to be ported to TensorFlow.js or your JavaScript ` +\n                    `code.\\n` +\n                    `2. The custom ${printableModuleName} is defined in JavaScript, ` +\n                    `but is not registered properly with ` +\n                    `tf.serialization.registerClass().`);\n                // TODO(cais): Add link to tutorial page on custom layers.\n            }\n        }\n        return fn;\n    }\n    else {\n        // In this case we are dealing with a Keras config dictionary.\n        const config = identifier;\n        if (config['className'] == null || config['config'] == null) {\n            throw new ValueError(`${printableModuleName}: Improper config format: ` +\n                `${JSON.stringify(config)}.\\n` +\n                `'className' and 'config' must set.`);\n        }\n        const className = config['className'];\n        let cls, fromConfig;\n        if (className in customObjects) {\n            [cls, fromConfig] = customObjects[className];\n        }\n        else if (className in _GLOBAL_CUSTOM_OBJECTS) {\n            [cls, fromConfig] = _GLOBAL_CUSTOM_OBJECTS['className'];\n        }\n        else if (className in moduleObjects) {\n            [cls, fromConfig] = moduleObjects[className];\n        }\n        if (cls == null) {\n            throw new ValueError(`Unknown ${printableModuleName}: ${className}. ` +\n                `This may be due to one of the following reasons:\\n` +\n                `1. The ${printableModuleName} is defined in Python, in which ` +\n                `case it needs to be ported to TensorFlow.js or your JavaScript ` +\n                `code.\\n` +\n                `2. The custom ${printableModuleName} is defined in JavaScript, ` +\n                `but is not registered properly with ` +\n                `tf.serialization.registerClass().`);\n            // TODO(cais): Add link to tutorial page on custom layers.\n        }\n        if (fromConfig != null) {\n            // Porting notes: Instead of checking to see whether fromConfig accepts\n            // customObjects, we create a customObjects dictionary and tack it on to\n            // config['config'] as config['config'].customObjects. Objects can use it,\n            // if they want.\n            // tslint:disable-next-line:no-any\n            const customObjectsCombined = {};\n            for (const key of Object.keys(_GLOBAL_CUSTOM_OBJECTS)) {\n                customObjectsCombined[key] = _GLOBAL_CUSTOM_OBJECTS[key];\n            }\n            for (const key of Object.keys(customObjects)) {\n                customObjectsCombined[key] = customObjects[key];\n            }\n            // Add the customObjects to config\n            const nestedConfig = config['config'];\n            nestedConfig['customObjects'] = customObjectsCombined;\n            const backupCustomObjects = Object.assign({}, _GLOBAL_CUSTOM_OBJECTS);\n            for (const key of Object.keys(customObjects)) {\n                _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n            }\n            convertNDArrayScalarsInConfig(config['config']);\n            const returnObj = fromConfig(cls, config['config'], customObjects, fastWeightInit);\n            _GLOBAL_CUSTOM_OBJECTS = Object.assign({}, backupCustomObjects);\n            return returnObj;\n        }\n        else {\n            // Then `cls` may be a function returning a class.\n            // In this case by convention `config` holds\n            // the kwargs of the function.\n            const backupCustomObjects = Object.assign({}, _GLOBAL_CUSTOM_OBJECTS);\n            for (const key of Object.keys(customObjects)) {\n                _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n            }\n            // In python this is **config['config'], for tfjs-layers we require\n            // classes that use this fall-through construction method to take\n            // a config interface that mimics the expansion of named parameters.\n            const returnObj = new cls(config['config']);\n            _GLOBAL_CUSTOM_OBJECTS = Object.assign({}, backupCustomObjects);\n            return returnObj;\n        }\n    }\n}\n/**\n * Compares two numbers for sorting.\n * @param a\n * @param b\n */\nexport function numberCompare(a, b) {\n    return (a < b) ? -1 : ((a > b) ? 1 : 0);\n}\n/**\n * Comparison of two numbers for reverse sorting.\n * @param a\n * @param b\n */\nexport function reverseNumberCompare(a, b) {\n    return -1 * numberCompare(a, b);\n}\n/**\n * Convert a string into the corresponding DType.\n * @param dtype\n * @returns An instance of DType.\n */\nexport function stringToDType(dtype) {\n    switch (dtype) {\n        case 'float32':\n            return 'float32';\n        default:\n            throw new ValueError(`Invalid dtype: ${dtype}`);\n    }\n}\n/**\n * Test the element-by-element equality of two Arrays of strings.\n * @param xs First array of strings.\n * @param ys Second array of strings.\n * @returns Wether the two arrays are all equal, element by element.\n */\nexport function stringsEqual(xs, ys) {\n    if (xs == null || ys == null) {\n        return xs === ys;\n    }\n    if (xs.length !== ys.length) {\n        return false;\n    }\n    for (let i = 0; i < xs.length; ++i) {\n        if (xs[i] !== ys[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Get the unique elements of an array.\n * @param xs Array.\n * @returns An Array consisting of the unique elements in `xs`.\n */\nexport function unique(xs) {\n    if (xs == null) {\n        return xs;\n    }\n    const out = [];\n    // TODO(cais): Maybe improve performance by sorting.\n    for (const x of xs) {\n        if (out.indexOf(x) === -1) {\n            out.push(x);\n        }\n    }\n    return out;\n}\n/**\n * Determine if an Object is empty (i.e., does not have own properties).\n * @param obj Object\n * @returns Whether the Object is empty.\n * @throws ValueError: If object is `null` or `undefined`.\n */\nexport function isObjectEmpty(obj) {\n    if (obj == null) {\n        throw new ValueError(`Invalid value in obj: ${JSON.stringify(obj)}`);\n    }\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Helper function used to build type union/enum run-time checkers.\n * @param values The list of allowed values.\n * @param label A string name for the type\n * @param value The value to test.\n * @throws ValueError: If the value is not in values nor `undefined`/`null`.\n */\nexport function checkStringTypeUnionValue(values, label, value) {\n    if (value == null) {\n        return;\n    }\n    if (values.indexOf(value) < 0) {\n        throw new ValueError(`${value} is not a valid ${label}.  Valid values are ${values} or null/undefined.`);\n    }\n}\n/**\n * Helper function for verifying the types of inputs.\n *\n * Ensures that the elements of `x` are all of type `expectedType`.\n * Also verifies that the length of `x` is within bounds.\n *\n * @param x Object to test.\n * @param expectedType The string expected type of all of the elements in the\n * Array.\n * @param minLength Return false if x.length is less than this.\n * @param maxLength Return false if x.length is greater than this.\n * @returns true if and only if `x` is an `Array<expectedType>` with\n * length >= `minLength` and <= `maxLength`.\n */\n// tslint:disable:no-any\nexport function checkArrayTypeAndLength(x, expectedType, minLength = 0, maxLength = Infinity) {\n    assert(minLength >= 0);\n    assert(maxLength >= minLength);\n    return (Array.isArray(x) && x.length >= minLength && x.length <= maxLength &&\n        x.every(e => typeof e === expectedType));\n}\n// tslint:enable:no-any\n/**\n * Assert that a value or an array of value are positive integer.\n *\n * @param value The value being asserted on. May be a single number or an array\n *   of numbers.\n * @param name Name of the value, used to make the error message.\n */\nexport function assertPositiveInteger(value, name) {\n    if (Array.isArray(value)) {\n        util.assert(value.length > 0, () => `${name} is unexpectedly an empty array.`);\n        value.forEach((v, i) => assertPositiveInteger(v, `element ${i + 1} of ${name}`));\n    }\n    else {\n        util.assert(Number.isInteger(value) && value > 0, () => `Expected ${name} to be a positive integer, but got ` +\n            `${formatAsFriendlyString(value)}.`);\n    }\n}\n/**\n * Format a value into a display-friendly, human-readable fashion.\n *\n * - `null` is formatted as `'null'`\n * - Strings are formated with flanking pair of quotes.\n * - Arrays are formatted with flanking pair of square brackets.\n *\n * @param value The value to display.\n * @return Formatted string.\n */\n// tslint:disable-next-line:no-any\nexport function formatAsFriendlyString(value) {\n    if (value === null) {\n        return 'null';\n    }\n    else if (Array.isArray(value)) {\n        return '[' + value.map(v => formatAsFriendlyString(v)).join(',') + ']';\n    }\n    else if (typeof value === 'string') {\n        return `\"${value}\"`;\n    }\n    else {\n        return `${value}`;\n    }\n}\n/**\n * Returns a function `f2` (decorator) which wraps the original function\n * `f`. `f2` guarantees that `f` can be called at most once\n * every `waitMs` ms. If `f2` is called more often, it will return\n * the last returned result of `f`.\n *\n * @param f The original function `f` to wrap.\n * @param waitMs The time between two consecutive calls to `f` in ms.\n */\nexport function debounce(f, waitMs, nowFunc) {\n    let lastTime = nowFunc != null ? nowFunc() : util.now();\n    let lastResult;\n    const f2 = (...args) => {\n        const now = nowFunc != null ? nowFunc() : util.now();\n        if (now - lastTime < waitMs) {\n            return lastResult;\n        }\n        lastTime = now;\n        lastResult = f(...args);\n        return lastResult;\n    };\n    return f2;\n}\n/**\n * Returns the fusable activation given a layers identifier.\n *\n * @param activationName The layers identifier string.\n * @return The name of the fusable activation.\n */\nexport function mapActivationToFusedKernel(activationName) {\n    if (activationName === 'relu') {\n        return 'relu';\n    }\n    if (activationName === 'linear') {\n        return 'linear';\n    }\n    if (activationName === 'elu') {\n        return 'elu';\n    }\n    return null;\n}\n/**\n * Returns the cartesian product of sets of values.\n * This works the same as itertools.product in Python.\n *\n * Example:\n *\n * filters = [128, 256, 512]\n * paddings = ['same', 'valid']\n *\n * product = [ [128, 'same'], [128, 'valid'], [256, 'same'], [256, 'valid'],\n * [512, 'same'], [512, 'valid']]\n *\n * @param arrayOfValues List/array of values.\n * @return The cartesian product.\n */\nexport function getCartesianProductOfValues(...arrayOfValues) {\n    assert(arrayOfValues.length > 0, 'arrayOfValues is empty');\n    for (const values of arrayOfValues) {\n        assert(Array.isArray(values), 'one of the values is not an array');\n        assert(values.length > 0, 'one of the values is empty');\n    }\n    return arrayOfValues.reduce((products, values) => {\n        if (products.length === 0) {\n            return values.map(value => [value]);\n        }\n        return values\n            .map(value => {\n            return products.map((prevValue) => [...prevValue, value]);\n        })\n            .reduce((flattenedProduct, unflattenedProduct) => {\n            return flattenedProduct.concat(unflattenedProduct);\n        }, []);\n    }, []);\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA,SAASA,IAAT,QAAqB,uBAArB;AACA,SAASC,cAAT,EAAyBC,UAAzB,QAA2C,WAA3C,C,CACA;;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,CAAsBC,KAAtB,EAA6BC,SAA7B,EAAwC;EAC3C,IAAIC,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAJ,EAA0B;IACtB;IACA,IAAII,QAAQ,GAAG,EAAf;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,SAApB,EAA+BI,CAAC,EAAhC,EAAoC;MAChCD,QAAQ,GAAGA,QAAQ,CAACE,MAAT,CAAgBN,KAAhB,CAAX;IACH;;IACD,OAAOI,QAAP;EACH,CAPD,MAQK;IACD,MAAMA,QAAQ,GAAG,IAAIF,KAAJ,CAAUD,SAAV,CAAjB;IACAG,QAAQ,CAACG,IAAT,CAAcP,KAAd;IACA,OAAOI,QAAP;EACH;AACJ;AACD,OAAO,SAASI,MAAT,CAAgBC,GAAhB,EAAqBC,OAArB,EAA8B;EACjC,IAAI,CAACD,GAAL,EAAU;IACN,MAAM,IAAIZ,cAAJ,CAAmBa,OAAnB,CAAN;EACH;AACJ;AACD;AACA;AACA;;AACA,OAAO,SAASC,KAAT,CAAeC,KAAf,EAAsBC,QAAtB,EAAgC;EACnC,IAAIC,OAAO,GAAG,CAAd;;EACA,KAAK,MAAMC,IAAX,IAAmBH,KAAnB,EAA0B;IACtB,IAAIG,IAAI,KAAKF,QAAb,EAAuB;MACnBC,OAAO;IACV;EACJ;;EACD,OAAOA,OAAP;AACH;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,gBAAT,CAA0BC,EAA1B,EAA8B;EACjC,IAAIA,EAAE,CAACC,MAAH,KAAc,CAAlB,EAAqB;IACjB,OAAOD,EAAE,CAAC,CAAD,CAAT;EACH;;EACD,OAAOA,EAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,MAAT,CAAgBC,CAAhB,EAAmB;EACtB,IAAIlB,KAAK,CAACC,OAAN,CAAciB,CAAd,CAAJ,EAAsB;IAClB,OAAOA,CAAP;EACH;;EACD,OAAO,CAACA,CAAD,CAAP;AACH;AACD;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;EAChC,MAAMC,UAAU,GAAGJ,MAAM,CAACG,IAAD,CAAzB;EACA,IAAIE,MAAM,GAAG,EAAb;;EACA,KAAK,MAAMC,GAAX,IAAkBF,UAAlB,EAA8B;IAC1B,IAAIE,GAAG,CAACC,EAAJ,IAAU,IAAd,EAAoB;MAChB,MAAM,IAAI5B,UAAJ,CAAgB,UAAS2B,GAAI,wCAA7B,CAAN;IACH;;IACD,IAAID,MAAM,KAAK,EAAf,EAAmB;MACfA,MAAM,GAAGA,MAAM,GAAG,IAAlB;IACH;;IACDA,MAAM,GAAI,GAAEA,MAAO,GAAEG,IAAI,CAACC,GAAL,CAASH,GAAG,CAACC,EAAb,CAAiB,EAAtC;EACH;;EACD,OAAOF,MAAP;AACH;AACD;AACA;AACA;AACA;;AACA,OAAO,SAASK,WAAT,CAAqBC,IAArB,EAA2B;EAC9B,MAAMC,YAAY,GAAGD,IAAI,CAACE,OAAL,CAAa,sBAAb,EAAqC,OAArC,CAArB;EACA,MAAMC,QAAQ,GAAGF,YAAY,CAACC,OAAb,CAAqB,iBAArB,EAAwC,OAAxC,EAAiDE,WAAjD,EAAjB;EACA;AACJ;AACA;AACA;;EACI,IAAID,QAAQ,CAAC,CAAD,CAAR,KAAgB,GAApB,EAAyB;IACrB,OAAOA,QAAP;EACH;;EACD,OAAO,YAAYA,QAAnB;AACH;AACD,OAAO,SAASE,WAAT,CAAqBC,UAArB,EAAiC;EACpC;EACA,IAAIA,UAAU,CAAClB,MAAX,IAAqB,CAAzB,EAA4B;IACxB,OAAOkB,UAAP;EACH,CAJmC,CAKpC;;;EACA,IAAIA,UAAU,CAACC,OAAX,CAAmB,GAAnB,MAA4B,CAAC,CAAjC,EAAoC;IAChC,OAAOD,UAAP;EACH;;EACD,OAAOA,UAAU,CAACJ,OAAX,CAAmB,aAAnB,EAAkC,CAACM,CAAD,EAAIC,EAAJ,KAAWA,EAAE,CAACC,WAAH,EAA7C,CAAP;AACH,C,CACD;;AACA,IAAIC,sBAAsB,GAAG,EAA7B;AACA,OAAO,SAASC,oBAAT,CAA8BC,QAA9B,EAAwC;EAC3C,IAAIA,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAKC,SAAtC,EAAiD;IAC7C,OAAO,IAAP;EACH;;EACD,MAAMC,IAAI,GAAG,EAAb;EACAA,IAAI,CAAC,WAAD,CAAJ,GAAoBF,QAAQ,CAACG,YAAT,EAApB;EACAD,IAAI,CAAC,QAAD,CAAJ,GAAiBF,QAAQ,CAACI,SAAT,EAAjB;EACA,OAAOF,IAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASG,6BAAT,CAAuCC,MAAvC,EAA+C;EAC3C,IAAIA,MAAM,IAAI,IAAV,IAAkB,OAAOA,MAAP,KAAkB,QAAxC,EAAkD;IAC9C;EACH,CAFD,MAGK,IAAI/C,KAAK,CAACC,OAAN,CAAc8C,MAAd,CAAJ,EAA2B;IAC5BA,MAAM,CAACC,OAAP,CAAeC,UAAU,IAAIH,6BAA6B,CAACG,UAAD,CAA1D;EACH,CAFI,MAGA;IACD,MAAMC,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYL,MAAZ,CAAf;;IACA,KAAK,MAAMM,KAAX,IAAoBH,MAApB,EAA4B;MACxB,MAAMpD,KAAK,GAAGiD,MAAM,CAACM,KAAD,CAApB;;MACA,IAAIvD,KAAK,IAAI,IAAT,IAAiB,OAAOA,KAAP,KAAiB,QAAtC,EAAgD;QAC5C,IAAI,CAACE,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAD,IAAyBA,KAAK,CAAC,MAAD,CAAL,KAAkB,SAA3C,IACA,OAAOA,KAAK,CAAC,OAAD,CAAZ,KAA0B,QAD9B,EACwC;UACpCiD,MAAM,CAACM,KAAD,CAAN,GAAgBvD,KAAK,CAAC,OAAD,CAArB;QACH,CAHD,MAIK;UACDgD,6BAA6B,CAAChD,KAAD,CAA7B;QACH;MACJ;IACJ;EACJ;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASwD,sBAAT,CAAgCpB,UAAhC,EAA4CqB,aAAa,GAAG,EAA5D,EAAgEC,aAAa,GAAG,EAAhF,EAAoFC,mBAAmB,GAAG,QAA1G,EAAoHC,cAAc,GAAG,KAArI,EAA4I;EAC/I;EACA,IAAI,OAAOxB,UAAP,KAAsB,QAA1B,EAAoC;IAChC,MAAMyB,YAAY,GAAGzB,UAArB;IACA,IAAI0B,EAAJ;;IACA,IAAID,YAAY,IAAIH,aAApB,EAAmC;MAC/BI,EAAE,GAAGJ,aAAa,CAACG,YAAD,CAAlB;IACH,CAFD,MAGK,IAAIA,YAAY,IAAIpB,sBAApB,EAA4C;MAC7CqB,EAAE,GAAGrB,sBAAsB,CAACoB,YAAD,CAA3B;IACH,CAFI,MAGA;MACDC,EAAE,GAAGL,aAAa,CAACI,YAAD,CAAlB;;MACA,IAAIC,EAAE,IAAI,IAAV,EAAgB;QACZ,MAAM,IAAIhE,UAAJ,CAAgB,WAAU6D,mBAAoB,KAAIvB,UAAW,IAA9C,GAChB,oDADgB,GAEhB,UAASuB,mBAAoB,kCAFb,GAGhB,iEAHgB,GAIhB,SAJgB,GAKhB,iBAAgBA,mBAAoB,6BALpB,GAMhB,sCANgB,GAOhB,mCAPC,CAAN,CADY,CASZ;MACH;IACJ;;IACD,OAAOG,EAAP;EACH,CAxBD,MAyBK;IACD;IACA,MAAMb,MAAM,GAAGb,UAAf;;IACA,IAAIa,MAAM,CAAC,WAAD,CAAN,IAAuB,IAAvB,IAA+BA,MAAM,CAAC,QAAD,CAAN,IAAoB,IAAvD,EAA6D;MACzD,MAAM,IAAInD,UAAJ,CAAgB,GAAE6D,mBAAoB,4BAAvB,GAChB,GAAEI,IAAI,CAACC,SAAL,CAAef,MAAf,CAAuB,KADT,GAEhB,oCAFC,CAAN;IAGH;;IACD,MAAMgB,SAAS,GAAGhB,MAAM,CAAC,WAAD,CAAxB;IACA,IAAIiB,GAAJ,EAASC,UAAT;;IACA,IAAIF,SAAS,IAAIP,aAAjB,EAAgC;MAC5B,CAACQ,GAAD,EAAMC,UAAN,IAAoBT,aAAa,CAACO,SAAD,CAAjC;IACH,CAFD,MAGK,IAAIA,SAAS,IAAIxB,sBAAjB,EAAyC;MAC1C,CAACyB,GAAD,EAAMC,UAAN,IAAoB1B,sBAAsB,CAAC,WAAD,CAA1C;IACH,CAFI,MAGA,IAAIwB,SAAS,IAAIR,aAAjB,EAAgC;MACjC,CAACS,GAAD,EAAMC,UAAN,IAAoBV,aAAa,CAACQ,SAAD,CAAjC;IACH;;IACD,IAAIC,GAAG,IAAI,IAAX,EAAiB;MACb,MAAM,IAAIpE,UAAJ,CAAgB,WAAU6D,mBAAoB,KAAIM,SAAU,IAA7C,GAChB,oDADgB,GAEhB,UAASN,mBAAoB,kCAFb,GAGhB,iEAHgB,GAIhB,SAJgB,GAKhB,iBAAgBA,mBAAoB,6BALpB,GAMhB,sCANgB,GAOhB,mCAPC,CAAN,CADa,CASb;IACH;;IACD,IAAIQ,UAAU,IAAI,IAAlB,EAAwB;MACpB;MACA;MACA;MACA;MACA;MACA,MAAMC,qBAAqB,GAAG,EAA9B;;MACA,KAAK,MAAMC,GAAX,IAAkBhB,MAAM,CAACC,IAAP,CAAYb,sBAAZ,CAAlB,EAAuD;QACnD2B,qBAAqB,CAACC,GAAD,CAArB,GAA6B5B,sBAAsB,CAAC4B,GAAD,CAAnD;MACH;;MACD,KAAK,MAAMA,GAAX,IAAkBhB,MAAM,CAACC,IAAP,CAAYI,aAAZ,CAAlB,EAA8C;QAC1CU,qBAAqB,CAACC,GAAD,CAArB,GAA6BX,aAAa,CAACW,GAAD,CAA1C;MACH,CAZmB,CAapB;;;MACA,MAAMC,YAAY,GAAGrB,MAAM,CAAC,QAAD,CAA3B;MACAqB,YAAY,CAAC,eAAD,CAAZ,GAAgCF,qBAAhC;MACA,MAAMG,mBAAmB,GAAGlB,MAAM,CAACmB,MAAP,CAAc,EAAd,EAAkB/B,sBAAlB,CAA5B;;MACA,KAAK,MAAM4B,GAAX,IAAkBhB,MAAM,CAACC,IAAP,CAAYI,aAAZ,CAAlB,EAA8C;QAC1CjB,sBAAsB,CAAC4B,GAAD,CAAtB,GAA8BX,aAAa,CAACW,GAAD,CAA3C;MACH;;MACDrB,6BAA6B,CAACC,MAAM,CAAC,QAAD,CAAP,CAA7B;MACA,MAAMwB,SAAS,GAAGN,UAAU,CAACD,GAAD,EAAMjB,MAAM,CAAC,QAAD,CAAZ,EAAwBS,aAAxB,EAAuCE,cAAvC,CAA5B;MACAnB,sBAAsB,GAAGY,MAAM,CAACmB,MAAP,CAAc,EAAd,EAAkBD,mBAAlB,CAAzB;MACA,OAAOE,SAAP;IACH,CAxBD,MAyBK;MACD;MACA;MACA;MACA,MAAMF,mBAAmB,GAAGlB,MAAM,CAACmB,MAAP,CAAc,EAAd,EAAkB/B,sBAAlB,CAA5B;;MACA,KAAK,MAAM4B,GAAX,IAAkBhB,MAAM,CAACC,IAAP,CAAYI,aAAZ,CAAlB,EAA8C;QAC1CjB,sBAAsB,CAAC4B,GAAD,CAAtB,GAA8BX,aAAa,CAACW,GAAD,CAA3C;MACH,CAPA,CAQD;MACA;MACA;;;MACA,MAAMI,SAAS,GAAG,IAAIP,GAAJ,CAAQjB,MAAM,CAAC,QAAD,CAAd,CAAlB;MACAR,sBAAsB,GAAGY,MAAM,CAACmB,MAAP,CAAc,EAAd,EAAkBD,mBAAlB,CAAzB;MACA,OAAOE,SAAP;IACH;EACJ;AACJ;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,CAAuBC,CAAvB,EAA0BC,CAA1B,EAA6B;EAChC,OAAQD,CAAC,GAAGC,CAAL,GAAU,CAAC,CAAX,GAAiBD,CAAC,GAAGC,CAAL,GAAU,CAAV,GAAc,CAArC;AACH;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,oBAAT,CAA8BF,CAA9B,EAAiCC,CAAjC,EAAoC;EACvC,OAAO,CAAC,CAAD,GAAKF,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAAzB;AACH;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,aAAT,CAAuBC,KAAvB,EAA8B;EACjC,QAAQA,KAAR;IACI,KAAK,SAAL;MACI,OAAO,SAAP;;IACJ;MACI,MAAM,IAAIjF,UAAJ,CAAgB,kBAAiBiF,KAAM,EAAvC,CAAN;EAJR;AAMH;AACD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,CAAsB/D,EAAtB,EAA0BgE,EAA1B,EAA8B;EACjC,IAAIhE,EAAE,IAAI,IAAN,IAAcgE,EAAE,IAAI,IAAxB,EAA8B;IAC1B,OAAOhE,EAAE,KAAKgE,EAAd;EACH;;EACD,IAAIhE,EAAE,CAACC,MAAH,KAAc+D,EAAE,CAAC/D,MAArB,EAA6B;IACzB,OAAO,KAAP;EACH;;EACD,KAAK,IAAIb,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGY,EAAE,CAACC,MAAvB,EAA+B,EAAEb,CAAjC,EAAoC;IAChC,IAAIY,EAAE,CAACZ,CAAD,CAAF,KAAU4E,EAAE,CAAC5E,CAAD,CAAhB,EAAqB;MACjB,OAAO,KAAP;IACH;EACJ;;EACD,OAAO,IAAP;AACH;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS6E,MAAT,CAAgBjE,EAAhB,EAAoB;EACvB,IAAIA,EAAE,IAAI,IAAV,EAAgB;IACZ,OAAOA,EAAP;EACH;;EACD,MAAMkE,GAAG,GAAG,EAAZ,CAJuB,CAKvB;;EACA,KAAK,MAAM/D,CAAX,IAAgBH,EAAhB,EAAoB;IAChB,IAAIkE,GAAG,CAAC9C,OAAJ,CAAYjB,CAAZ,MAAmB,CAAC,CAAxB,EAA2B;MACvB+D,GAAG,CAACC,IAAJ,CAAShE,CAAT;IACH;EACJ;;EACD,OAAO+D,GAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,aAAT,CAAuB5D,GAAvB,EAA4B;EAC/B,IAAIA,GAAG,IAAI,IAAX,EAAiB;IACb,MAAM,IAAI3B,UAAJ,CAAgB,yBAAwBiE,IAAI,CAACC,SAAL,CAAevC,GAAf,CAAoB,EAA5D,CAAN;EACH;;EACD,KAAK,MAAM4C,GAAX,IAAkB5C,GAAlB,EAAuB;IACnB,IAAIA,GAAG,CAAC6D,cAAJ,CAAmBjB,GAAnB,CAAJ,EAA6B;MACzB,OAAO,KAAP;IACH;EACJ;;EACD,OAAO,IAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASkB,yBAAT,CAAmCC,MAAnC,EAA2CC,KAA3C,EAAkDzF,KAAlD,EAAyD;EAC5D,IAAIA,KAAK,IAAI,IAAb,EAAmB;IACf;EACH;;EACD,IAAIwF,MAAM,CAACnD,OAAP,CAAerC,KAAf,IAAwB,CAA5B,EAA+B;IAC3B,MAAM,IAAIF,UAAJ,CAAgB,GAAEE,KAAM,mBAAkByF,KAAM,uBAAsBD,MAAO,qBAA7E,CAAN;EACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,uBAAT,CAAiCtE,CAAjC,EAAoCuE,YAApC,EAAkDC,SAAS,GAAG,CAA9D,EAAiEC,SAAS,GAAGC,QAA7E,EAAuF;EAC1FtF,MAAM,CAACoF,SAAS,IAAI,CAAd,CAAN;EACApF,MAAM,CAACqF,SAAS,IAAID,SAAd,CAAN;EACA,OAAQ1F,KAAK,CAACC,OAAN,CAAciB,CAAd,KAAoBA,CAAC,CAACF,MAAF,IAAY0E,SAAhC,IAA6CxE,CAAC,CAACF,MAAF,IAAY2E,SAAzD,IACJzE,CAAC,CAAC2E,KAAF,CAAQC,CAAC,IAAI,OAAOA,CAAP,KAAaL,YAA1B,CADJ;AAEH,C,CACD;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASM,qBAAT,CAA+BjG,KAA/B,EAAsC8B,IAAtC,EAA4C;EAC/C,IAAI5B,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAJ,EAA0B;IACtBJ,IAAI,CAACY,MAAL,CAAYR,KAAK,CAACkB,MAAN,GAAe,CAA3B,EAA8B,MAAO,GAAEY,IAAK,kCAA5C;IACA9B,KAAK,CAACkD,OAAN,CAAc,CAACgD,CAAD,EAAI7F,CAAJ,KAAU4F,qBAAqB,CAACC,CAAD,EAAK,WAAU7F,CAAC,GAAG,CAAE,OAAMyB,IAAK,EAAhC,CAA7C;EACH,CAHD,MAIK;IACDlC,IAAI,CAACY,MAAL,CAAY2F,MAAM,CAACC,SAAP,CAAiBpG,KAAjB,KAA2BA,KAAK,GAAG,CAA/C,EAAkD,MAAO,YAAW8B,IAAK,qCAAjB,GACnD,GAAEuE,sBAAsB,CAACrG,KAAD,CAAQ,GADrC;EAEH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASqG,sBAAT,CAAgCrG,KAAhC,EAAuC;EAC1C,IAAIA,KAAK,KAAK,IAAd,EAAoB;IAChB,OAAO,MAAP;EACH,CAFD,MAGK,IAAIE,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAJ,EAA0B;IAC3B,OAAO,MAAMA,KAAK,CAACsG,GAAN,CAAUJ,CAAC,IAAIG,sBAAsB,CAACH,CAAD,CAArC,EAA0CK,IAA1C,CAA+C,GAA/C,CAAN,GAA4D,GAAnE;EACH,CAFI,MAGA,IAAI,OAAOvG,KAAP,KAAiB,QAArB,EAA+B;IAChC,OAAQ,IAAGA,KAAM,GAAjB;EACH,CAFI,MAGA;IACD,OAAQ,GAAEA,KAAM,EAAhB;EACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASwG,QAAT,CAAkBC,CAAlB,EAAqBC,MAArB,EAA6BC,OAA7B,EAAsC;EACzC,IAAIC,QAAQ,GAAGD,OAAO,IAAI,IAAX,GAAkBA,OAAO,EAAzB,GAA8B/G,IAAI,CAACiH,GAAL,EAA7C;EACA,IAAIC,UAAJ;;EACA,MAAMC,EAAE,GAAG,CAAC,GAAGC,IAAJ,KAAa;IACpB,MAAMH,GAAG,GAAGF,OAAO,IAAI,IAAX,GAAkBA,OAAO,EAAzB,GAA8B/G,IAAI,CAACiH,GAAL,EAA1C;;IACA,IAAIA,GAAG,GAAGD,QAAN,GAAiBF,MAArB,EAA6B;MACzB,OAAOI,UAAP;IACH;;IACDF,QAAQ,GAAGC,GAAX;IACAC,UAAU,GAAGL,CAAC,CAAC,GAAGO,IAAJ,CAAd;IACA,OAAOF,UAAP;EACH,CARD;;EASA,OAAOC,EAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,0BAAT,CAAoCC,cAApC,EAAoD;EACvD,IAAIA,cAAc,KAAK,MAAvB,EAA+B;IAC3B,OAAO,MAAP;EACH;;EACD,IAAIA,cAAc,KAAK,QAAvB,EAAiC;IAC7B,OAAO,QAAP;EACH;;EACD,IAAIA,cAAc,KAAK,KAAvB,EAA8B;IAC1B,OAAO,KAAP;EACH;;EACD,OAAO,IAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,2BAAT,CAAqC,GAAGC,aAAxC,EAAuD;EAC1D5G,MAAM,CAAC4G,aAAa,CAAClG,MAAd,GAAuB,CAAxB,EAA2B,wBAA3B,CAAN;;EACA,KAAK,MAAMsE,MAAX,IAAqB4B,aAArB,EAAoC;IAChC5G,MAAM,CAACN,KAAK,CAACC,OAAN,CAAcqF,MAAd,CAAD,EAAwB,mCAAxB,CAAN;IACAhF,MAAM,CAACgF,MAAM,CAACtE,MAAP,GAAgB,CAAjB,EAAoB,4BAApB,CAAN;EACH;;EACD,OAAOkG,aAAa,CAACC,MAAd,CAAqB,CAACC,QAAD,EAAW9B,MAAX,KAAsB;IAC9C,IAAI8B,QAAQ,CAACpG,MAAT,KAAoB,CAAxB,EAA2B;MACvB,OAAOsE,MAAM,CAACc,GAAP,CAAWtG,KAAK,IAAI,CAACA,KAAD,CAApB,CAAP;IACH;;IACD,OAAOwF,MAAM,CACRc,GADE,CACEtG,KAAK,IAAI;MACd,OAAOsH,QAAQ,CAAChB,GAAT,CAAciB,SAAD,IAAe,CAAC,GAAGA,SAAJ,EAAevH,KAAf,CAA5B,CAAP;IACH,CAHM,EAIFqH,MAJE,CAIK,CAACG,gBAAD,EAAmBC,kBAAnB,KAA0C;MAClD,OAAOD,gBAAgB,CAAClH,MAAjB,CAAwBmH,kBAAxB,CAAP;IACH,CANM,EAMJ,EANI,CAAP;EAOH,CAXM,EAWJ,EAXI,CAAP;AAYH"},"metadata":{},"sourceType":"module"}