{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { isPromise } from '../util';\nexport const OP_SCOPE_SUFFIX = '__op';\n/**\n * Used for wrapping functions that perform math operations on\n * Tensors. The function will be wrapped in a named scope that cleans all\n * memory usage after the function is done.\n */\n\nexport function op(f) {\n  const keys = Object.keys(f);\n\n  if (keys.length !== 1) {\n    throw new Error(`Please provide an object with a single key ` + `(operation name) mapping to a function. Got an object with ` + `${keys.length} keys.`);\n  }\n\n  let opName = keys[0];\n  const fn = f[opName]; // Strip the underscore from the end of the function name.\n\n  if (opName.endsWith('_')) {\n    opName = opName.substring(0, opName.length - 1);\n  } // add an __op suffix to distinguish ops from kernels in tf.profile\n\n\n  opName = opName + OP_SCOPE_SUFFIX; // tslint:disable-next-line:no-any\n\n  const f2 = (...args) => {\n    ENGINE.startScope(opName);\n\n    try {\n      const result = fn(...args);\n\n      if (isPromise(result)) {\n        console.error('Cannot return a Promise inside of tidy.');\n      }\n\n      ENGINE.endScope(result);\n      return result;\n    } catch (ex) {\n      ENGINE.endScope(null);\n      throw ex;\n    }\n  };\n\n  Object.defineProperty(f2, 'name', {\n    value: opName,\n    configurable: true\n  }); // tslint:disable-next-line:no-any\n\n  return f2;\n}","map":{"version":3,"names":["ENGINE","isPromise","OP_SCOPE_SUFFIX","op","f","keys","Object","length","Error","opName","fn","endsWith","substring","f2","args","startScope","result","console","error","endScope","ex","defineProperty","value","configurable"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { isPromise } from '../util';\nexport const OP_SCOPE_SUFFIX = '__op';\n/**\n * Used for wrapping functions that perform math operations on\n * Tensors. The function will be wrapped in a named scope that cleans all\n * memory usage after the function is done.\n */\nexport function op(f) {\n    const keys = Object.keys(f);\n    if (keys.length !== 1) {\n        throw new Error(`Please provide an object with a single key ` +\n            `(operation name) mapping to a function. Got an object with ` +\n            `${keys.length} keys.`);\n    }\n    let opName = keys[0];\n    const fn = f[opName];\n    // Strip the underscore from the end of the function name.\n    if (opName.endsWith('_')) {\n        opName = opName.substring(0, opName.length - 1);\n    }\n    // add an __op suffix to distinguish ops from kernels in tf.profile\n    opName = opName + OP_SCOPE_SUFFIX;\n    // tslint:disable-next-line:no-any\n    const f2 = (...args) => {\n        ENGINE.startScope(opName);\n        try {\n            const result = fn(...args);\n            if (isPromise(result)) {\n                console.error('Cannot return a Promise inside of tidy.');\n            }\n            ENGINE.endScope(result);\n            return result;\n        }\n        catch (ex) {\n            ENGINE.endScope(null);\n            throw ex;\n        }\n    };\n    Object.defineProperty(f2, 'name', { value: opName, configurable: true });\n    // tslint:disable-next-line:no-any\n    return f2;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,WAAvB;AACA,SAASC,SAAT,QAA0B,SAA1B;AACA,OAAO,MAAMC,eAAe,GAAG,MAAxB;AACP;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,EAAT,CAAYC,CAAZ,EAAe;EAClB,MAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,CAAZ,CAAb;;EACA,IAAIC,IAAI,CAACE,MAAL,KAAgB,CAApB,EAAuB;IACnB,MAAM,IAAIC,KAAJ,CAAW,6CAAD,GACX,6DADW,GAEX,GAAEH,IAAI,CAACE,MAAO,QAFb,CAAN;EAGH;;EACD,IAAIE,MAAM,GAAGJ,IAAI,CAAC,CAAD,CAAjB;EACA,MAAMK,EAAE,GAAGN,CAAC,CAACK,MAAD,CAAZ,CARkB,CASlB;;EACA,IAAIA,MAAM,CAACE,QAAP,CAAgB,GAAhB,CAAJ,EAA0B;IACtBF,MAAM,GAAGA,MAAM,CAACG,SAAP,CAAiB,CAAjB,EAAoBH,MAAM,CAACF,MAAP,GAAgB,CAApC,CAAT;EACH,CAZiB,CAalB;;;EACAE,MAAM,GAAGA,MAAM,GAAGP,eAAlB,CAdkB,CAelB;;EACA,MAAMW,EAAE,GAAG,CAAC,GAAGC,IAAJ,KAAa;IACpBd,MAAM,CAACe,UAAP,CAAkBN,MAAlB;;IACA,IAAI;MACA,MAAMO,MAAM,GAAGN,EAAE,CAAC,GAAGI,IAAJ,CAAjB;;MACA,IAAIb,SAAS,CAACe,MAAD,CAAb,EAAuB;QACnBC,OAAO,CAACC,KAAR,CAAc,yCAAd;MACH;;MACDlB,MAAM,CAACmB,QAAP,CAAgBH,MAAhB;MACA,OAAOA,MAAP;IACH,CAPD,CAQA,OAAOI,EAAP,EAAW;MACPpB,MAAM,CAACmB,QAAP,CAAgB,IAAhB;MACA,MAAMC,EAAN;IACH;EACJ,CAdD;;EAeAd,MAAM,CAACe,cAAP,CAAsBR,EAAtB,EAA0B,MAA1B,EAAkC;IAAES,KAAK,EAAEb,MAAT;IAAiBc,YAAY,EAAE;EAA/B,CAAlC,EA/BkB,CAgClB;;EACA,OAAOV,EAAP;AACH"},"metadata":{},"sourceType":"module"}