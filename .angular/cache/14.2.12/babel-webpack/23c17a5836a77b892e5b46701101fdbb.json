{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class SelectProgram {\n  constructor(cRank, shape, rank) {\n    this.variableNames = ['c', 'a', 'b'];\n    this.outputShape = shape;\n    let cCoords;\n    let abCoords;\n\n    if (rank > 4) {\n      throw Error(`Where for rank ${rank} is not yet supported`);\n    }\n\n    if (rank === 1) {\n      abCoords = `resRC`;\n      cCoords = `resRC`;\n    } else {\n      const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n      const cCoordVars = [];\n      const abCoordVars = [];\n\n      for (let i = 0; i < shape.length; i++) {\n        abCoordVars.push(`${currentCoords[i]}`);\n\n        if (i < cRank) {\n          cCoordVars.push(`${currentCoords[i]}`);\n        }\n      }\n\n      cCoords = cCoordVars.join();\n      abCoords = abCoordVars.join();\n    }\n\n    const dtype = getCoordsDataType(rank);\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        float cVal = getC(${cCoords});\n        if (cVal >= 1.0) {\n          setOutput(getA(${abCoords}));\n        } else {\n          setOutput(getB(${abCoords}));\n        }\n      }\n    `;\n  }\n\n}","map":{"version":3,"names":["getCoordsDataType","SelectProgram","constructor","cRank","shape","rank","variableNames","outputShape","cCoords","abCoords","Error","currentCoords","cCoordVars","abCoordVars","i","length","push","join","dtype","userCode"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/select_gpu.js"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class SelectProgram {\n    constructor(cRank, shape, rank) {\n        this.variableNames = ['c', 'a', 'b'];\n        this.outputShape = shape;\n        let cCoords;\n        let abCoords;\n        if (rank > 4) {\n            throw Error(`Where for rank ${rank} is not yet supported`);\n        }\n        if (rank === 1) {\n            abCoords = `resRC`;\n            cCoords = `resRC`;\n        }\n        else {\n            const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n            const cCoordVars = [];\n            const abCoordVars = [];\n            for (let i = 0; i < shape.length; i++) {\n                abCoordVars.push(`${currentCoords[i]}`);\n                if (i < cRank) {\n                    cCoordVars.push(`${currentCoords[i]}`);\n                }\n            }\n            cCoords = cCoordVars.join();\n            abCoords = abCoordVars.join();\n        }\n        const dtype = getCoordsDataType(rank);\n        this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        float cVal = getC(${cCoords});\n        if (cVal >= 1.0) {\n          setOutput(getA(${abCoords}));\n        } else {\n          setOutput(getB(${abCoords}));\n        }\n      }\n    `;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,iBAAT,QAAkC,mBAAlC;AACA,OAAO,MAAMC,aAAN,CAAoB;EACvBC,WAAW,CAACC,KAAD,EAAQC,KAAR,EAAeC,IAAf,EAAqB;IAC5B,KAAKC,aAAL,GAAqB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAArB;IACA,KAAKC,WAAL,GAAmBH,KAAnB;IACA,IAAII,OAAJ;IACA,IAAIC,QAAJ;;IACA,IAAIJ,IAAI,GAAG,CAAX,EAAc;MACV,MAAMK,KAAK,CAAE,kBAAiBL,IAAK,uBAAxB,CAAX;IACH;;IACD,IAAIA,IAAI,KAAK,CAAb,EAAgB;MACZI,QAAQ,GAAI,OAAZ;MACAD,OAAO,GAAI,OAAX;IACH,CAHD,MAIK;MACD,MAAMG,aAAa,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,CAAtB;MACA,MAAMC,UAAU,GAAG,EAAnB;MACA,MAAMC,WAAW,GAAG,EAApB;;MACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,KAAK,CAACW,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;QACnCD,WAAW,CAACG,IAAZ,CAAkB,GAAEL,aAAa,CAACG,CAAD,CAAI,EAArC;;QACA,IAAIA,CAAC,GAAGX,KAAR,EAAe;UACXS,UAAU,CAACI,IAAX,CAAiB,GAAEL,aAAa,CAACG,CAAD,CAAI,EAApC;QACH;MACJ;;MACDN,OAAO,GAAGI,UAAU,CAACK,IAAX,EAAV;MACAR,QAAQ,GAAGI,WAAW,CAACI,IAAZ,EAAX;IACH;;IACD,MAAMC,KAAK,GAAGlB,iBAAiB,CAACK,IAAD,CAA/B;IACA,KAAKc,QAAL,GAAiB;AACzB;AACA,UAAUD,KAAM;AAChB,4BAA4BV,OAAQ;AACpC;AACA,2BAA2BC,QAAS;AACpC;AACA,2BAA2BA,QAAS;AACpC;AACA;AACA,KAVQ;EAWH;;AAtCsB"},"metadata":{},"sourceType":"module"}