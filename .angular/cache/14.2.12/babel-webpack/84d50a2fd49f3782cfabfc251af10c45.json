{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Select, upcastType, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function select(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    condition,\n    t,\n    e\n  } = inputs;\n  assertNotComplex([condition, t, e], 'select');\n  const conditionRank = condition.shape.length;\n  const values = backend.data.get(condition.dataId).values;\n  const tValues = backend.data.get(t.dataId).values;\n  const eValues = backend.data.get(e.dataId).values;\n  const resultDtype = upcastType(t.dtype, e.dtype);\n  const newValues = util.makeZerosTypedArray(util.sizeFromShape(t.shape), resultDtype);\n  let index = 0;\n  const offset = conditionRank === 0 || conditionRank > 1 || t.shape.length === 1 ? 1 : util.sizeFromShape(t.shape.slice(1));\n\n  for (let i = 0; i < values.length; i++) {\n    for (let j = 0; j < offset; j++) {\n      if (values[i] === 1) {\n        newValues[index++] = tValues[i];\n      } else {\n        newValues[index++] = eValues[i];\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(t.shape, resultDtype, newValues);\n}\nexport const selectConfig = {\n  kernelName: Select,\n  backendName: 'cpu',\n  kernelFunc: select\n};","map":{"version":3,"names":["Select","upcastType","util","assertNotComplex","select","args","inputs","backend","condition","t","e","conditionRank","shape","length","values","data","get","dataId","tValues","eValues","resultDtype","dtype","newValues","makeZerosTypedArray","sizeFromShape","index","offset","slice","i","j","makeTensorInfo","selectConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Select.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Select, upcastType, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function select(args) {\n    const { inputs, backend } = args;\n    const { condition, t, e } = inputs;\n    assertNotComplex([condition, t, e], 'select');\n    const conditionRank = condition.shape.length;\n    const values = backend.data.get(condition.dataId).values;\n    const tValues = backend.data.get(t.dataId).values;\n    const eValues = backend.data.get(e.dataId).values;\n    const resultDtype = upcastType(t.dtype, e.dtype);\n    const newValues = util.makeZerosTypedArray(util.sizeFromShape(t.shape), resultDtype);\n    let index = 0;\n    const offset = conditionRank === 0 || conditionRank > 1 || t.shape.length === 1 ?\n        1 :\n        util.sizeFromShape(t.shape.slice(1));\n    for (let i = 0; i < values.length; i++) {\n        for (let j = 0; j < offset; j++) {\n            if (values[i] === 1) {\n                newValues[index++] = tValues[i];\n            }\n            else {\n                newValues[index++] = eValues[i];\n            }\n        }\n    }\n    return backend.makeTensorInfo(t.shape, resultDtype, newValues);\n}\nexport const selectConfig = {\n    kernelName: Select,\n    backendName: 'cpu',\n    kernelFunc: select\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,EAAiBC,UAAjB,EAA6BC,IAA7B,QAAyC,uBAAzC;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,OAAO,SAASC,MAAT,CAAgBC,IAAhB,EAAsB;EACzB,MAAM;IAAEC,MAAF;IAAUC;EAAV,IAAsBF,IAA5B;EACA,MAAM;IAAEG,SAAF;IAAaC,CAAb;IAAgBC;EAAhB,IAAsBJ,MAA5B;EACAH,gBAAgB,CAAC,CAACK,SAAD,EAAYC,CAAZ,EAAeC,CAAf,CAAD,EAAoB,QAApB,CAAhB;EACA,MAAMC,aAAa,GAAGH,SAAS,CAACI,KAAV,CAAgBC,MAAtC;EACA,MAAMC,MAAM,GAAGP,OAAO,CAACQ,IAAR,CAAaC,GAAb,CAAiBR,SAAS,CAACS,MAA3B,EAAmCH,MAAlD;EACA,MAAMI,OAAO,GAAGX,OAAO,CAACQ,IAAR,CAAaC,GAAb,CAAiBP,CAAC,CAACQ,MAAnB,EAA2BH,MAA3C;EACA,MAAMK,OAAO,GAAGZ,OAAO,CAACQ,IAAR,CAAaC,GAAb,CAAiBN,CAAC,CAACO,MAAnB,EAA2BH,MAA3C;EACA,MAAMM,WAAW,GAAGnB,UAAU,CAACQ,CAAC,CAACY,KAAH,EAAUX,CAAC,CAACW,KAAZ,CAA9B;EACA,MAAMC,SAAS,GAAGpB,IAAI,CAACqB,mBAAL,CAAyBrB,IAAI,CAACsB,aAAL,CAAmBf,CAAC,CAACG,KAArB,CAAzB,EAAsDQ,WAAtD,CAAlB;EACA,IAAIK,KAAK,GAAG,CAAZ;EACA,MAAMC,MAAM,GAAGf,aAAa,KAAK,CAAlB,IAAuBA,aAAa,GAAG,CAAvC,IAA4CF,CAAC,CAACG,KAAF,CAAQC,MAAR,KAAmB,CAA/D,GACX,CADW,GAEXX,IAAI,CAACsB,aAAL,CAAmBf,CAAC,CAACG,KAAF,CAAQe,KAAR,CAAc,CAAd,CAAnB,CAFJ;;EAGA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,MAAM,CAACD,MAA3B,EAAmCe,CAAC,EAApC,EAAwC;IACpC,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAApB,EAA4BG,CAAC,EAA7B,EAAiC;MAC7B,IAAIf,MAAM,CAACc,CAAD,CAAN,KAAc,CAAlB,EAAqB;QACjBN,SAAS,CAACG,KAAK,EAAN,CAAT,GAAqBP,OAAO,CAACU,CAAD,CAA5B;MACH,CAFD,MAGK;QACDN,SAAS,CAACG,KAAK,EAAN,CAAT,GAAqBN,OAAO,CAACS,CAAD,CAA5B;MACH;IACJ;EACJ;;EACD,OAAOrB,OAAO,CAACuB,cAAR,CAAuBrB,CAAC,CAACG,KAAzB,EAAgCQ,WAAhC,EAA6CE,SAA7C,CAAP;AACH;AACD,OAAO,MAAMS,YAAY,GAAG;EACxBC,UAAU,EAAEhC,MADY;EAExBiC,WAAW,EAAE,KAFW;EAGxBC,UAAU,EAAE9B;AAHY,CAArB"},"metadata":{},"sourceType":"module"}