{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { getGlslDifferences } from './glsl_version';\nimport * as tex_util from './tex_util';\nimport * as webgl_util from './webgl_util';\nexport function createVertexShader(gl) {\n  const glsl = getGlslDifferences();\n  const vertexShaderSource = `${glsl.version}\n    precision highp float;\n    ${glsl.attribute} vec3 clipSpacePos;\n    ${glsl.attribute} vec2 uv;\n    ${glsl.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`;\n  return webgl_util.createVertexShader(gl, vertexShaderSource);\n}\nexport function createVertexBuffer(gl) {\n  // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]\n  const vertexArray = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n  return webgl_util.createStaticVertexBuffer(gl, vertexArray);\n}\nexport function createIndexBuffer(gl) {\n  // OpenGL (and WebGL) have \"CCW == front\" winding\n  const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n  return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);\n}\n\nfunction createAndConfigureTexture(gl, width, height, internalFormat, textureFormat, textureType) {\n  webgl_util.validateTextureSize(width, height);\n  const texture = webgl_util.createTexture(gl);\n  const tex2d = gl.TEXTURE_2D;\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(tex2d, texture));\n  webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));\n  webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));\n\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    webgl_util.callAndCheck(gl, () => gl.texImage2D(tex2d, 0, internalFormat, width, height, 0, textureFormat, textureType, null));\n  } else {\n    webgl_util.callAndCheck(gl, () => gl.texStorage2D(tex2d, 1, internalFormat, width, height));\n  }\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n  return {\n    texture,\n    texShape: [height, width]\n  };\n}\n\nexport function getInternalFormatForFloat32MatrixTexture(textureConfig) {\n  return textureConfig.internalFormatFloat;\n}\nexport function createFloat32MatrixTexture(gl, rows, columns, textureConfig) {\n  const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat32MatrixTexture(textureConfig), textureConfig.textureFormatFloat, gl.FLOAT);\n}\nexport function getInternalFormatForFloat16MatrixTexture(textureConfig) {\n  return textureConfig.internalFormatHalfFloat;\n}\nexport function createFloat16MatrixTexture(gl, rows, columns, textureConfig) {\n  const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16MatrixTexture(textureConfig), textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);\n}\nexport function getInternalFormatForUnsignedBytesMatrixTexture(textureConfig) {\n  return textureConfig.downloadTextureFormat;\n}\nexport function createUnsignedBytesMatrixTexture(gl, rows, columns, textureConfig) {\n  const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(gl, width, height, getInternalFormatForUnsignedBytesMatrixTexture(textureConfig), gl.RGBA, gl.UNSIGNED_BYTE);\n}\nexport function getInternalFormatForPackedMatrixTexture(textureConfig) {\n  return textureConfig.internalFormatPackedFloat;\n}\nexport function createPackedMatrixTexture(gl, rows, columns, textureConfig) {\n  const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(gl, width, height, getInternalFormatForPackedMatrixTexture(textureConfig), gl.RGBA, gl.FLOAT);\n}\nexport function getInternalFormatForFloat16PackedMatrixTexture(textureConfig) {\n  return textureConfig.internalFormatPackedHalfFloat;\n}\nexport function createFloat16PackedMatrixTexture(gl, rows, columns, textureConfig) {\n  const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16PackedMatrixTexture(textureConfig), gl.RGBA, textureConfig.textureTypeHalfFloat);\n}\nexport function bindVertexProgramAttributeStreams(gl, program, vertexBuffer) {\n  const posOffset = 0; // x is the first buffer element\n\n  const uvOffset = 3 * 4; // uv comes after [x y z]\n\n  const stride = 3 * 4 + 2 * 4; // xyz + uv, each entry is 4-byte float.\n\n  webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));\n  const success = webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n  return success && webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\nexport function uploadDenseMatrixToTexture(gl, texture, width, height, data, textureConfig) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n  let dataForUpload, texelDataType, internalFormat;\n\n  if (data instanceof Uint8Array) {\n    dataForUpload = new Uint8Array(width * height * 4);\n    texelDataType = gl.UNSIGNED_BYTE;\n    internalFormat = gl.RGBA;\n  } else {\n    dataForUpload = new Float32Array(width * height * 4);\n    texelDataType = gl.FLOAT;\n    internalFormat = textureConfig.internalFormatPackedFloat;\n  }\n\n  dataForUpload.set(data);\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    webgl_util.callAndCheck(gl, () => gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height, gl.RGBA, texelDataType, dataForUpload));\n  } else {\n    webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA, texelDataType, dataForUpload));\n  }\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\nexport function uploadPixelDataToTexture(gl, texture, pixels) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n\n  if (pixels.data instanceof Uint8Array) {\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      webgl_util.callAndCheck(gl, () => gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, pixels.width, pixels.height, gl.RGBA, gl.UNSIGNED_BYTE, pixels.data));\n    } else {\n      webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels.data));\n    }\n  } else {\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      webgl_util.callAndCheck(gl, () => gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels));\n    } else {\n      webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, pixels));\n    }\n  }\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\nexport function createBufferFromOutputTexture(gl2, rows, columns, textureConfig) {\n  // Create and bind the buffer.\n  const buffer = gl2.createBuffer();\n  webgl_util.callAndCheck(gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer)); // Initialize the buffer to the size of the texture in bytes.\n\n  const bytesPerFloat = 4;\n  const valuesPerTexel = 4;\n  const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;\n  webgl_util.callAndCheck(gl2, () => gl2.bufferData(gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ)); // Enqueue a command on the GPU command queue to copy of texture into the\n  // buffer.\n\n  webgl_util.callAndCheck(gl2, () => gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));\n  webgl_util.callAndCheck(gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));\n  return buffer;\n}\nexport function downloadFloat32MatrixFromBuffer(gl, buffer, size) {\n  const gl2 = gl;\n  const downloadTarget = new Float32Array(size);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n  return downloadTarget;\n}\nexport function downloadByteEncodedFloatMatrixFromOutputTexture(gl, rows, columns, textureConfig) {\n  const [w, h] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  const numChannels = 4;\n  const downloadTarget = new Uint8Array(tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));\n  webgl_util.callAndCheck(gl, () => gl.readPixels(0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE, downloadTarget)); // By wrapping the buffer in a Float32Array, we use native browser IEEE 754\n  // decoding of the 4 bytes that back each 32 bit float.\n\n  return new Float32Array(downloadTarget.buffer);\n}\nexport function downloadPackedMatrixFromBuffer(gl, buffer, batch, rows, cols, physicalRows, physicalCols, textureConfig) {\n  const gl2 = gl;\n  const downloadTarget = new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(physicalRows, physicalCols));\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n  return downloadTarget;\n}\nexport function downloadMatrixFromPackedOutputTexture(gl, physicalRows, physicalCols) {\n  const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);\n  webgl_util.callAndCheck(gl, () => gl.readPixels(0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));\n  return packedRGBA;\n}","map":{"version":3,"names":["env","getGlslDifferences","tex_util","webgl_util","createVertexShader","gl","glsl","vertexShaderSource","version","attribute","varyingVs","createVertexBuffer","vertexArray","Float32Array","createStaticVertexBuffer","createIndexBuffer","triangleVertexIndices","Uint16Array","createStaticIndexBuffer","createAndConfigureTexture","width","height","internalFormat","textureFormat","textureType","validateTextureSize","texture","createTexture","tex2d","TEXTURE_2D","callAndCheck","bindTexture","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","getNumber","texImage2D","texStorage2D","texShape","getInternalFormatForFloat32MatrixTexture","textureConfig","internalFormatFloat","createFloat32MatrixTexture","rows","columns","getUnpackedMatrixTextureShapeWidthHeight","textureFormatFloat","FLOAT","getInternalFormatForFloat16MatrixTexture","internalFormatHalfFloat","createFloat16MatrixTexture","textureTypeHalfFloat","getInternalFormatForUnsignedBytesMatrixTexture","downloadTextureFormat","createUnsignedBytesMatrixTexture","RGBA","UNSIGNED_BYTE","getInternalFormatForPackedMatrixTexture","internalFormatPackedFloat","createPackedMatrixTexture","getPackedMatrixTextureShapeWidthHeight","getInternalFormatForFloat16PackedMatrixTexture","internalFormatPackedHalfFloat","createFloat16PackedMatrixTexture","bindVertexProgramAttributeStreams","program","vertexBuffer","posOffset","uvOffset","stride","bindBuffer","ARRAY_BUFFER","success","bindVertexBufferToProgramAttribute","uploadDenseMatrixToTexture","data","dataForUpload","texelDataType","Uint8Array","set","texSubImage2D","uploadPixelDataToTexture","pixels","createBufferFromOutputTexture","gl2","buffer","createBuffer","PIXEL_PACK_BUFFER","bytesPerFloat","valuesPerTexel","bufferSizeBytes","bufferData","STREAM_READ","readPixels","downloadFloat32MatrixFromBuffer","size","downloadTarget","getBufferSubData","downloadByteEncodedFloatMatrixFromOutputTexture","w","h","numChannels","getUnpackedArraySizeFromMatrixSize","downloadPackedMatrixFromBuffer","batch","cols","physicalRows","physicalCols","getPackedRGBAArraySizeFromMatrixShape","downloadMatrixFromPackedOutputTexture","packedRGBA"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_util.js"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { getGlslDifferences } from './glsl_version';\nimport * as tex_util from './tex_util';\nimport * as webgl_util from './webgl_util';\nexport function createVertexShader(gl) {\n    const glsl = getGlslDifferences();\n    const vertexShaderSource = `${glsl.version}\n    precision highp float;\n    ${glsl.attribute} vec3 clipSpacePos;\n    ${glsl.attribute} vec2 uv;\n    ${glsl.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`;\n    return webgl_util.createVertexShader(gl, vertexShaderSource);\n}\nexport function createVertexBuffer(gl) {\n    // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]\n    const vertexArray = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n    return webgl_util.createStaticVertexBuffer(gl, vertexArray);\n}\nexport function createIndexBuffer(gl) {\n    // OpenGL (and WebGL) have \"CCW == front\" winding\n    const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n    return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);\n}\nfunction createAndConfigureTexture(gl, width, height, internalFormat, textureFormat, textureType) {\n    webgl_util.validateTextureSize(width, height);\n    const texture = webgl_util.createTexture(gl);\n    const tex2d = gl.TEXTURE_2D;\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(tex2d, texture));\n    webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));\n    webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));\n    webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));\n    webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n        webgl_util.callAndCheck(gl, () => gl.texImage2D(tex2d, 0, internalFormat, width, height, 0, textureFormat, textureType, null));\n    }\n    else {\n        webgl_util.callAndCheck(gl, () => gl\n            .texStorage2D(tex2d, 1, internalFormat, width, height));\n    }\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n    return { texture, texShape: [height, width] };\n}\nexport function getInternalFormatForFloat32MatrixTexture(textureConfig) {\n    return textureConfig.internalFormatFloat;\n}\nexport function createFloat32MatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat32MatrixTexture(textureConfig), textureConfig.textureFormatFloat, gl.FLOAT);\n}\nexport function getInternalFormatForFloat16MatrixTexture(textureConfig) {\n    return textureConfig.internalFormatHalfFloat;\n}\nexport function createFloat16MatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16MatrixTexture(textureConfig), textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);\n}\nexport function getInternalFormatForUnsignedBytesMatrixTexture(textureConfig) {\n    return textureConfig.downloadTextureFormat;\n}\nexport function createUnsignedBytesMatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForUnsignedBytesMatrixTexture(textureConfig), gl.RGBA, gl.UNSIGNED_BYTE);\n}\nexport function getInternalFormatForPackedMatrixTexture(textureConfig) {\n    return textureConfig.internalFormatPackedFloat;\n}\nexport function createPackedMatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForPackedMatrixTexture(textureConfig), gl.RGBA, gl.FLOAT);\n}\nexport function getInternalFormatForFloat16PackedMatrixTexture(textureConfig) {\n    return textureConfig.internalFormatPackedHalfFloat;\n}\nexport function createFloat16PackedMatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16PackedMatrixTexture(textureConfig), gl.RGBA, textureConfig.textureTypeHalfFloat);\n}\nexport function bindVertexProgramAttributeStreams(gl, program, vertexBuffer) {\n    const posOffset = 0; // x is the first buffer element\n    const uvOffset = 3 * 4; // uv comes after [x y z]\n    const stride = (3 * 4) + (2 * 4); // xyz + uv, each entry is 4-byte float.\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));\n    const success = webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n    return success &&\n        webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\nexport function uploadDenseMatrixToTexture(gl, texture, width, height, data, textureConfig) {\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n    let dataForUpload, texelDataType, internalFormat;\n    if (data instanceof Uint8Array) {\n        dataForUpload = new Uint8Array(width * height * 4);\n        texelDataType = gl.UNSIGNED_BYTE;\n        internalFormat = gl.RGBA;\n    }\n    else {\n        dataForUpload = new Float32Array(width * height * 4);\n        texelDataType = gl.FLOAT;\n        internalFormat = textureConfig.internalFormatPackedFloat;\n    }\n    dataForUpload.set(data);\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n        webgl_util.callAndCheck(gl, () => gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height, gl.RGBA, texelDataType, dataForUpload));\n    }\n    else {\n        webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA, texelDataType, dataForUpload));\n    }\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\nexport function uploadPixelDataToTexture(gl, texture, pixels) {\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n    if (pixels.data instanceof Uint8Array) {\n        if (env().getNumber('WEBGL_VERSION') === 2) {\n            webgl_util.callAndCheck(gl, () => gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, pixels.width, pixels.height, gl.RGBA, gl.UNSIGNED_BYTE, pixels.data));\n        }\n        else {\n            webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels.data));\n        }\n    }\n    else {\n        if (env().getNumber('WEBGL_VERSION') === 2) {\n            webgl_util.callAndCheck(gl, () => gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels));\n        }\n        else {\n            webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, pixels));\n        }\n    }\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\nexport function createBufferFromOutputTexture(gl2, rows, columns, textureConfig) {\n    // Create and bind the buffer.\n    const buffer = gl2.createBuffer();\n    webgl_util.callAndCheck(gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer));\n    // Initialize the buffer to the size of the texture in bytes.\n    const bytesPerFloat = 4;\n    const valuesPerTexel = 4;\n    const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;\n    webgl_util.callAndCheck(gl2, () => gl2.bufferData(gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ));\n    // Enqueue a command on the GPU command queue to copy of texture into the\n    // buffer.\n    webgl_util.callAndCheck(gl2, () => gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));\n    webgl_util.callAndCheck(gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));\n    return buffer;\n}\nexport function downloadFloat32MatrixFromBuffer(gl, buffer, size) {\n    const gl2 = gl;\n    const downloadTarget = new Float32Array(size);\n    gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n    gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n    gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n    return downloadTarget;\n}\nexport function downloadByteEncodedFloatMatrixFromOutputTexture(gl, rows, columns, textureConfig) {\n    const [w, h] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n    const numChannels = 4;\n    const downloadTarget = new Uint8Array(tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));\n    webgl_util.callAndCheck(gl, () => gl.readPixels(0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE, downloadTarget));\n    // By wrapping the buffer in a Float32Array, we use native browser IEEE 754\n    // decoding of the 4 bytes that back each 32 bit float.\n    return new Float32Array(downloadTarget.buffer);\n}\nexport function downloadPackedMatrixFromBuffer(gl, buffer, batch, rows, cols, physicalRows, physicalCols, textureConfig) {\n    const gl2 = gl;\n    const downloadTarget = new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(physicalRows, physicalCols));\n    gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n    gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n    gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n    return downloadTarget;\n}\nexport function downloadMatrixFromPackedOutputTexture(gl, physicalRows, physicalCols) {\n    const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);\n    webgl_util.callAndCheck(gl, () => gl.readPixels(0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));\n    return packedRGBA;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}