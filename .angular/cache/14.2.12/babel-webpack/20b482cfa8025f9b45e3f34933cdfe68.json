{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { RingBuffer } from './ring_buffer';\nexport class GrowingRingBuffer extends RingBuffer {\n  /**\n   * Constructs a `GrowingRingBuffer`.\n   */\n  constructor() {\n    super(GrowingRingBuffer.INITIAL_CAPACITY);\n  }\n\n  isFull() {\n    return false;\n  }\n\n  push(value) {\n    if (super.isFull()) {\n      this.expand();\n    }\n\n    super.push(value);\n  }\n\n  unshift(value) {\n    if (super.isFull()) {\n      this.expand();\n    }\n\n    super.unshift(value);\n  }\n  /**\n   * Doubles the capacity of the buffer.\n   */\n\n\n  expand() {\n    const newCapacity = this.capacity * 2;\n    const newData = new Array(newCapacity);\n    const len = this.length(); // Rotate the buffer to start at index 0 again, since we can't just\n    // allocate more space at the end.\n\n    for (let i = 0; i < len; i++) {\n      newData[i] = this.get(this.wrap(this.begin + i));\n    }\n\n    this.data = newData;\n    this.capacity = newCapacity;\n    this.doubledCapacity = 2 * this.capacity;\n    this.begin = 0;\n    this.end = len;\n  }\n\n}\nGrowingRingBuffer.INITIAL_CAPACITY = 32;","map":{"version":3,"names":["RingBuffer","GrowingRingBuffer","constructor","INITIAL_CAPACITY","isFull","push","value","expand","unshift","newCapacity","capacity","newData","Array","len","length","i","get","wrap","begin","data","doubledCapacity","end"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-data/dist/util/growing_ring_buffer.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { RingBuffer } from './ring_buffer';\nexport class GrowingRingBuffer extends RingBuffer {\n    /**\n     * Constructs a `GrowingRingBuffer`.\n     */\n    constructor() {\n        super(GrowingRingBuffer.INITIAL_CAPACITY);\n    }\n    isFull() {\n        return false;\n    }\n    push(value) {\n        if (super.isFull()) {\n            this.expand();\n        }\n        super.push(value);\n    }\n    unshift(value) {\n        if (super.isFull()) {\n            this.expand();\n        }\n        super.unshift(value);\n    }\n    /**\n     * Doubles the capacity of the buffer.\n     */\n    expand() {\n        const newCapacity = this.capacity * 2;\n        const newData = new Array(newCapacity);\n        const len = this.length();\n        // Rotate the buffer to start at index 0 again, since we can't just\n        // allocate more space at the end.\n        for (let i = 0; i < len; i++) {\n            newData[i] = this.get(this.wrap(this.begin + i));\n        }\n        this.data = newData;\n        this.capacity = newCapacity;\n        this.doubledCapacity = 2 * this.capacity;\n        this.begin = 0;\n        this.end = len;\n    }\n}\nGrowingRingBuffer.INITIAL_CAPACITY = 32;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAT,QAA2B,eAA3B;AACA,OAAO,MAAMC,iBAAN,SAAgCD,UAAhC,CAA2C;EAC9C;AACJ;AACA;EACIE,WAAW,GAAG;IACV,MAAMD,iBAAiB,CAACE,gBAAxB;EACH;;EACDC,MAAM,GAAG;IACL,OAAO,KAAP;EACH;;EACDC,IAAI,CAACC,KAAD,EAAQ;IACR,IAAI,MAAMF,MAAN,EAAJ,EAAoB;MAChB,KAAKG,MAAL;IACH;;IACD,MAAMF,IAAN,CAAWC,KAAX;EACH;;EACDE,OAAO,CAACF,KAAD,EAAQ;IACX,IAAI,MAAMF,MAAN,EAAJ,EAAoB;MAChB,KAAKG,MAAL;IACH;;IACD,MAAMC,OAAN,CAAcF,KAAd;EACH;EACD;AACJ;AACA;;;EACIC,MAAM,GAAG;IACL,MAAME,WAAW,GAAG,KAAKC,QAAL,GAAgB,CAApC;IACA,MAAMC,OAAO,GAAG,IAAIC,KAAJ,CAAUH,WAAV,CAAhB;IACA,MAAMI,GAAG,GAAG,KAAKC,MAAL,EAAZ,CAHK,CAIL;IACA;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAApB,EAAyBE,CAAC,EAA1B,EAA8B;MAC1BJ,OAAO,CAACI,CAAD,CAAP,GAAa,KAAKC,GAAL,CAAS,KAAKC,IAAL,CAAU,KAAKC,KAAL,GAAaH,CAAvB,CAAT,CAAb;IACH;;IACD,KAAKI,IAAL,GAAYR,OAAZ;IACA,KAAKD,QAAL,GAAgBD,WAAhB;IACA,KAAKW,eAAL,GAAuB,IAAI,KAAKV,QAAhC;IACA,KAAKQ,KAAL,GAAa,CAAb;IACA,KAAKG,GAAL,GAAWR,GAAX;EACH;;AAvC6C;AAyClDZ,iBAAiB,CAACE,gBAAlB,GAAqC,EAArC"},"metadata":{},"sourceType":"module"}