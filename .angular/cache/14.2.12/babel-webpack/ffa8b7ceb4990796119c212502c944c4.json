{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from './environment';\nimport * as util from './util';\nexport class Profiler {\n  constructor(backendTimer, logger) {\n    this.backendTimer = backendTimer;\n    this.logger = logger;\n\n    if (logger == null) {\n      this.logger = new Logger();\n    }\n  }\n\n  profileKernel(kernelName, inputs, f) {\n    let outputs;\n\n    const holdResultWrapperFn = () => {\n      outputs = f();\n    };\n\n    let timer;\n    const start = util.now();\n\n    if (this.backendTimer.timerAvailable()) {\n      timer = this.backendTimer.time(holdResultWrapperFn);\n    } else {\n      holdResultWrapperFn();\n\n      for (const output of outputs) {\n        output.dataSync();\n      }\n\n      timer = Promise.resolve({\n        kernelMs: util.now() - start\n      });\n    }\n\n    if (env().getBool('CHECK_COMPUTATION_FOR_ERRORS')) {\n      for (let i = 0; i < outputs.length; i++) {\n        const output = outputs[i]; // Dangling promise here because we don't want to propagate up\n        // asynchronicity.\n\n        output.data().then(tensorVals => {\n          checkComputationForErrors(tensorVals, output.dtype, kernelName);\n        });\n      }\n    }\n\n    const kernelProfile = {\n      kernelName,\n      outputs,\n      inputs,\n      timeMs: timer.then(timing => timing.kernelMs),\n      extraInfo: timer.then(timing => timing.getExtraProfileInfo != null ? timing.getExtraProfileInfo() : '')\n    };\n    return kernelProfile;\n  }\n\n  logKernelProfile(kernelProfile) {\n    const {\n      kernelName,\n      outputs,\n      timeMs,\n      inputs,\n      extraInfo\n    } = kernelProfile;\n    outputs.forEach(result => {\n      Promise.all([result.data(), timeMs, extraInfo]).then(valueContainer => {\n        this.logger.logKernelProfile(kernelName, result, valueContainer[0], valueContainer[1], inputs, valueContainer[2]);\n      });\n    });\n  }\n\n}\nexport function checkComputationForErrors(vals, dtype, kernelName) {\n  if (dtype !== 'float32') {\n    // Only floating point computations will generate NaN values\n    return false;\n  }\n\n  for (let i = 0; i < vals.length; i++) {\n    const num = vals[i];\n\n    if (isNaN(num) || !isFinite(num)) {\n      // Throwing custom exception so behavior is testable.\n      console.warn(`Found ${num} in the result of '${kernelName}'`);\n      return true;\n    }\n  }\n\n  return false;\n}\nexport class Logger {\n  logKernelProfile(name, result, vals, timeMs, inputs, extraInfo) {\n    const time = typeof timeMs === 'number' ? util.rightPad(`${timeMs}ms`, 9) : timeMs['error'];\n    const paddedName = util.rightPad(name, 25);\n    const rank = result.rank;\n    const size = result.size;\n    const shape = util.rightPad(result.shape.toString(), 14);\n    let inputShapesDescription = '';\n\n    for (const name in inputs) {\n      const input = inputs[name];\n\n      if (input != null) {\n        // The input might be a non-tensor (e.g HTMLImageElement), in which case\n        // we claim the output shape as input shape.\n        const inputShape = input.shape || result.shape;\n        const inputRank = inputShape.length;\n        inputShapesDescription += `${name}: ${inputRank}D ${inputRank > 0 ? inputShape : ''} `;\n      }\n    }\n\n    console.log(`%c${paddedName}\\t%c${time}\\t%c${rank}D ${shape}\\t%c${size}\\t%c${inputShapesDescription}\\t%c${extraInfo}`, 'font-weight:bold', 'color:red', 'color:blue', 'color: orange', 'color: green', 'color: steelblue');\n  }\n\n}","map":{"version":3,"names":["env","util","Profiler","constructor","backendTimer","logger","Logger","profileKernel","kernelName","inputs","f","outputs","holdResultWrapperFn","timer","start","now","timerAvailable","time","output","dataSync","Promise","resolve","kernelMs","getBool","i","length","data","then","tensorVals","checkComputationForErrors","dtype","kernelProfile","timeMs","timing","extraInfo","getExtraProfileInfo","logKernelProfile","forEach","result","all","valueContainer","vals","num","isNaN","isFinite","console","warn","name","rightPad","paddedName","rank","size","shape","toString","inputShapesDescription","input","inputShape","inputRank","log"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/profiler.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from './environment';\nimport * as util from './util';\nexport class Profiler {\n    constructor(backendTimer, logger) {\n        this.backendTimer = backendTimer;\n        this.logger = logger;\n        if (logger == null) {\n            this.logger = new Logger();\n        }\n    }\n    profileKernel(kernelName, inputs, f) {\n        let outputs;\n        const holdResultWrapperFn = () => {\n            outputs = f();\n        };\n        let timer;\n        const start = util.now();\n        if (this.backendTimer.timerAvailable()) {\n            timer = this.backendTimer.time(holdResultWrapperFn);\n        }\n        else {\n            holdResultWrapperFn();\n            for (const output of outputs) {\n                output.dataSync();\n            }\n            timer = Promise.resolve({ kernelMs: util.now() - start });\n        }\n        if (env().getBool('CHECK_COMPUTATION_FOR_ERRORS')) {\n            for (let i = 0; i < outputs.length; i++) {\n                const output = outputs[i];\n                // Dangling promise here because we don't want to propagate up\n                // asynchronicity.\n                output.data().then(tensorVals => {\n                    checkComputationForErrors(tensorVals, output.dtype, kernelName);\n                });\n            }\n        }\n        const kernelProfile = {\n            kernelName,\n            outputs,\n            inputs,\n            timeMs: timer.then(timing => timing.kernelMs),\n            extraInfo: timer.then(timing => timing.getExtraProfileInfo != null ?\n                timing.getExtraProfileInfo() :\n                '')\n        };\n        return kernelProfile;\n    }\n    logKernelProfile(kernelProfile) {\n        const { kernelName, outputs, timeMs, inputs, extraInfo } = kernelProfile;\n        outputs.forEach(result => {\n            Promise.all([result.data(), timeMs, extraInfo]).then(valueContainer => {\n                this.logger.logKernelProfile(kernelName, result, valueContainer[0], valueContainer[1], inputs, valueContainer[2]);\n            });\n        });\n    }\n}\nexport function checkComputationForErrors(vals, dtype, kernelName) {\n    if (dtype !== 'float32') {\n        // Only floating point computations will generate NaN values\n        return false;\n    }\n    for (let i = 0; i < vals.length; i++) {\n        const num = vals[i];\n        if (isNaN(num) || !isFinite(num)) {\n            // Throwing custom exception so behavior is testable.\n            console.warn(`Found ${num} in the result of '${kernelName}'`);\n            return true;\n        }\n    }\n    return false;\n}\nexport class Logger {\n    logKernelProfile(name, result, vals, timeMs, inputs, extraInfo) {\n        const time = typeof timeMs === 'number' ? util.rightPad(`${timeMs}ms`, 9) :\n            timeMs['error'];\n        const paddedName = util.rightPad(name, 25);\n        const rank = result.rank;\n        const size = result.size;\n        const shape = util.rightPad(result.shape.toString(), 14);\n        let inputShapesDescription = '';\n        for (const name in inputs) {\n            const input = inputs[name];\n            if (input != null) {\n                // The input might be a non-tensor (e.g HTMLImageElement), in which case\n                // we claim the output shape as input shape.\n                const inputShape = input.shape || result.shape;\n                const inputRank = inputShape.length;\n                inputShapesDescription +=\n                    `${name}: ${inputRank}D ${inputRank > 0 ? inputShape : ''} `;\n            }\n        }\n        console.log(`%c${paddedName}\\t%c${time}\\t%c${rank}D ${shape}\\t%c${size}\\t%c${inputShapesDescription}\\t%c${extraInfo}`, 'font-weight:bold', 'color:red', 'color:blue', 'color: orange', 'color: green', 'color: steelblue');\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}