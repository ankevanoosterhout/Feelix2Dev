{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { useShapeUniforms } from './gpgpu_math';\nexport class DepthwiseConvPacked2DProgram {\n  constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false, hasLeakyReluAlpha = false) {\n    this.variableNames = ['x', 'W'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.customUniforms = [{\n      name: 'pads',\n      type: 'ivec2'\n    }, {\n      name: 'strides',\n      type: 'ivec2'\n    }, {\n      name: 'dilations',\n      type: 'ivec2'\n    }, {\n      name: 'inDims',\n      type: 'ivec2'\n    }];\n    this.outputShape = convInfo.outShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n    const padLeft = convInfo.padInfo.left;\n    const strideWidth = convInfo.strideWidth;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const texelsAcross = filterWidth;\n    let mainLoop = `\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;`;\n\n    for (let c = 0; c < filterWidth; c++) {\n      mainLoop += `\n          vec4 xTexelC${c * 2};\n          int xTexelC${c * 2}Ready;\n          vec4 xTexelC${c * 2 + 1};\n          int xTexelC${c * 2 + 1}Ready;\n          vec4 xC${c};`;\n    }\n    /**\n     * This vectorized implementation works by gathering the values needed for\n     * each output channel's dot product into vec4's and then multiplying them\n     * all together (this happens in the final double for-loop below). Most of\n     * the main loop consists of constructing these vec4's with the minimum\n     * number of texture2D calls, which means making use of all four returned\n     * values from a texture2D call at once.\n     */\n\n\n    mainLoop += `\n    for (int r = 0; r < ${filterHeight}; r++) {\n      `;\n\n    for (let c = 0; c < filterWidth; c++) {\n      mainLoop += `\n          xTexelC${c * 2} = vec4(0.0);\n          xTexelC${c * 2}Ready = 0;\n          xTexelC${c * 2 + 1} = vec4(0.0);\n          xTexelC${c * 2 + 1}Ready = 0;\n          xC${c} = vec4(0.0);`;\n    }\n\n    mainLoop += `\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      `;\n\n    for (let texelC = 0; texelC < (texelsAcross + 1) / 2; texelC++) {\n      const colIndex = texelC * 2;\n      mainLoop += `\n          xC = xCCorner + ${colIndex * dilationWidth};\n          `;\n\n      if (strideWidth === 1) {\n        if (colIndex < filterWidth) {\n          // If padding is odd, the outer texels have to be composed.\n          if (padLeft % 2 === 1) {\n            // TODO: Ensure vec4 previous does not result in redundant sample,\n            // and avoid setting xTexelRC's that exceed the boundary in the\n            // first place rather than resetting them to vec4(0)).\n            // To compute xCOffset:\n            // - If padding is odd, we must add 1 to ensure we ask for an\n            // even-numbered row.\n            // - We subtract 2 to access the previous texel.\n            mainLoop += `\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n              `; // This texel has been read in previous iteration if the dilation\n            // is 1.\n\n            if (dilationWidth === 1 && colIndex > 0) {\n              mainLoop += `\n                xC${colIndex} = vec4(xTexelC${colIndex - 2}.zw, xTexelC${colIndex}.xy);\n                `;\n            } else {\n              mainLoop += `\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${colIndex} = vec4(previous.zw, xTexelC${colIndex}.xy);\n                  } else {\n                    xC${colIndex} = vec4(0.0, 0.0, xTexelC${colIndex}.xy);\n                  }\n                  `;\n            }\n          } else {\n            // Padding is even, so xRC corresponds to a single texel.\n            mainLoop += `\n                if (xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                xC${colIndex} = xTexelC${colIndex};\n                `;\n          }\n\n          if (colIndex + 1 < filterWidth) {\n            // If dilation is even, the second entry should match the first\n            // (either both are composed or both are single samples). But if\n            // dilation is odd, then the second entry should be the opposite\n            // of the first (if the first is composed, the second is a single\n            // sample, and vice versa.)\n            const nextTexelOffset = padLeft % 2 === 0 ? util.nearestLargerEven(dilationWidth) : dilationWidth;\n\n            if (dilationWidth % 2 === 0 && padLeft % 2 === 1 || dilationWidth % 2 !== 0 && padLeft % 2 !== 1) {\n              mainLoop += `\n                  xCOffset = xC + imod(pads[1], 2) + ${nextTexelOffset};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {\n                    xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${colIndex + 1}.zw = vec2(0.0);\n                    }\n                    xTexelC${colIndex + 1}Ready = 1;\n                  }\n                  `; // If dilation > 1 then the xRC's will not be able to share any\n              // values, so each xRC will require two unique calls to getX.\n\n              if (dilationWidth > 1) {\n                mainLoop += `\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${colIndex + 1} = vec4(previous.zw, xTexelC${colIndex + 1}.xy);\n                    } else {\n                     xC${colIndex + 1} = vec4(0.0, 0.0, xTexelC${colIndex + 1}.xy);\n                    }\n                    `;\n              } else {\n                mainLoop += `\n                    xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${colIndex + 1}.xy);\n                    `;\n              }\n            } else {\n              // If dilation is 1 and padding is odd, we have already read the\n              // texel when constructing the previous x value. Here we can\n              // simply skip the texture read.\n              if (nextTexelOffset === 1) {\n                mainLoop += `\n                    xC${colIndex + 1} = xTexelC${colIndex};\n                    `;\n              } else {\n                mainLoop += `\n                    xCOffset = xC + ${nextTexelOffset};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {\n                      xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${colIndex + 1}.zw = vec2(0.0);\n                      }\n                      xTexelC${colIndex + 1}Ready = 1;\n                    }\n\n                    xC${colIndex + 1} = xTexelC${colIndex + 1};\n                    `;\n              }\n            }\n          }\n        }\n      } else {\n        // stride === 2\n        if (colIndex < filterWidth) {\n          // Depending on whether padLeft is even or odd, we want either the\n          // xy or zw channels from X texels for xC${colIndex}. If padLeft is\n          // even, xC${colIndex +1} is simply the zw channels of texels we've\n          // already sampled. But if padLeft is odd, xC{$c + 1}.zw will\n          // need to come from the xy channels of a new texel, hence the `\n          // vec4\n          // final` initialized below.\n          if (padLeft % 2 === 1) {\n            mainLoop += `\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {\n                  xTexelC${colIndex + 1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${colIndex + 1}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex + 1}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(xTexelC${colIndex}.zw, xTexelC${colIndex + 1}.zw);\n              `;\n\n            if (colIndex + 1 < filterWidth) {\n              mainLoop += `\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex + 1}.xy, final.xy);\n                `;\n            }\n          } else {\n            mainLoop += `\n                if(xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {\n                  xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex + 1}.zw = vec2(0.);\n                  }\n                  xTexelC${colIndex + 1}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(\n                  xTexelC${colIndex}.xy, xTexelC${colIndex + 1}.xy);\n              `;\n\n            if (colIndex + 1 < filterWidth) {\n              mainLoop += `\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${colIndex + 1}.zw);\n                `;\n            }\n          }\n        }\n      } // localize the dotProd accumulation within the loop, the theory is for\n      // GPU with limited cache, accumulate sum across large amount of\n      // veriables will cause lots of cache misses. (i.e. 5x5 filter will have\n      // 50 variables)\n\n\n      if (colIndex < filterWidth) {\n        mainLoop += `\n            wTexel = getW(r, ${colIndex}, d1, q);\n            dotProd += xC${colIndex} * vec4(wTexel.xz, wTexel.xz);\n          `;\n\n        if (colIndex + 1 < filterWidth) {\n          mainLoop += `\n              wTexel = getW(r, ${colIndex + 1}, d1, q);\n              dotProd += xC${colIndex + 1} * vec4(wTexel.xz, wTexel.xz);\n            `;\n        }\n      }\n    }\n\n    mainLoop += `\n    }\n  `;\n    mainLoop += `\n      }\n    `;\n    let activationSnippet = '',\n        applyActivationSnippet = '';\n\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${mainLoop}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n\n}","map":{"version":3,"names":["util","useShapeUniforms","DepthwiseConvPacked2DProgram","constructor","convInfo","addBias","activation","hasPreluActivation","hasLeakyReluAlpha","variableNames","packedInputs","packedOutput","customUniforms","name","type","outputShape","outShape","enableShapeUniforms","length","channelMul","outChannels","inChannels","padLeft","padInfo","left","strideWidth","dilationWidth","filterHeight","filterWidth","texelsAcross","mainLoop","c","texelC","colIndex","nextTexelOffset","nearestLargerEven","activationSnippet","applyActivationSnippet","addBiasSnippet","push","userCode"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_packed_gpu_depthwise.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { useShapeUniforms } from './gpgpu_math';\nexport class DepthwiseConvPacked2DProgram {\n    constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false, hasLeakyReluAlpha = false) {\n        this.variableNames = ['x', 'W'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.customUniforms = [\n            { name: 'pads', type: 'ivec2' },\n            { name: 'strides', type: 'ivec2' },\n            { name: 'dilations', type: 'ivec2' },\n            { name: 'inDims', type: 'ivec2' },\n        ];\n        this.outputShape = convInfo.outShape;\n        this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n        const channelMul = convInfo.outChannels / convInfo.inChannels;\n        const padLeft = convInfo.padInfo.left;\n        const strideWidth = convInfo.strideWidth;\n        const dilationWidth = convInfo.dilationWidth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const texelsAcross = filterWidth;\n        let mainLoop = `\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;`;\n        for (let c = 0; c < filterWidth; c++) {\n            mainLoop += `\n          vec4 xTexelC${c * 2};\n          int xTexelC${c * 2}Ready;\n          vec4 xTexelC${c * 2 + 1};\n          int xTexelC${c * 2 + 1}Ready;\n          vec4 xC${c};`;\n        }\n        /**\n         * This vectorized implementation works by gathering the values needed for\n         * each output channel's dot product into vec4's and then multiplying them\n         * all together (this happens in the final double for-loop below). Most of\n         * the main loop consists of constructing these vec4's with the minimum\n         * number of texture2D calls, which means making use of all four returned\n         * values from a texture2D call at once.\n         */\n        mainLoop += `\n    for (int r = 0; r < ${filterHeight}; r++) {\n      `;\n        for (let c = 0; c < filterWidth; c++) {\n            mainLoop += `\n          xTexelC${c * 2} = vec4(0.0);\n          xTexelC${c * 2}Ready = 0;\n          xTexelC${c * 2 + 1} = vec4(0.0);\n          xTexelC${c * 2 + 1}Ready = 0;\n          xC${c} = vec4(0.0);`;\n        }\n        mainLoop += `\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      `;\n        for (let texelC = 0; texelC < (texelsAcross + 1) / 2; texelC++) {\n            const colIndex = texelC * 2;\n            mainLoop += `\n          xC = xCCorner + ${colIndex * dilationWidth};\n          `;\n            if (strideWidth === 1) {\n                if (colIndex < filterWidth) {\n                    // If padding is odd, the outer texels have to be composed.\n                    if (padLeft % 2 === 1) {\n                        // TODO: Ensure vec4 previous does not result in redundant sample,\n                        // and avoid setting xTexelRC's that exceed the boundary in the\n                        // first place rather than resetting them to vec4(0)).\n                        // To compute xCOffset:\n                        // - If padding is odd, we must add 1 to ensure we ask for an\n                        // even-numbered row.\n                        // - We subtract 2 to access the previous texel.\n                        mainLoop += `\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n              `;\n                        // This texel has been read in previous iteration if the dilation\n                        // is 1.\n                        if (dilationWidth === 1 && colIndex > 0) {\n                            mainLoop += `\n                xC${colIndex} = vec4(xTexelC${colIndex - 2}.zw, xTexelC${colIndex}.xy);\n                `;\n                        }\n                        else {\n                            mainLoop += `\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${colIndex} = vec4(previous.zw, xTexelC${colIndex}.xy);\n                  } else {\n                    xC${colIndex} = vec4(0.0, 0.0, xTexelC${colIndex}.xy);\n                  }\n                  `;\n                        }\n                    }\n                    else {\n                        // Padding is even, so xRC corresponds to a single texel.\n                        mainLoop += `\n                if (xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                xC${colIndex} = xTexelC${colIndex};\n                `;\n                    }\n                    if (colIndex + 1 < filterWidth) {\n                        // If dilation is even, the second entry should match the first\n                        // (either both are composed or both are single samples). But if\n                        // dilation is odd, then the second entry should be the opposite\n                        // of the first (if the first is composed, the second is a single\n                        // sample, and vice versa.)\n                        const nextTexelOffset = padLeft % 2 === 0 ?\n                            util.nearestLargerEven(dilationWidth) :\n                            dilationWidth;\n                        if ((dilationWidth % 2 === 0 && padLeft % 2 === 1) ||\n                            (dilationWidth % 2 !== 0 && padLeft % 2 !== 1)) {\n                            mainLoop += `\n                  xCOffset = xC + imod(pads[1], 2) + ${nextTexelOffset};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {\n                    xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${colIndex + 1}.zw = vec2(0.0);\n                    }\n                    xTexelC${colIndex + 1}Ready = 1;\n                  }\n                  `;\n                            // If dilation > 1 then the xRC's will not be able to share any\n                            // values, so each xRC will require two unique calls to getX.\n                            if (dilationWidth > 1) {\n                                mainLoop += `\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${colIndex + 1} = vec4(previous.zw, xTexelC${colIndex + 1}.xy);\n                    } else {\n                     xC${colIndex + 1} = vec4(0.0, 0.0, xTexelC${colIndex + 1}.xy);\n                    }\n                    `;\n                            }\n                            else {\n                                mainLoop += `\n                    xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${colIndex + 1}.xy);\n                    `;\n                            }\n                        }\n                        else {\n                            // If dilation is 1 and padding is odd, we have already read the\n                            // texel when constructing the previous x value. Here we can\n                            // simply skip the texture read.\n                            if (nextTexelOffset === 1) {\n                                mainLoop += `\n                    xC${colIndex + 1} = xTexelC${colIndex};\n                    `;\n                            }\n                            else {\n                                mainLoop += `\n                    xCOffset = xC + ${nextTexelOffset};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {\n                      xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${colIndex + 1}.zw = vec2(0.0);\n                      }\n                      xTexelC${colIndex + 1}Ready = 1;\n                    }\n\n                    xC${colIndex + 1} = xTexelC${colIndex + 1};\n                    `;\n                            }\n                        }\n                    }\n                }\n            }\n            else { // stride === 2\n                if (colIndex < filterWidth) {\n                    // Depending on whether padLeft is even or odd, we want either the\n                    // xy or zw channels from X texels for xC${colIndex}. If padLeft is\n                    // even, xC${colIndex +1} is simply the zw channels of texels we've\n                    // already sampled. But if padLeft is odd, xC{$c + 1}.zw will\n                    // need to come from the xy channels of a new texel, hence the `\n                    // vec4\n                    // final` initialized below.\n                    if (padLeft % 2 === 1) {\n                        mainLoop += `\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {\n                  xTexelC${colIndex + 1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${colIndex + 1}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex + 1}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(xTexelC${colIndex}.zw, xTexelC${colIndex + 1}.zw);\n              `;\n                        if (colIndex + 1 < filterWidth) {\n                            mainLoop += `\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex + 1}.xy, final.xy);\n                `;\n                        }\n                    }\n                    else {\n                        mainLoop += `\n                if(xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {\n                  xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex + 1}.zw = vec2(0.);\n                  }\n                  xTexelC${colIndex + 1}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(\n                  xTexelC${colIndex}.xy, xTexelC${colIndex + 1}.xy);\n              `;\n                        if (colIndex + 1 < filterWidth) {\n                            mainLoop += `\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${colIndex + 1}.zw);\n                `;\n                        }\n                    }\n                }\n            }\n            // localize the dotProd accumulation within the loop, the theory is for\n            // GPU with limited cache, accumulate sum across large amount of\n            // veriables will cause lots of cache misses. (i.e. 5x5 filter will have\n            // 50 variables)\n            if (colIndex < filterWidth) {\n                mainLoop += `\n            wTexel = getW(r, ${colIndex}, d1, q);\n            dotProd += xC${colIndex} * vec4(wTexel.xz, wTexel.xz);\n          `;\n                if (colIndex + 1 < filterWidth) {\n                    mainLoop += `\n              wTexel = getW(r, ${colIndex + 1}, d1, q);\n              dotProd += xC${colIndex + 1} * vec4(wTexel.xz, wTexel.xz);\n            `;\n                }\n            }\n        }\n        mainLoop += `\n    }\n  `;\n        mainLoop += `\n      }\n    `;\n        let activationSnippet = '', applyActivationSnippet = '';\n        if (activation) {\n            if (hasPreluActivation) {\n                activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else if (hasLeakyReluAlpha) {\n                activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else {\n                activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n            }\n            applyActivationSnippet = `result = activation(result);`;\n        }\n        const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n        if (addBias) {\n            this.variableNames.push('bias');\n        }\n        if (hasPreluActivation) {\n            this.variableNames.push('preluActivationWeights');\n        }\n        if (hasLeakyReluAlpha) {\n            this.variableNames.push('leakyreluAlpha');\n        }\n        this.userCode = `\n      ${activationSnippet}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${mainLoop}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,IAAT,QAAqB,uBAArB;AACA,SAASC,gBAAT,QAAiC,cAAjC;AACA,OAAO,MAAMC,4BAAN,CAAmC;EACtCC,WAAW,CAACC,QAAD,EAAWC,OAAO,GAAG,KAArB,EAA4BC,UAAU,GAAG,IAAzC,EAA+CC,kBAAkB,GAAG,KAApE,EAA2EC,iBAAiB,GAAG,KAA/F,EAAsG;IAC7G,KAAKC,aAAL,GAAqB,CAAC,GAAD,EAAM,GAAN,CAArB;IACA,KAAKC,YAAL,GAAoB,IAApB;IACA,KAAKC,YAAL,GAAoB,IAApB;IACA,KAAKC,cAAL,GAAsB,CAClB;MAAEC,IAAI,EAAE,MAAR;MAAgBC,IAAI,EAAE;IAAtB,CADkB,EAElB;MAAED,IAAI,EAAE,SAAR;MAAmBC,IAAI,EAAE;IAAzB,CAFkB,EAGlB;MAAED,IAAI,EAAE,WAAR;MAAqBC,IAAI,EAAE;IAA3B,CAHkB,EAIlB;MAAED,IAAI,EAAE,QAAR;MAAkBC,IAAI,EAAE;IAAxB,CAJkB,CAAtB;IAMA,KAAKC,WAAL,GAAmBX,QAAQ,CAACY,QAA5B;IACA,KAAKC,mBAAL,GAA2BhB,gBAAgB,CAAC,KAAKc,WAAL,CAAiBG,MAAlB,CAA3C;IACA,MAAMC,UAAU,GAAGf,QAAQ,CAACgB,WAAT,GAAuBhB,QAAQ,CAACiB,UAAnD;IACA,MAAMC,OAAO,GAAGlB,QAAQ,CAACmB,OAAT,CAAiBC,IAAjC;IACA,MAAMC,WAAW,GAAGrB,QAAQ,CAACqB,WAA7B;IACA,MAAMC,aAAa,GAAGtB,QAAQ,CAACsB,aAA/B;IACA,MAAMC,YAAY,GAAGvB,QAAQ,CAACuB,YAA9B;IACA,MAAMC,WAAW,GAAGxB,QAAQ,CAACwB,WAA7B;IACA,MAAMC,YAAY,GAAGD,WAArB;IACA,IAAIE,QAAQ,GAAI;AACxB;AACA,8CAFQ;;IAGA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,WAApB,EAAiCG,CAAC,EAAlC,EAAsC;MAClCD,QAAQ,IAAK;AACzB,wBAAwBC,CAAC,GAAG,CAAE;AAC9B,uBAAuBA,CAAC,GAAG,CAAE;AAC7B,wBAAwBA,CAAC,GAAG,CAAJ,GAAQ,CAAE;AAClC,uBAAuBA,CAAC,GAAG,CAAJ,GAAQ,CAAE;AACjC,mBAAmBA,CAAE,GALT;IAMH;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;;IACQD,QAAQ,IAAK;AACrB,0BAA0BH,YAAa;AACvC,OAFQ;;IAGA,KAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,WAApB,EAAiCG,CAAC,EAAlC,EAAsC;MAClCD,QAAQ,IAAK;AACzB,mBAAmBC,CAAC,GAAG,CAAE;AACzB,mBAAmBA,CAAC,GAAG,CAAE;AACzB,mBAAmBA,CAAC,GAAG,CAAJ,GAAQ,CAAE;AAC7B,mBAAmBA,CAAC,GAAG,CAAJ,GAAQ,CAAE;AAC7B,cAAcA,CAAE,eALJ;IAMH;;IACDD,QAAQ,IAAK;AACrB;AACA;AACA,OAHQ;;IAIA,KAAK,IAAIE,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAG,CAACH,YAAY,GAAG,CAAhB,IAAqB,CAAnD,EAAsDG,MAAM,EAA5D,EAAgE;MAC5D,MAAMC,QAAQ,GAAGD,MAAM,GAAG,CAA1B;MACAF,QAAQ,IAAK;AACzB,4BAA4BG,QAAQ,GAAGP,aAAc;AACrD,WAFY;;MAGA,IAAID,WAAW,KAAK,CAApB,EAAuB;QACnB,IAAIQ,QAAQ,GAAGL,WAAf,EAA4B;UACxB;UACA,IAAIN,OAAO,GAAG,CAAV,KAAgB,CAApB,EAAuB;YACnB;YACA;YACA;YACA;YACA;YACA;YACA;YACAQ,QAAQ,IAAK;AACrC;AACA,sEAAsEG,QAAS;AAC/E,2BAA2BA,QAAS;AACpC;AACA;AACA;AACA;AACA,6BAA6BA,QAAS;AACtC;AACA,2BAA2BA,QAAS;AACpC;AACA,eAZwB,CARmB,CAqBnB;YACA;;YACA,IAAIP,aAAa,KAAK,CAAlB,IAAuBO,QAAQ,GAAG,CAAtC,EAAyC;cACrCH,QAAQ,IAAK;AACzC,oBAAoBG,QAAS,kBAAiBA,QAAQ,GAAG,CAAE,eAAcA,QAAS;AAClF,iBAF4B;YAGH,CAJD,MAKK;cACDH,QAAQ,IAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwBG,QAAS,+BAA8BA,QAAS;AACxE;AACA,wBAAwBA,QAAS,4BAA2BA,QAAS;AACrE;AACA,mBAhB4B;YAiBH;UACJ,CA/CD,MAgDK;YACD;YACAH,QAAQ,IAAK;AACrC,0DAA0DG,QAAS;AACnE,2BAA2BA,QAAS;AACpC;AACA,6BAA6BA,QAAS;AACtC;AACA,2BAA2BA,QAAS;AACpC;AACA;AACA,oBAAoBA,QAAS,aAAYA,QAAS;AAClD,iBAVwB;UAWH;;UACD,IAAIA,QAAQ,GAAG,CAAX,GAAeL,WAAnB,EAAgC;YAC5B;YACA;YACA;YACA;YACA;YACA,MAAMM,eAAe,GAAGZ,OAAO,GAAG,CAAV,KAAgB,CAAhB,GACpBtB,IAAI,CAACmC,iBAAL,CAAuBT,aAAvB,CADoB,GAEpBA,aAFJ;;YAGA,IAAKA,aAAa,GAAG,CAAhB,KAAsB,CAAtB,IAA2BJ,OAAO,GAAG,CAAV,KAAgB,CAA5C,IACCI,aAAa,GAAG,CAAhB,KAAsB,CAAtB,IAA2BJ,OAAO,GAAG,CAAV,KAAgB,CADhD,EACoD;cAChDQ,QAAQ,IAAK;AACzC,uDAAuDI,eAAgB;AACvE;AACA,wEAAwED,QAAQ,GAAG,CAAE;AACrF,6BAA6BA,QAAQ,GAAG,CAAE;AAC1C;AACA;AACA;AACA;AACA,+BAA+BA,QAAQ,GAAG,CAAE;AAC5C;AACA,6BAA6BA,QAAQ,GAAG,CAAE;AAC1C;AACA,mBAb4B,CADgD,CAehD;cACA;;cACA,IAAIP,aAAa,GAAG,CAApB,EAAuB;gBACnBI,QAAQ,IAAK;AAC7C;AACA;AACA;AACA,yBAAyBG,QAAQ,GAAG,CAAE,+BAA8BA,QAAQ,GAAG,CAAE;AACjF;AACA,yBAAyBA,QAAQ,GAAG,CAAE,4BAA2BA,QAAQ,GAAG,CAAE;AAC9E;AACA,qBARgC;cASH,CAVD,MAWK;gBACDH,QAAQ,IAAK;AAC7C,wBAAwBG,QAAQ,GAAG,CAAE,kBAAiBA,QAAS,eAAcA,QAAQ,GAAG,CAAE;AAC1F,qBAFgC;cAGH;YACJ,CAlCD,MAmCK;cACD;cACA;cACA;cACA,IAAIC,eAAe,KAAK,CAAxB,EAA2B;gBACvBJ,QAAQ,IAAK;AAC7C,wBAAwBG,QAAQ,GAAG,CAAE,aAAYA,QAAS;AAC1D,qBAFgC;cAGH,CAJD,MAKK;gBACDH,QAAQ,IAAK;AAC7C,sCAAsCI,eAAgB;AACtD;AACA,0EAA0ED,QAAQ,GAAG,CAAE;AACvF,+BAA+BA,QAAQ,GAAG,CAAE;AAC5C;AACA,iCAAiCA,QAAQ,GAAG,CAAE;AAC9C;AACA,+BAA+BA,QAAQ,GAAG,CAAE;AAC5C;AACA;AACA,wBAAwBA,QAAQ,GAAG,CAAE,aAAYA,QAAQ,GAAG,CAAE;AAC9D,qBAZgC;cAaH;YACJ;UACJ;QACJ;MACJ,CAxID,MAyIK;QAAE;QACH,IAAIA,QAAQ,GAAGL,WAAf,EAA4B;UACxB;UACA;UACA;UACA;UACA;UACA;UACA;UACA,IAAIN,OAAO,GAAG,CAAV,KAAgB,CAApB,EAAuB;YACnBQ,QAAQ,IAAK;AACrC;AACA,qEAAqEG,QAAS;AAC9E,2BAA2BA,QAAS;AACpC;AACA;AACA;AACA,6BAA6BA,QAAS;AACtC;AACA,2BAA2BA,QAAS;AACpC;AACA;AACA,iEAAiEA,QAAQ,GAAG,CAAE;AAC9E,2BAA2BA,QAAQ,GAAG,CAAE;AACxC;AACA;AACA;AACA,6BAA6BA,QAAQ,GAAG,CAAE;AAC1C;AACA,2BAA2BA,QAAQ,GAAG,CAAE;AACxC;AACA;AACA,oBAAoBA,QAAS,kBAAiBA,QAAS,eAAcA,QAAQ,GAAG,CAAE;AAClF,eAvBwB;;YAwBA,IAAIA,QAAQ,GAAG,CAAX,GAAeL,WAAnB,EAAgC;cAC5BE,QAAQ,IAAK;AACzC;AACA;AACA;AACA;AACA;AACA,sBAAsBG,QAAQ,GAAG,CAAE,kBAAiBA,QAAQ,GAAG,CAAE;AACjE,iBAP4B;YAQH;UACJ,CAnCD,MAoCK;YACDH,QAAQ,IAAK;AACrC,yDAAyDG,QAAS;AAClE,2BAA2BA,QAAS;AACpC;AACA,6BAA6BA,QAAS;AACtC;AACA,2BAA2BA,QAAS;AACpC;AACA;AACA;AACA,qEAAqEA,QAAQ,GAAG,CAAE;AAClF,2BAA2BA,QAAQ,GAAG,CAAE;AACxC;AACA,6BAA6BA,QAAQ,GAAG,CAAE;AAC1C;AACA,2BAA2BA,QAAQ,GAAG,CAAE;AACxC;AACA;AACA,oBAAoBA,QAAS;AAC7B,2BAA2BA,QAAS,eAAcA,QAAQ,GAAG,CAAE;AAC/D,eApBwB;;YAqBA,IAAIA,QAAQ,GAAG,CAAX,GAAeL,WAAnB,EAAgC;cAC5BE,QAAQ,IAAK;AACzC,sBAAsBG,QAAQ,GAAG,CAAE,kBAAiBA,QAAS,eAAcA,QAAQ,GAAG,CAAE;AACxF,iBAF4B;YAGH;UACJ;QACJ;MACJ,CAxN2D,CAyN5D;MACA;MACA;MACA;;;MACA,IAAIA,QAAQ,GAAGL,WAAf,EAA4B;QACxBE,QAAQ,IAAK;AAC7B,+BAA+BG,QAAS;AACxC,2BAA2BA,QAAS;AACpC,WAHgB;;QAIA,IAAIA,QAAQ,GAAG,CAAX,GAAeL,WAAnB,EAAgC;UAC5BE,QAAQ,IAAK;AACjC,iCAAiCG,QAAQ,GAAG,CAAE;AAC9C,6BAA6BA,QAAQ,GAAG,CAAE;AAC1C,aAHoB;QAIH;MACJ;IACJ;;IACDH,QAAQ,IAAK;AACrB;AACA,GAFQ;IAGAA,QAAQ,IAAK;AACrB;AACA,KAFQ;IAGA,IAAIM,iBAAiB,GAAG,EAAxB;IAAA,IAA4BC,sBAAsB,GAAG,EAArD;;IACA,IAAI/B,UAAJ,EAAgB;MACZ,IAAIC,kBAAJ,EAAwB;QACpB6B,iBAAiB,GAAI;AACrC;AACA,YAAY9B,UAAW;AACvB,UAHgB;MAIH,CALD,MAMK,IAAIE,iBAAJ,EAAuB;QACxB4B,iBAAiB,GAAI;AACrC;AACA,YAAY9B,UAAW;AACvB,UAHgB;MAIH,CALI,MAMA;QACD8B,iBAAiB,GAAI;AACrC,YAAY9B,UAAW;AACvB,UAFgB;MAGH;;MACD+B,sBAAsB,GAAI,8BAA1B;IACH;;IACD,MAAMC,cAAc,GAAGjC,OAAO,GAAG,iCAAH,GAAuC,EAArE;;IACA,IAAIA,OAAJ,EAAa;MACT,KAAKI,aAAL,CAAmB8B,IAAnB,CAAwB,MAAxB;IACH;;IACD,IAAIhC,kBAAJ,EAAwB;MACpB,KAAKE,aAAL,CAAmB8B,IAAnB,CAAwB,wBAAxB;IACH;;IACD,IAAI/B,iBAAJ,EAAuB;MACnB,KAAKC,aAAL,CAAmB8B,IAAnB,CAAwB,gBAAxB;IACH;;IACD,KAAKC,QAAL,GAAiB;AACzB,QAAQJ,iBAAkB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwBjB,UAAW;AACnC,4BAA4BA,UAAW;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,UAAUW,QAAS;AACnB;AACA;AACA,UAAUQ,cAAe;AACzB,UAAUD,sBAAuB;AACjC;AACA;AACA,KAvBQ;EAwBH;;AA7VqC"},"metadata":{},"sourceType":"module"}