{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, slice_util, StridedSlice, util } from '@tensorflow/tfjs-core';\nimport { stridedSliceImplCPU } from '../kernel_utils/shared';\nimport { StridedSliceProgram } from '../strided_slice_gpu';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nexport function stridedSlice(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n  const {\n    finalShapeSparse,\n    finalShape,\n    isIdentity,\n    sliceDim0,\n    isSimpleSlice,\n    begin: $begin,\n    end: $end,\n    strides: $strides\n  } = slice_util.sliceInfo(x.shape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);\n  let result;\n\n  if (isIdentity) {\n    // Optimization #1, slice is a no-op plus reshape\n    result = reshape({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        shape: finalShape\n      }\n    });\n  } else if (sliceDim0 || isSimpleSlice) {\n    // Optimization #2, slice is memory contiguous (only occurs in dim 0)\n    util.assert(x.shape.length >= 1, () => `Input must have rank at least 1, got: ${x.shape.length}`);\n    const size = slice_util.computeOutShape($begin, $end, $strides); // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).\n\n    const sliced = slice({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        begin: $begin,\n        size\n      }\n    });\n    result = reshape({\n      inputs: {\n        x: sliced\n      },\n      backend,\n      attrs: {\n        shape: finalShape\n      }\n    });\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else {\n    const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n\n    if (shouldExecuteOnCPU) {\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      const values = backend.readSync(x.dataId); // tslint:disable-next-line: no-unnecessary-type-assertion\n\n      const xBuf = buffer(x.shape, x.dtype, values);\n      const resultValues = stridedSliceImplCPU(finalShapeSparse, xBuf, $strides, $begin);\n      result = backend.makeTensorInfo(finalShape, x.dtype, resultValues.values);\n    } else {\n      const program = new StridedSliceProgram($begin, $strides, finalShapeSparse);\n      result = backend.runWebGLProgram(program, [x], x.dtype);\n    }\n  }\n\n  const resultReshaped = reshape({\n    inputs: {\n      x: result\n    },\n    backend,\n    attrs: {\n      shape: finalShape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(result);\n  return resultReshaped;\n}\nexport const stridedSliceConfig = {\n  kernelName: StridedSlice,\n  backendName: 'webgl',\n  kernelFunc: stridedSlice\n};","map":{"version":3,"names":["buffer","slice_util","StridedSlice","util","stridedSliceImplCPU","StridedSliceProgram","reshape","slice","stridedSlice","args","inputs","backend","attrs","x","begin","end","strides","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","finalShapeSparse","finalShape","isIdentity","sliceDim0","isSimpleSlice","$begin","$end","$strides","sliceInfo","shape","result","assert","length","size","computeOutShape","sliced","disposeIntermediateTensorInfo","shouldExecuteOnCPU","values","readSync","dataId","xBuf","dtype","resultValues","makeTensorInfo","program","runWebGLProgram","resultReshaped","stridedSliceConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/StridedSlice.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, slice_util, StridedSlice, util } from '@tensorflow/tfjs-core';\nimport { stridedSliceImplCPU } from '../kernel_utils/shared';\nimport { StridedSliceProgram } from '../strided_slice_gpu';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nexport function stridedSlice(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask } = attrs;\n    const { finalShapeSparse, finalShape, isIdentity, sliceDim0, isSimpleSlice, begin: $begin, end: $end, strides: $strides } = slice_util.sliceInfo(x.shape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);\n    let result;\n    if (isIdentity) {\n        // Optimization #1, slice is a no-op plus reshape\n        result = reshape({ inputs: { x }, backend, attrs: { shape: finalShape } });\n    }\n    else if (sliceDim0 || isSimpleSlice) {\n        // Optimization #2, slice is memory contiguous (only occurs in dim 0)\n        util.assert(x.shape.length >= 1, () => `Input must have rank at least 1, got: ${x.shape.length}`);\n        const size = slice_util.computeOutShape($begin, $end, $strides);\n        // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).\n        const sliced = slice({ inputs: { x }, backend, attrs: { begin: $begin, size } });\n        result =\n            reshape({ inputs: { x: sliced }, backend, attrs: { shape: finalShape } });\n        backend.disposeIntermediateTensorInfo(sliced);\n    }\n    else {\n        const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n        if (shouldExecuteOnCPU) {\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            const values = backend.readSync(x.dataId);\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            const xBuf = buffer(x.shape, x.dtype, values);\n            const resultValues = stridedSliceImplCPU(finalShapeSparse, xBuf, $strides, $begin);\n            result = backend.makeTensorInfo(finalShape, x.dtype, resultValues.values);\n        }\n        else {\n            const program = new StridedSliceProgram($begin, $strides, finalShapeSparse);\n            result = backend.runWebGLProgram(program, [x], x.dtype);\n        }\n    }\n    const resultReshaped = reshape({ inputs: { x: result }, backend, attrs: { shape: finalShape } });\n    backend.disposeIntermediateTensorInfo(result);\n    return resultReshaped;\n}\nexport const stridedSliceConfig = {\n    kernelName: StridedSlice,\n    backendName: 'webgl',\n    kernelFunc: stridedSlice\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}