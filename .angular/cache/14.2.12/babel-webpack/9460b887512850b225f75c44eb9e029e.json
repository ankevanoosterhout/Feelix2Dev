{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { sizeFromShape } from '../../util';\n/**\n * Generates sparse reshape multiple negative 1 output dimension error message.\n *\n * @param dim1 The first dimension with a negative 1 value.\n * @param dim2 The second dimension with a negative 1 value.\n */\n\nexport function getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(dim1, dim2) {\n  return `only one output dimension may be -1, not both ${dim1} and ${dim2}`;\n}\n/**\n * Generates sparse reshape negative output dimension error message.\n *\n * @param dim The dimension with a negative value.\n * @param value The negative value.\n */\n\nexport function getSparseReshapeNegativeOutputDimErrorMessage(dim, value) {\n  return `size ${dim} must be non-negative, not ${value}`;\n}\n/**\n * Generates sparse reshape empty tensor zero output dimension error message.\n *\n */\n\nexport function getSparseReshapeEmptyTensorZeroOutputDimErrorMessage() {\n  return 'reshape cannot infer the missing input size for an empty tensor ' + 'unless all specified input sizes are non-zero';\n}\n/**\n * Generates sparse reshape input output multiple mismatch error message.\n *\n * @param inputShape the input shape.\n * @param outputShape the requested output shape.\n */\n\nexport function getSparseReshapeInputOutputMultipleErrorMessage(inputShape, outputShape) {\n  const inputSize = sizeFromShape(inputShape);\n  const outputSize = sizeFromShape(outputShape);\n  return `Input to reshape is a SparseTensor with ${inputSize}\n  dense values, but the requested shape requires a multiple of ${outputSize}. inputShape=${inputShape} outputShape= ${outputShape}`;\n}\n/**\n * Generates sparse reshape input output inequality error message.\n *\n * @param inputShape the input shape.\n * @param outputShape the requested output shape.\n */\n\nexport function getSparseReshapeInputOutputMismatchErrorMessage(inputShape, outputShape) {\n  const inputSize = sizeFromShape(inputShape);\n  const outputSize = sizeFromShape(outputShape);\n  return `Input to reshape is a tensor with ${inputSize} dense values, but the requested shape has ${outputSize}. inputShape=${inputShape} outputShape=${outputShape}`;\n}","map":{"version":3,"names":["sizeFromShape","getSparseReshapeMultipleNegativeOneOutputDimErrorMessage","dim1","dim2","getSparseReshapeNegativeOutputDimErrorMessage","dim","value","getSparseReshapeEmptyTensorZeroOutputDimErrorMessage","getSparseReshapeInputOutputMultipleErrorMessage","inputShape","outputShape","inputSize","outputSize","getSparseReshapeInputOutputMismatchErrorMessage"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/sparse/sparse_reshape_util.js"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { sizeFromShape } from '../../util';\n/**\n * Generates sparse reshape multiple negative 1 output dimension error message.\n *\n * @param dim1 The first dimension with a negative 1 value.\n * @param dim2 The second dimension with a negative 1 value.\n */\nexport function getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(dim1, dim2) {\n    return `only one output dimension may be -1, not both ${dim1} and ${dim2}`;\n}\n/**\n * Generates sparse reshape negative output dimension error message.\n *\n * @param dim The dimension with a negative value.\n * @param value The negative value.\n */\nexport function getSparseReshapeNegativeOutputDimErrorMessage(dim, value) {\n    return `size ${dim} must be non-negative, not ${value}`;\n}\n/**\n * Generates sparse reshape empty tensor zero output dimension error message.\n *\n */\nexport function getSparseReshapeEmptyTensorZeroOutputDimErrorMessage() {\n    return 'reshape cannot infer the missing input size for an empty tensor ' +\n        'unless all specified input sizes are non-zero';\n}\n/**\n * Generates sparse reshape input output multiple mismatch error message.\n *\n * @param inputShape the input shape.\n * @param outputShape the requested output shape.\n */\nexport function getSparseReshapeInputOutputMultipleErrorMessage(inputShape, outputShape) {\n    const inputSize = sizeFromShape(inputShape);\n    const outputSize = sizeFromShape(outputShape);\n    return `Input to reshape is a SparseTensor with ${inputSize}\n  dense values, but the requested shape requires a multiple of ${outputSize}. inputShape=${inputShape} outputShape= ${outputShape}`;\n}\n/**\n * Generates sparse reshape input output inequality error message.\n *\n * @param inputShape the input shape.\n * @param outputShape the requested output shape.\n */\nexport function getSparseReshapeInputOutputMismatchErrorMessage(inputShape, outputShape) {\n    const inputSize = sizeFromShape(inputShape);\n    const outputSize = sizeFromShape(outputShape);\n    return `Input to reshape is a tensor with ${inputSize} dense values, but the requested shape has ${outputSize}. inputShape=${inputShape} outputShape=${outputShape}`;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,aAAT,QAA8B,YAA9B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,wDAAT,CAAkEC,IAAlE,EAAwEC,IAAxE,EAA8E;EACjF,OAAQ,iDAAgDD,IAAK,QAAOC,IAAK,EAAzE;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,6CAAT,CAAuDC,GAAvD,EAA4DC,KAA5D,EAAmE;EACtE,OAAQ,QAAOD,GAAI,8BAA6BC,KAAM,EAAtD;AACH;AACD;AACA;AACA;AACA;;AACA,OAAO,SAASC,oDAAT,GAAgE;EACnE,OAAO,qEACH,+CADJ;AAEH;AACD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,+CAAT,CAAyDC,UAAzD,EAAqEC,WAArE,EAAkF;EACrF,MAAMC,SAAS,GAAGX,aAAa,CAACS,UAAD,CAA/B;EACA,MAAMG,UAAU,GAAGZ,aAAa,CAACU,WAAD,CAAhC;EACA,OAAQ,2CAA0CC,SAAU;AAChE,iEAAiEC,UAAW,gBAAeH,UAAW,iBAAgBC,WAAY,EAD9H;AAEH;AACD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,+CAAT,CAAyDJ,UAAzD,EAAqEC,WAArE,EAAkF;EACrF,MAAMC,SAAS,GAAGX,aAAa,CAACS,UAAD,CAA/B;EACA,MAAMG,UAAU,GAAGZ,aAAa,CAACU,WAAD,CAAhC;EACA,OAAQ,qCAAoCC,SAAU,8CAA6CC,UAAW,gBAAeH,UAAW,gBAAeC,WAAY,EAAnK;AACH"},"metadata":{},"sourceType":"module"}