{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Round } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const round = unaryKernelFunc(Round, xi => {\n  // The algorithm is based on banker's rounding.\n  const base = Math.floor(xi);\n\n  if (xi - base < 0.5) {\n    return Math.floor(xi);\n  } else if (xi - base > 0.5) {\n    return Math.ceil(xi);\n  } else {\n    if (base % 2.0 === 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n});\nexport const roundConfig = {\n  kernelName: Round,\n  backendName: 'cpu',\n  kernelFunc: round\n};","map":{"version":3,"names":["Round","unaryKernelFunc","round","xi","base","Math","floor","ceil","roundConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Round.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Round } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const round = unaryKernelFunc(Round, (xi) => {\n    // The algorithm is based on banker's rounding.\n    const base = Math.floor(xi);\n    if (xi - base < 0.5) {\n        return Math.floor(xi);\n    }\n    else if (xi - base > 0.5) {\n        return Math.ceil(xi);\n    }\n    else {\n        if (base % 2.0 === 0.0) {\n            return base;\n        }\n        else {\n            return base + 1.0;\n        }\n    }\n});\nexport const roundConfig = {\n    kernelName: Round,\n    backendName: 'cpu',\n    kernelFunc: round,\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,KAAT,QAAsB,uBAAtB;AACA,SAASC,eAAT,QAAgC,sBAAhC;AACA,OAAO,MAAMC,KAAK,GAAGD,eAAe,CAACD,KAAD,EAASG,EAAD,IAAQ;EAChD;EACA,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,EAAX,CAAb;;EACA,IAAIA,EAAE,GAAGC,IAAL,GAAY,GAAhB,EAAqB;IACjB,OAAOC,IAAI,CAACC,KAAL,CAAWH,EAAX,CAAP;EACH,CAFD,MAGK,IAAIA,EAAE,GAAGC,IAAL,GAAY,GAAhB,EAAqB;IACtB,OAAOC,IAAI,CAACE,IAAL,CAAUJ,EAAV,CAAP;EACH,CAFI,MAGA;IACD,IAAIC,IAAI,GAAG,GAAP,KAAe,GAAnB,EAAwB;MACpB,OAAOA,IAAP;IACH,CAFD,MAGK;MACD,OAAOA,IAAI,GAAG,GAAd;IACH;EACJ;AACJ,CAjBmC,CAA7B;AAkBP,OAAO,MAAMI,WAAW,GAAG;EACvBC,UAAU,EAAET,KADW;EAEvBU,WAAW,EAAE,KAFU;EAGvBC,UAAU,EAAET;AAHW,CAApB"},"metadata":{},"sourceType":"module"}