{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { SparseFillEmptyRows } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { op } from '../operation';\n/**\n * The input SparseTensor is represented via the map of inputs {`indices`,\n * `values`, `denseShape`}. The output SparseTensor has the same `denseShape`\n * but with indices `outputIndices` and values `outputValues`. This op inserts a\n * single entry for every row that doesn't have any values. The index is created\n * as `[row, 0, ..., 0]` and the inserted value is `defaultValue`.\n *\n * For example, suppose `spInput` has shape [5, 6] and non-empty values:\n * [0, 1]: a\n * [0, 3]: b\n * [2, 0]: c\n * [3, 1]: d\n *\n * Rows 1 and 4 are empty, so the output will be of shape [5, 6] with values:\n * [0, 1]: a\n * [0, 3]: b\n * [1, 0]: `defaultValue`\n * [2, 0]: c\n * [3, 1]: d\n * [4, 0]: `defaultValue`\n *\n * The output SparseTensor will be in row-major order and will have the same\n * shape as the input.\n *\n * This op also returns an indicator vector shaped [dense_shape[0]] such that\n * emptyRowIndicator[i] = True iff row i was an empty row.\n *\n * And a reverse index map vector shaped [indices.shape[0]] that is used during\n * backpropagation, reverseIndexMap[i] = outi s.t. indices[i, j] ==\n * outputIndices[outi, j] for all j\n *\n * ```js\n * const result = tf.sparse.sparseFillEmptyRows(\n *   [[0, 0], [1, 0], [1, 3], [1, 4], [3, 2], [3, 3]],\n *   [0, 10, 13, 14, 32, 33], [5, 6], -1);\n * console.log(result);\n * result['outputIndices'].print(); // [[0, 0], [1, 0], [1, 3], [1, 4],\n *                                  //  [2, 0], [3, 2], [3, 3], [4, 0]]\n * result['outputValues'].print(); // [0, 10, 13, 14,-1, 32, 33, -1]\n * result['emptyRowIndicator'].print(); // [false, false, true, false, true]\n * result['reverseIndexMap'].print(); // [0, 1, 2, 3, 5, 6]\n * ```\n * @param indices: 2-D. The indices of the sparse tensor.\n * @param values: 1-D. The values of the sparse tensor.\n * @param denseShape: 1-D. The shape of the sparse tensor.\n * @param defaultValue: 0-D. Default value to insert into location [row, 0, ...,\n *     0] for rows missing from the input sparse tensor.\n * @return A map with the following properties:\n *     - outputIndices\n *     - outputValues: 1-D. The values of the filled sparse tensor.\n *     - emptyRowIndicator: 1-D. Whether the dense row was missing in the input\n * sparse tensor.\n *     - reverseIndexMap: 1-D. A map from the input indices to the output\n * indices.\n * @doc {heading: 'Operations', subheading: 'Sparse'}\n */\n\nfunction sparseFillEmptyRows_(indices, values, denseShape, defaultValue) {\n  const $indices = convertToTensor(indices, 'indices', 'sparseFillEmptyRows', 'int32');\n  const $values = convertToTensor(values, 'values', 'sparseFillEmptyRows');\n  const $denseShape = convertToTensor(denseShape, 'denseShape', 'sparseFillEmptyRows', 'int32');\n  const $defaultValue = convertToTensor(defaultValue, 'defaultValue', 'sparseFillEmptyRows', $values.dtype);\n\n  if ($indices.rank !== 2) {\n    throw new Error(`Indices should be Tensor2D but received shape\n        ${$indices.shape}`);\n  }\n\n  if ($values.rank !== 1) {\n    throw new Error(`Values should be Tensor1D but received shape ${$values.shape}`);\n  }\n\n  if ($denseShape.rank !== 1) {\n    throw new Error(`Dense shape should be Tensor1D but received shape ${$denseShape.shape}`);\n  }\n\n  if ($defaultValue.rank !== 0) {\n    throw new Error(`Default value should be a scalar but received shape ${$defaultValue.shape}`);\n  }\n\n  const inputs = {\n    indices: $indices,\n    values: $values,\n    denseShape: $denseShape,\n    defaultValue: $defaultValue\n  };\n  const result = ENGINE.runKernel(SparseFillEmptyRows, inputs);\n  return {\n    outputIndices: result[0],\n    outputValues: result[1],\n    emptyRowIndicator: result[2],\n    reverseIndexMap: result[3]\n  };\n}\n\nexport const sparseFillEmptyRows = op({\n  sparseFillEmptyRows_\n});","map":{"version":3,"names":["ENGINE","SparseFillEmptyRows","convertToTensor","op","sparseFillEmptyRows_","indices","values","denseShape","defaultValue","$indices","$values","$denseShape","$defaultValue","dtype","rank","Error","shape","inputs","result","runKernel","outputIndices","outputValues","emptyRowIndicator","reverseIndexMap","sparseFillEmptyRows"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/sparse/sparse_fill_empty_rows.js"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { SparseFillEmptyRows } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { op } from '../operation';\n/**\n * The input SparseTensor is represented via the map of inputs {`indices`,\n * `values`, `denseShape`}. The output SparseTensor has the same `denseShape`\n * but with indices `outputIndices` and values `outputValues`. This op inserts a\n * single entry for every row that doesn't have any values. The index is created\n * as `[row, 0, ..., 0]` and the inserted value is `defaultValue`.\n *\n * For example, suppose `spInput` has shape [5, 6] and non-empty values:\n * [0, 1]: a\n * [0, 3]: b\n * [2, 0]: c\n * [3, 1]: d\n *\n * Rows 1 and 4 are empty, so the output will be of shape [5, 6] with values:\n * [0, 1]: a\n * [0, 3]: b\n * [1, 0]: `defaultValue`\n * [2, 0]: c\n * [3, 1]: d\n * [4, 0]: `defaultValue`\n *\n * The output SparseTensor will be in row-major order and will have the same\n * shape as the input.\n *\n * This op also returns an indicator vector shaped [dense_shape[0]] such that\n * emptyRowIndicator[i] = True iff row i was an empty row.\n *\n * And a reverse index map vector shaped [indices.shape[0]] that is used during\n * backpropagation, reverseIndexMap[i] = outi s.t. indices[i, j] ==\n * outputIndices[outi, j] for all j\n *\n * ```js\n * const result = tf.sparse.sparseFillEmptyRows(\n *   [[0, 0], [1, 0], [1, 3], [1, 4], [3, 2], [3, 3]],\n *   [0, 10, 13, 14, 32, 33], [5, 6], -1);\n * console.log(result);\n * result['outputIndices'].print(); // [[0, 0], [1, 0], [1, 3], [1, 4],\n *                                  //  [2, 0], [3, 2], [3, 3], [4, 0]]\n * result['outputValues'].print(); // [0, 10, 13, 14,-1, 32, 33, -1]\n * result['emptyRowIndicator'].print(); // [false, false, true, false, true]\n * result['reverseIndexMap'].print(); // [0, 1, 2, 3, 5, 6]\n * ```\n * @param indices: 2-D. The indices of the sparse tensor.\n * @param values: 1-D. The values of the sparse tensor.\n * @param denseShape: 1-D. The shape of the sparse tensor.\n * @param defaultValue: 0-D. Default value to insert into location [row, 0, ...,\n *     0] for rows missing from the input sparse tensor.\n * @return A map with the following properties:\n *     - outputIndices\n *     - outputValues: 1-D. The values of the filled sparse tensor.\n *     - emptyRowIndicator: 1-D. Whether the dense row was missing in the input\n * sparse tensor.\n *     - reverseIndexMap: 1-D. A map from the input indices to the output\n * indices.\n * @doc {heading: 'Operations', subheading: 'Sparse'}\n */\nfunction sparseFillEmptyRows_(indices, values, denseShape, defaultValue) {\n    const $indices = convertToTensor(indices, 'indices', 'sparseFillEmptyRows', 'int32');\n    const $values = convertToTensor(values, 'values', 'sparseFillEmptyRows');\n    const $denseShape = convertToTensor(denseShape, 'denseShape', 'sparseFillEmptyRows', 'int32');\n    const $defaultValue = convertToTensor(defaultValue, 'defaultValue', 'sparseFillEmptyRows', $values.dtype);\n    if ($indices.rank !== 2) {\n        throw new Error(`Indices should be Tensor2D but received shape\n        ${$indices.shape}`);\n    }\n    if ($values.rank !== 1) {\n        throw new Error(`Values should be Tensor1D but received shape ${$values.shape}`);\n    }\n    if ($denseShape.rank !== 1) {\n        throw new Error(`Dense shape should be Tensor1D but received shape ${$denseShape.shape}`);\n    }\n    if ($defaultValue.rank !== 0) {\n        throw new Error(`Default value should be a scalar but received shape ${$defaultValue.shape}`);\n    }\n    const inputs = {\n        indices: $indices,\n        values: $values,\n        denseShape: $denseShape,\n        defaultValue: $defaultValue\n    };\n    const result = ENGINE.runKernel(SparseFillEmptyRows, inputs);\n    return {\n        outputIndices: result[0],\n        outputValues: result[1],\n        emptyRowIndicator: result[2],\n        reverseIndexMap: result[3]\n    };\n}\nexport const sparseFillEmptyRows = op({ sparseFillEmptyRows_ });\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,cAAvB;AACA,SAASC,mBAAT,QAAoC,oBAApC;AACA,SAASC,eAAT,QAAgC,uBAAhC;AACA,SAASC,EAAT,QAAmB,cAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,oBAAT,CAA8BC,OAA9B,EAAuCC,MAAvC,EAA+CC,UAA/C,EAA2DC,YAA3D,EAAyE;EACrE,MAAMC,QAAQ,GAAGP,eAAe,CAACG,OAAD,EAAU,SAAV,EAAqB,qBAArB,EAA4C,OAA5C,CAAhC;EACA,MAAMK,OAAO,GAAGR,eAAe,CAACI,MAAD,EAAS,QAAT,EAAmB,qBAAnB,CAA/B;EACA,MAAMK,WAAW,GAAGT,eAAe,CAACK,UAAD,EAAa,YAAb,EAA2B,qBAA3B,EAAkD,OAAlD,CAAnC;EACA,MAAMK,aAAa,GAAGV,eAAe,CAACM,YAAD,EAAe,cAAf,EAA+B,qBAA/B,EAAsDE,OAAO,CAACG,KAA9D,CAArC;;EACA,IAAIJ,QAAQ,CAACK,IAAT,KAAkB,CAAtB,EAAyB;IACrB,MAAM,IAAIC,KAAJ,CAAW;AACzB,UAAUN,QAAQ,CAACO,KAAM,EADX,CAAN;EAEH;;EACD,IAAIN,OAAO,CAACI,IAAR,KAAiB,CAArB,EAAwB;IACpB,MAAM,IAAIC,KAAJ,CAAW,gDAA+CL,OAAO,CAACM,KAAM,EAAxE,CAAN;EACH;;EACD,IAAIL,WAAW,CAACG,IAAZ,KAAqB,CAAzB,EAA4B;IACxB,MAAM,IAAIC,KAAJ,CAAW,qDAAoDJ,WAAW,CAACK,KAAM,EAAjF,CAAN;EACH;;EACD,IAAIJ,aAAa,CAACE,IAAd,KAAuB,CAA3B,EAA8B;IAC1B,MAAM,IAAIC,KAAJ,CAAW,uDAAsDH,aAAa,CAACI,KAAM,EAArF,CAAN;EACH;;EACD,MAAMC,MAAM,GAAG;IACXZ,OAAO,EAAEI,QADE;IAEXH,MAAM,EAAEI,OAFG;IAGXH,UAAU,EAAEI,WAHD;IAIXH,YAAY,EAAEI;EAJH,CAAf;EAMA,MAAMM,MAAM,GAAGlB,MAAM,CAACmB,SAAP,CAAiBlB,mBAAjB,EAAsCgB,MAAtC,CAAf;EACA,OAAO;IACHG,aAAa,EAAEF,MAAM,CAAC,CAAD,CADlB;IAEHG,YAAY,EAAEH,MAAM,CAAC,CAAD,CAFjB;IAGHI,iBAAiB,EAAEJ,MAAM,CAAC,CAAD,CAHtB;IAIHK,eAAe,EAAEL,MAAM,CAAC,CAAD;EAJpB,CAAP;AAMH;;AACD,OAAO,MAAMM,mBAAmB,GAAGrB,EAAE,CAAC;EAAEC;AAAF,CAAD,CAA9B"},"metadata":{},"sourceType":"module"}