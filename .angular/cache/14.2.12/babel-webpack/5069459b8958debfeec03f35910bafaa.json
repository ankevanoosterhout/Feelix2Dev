{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport class ConcatProgram {\n  // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().\n  constructor(shapes) {\n    this.outputShape = [];\n    this.outputShape = backend_util.computeOutShape(shapes, 1\n    /* axis */\n    );\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n    const offsets = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][1];\n\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][1];\n    }\n\n    const snippets = [`if (yC < ${offsets[0]}) setOutput(getT0(yR, yC));`];\n\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      snippets.push(`else if (yC < ${offsets[i]}) ` + `setOutput(getT${i}(yR, yC-${shift}));`);\n    }\n\n    const lastIndex = offsets.length;\n    const lastShift = offsets[offsets.length - 1];\n    snippets.push(`else setOutput(getT${lastIndex}(yR, yC-${lastShift}));`);\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${snippets.join('\\n        ')}\n      }\n    `;\n  }\n\n}","map":{"version":3,"names":["backend_util","ConcatProgram","constructor","shapes","outputShape","computeOutShape","variableNames","map","_","i","offsets","Array","length","snippets","shift","push","lastIndex","lastShift","userCode","join"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/concat_gpu.js"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport class ConcatProgram {\n    // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().\n    constructor(shapes) {\n        this.outputShape = [];\n        this.outputShape = backend_util.computeOutShape(shapes, 1 /* axis */);\n        this.variableNames = shapes.map((_, i) => `T${i}`);\n        const offsets = new Array(shapes.length - 1);\n        offsets[0] = shapes[0][1];\n        for (let i = 1; i < offsets.length; i++) {\n            offsets[i] = offsets[i - 1] + shapes[i][1];\n        }\n        const snippets = [`if (yC < ${offsets[0]}) setOutput(getT0(yR, yC));`];\n        for (let i = 1; i < offsets.length; i++) {\n            const shift = offsets[i - 1];\n            snippets.push(`else if (yC < ${offsets[i]}) ` +\n                `setOutput(getT${i}(yR, yC-${shift}));`);\n        }\n        const lastIndex = offsets.length;\n        const lastShift = offsets[offsets.length - 1];\n        snippets.push(`else setOutput(getT${lastIndex}(yR, yC-${lastShift}));`);\n        this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${snippets.join('\\n        ')}\n      }\n    `;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,QAA6B,uBAA7B;AACA,OAAO,MAAMC,aAAN,CAAoB;EACvB;EACAC,WAAW,CAACC,MAAD,EAAS;IAChB,KAAKC,WAAL,GAAmB,EAAnB;IACA,KAAKA,WAAL,GAAmBJ,YAAY,CAACK,eAAb,CAA6BF,MAA7B,EAAqC;IAAE;IAAvC,CAAnB;IACA,KAAKG,aAAL,GAAqBH,MAAM,CAACI,GAAP,CAAW,CAACC,CAAD,EAAIC,CAAJ,KAAW,IAAGA,CAAE,EAA3B,CAArB;IACA,MAAMC,OAAO,GAAG,IAAIC,KAAJ,CAAUR,MAAM,CAACS,MAAP,GAAgB,CAA1B,CAAhB;IACAF,OAAO,CAAC,CAAD,CAAP,GAAaP,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAb;;IACA,KAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,OAAO,CAACE,MAA5B,EAAoCH,CAAC,EAArC,EAAyC;MACrCC,OAAO,CAACD,CAAD,CAAP,GAAaC,OAAO,CAACD,CAAC,GAAG,CAAL,CAAP,GAAiBN,MAAM,CAACM,CAAD,CAAN,CAAU,CAAV,CAA9B;IACH;;IACD,MAAMI,QAAQ,GAAG,CAAE,YAAWH,OAAO,CAAC,CAAD,CAAI,6BAAxB,CAAjB;;IACA,KAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,OAAO,CAACE,MAA5B,EAAoCH,CAAC,EAArC,EAAyC;MACrC,MAAMK,KAAK,GAAGJ,OAAO,CAACD,CAAC,GAAG,CAAL,CAArB;MACAI,QAAQ,CAACE,IAAT,CAAe,iBAAgBL,OAAO,CAACD,CAAD,CAAI,IAA5B,GACT,iBAAgBA,CAAE,WAAUK,KAAM,KADvC;IAEH;;IACD,MAAME,SAAS,GAAGN,OAAO,CAACE,MAA1B;IACA,MAAMK,SAAS,GAAGP,OAAO,CAACA,OAAO,CAACE,MAAR,GAAiB,CAAlB,CAAzB;IACAC,QAAQ,CAACE,IAAT,CAAe,sBAAqBC,SAAU,WAAUC,SAAU,KAAlE;IACA,KAAKC,QAAL,GAAiB;AACzB;AACA;AACA;AACA;AACA;AACA,UAAUL,QAAQ,CAACM,IAAT,CAAc,YAAd,CAA4B;AACtC;AACA,KARQ;EASH;;AA7BsB"},"metadata":{},"sourceType":"module"}