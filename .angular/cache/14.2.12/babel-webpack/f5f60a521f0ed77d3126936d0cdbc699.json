{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Conv3DBackpropInputV2 } from '../kernel_names';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the derivative of the input of a 3D convolution.\n *\n * @param xShape The shape of the input: [batch, depth, height, width,\n * in_channels]. If length of 4, batch of 1 is assumed.\n * @param dy The derivative of the output, of rank 5 or rank 4 of shape\n *   `[batch, outDepth, outHeight, outWidth, in_channels]`.\n * If rank 4, batch of 1 is assumed.\n * @param filter The filter, rank 5, of shape\n *     `[filterDepth, filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideDepth, strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm used:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n */\n\nfunction conv3DBackpropInput_(xShape, dy, filter, strides, pad) {\n  util.assert(xShape.length === dy.rank, () => `Length of inShape ` + `(${xShape.length}) and rank of dy (${dy.rank}) must match`);\n  let xShape5D = xShape;\n  let dy5D = dy;\n  let reshapedTo5D = false;\n\n  if (dy.rank === 4) {\n    reshapedTo5D = true;\n    dy5D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]]);\n    xShape5D = [1, xShape[0], xShape[1], xShape[2], xShape[3]];\n  }\n\n  const inDepth = xShape5D[4];\n  const outDepth = dy5D.shape[4];\n  util.assert(xShape5D.length === 5, () => `Error in conv3dDerInput: inShape must be length 5, but got length ` + `${xShape5D.length}.`);\n  util.assert(dy5D.rank === 5, () => `Error in conv3dDerInput: dy must be rank 5, but got ` + `rank ${dy5D.rank}`);\n  util.assert(filter.rank === 5, () => `Error in conv3dDerInput: filter must be rank 5, but got ` + `rank ${filter.rank}`);\n  util.assert(inDepth === filter.shape[3], () => `Error in conv3dDerInput: depth of input (${inDepth}) must ` + `match input depth for filter ${filter.shape[3]}.`);\n  util.assert(outDepth === filter.shape[4], () => `Error in conv3dDerInput: depth of output (${outDepth}) must ` + `match output depth for filter ${filter.shape[4]}.`);\n  const inputs = {\n    dy: dy5D,\n    filter\n  };\n  const attrs = {\n    pad,\n    strides,\n    inputShape: xShape5D\n  }; // tslint:disable-next-line: no-unnecessary-type-assertion\n\n  const res = ENGINE.runKernel(Conv3DBackpropInputV2, inputs, attrs);\n\n  if (reshapedTo5D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\n  }\n\n  return res;\n}\n\nexport const conv3DBackpropInput = op({\n  conv3DBackpropInput_\n});","map":{"version":3,"names":["ENGINE","Conv3DBackpropInputV2","util","op","reshape","conv3DBackpropInput_","xShape","dy","filter","strides","pad","assert","length","rank","xShape5D","dy5D","reshapedTo5D","shape","inDepth","outDepth","inputs","attrs","inputShape","res","runKernel","conv3DBackpropInput"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_backprop_input.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Conv3DBackpropInputV2 } from '../kernel_names';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the derivative of the input of a 3D convolution.\n *\n * @param xShape The shape of the input: [batch, depth, height, width,\n * in_channels]. If length of 4, batch of 1 is assumed.\n * @param dy The derivative of the output, of rank 5 or rank 4 of shape\n *   `[batch, outDepth, outHeight, outWidth, in_channels]`.\n * If rank 4, batch of 1 is assumed.\n * @param filter The filter, rank 5, of shape\n *     `[filterDepth, filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideDepth, strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm used:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n */\nfunction conv3DBackpropInput_(xShape, dy, filter, strides, pad) {\n    util.assert(xShape.length === dy.rank, () => `Length of inShape ` +\n        `(${xShape.length}) and rank of dy (${dy.rank}) must match`);\n    let xShape5D = xShape;\n    let dy5D = dy;\n    let reshapedTo5D = false;\n    if (dy.rank === 4) {\n        reshapedTo5D = true;\n        dy5D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]]);\n        xShape5D = [1, xShape[0], xShape[1], xShape[2], xShape[3]];\n    }\n    const inDepth = xShape5D[4];\n    const outDepth = dy5D.shape[4];\n    util.assert(xShape5D.length === 5, () => `Error in conv3dDerInput: inShape must be length 5, but got length ` +\n        `${xShape5D.length}.`);\n    util.assert(dy5D.rank === 5, () => `Error in conv3dDerInput: dy must be rank 5, but got ` +\n        `rank ${dy5D.rank}`);\n    util.assert(filter.rank === 5, () => `Error in conv3dDerInput: filter must be rank 5, but got ` +\n        `rank ${filter.rank}`);\n    util.assert(inDepth === filter.shape[3], () => `Error in conv3dDerInput: depth of input (${inDepth}) must ` +\n        `match input depth for filter ${filter.shape[3]}.`);\n    util.assert(outDepth === filter.shape[4], () => `Error in conv3dDerInput: depth of output (${outDepth}) must ` +\n        `match output depth for filter ${filter.shape[4]}.`);\n    const inputs = { dy: dy5D, filter };\n    const attrs = { pad, strides, inputShape: xShape5D };\n    // tslint:disable-next-line: no-unnecessary-type-assertion\n    const res = ENGINE.runKernel(Conv3DBackpropInputV2, inputs, attrs);\n    if (reshapedTo5D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\n    }\n    return res;\n}\nexport const conv3DBackpropInput = op({ conv3DBackpropInput_ });\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}