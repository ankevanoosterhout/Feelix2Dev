{"ast":null,"code":"import { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { batchNorm } from './batchnorm';\nimport { op } from './operation';\n/**\n * Batch normalization, strictly for 2D. For the more relaxed version, see\n * `tf.batchNorm`.\n *\n * @param x The input Tensor.\n * @param mean A mean Tensor.\n * @param variance A variance Tensor.\n * @param offset An offset Tensor.\n * @param scale A scale Tensor.\n * @param varianceEpsilon A small float number to avoid dividing by 0.\n */\n\nfunction batchNorm2d_(x, mean, variance, offset, scale, varianceEpsilon) {\n  const $x = convertToTensor(x, 'x', 'batchNorm');\n  const $mean = convertToTensor(mean, 'mean', 'batchNorm');\n  const $variance = convertToTensor(variance, 'variance', 'batchNorm');\n  let $scale;\n\n  if (scale != null) {\n    $scale = convertToTensor(scale, 'scale', 'batchNorm');\n  }\n\n  let $offset;\n\n  if (offset != null) {\n    $offset = convertToTensor(offset, 'offset', 'batchNorm');\n  }\n\n  util.assert($x.rank === 2, () => `Error in batchNorm2D: x must be rank 2 but got rank ` + `${$x.rank}.`);\n  util.assert($mean.rank === 2 || $mean.rank === 1, () => `Error in batchNorm2D: mean must be rank 2 or rank 1 but ` + `got rank ${$mean.rank}.`);\n  util.assert($variance.rank === 2 || $variance.rank === 1, () => `Error in batchNorm2D: variance must be rank 2 or rank 1 ` + `but got rank ${$variance.rank}.`);\n\n  if ($scale != null) {\n    util.assert($scale.rank === 2 || $scale.rank === 1, () => `Error in batchNorm2D: scale must be rank 2 or rank 1 ` + `but got rank ${$scale.rank}.`);\n  }\n\n  if ($offset != null) {\n    util.assert($offset.rank === 2 || $offset.rank === 1, () => `Error in batchNorm2D: offset must be rank 2 or rank 1 ` + `but got rank ${$offset.rank}.`);\n  }\n\n  return batchNorm($x, $mean, $variance, $offset, $scale, varianceEpsilon);\n}\n\nexport const batchNorm2d = op({\n  batchNorm2d_\n});","map":{"version":3,"names":["convertToTensor","util","batchNorm","op","batchNorm2d_","x","mean","variance","offset","scale","varianceEpsilon","$x","$mean","$variance","$scale","$offset","assert","rank","batchNorm2d"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm2d.js"],"sourcesContent":["import { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { batchNorm } from './batchnorm';\nimport { op } from './operation';\n/**\n * Batch normalization, strictly for 2D. For the more relaxed version, see\n * `tf.batchNorm`.\n *\n * @param x The input Tensor.\n * @param mean A mean Tensor.\n * @param variance A variance Tensor.\n * @param offset An offset Tensor.\n * @param scale A scale Tensor.\n * @param varianceEpsilon A small float number to avoid dividing by 0.\n */\nfunction batchNorm2d_(x, mean, variance, offset, scale, varianceEpsilon) {\n    const $x = convertToTensor(x, 'x', 'batchNorm');\n    const $mean = convertToTensor(mean, 'mean', 'batchNorm');\n    const $variance = convertToTensor(variance, 'variance', 'batchNorm');\n    let $scale;\n    if (scale != null) {\n        $scale = convertToTensor(scale, 'scale', 'batchNorm');\n    }\n    let $offset;\n    if (offset != null) {\n        $offset = convertToTensor(offset, 'offset', 'batchNorm');\n    }\n    util.assert($x.rank === 2, () => `Error in batchNorm2D: x must be rank 2 but got rank ` +\n        `${$x.rank}.`);\n    util.assert($mean.rank === 2 || $mean.rank === 1, () => `Error in batchNorm2D: mean must be rank 2 or rank 1 but ` +\n        `got rank ${$mean.rank}.`);\n    util.assert($variance.rank === 2 || $variance.rank === 1, () => `Error in batchNorm2D: variance must be rank 2 or rank 1 ` +\n        `but got rank ${$variance.rank}.`);\n    if ($scale != null) {\n        util.assert($scale.rank === 2 || $scale.rank === 1, () => `Error in batchNorm2D: scale must be rank 2 or rank 1 ` +\n            `but got rank ${$scale.rank}.`);\n    }\n    if ($offset != null) {\n        util.assert($offset.rank === 2 || $offset.rank === 1, () => `Error in batchNorm2D: offset must be rank 2 or rank 1 ` +\n            `but got rank ${$offset.rank}.`);\n    }\n    return batchNorm($x, $mean, $variance, $offset, $scale, varianceEpsilon);\n}\nexport const batchNorm2d = op({ batchNorm2d_ });\n"],"mappings":"AAAA,SAASA,eAAT,QAAgC,oBAAhC;AACA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,EAAT,QAAmB,aAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,YAAT,CAAsBC,CAAtB,EAAyBC,IAAzB,EAA+BC,QAA/B,EAAyCC,MAAzC,EAAiDC,KAAjD,EAAwDC,eAAxD,EAAyE;EACrE,MAAMC,EAAE,GAAGX,eAAe,CAACK,CAAD,EAAI,GAAJ,EAAS,WAAT,CAA1B;EACA,MAAMO,KAAK,GAAGZ,eAAe,CAACM,IAAD,EAAO,MAAP,EAAe,WAAf,CAA7B;EACA,MAAMO,SAAS,GAAGb,eAAe,CAACO,QAAD,EAAW,UAAX,EAAuB,WAAvB,CAAjC;EACA,IAAIO,MAAJ;;EACA,IAAIL,KAAK,IAAI,IAAb,EAAmB;IACfK,MAAM,GAAGd,eAAe,CAACS,KAAD,EAAQ,OAAR,EAAiB,WAAjB,CAAxB;EACH;;EACD,IAAIM,OAAJ;;EACA,IAAIP,MAAM,IAAI,IAAd,EAAoB;IAChBO,OAAO,GAAGf,eAAe,CAACQ,MAAD,EAAS,QAAT,EAAmB,WAAnB,CAAzB;EACH;;EACDP,IAAI,CAACe,MAAL,CAAYL,EAAE,CAACM,IAAH,KAAY,CAAxB,EAA2B,MAAO,sDAAD,GAC5B,GAAEN,EAAE,CAACM,IAAK,GADf;EAEAhB,IAAI,CAACe,MAAL,CAAYJ,KAAK,CAACK,IAAN,KAAe,CAAf,IAAoBL,KAAK,CAACK,IAAN,KAAe,CAA/C,EAAkD,MAAO,0DAAD,GACnD,YAAWL,KAAK,CAACK,IAAK,GAD3B;EAEAhB,IAAI,CAACe,MAAL,CAAYH,SAAS,CAACI,IAAV,KAAmB,CAAnB,IAAwBJ,SAAS,CAACI,IAAV,KAAmB,CAAvD,EAA0D,MAAO,0DAAD,GAC3D,gBAAeJ,SAAS,CAACI,IAAK,GADnC;;EAEA,IAAIH,MAAM,IAAI,IAAd,EAAoB;IAChBb,IAAI,CAACe,MAAL,CAAYF,MAAM,CAACG,IAAP,KAAgB,CAAhB,IAAqBH,MAAM,CAACG,IAAP,KAAgB,CAAjD,EAAoD,MAAO,uDAAD,GACrD,gBAAeH,MAAM,CAACG,IAAK,GADhC;EAEH;;EACD,IAAIF,OAAO,IAAI,IAAf,EAAqB;IACjBd,IAAI,CAACe,MAAL,CAAYD,OAAO,CAACE,IAAR,KAAiB,CAAjB,IAAsBF,OAAO,CAACE,IAAR,KAAiB,CAAnD,EAAsD,MAAO,wDAAD,GACvD,gBAAeF,OAAO,CAACE,IAAK,GADjC;EAEH;;EACD,OAAOf,SAAS,CAACS,EAAD,EAAKC,KAAL,EAAYC,SAAZ,EAAuBE,OAAvB,EAAgCD,MAAhC,EAAwCJ,eAAxC,CAAhB;AACH;;AACD,OAAO,MAAMQ,WAAW,GAAGf,EAAE,CAAC;EAAEC;AAAF,CAAD,CAAtB"},"metadata":{},"sourceType":"module"}