{"ast":null,"code":"import { Injectable, NgModule } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nclass ElectronService {\n  /**\n   * @private\n   * @return {?}\n   */\n  get electron() {\n    if (!this._electron) {\n      if (window && window.require) {\n        this._electron = window.require('electron');\n        return this._electron;\n      }\n\n      return null;\n    }\n\n    return this._electron;\n  }\n  /**\n   * determines if SPA is running in Electron\n   * @return {?}\n   */\n\n\n  get isElectronApp() {\n    return !!window.navigator.userAgent.match(/Electron/);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get isMacOS() {\n    return this.isElectronApp && process.platform === 'darwin';\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get isWindows() {\n    return this.isElectronApp && process.platform === 'win32';\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get isLinux() {\n    return this.isElectronApp && process.platform === 'linux';\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get isX86() {\n    return this.isElectronApp && process.arch === 'ia32';\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get isX64() {\n    return this.isElectronApp && process.arch === 'x64';\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get isArm() {\n    return this.isElectronApp && process.arch === 'arm';\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get desktopCapturer() {\n    return this.electron ? this.electron.desktopCapturer : null;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get ipcRenderer() {\n    return this.electron ? this.electron.ipcRenderer : null;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get remote() {\n    return this.electron ? this.electron.remote : null;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get webFrame() {\n    return this.electron ? this.electron.webFrame : null;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get clipboard() {\n    return this.electron ? this.electron.clipboard : null;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get crashReporter() {\n    return this.electron ? this.electron.crashReporter : null;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get process() {\n    return this.remote ? this.remote.process : null;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get nativeImage() {\n    return this.electron ? this.electron.nativeImage : null;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get screen() {\n    return this.electron ? this.remote.screen : null;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get shell() {\n    return this.electron ? this.electron.shell : null;\n  }\n\n}\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  ElectronService.prototype._electron;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nclass ElectronServiceRef extends ElectronService {\n  constructor() {\n    super();\n  }\n\n}\n\nElectronServiceRef.ɵfac = function ElectronServiceRef_Factory(t) {\n  return new (t || ElectronServiceRef)();\n};\n\nElectronServiceRef.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: ElectronServiceRef,\n  factory: ElectronServiceRef.ɵfac\n});\n/** @nocollapse */\n\nElectronServiceRef.ctorParameters = () => [];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ElectronServiceRef, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nclass NgxElectronModule {}\n\nNgxElectronModule.ɵfac = function NgxElectronModule_Factory(t) {\n  return new (t || NgxElectronModule)();\n};\n\nNgxElectronModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: NgxElectronModule\n});\nNgxElectronModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [{\n    provide: ElectronService,\n    useClass: ElectronServiceRef\n  }]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxElectronModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [],\n      exports: [],\n      providers: [{\n        provide: ElectronService,\n        useClass: ElectronServiceRef\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { ElectronService, ElectronServiceRef, NgxElectronModule };","map":{"version":3,"names":["Injectable","NgModule","ɵngcc0","ElectronService","electron","_electron","window","require","isElectronApp","navigator","userAgent","match","isMacOS","process","platform","isWindows","isLinux","isX86","arch","isX64","isArm","desktopCapturer","ipcRenderer","remote","webFrame","clipboard","crashReporter","nativeImage","screen","shell","prototype","ElectronServiceRef","constructor","ɵfac","ElectronServiceRef_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","ctorParameters","ngDevMode","ɵsetClassMetadata","type","NgxElectronModule","NgxElectronModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","provide","useClass","args","declarations","exports"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/ngx-electron/__ivy_ngcc__/fesm2015/ngx-electron.js"],"sourcesContent":["import { Injectable, NgModule } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nimport * as ɵngcc0 from '@angular/core';\nclass ElectronService {\n    /**\n     * @private\n     * @return {?}\n     */\n    get electron() {\n        if (!this._electron) {\n            if (window && window.require) {\n                this._electron = window.require('electron');\n                return this._electron;\n            }\n            return null;\n        }\n        return this._electron;\n    }\n    /**\n     * determines if SPA is running in Electron\n     * @return {?}\n     */\n    get isElectronApp() {\n        return !!window.navigator.userAgent.match(/Electron/);\n    }\n    /**\n     * @return {?}\n     */\n    get isMacOS() {\n        return this.isElectronApp && process.platform === 'darwin';\n    }\n    /**\n     * @return {?}\n     */\n    get isWindows() {\n        return this.isElectronApp && process.platform === 'win32';\n    }\n    /**\n     * @return {?}\n     */\n    get isLinux() {\n        return this.isElectronApp && process.platform === 'linux';\n    }\n    /**\n     * @return {?}\n     */\n    get isX86() {\n        return this.isElectronApp && process.arch === 'ia32';\n    }\n    /**\n     * @return {?}\n     */\n    get isX64() {\n        return this.isElectronApp && process.arch === 'x64';\n    }\n    /**\n     * @return {?}\n     */\n    get isArm() {\n        return this.isElectronApp && process.arch === 'arm';\n    }\n    /**\n     * @return {?}\n     */\n    get desktopCapturer() {\n        return this.electron ? this.electron.desktopCapturer : null;\n    }\n    /**\n     * @return {?}\n     */\n    get ipcRenderer() {\n        return this.electron ? this.electron.ipcRenderer : null;\n    }\n    /**\n     * @return {?}\n     */\n    get remote() {\n        return this.electron ? this.electron.remote : null;\n    }\n    /**\n     * @return {?}\n     */\n    get webFrame() {\n        return this.electron ? this.electron.webFrame : null;\n    }\n    /**\n     * @return {?}\n     */\n    get clipboard() {\n        return this.electron ? this.electron.clipboard : null;\n    }\n    /**\n     * @return {?}\n     */\n    get crashReporter() {\n        return this.electron ? this.electron.crashReporter : null;\n    }\n    /**\n     * @return {?}\n     */\n    get process() {\n        return this.remote ? this.remote.process : null;\n    }\n    /**\n     * @return {?}\n     */\n    get nativeImage() {\n        return this.electron ? this.electron.nativeImage : null;\n    }\n    /**\n     * @return {?}\n     */\n    get screen() {\n        return this.electron ? this.remote.screen : null;\n    }\n    /**\n     * @return {?}\n     */\n    get shell() {\n        return this.electron ? this.electron.shell : null;\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    ElectronService.prototype._electron;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ElectronServiceRef extends ElectronService {\n    constructor() {\n        super();\n    }\n}\nElectronServiceRef.ɵfac = function ElectronServiceRef_Factory(t) { return new (t || ElectronServiceRef)(); };\nElectronServiceRef.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ElectronServiceRef, factory: ElectronServiceRef.ɵfac });\n/** @nocollapse */\nElectronServiceRef.ctorParameters = () => [];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ElectronServiceRef, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgxElectronModule {\n}\nNgxElectronModule.ɵfac = function NgxElectronModule_Factory(t) { return new (t || NgxElectronModule)(); };\nNgxElectronModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: NgxElectronModule });\nNgxElectronModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [{ provide: ElectronService, useClass: ElectronServiceRef }] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxElectronModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [],\n                exports: [],\n                providers: [{ provide: ElectronService, useClass: ElectronServiceRef }]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { ElectronService, ElectronServiceRef, NgxElectronModule };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}