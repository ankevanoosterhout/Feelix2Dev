{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nexport class ReshapePackedProgram {\n  constructor(outputShape, inputShape) {\n    this.variableNames = ['A'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.customUniforms = [{\n      name: 'inputShape',\n      type: 'ivec3'\n    }];\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    let mainLoop = ``;\n\n    for (let i = 0; i < 4; i++) {\n      let thisRC = `thisRC = rc;`;\n\n      if (i % 2 === 1) {\n        thisRC += `thisRC.z += 1;`;\n      }\n\n      if (i > 1) {\n        thisRC += `thisRC.y += 1;`;\n      }\n\n      mainLoop += `\n        ${thisRC}\n        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ''}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${i > 0 ? '}' : ''}\n      `;\n    }\n\n    this.userCode = `\n      ${getReshapedInputCoords(inputShape, this.enableShapeUniforms)}\n      ${this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() : shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms ? 'outShape[1]' : outputShape[1]};\n        int cols = ${this.enableShapeUniforms ? 'outShape[2]' : outputShape[2]};\n\n        ${mainLoop}\n\n        setOutput(result);\n      }\n    `;\n  }\n\n}\n\nfunction getReshapedInputCoords(shape, enableShapeUniforms) {\n  const coordsFromIndexSnippet = enableShapeUniforms ? shader_util.getLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd'], 'inputShape') : shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}","map":{"version":3,"names":["useShapeUniforms","shader_util","ReshapePackedProgram","constructor","outputShape","inputShape","variableNames","packedInputs","packedOutput","customUniforms","name","type","enableShapeUniforms","length","mainLoop","i","thisRC","userCode","getReshapedInputCoords","getFlatIndexFrom3DOutput","getFlatIndexFrom3D","shape","coordsFromIndexSnippet","getLogicalCoordinatesFromFlatIndexByUniform","getLogicalCoordinatesFromFlatIndex"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/reshape_packed_gpu.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nexport class ReshapePackedProgram {\n    constructor(outputShape, inputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.customUniforms = [{ name: 'inputShape', type: 'ivec3' }];\n        this.outputShape = outputShape;\n        this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n        let mainLoop = ``;\n        for (let i = 0; i < 4; i++) {\n            let thisRC = `thisRC = rc;`;\n            if (i % 2 === 1) {\n                thisRC += `thisRC.z += 1;`;\n            }\n            if (i > 1) {\n                thisRC += `thisRC.y += 1;`;\n            }\n            mainLoop += `\n        ${thisRC}\n        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ''}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${i > 0 ? '}' : ''}\n      `;\n        }\n        this.userCode = `\n      ${getReshapedInputCoords(inputShape, this.enableShapeUniforms)}\n      ${this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n            shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms ? 'outShape[1]' : outputShape[1]};\n        int cols = ${this.enableShapeUniforms ? 'outShape[2]' : outputShape[2]};\n\n        ${mainLoop}\n\n        setOutput(result);\n      }\n    `;\n    }\n}\nfunction getReshapedInputCoords(shape, enableShapeUniforms) {\n    const coordsFromIndexSnippet = enableShapeUniforms ?\n        shader_util.getLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd'], 'inputShape') :\n        shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n    return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,gBAAT,QAAiC,cAAjC;AACA,OAAO,KAAKC,WAAZ,MAA6B,wBAA7B;AACA,OAAO,MAAMC,oBAAN,CAA2B;EAC9BC,WAAW,CAACC,WAAD,EAAcC,UAAd,EAA0B;IACjC,KAAKC,aAAL,GAAqB,CAAC,GAAD,CAArB;IACA,KAAKC,YAAL,GAAoB,IAApB;IACA,KAAKC,YAAL,GAAoB,IAApB;IACA,KAAKC,cAAL,GAAsB,CAAC;MAAEC,IAAI,EAAE,YAAR;MAAsBC,IAAI,EAAE;IAA5B,CAAD,CAAtB;IACA,KAAKP,WAAL,GAAmBA,WAAnB;IACA,KAAKQ,mBAAL,GAA2BZ,gBAAgB,CAAC,KAAKI,WAAL,CAAiBS,MAAlB,CAA3C;IACA,IAAIC,QAAQ,GAAI,EAAhB;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;MACxB,IAAIC,MAAM,GAAI,cAAd;;MACA,IAAID,CAAC,GAAG,CAAJ,KAAU,CAAd,EAAiB;QACbC,MAAM,IAAK,gBAAX;MACH;;MACD,IAAID,CAAC,GAAG,CAAR,EAAW;QACPC,MAAM,IAAK,gBAAX;MACH;;MACDF,QAAQ,IAAK;AACzB,UAAUE,MAAO;AACjB,UAAUD,CAAC,GAAG,CAAJ,GAAS,yCAAT,GAAoD,EAAG;AACjE;AACA;AACA;AACA;AACA;AACA,mBAAmBA,CAAE;AACrB;AACA,UAAUA,CAAC,GAAG,CAAJ,GAAQ,GAAR,GAAc,EAAG;AAC3B,OAXY;IAYH;;IACD,KAAKE,QAAL,GAAiB;AACzB,QAAQC,sBAAsB,CAACb,UAAD,EAAa,KAAKO,mBAAlB,CAAuC;AACrE,QAAQ,KAAKA,mBAAL,GAA2BX,WAAW,CAACkB,wBAAZ,EAA3B,GACIlB,WAAW,CAACmB,kBAAZ,CAA+BhB,WAA/B,CAA4C;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,KAAKQ,mBAAL,GAA2B,aAA3B,GAA2CR,WAAW,CAAC,CAAD,CAAI;AAC/E,qBAAqB,KAAKQ,mBAAL,GAA2B,aAA3B,GAA2CR,WAAW,CAAC,CAAD,CAAI;AAC/E;AACA,UAAUU,QAAS;AACnB;AACA;AACA;AACA,KAlBQ;EAmBH;;AAjD6B;;AAmDlC,SAASI,sBAAT,CAAgCG,KAAhC,EAAuCT,mBAAvC,EAA4D;EACxD,MAAMU,sBAAsB,GAAGV,mBAAmB,GAC9CX,WAAW,CAACsB,2CAAZ,CAAwD,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAxD,EAAyE,YAAzE,CAD8C,GAE9CtB,WAAW,CAACuB,kCAAZ,CAA+C,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAA/C,EAAgEH,KAAhE,CAFJ;EAGA,OAAQ;AACZ;AACA,QAAQC,sBAAuB;AAC/B;AACA;AACA,GALI;AAMH"},"metadata":{},"sourceType":"module"}