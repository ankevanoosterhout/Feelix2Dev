{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { CropAndResize } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\n/**\n * Extracts crops from the input image tensor and resizes them using bilinear\n * sampling or nearest neighbor sampling (possibly with aspect ratio change)\n * to a common output size specified by cropSize.\n *\n * @param image 4d tensor of shape `[batch,imageHeight,imageWidth, depth]`,\n *     where imageHeight and imageWidth must be positive, specifying the\n *     batch of images from which to take crops\n * @param boxes 2d float32 tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the normalized\n *     coordinates of the box in the `boxInd[i]`th image in the batch\n * @param boxInd 1d int32 tensor of shape `[numBoxes]` with values in range\n *     `[0, batch)` that specifies the image that the `i`-th box refers to.\n * @param cropSize 1d int32 tensor of 2 elements `[cropHeigh, cropWidth]`\n *     specifying the size to which all crops are resized to.\n * @param method Optional string from `'bilinear' | 'nearest'`,\n *     defaults to bilinear, which specifies the sampling method for resizing\n * @param extrapolationValue A threshold for deciding when to remove boxes based\n *     on score. Defaults to 0.\n * @return A 4D tensor of the shape `[numBoxes,cropHeight,cropWidth,depth]`\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\n\nfunction cropAndResize_(image, boxes, boxInd, cropSize, method = 'bilinear', extrapolationValue = 0) {\n  const $image = convertToTensor(image, 'image', 'cropAndResize');\n  const $boxes = convertToTensor(boxes, 'boxes', 'cropAndResize', 'float32');\n  const $boxInd = convertToTensor(boxInd, 'boxInd', 'cropAndResize', 'int32');\n  const numBoxes = $boxes.shape[0];\n  util.assert($image.rank === 4, () => 'Error in cropAndResize: image must be rank 4,' + `but got rank ${$image.rank}.`);\n  util.assert($boxes.rank === 2 && $boxes.shape[1] === 4, () => `Error in cropAndResize: boxes must be have size [${numBoxes},4] ` + `but had shape ${$boxes.shape}.`);\n  util.assert($boxInd.rank === 1 && $boxInd.shape[0] === numBoxes, () => `Error in cropAndResize: boxInd must be have size [${numBoxes}] ` + `but had shape ${$boxes.shape}.`);\n  util.assert(cropSize.length === 2, () => `Error in cropAndResize: cropSize must be of length 2, but got ` + `length ${cropSize.length}.`);\n  util.assert(cropSize[0] >= 1 && cropSize[1] >= 1, () => `cropSize must be atleast [1,1], but was ${cropSize}`);\n  util.assert(method === 'bilinear' || method === 'nearest', () => `method must be bilinear or nearest, but was ${method}`);\n  const inputs = {\n    image: $image,\n    boxes: $boxes,\n    boxInd: $boxInd\n  };\n  const attrs = {\n    method,\n    extrapolationValue,\n    cropSize\n  };\n  const res = ENGINE.runKernel(CropAndResize, inputs, attrs);\n  return res;\n}\n\nexport const cropAndResize = op({\n  cropAndResize_\n});","map":{"version":3,"names":["ENGINE","CropAndResize","convertToTensor","util","op","cropAndResize_","image","boxes","boxInd","cropSize","method","extrapolationValue","$image","$boxes","$boxInd","numBoxes","shape","assert","rank","length","inputs","attrs","res","runKernel","cropAndResize"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/image/crop_and_resize.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { CropAndResize } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\n/**\n * Extracts crops from the input image tensor and resizes them using bilinear\n * sampling or nearest neighbor sampling (possibly with aspect ratio change)\n * to a common output size specified by cropSize.\n *\n * @param image 4d tensor of shape `[batch,imageHeight,imageWidth, depth]`,\n *     where imageHeight and imageWidth must be positive, specifying the\n *     batch of images from which to take crops\n * @param boxes 2d float32 tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the normalized\n *     coordinates of the box in the `boxInd[i]`th image in the batch\n * @param boxInd 1d int32 tensor of shape `[numBoxes]` with values in range\n *     `[0, batch)` that specifies the image that the `i`-th box refers to.\n * @param cropSize 1d int32 tensor of 2 elements `[cropHeigh, cropWidth]`\n *     specifying the size to which all crops are resized to.\n * @param method Optional string from `'bilinear' | 'nearest'`,\n *     defaults to bilinear, which specifies the sampling method for resizing\n * @param extrapolationValue A threshold for deciding when to remove boxes based\n *     on score. Defaults to 0.\n * @return A 4D tensor of the shape `[numBoxes,cropHeight,cropWidth,depth]`\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction cropAndResize_(image, boxes, boxInd, cropSize, method = 'bilinear', extrapolationValue = 0) {\n    const $image = convertToTensor(image, 'image', 'cropAndResize');\n    const $boxes = convertToTensor(boxes, 'boxes', 'cropAndResize', 'float32');\n    const $boxInd = convertToTensor(boxInd, 'boxInd', 'cropAndResize', 'int32');\n    const numBoxes = $boxes.shape[0];\n    util.assert($image.rank === 4, () => 'Error in cropAndResize: image must be rank 4,' +\n        `but got rank ${$image.rank}.`);\n    util.assert($boxes.rank === 2 && $boxes.shape[1] === 4, () => `Error in cropAndResize: boxes must be have size [${numBoxes},4] ` +\n        `but had shape ${$boxes.shape}.`);\n    util.assert($boxInd.rank === 1 && $boxInd.shape[0] === numBoxes, () => `Error in cropAndResize: boxInd must be have size [${numBoxes}] ` +\n        `but had shape ${$boxes.shape}.`);\n    util.assert(cropSize.length === 2, () => `Error in cropAndResize: cropSize must be of length 2, but got ` +\n        `length ${cropSize.length}.`);\n    util.assert(cropSize[0] >= 1 && cropSize[1] >= 1, () => `cropSize must be atleast [1,1], but was ${cropSize}`);\n    util.assert(method === 'bilinear' || method === 'nearest', () => `method must be bilinear or nearest, but was ${method}`);\n    const inputs = { image: $image, boxes: $boxes, boxInd: $boxInd };\n    const attrs = { method, extrapolationValue, cropSize };\n    const res = ENGINE.runKernel(CropAndResize, inputs, attrs);\n    return res;\n}\nexport const cropAndResize = op({ cropAndResize_ });\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,cAAvB;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,eAAT,QAAgC,uBAAhC;AACA,OAAO,KAAKC,IAAZ,MAAsB,YAAtB;AACA,SAASC,EAAT,QAAmB,cAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,CAAwBC,KAAxB,EAA+BC,KAA/B,EAAsCC,MAAtC,EAA8CC,QAA9C,EAAwDC,MAAM,GAAG,UAAjE,EAA6EC,kBAAkB,GAAG,CAAlG,EAAqG;EACjG,MAAMC,MAAM,GAAGV,eAAe,CAACI,KAAD,EAAQ,OAAR,EAAiB,eAAjB,CAA9B;EACA,MAAMO,MAAM,GAAGX,eAAe,CAACK,KAAD,EAAQ,OAAR,EAAiB,eAAjB,EAAkC,SAAlC,CAA9B;EACA,MAAMO,OAAO,GAAGZ,eAAe,CAACM,MAAD,EAAS,QAAT,EAAmB,eAAnB,EAAoC,OAApC,CAA/B;EACA,MAAMO,QAAQ,GAAGF,MAAM,CAACG,KAAP,CAAa,CAAb,CAAjB;EACAb,IAAI,CAACc,MAAL,CAAYL,MAAM,CAACM,IAAP,KAAgB,CAA5B,EAA+B,MAAM,kDAChC,gBAAeN,MAAM,CAACM,IAAK,GADhC;EAEAf,IAAI,CAACc,MAAL,CAAYJ,MAAM,CAACK,IAAP,KAAgB,CAAhB,IAAqBL,MAAM,CAACG,KAAP,CAAa,CAAb,MAAoB,CAArD,EAAwD,MAAO,oDAAmDD,QAAS,MAA7D,GACzD,iBAAgBF,MAAM,CAACG,KAAM,GADlC;EAEAb,IAAI,CAACc,MAAL,CAAYH,OAAO,CAACI,IAAR,KAAiB,CAAjB,IAAsBJ,OAAO,CAACE,KAAR,CAAc,CAAd,MAAqBD,QAAvD,EAAiE,MAAO,qDAAoDA,QAAS,IAA9D,GAClE,iBAAgBF,MAAM,CAACG,KAAM,GADlC;EAEAb,IAAI,CAACc,MAAL,CAAYR,QAAQ,CAACU,MAAT,KAAoB,CAAhC,EAAmC,MAAO,gEAAD,GACpC,UAASV,QAAQ,CAACU,MAAO,GAD9B;EAEAhB,IAAI,CAACc,MAAL,CAAYR,QAAQ,CAAC,CAAD,CAAR,IAAe,CAAf,IAAoBA,QAAQ,CAAC,CAAD,CAAR,IAAe,CAA/C,EAAkD,MAAO,2CAA0CA,QAAS,EAA5G;EACAN,IAAI,CAACc,MAAL,CAAYP,MAAM,KAAK,UAAX,IAAyBA,MAAM,KAAK,SAAhD,EAA2D,MAAO,+CAA8CA,MAAO,EAAvH;EACA,MAAMU,MAAM,GAAG;IAAEd,KAAK,EAAEM,MAAT;IAAiBL,KAAK,EAAEM,MAAxB;IAAgCL,MAAM,EAAEM;EAAxC,CAAf;EACA,MAAMO,KAAK,GAAG;IAAEX,MAAF;IAAUC,kBAAV;IAA8BF;EAA9B,CAAd;EACA,MAAMa,GAAG,GAAGtB,MAAM,CAACuB,SAAP,CAAiBtB,aAAjB,EAAgCmB,MAAhC,EAAwCC,KAAxC,CAAZ;EACA,OAAOC,GAAP;AACH;;AACD,OAAO,MAAME,aAAa,GAAGpB,EAAE,CAAC;EAAEC;AAAF,CAAD,CAAxB"},"metadata":{},"sourceType":"module"}