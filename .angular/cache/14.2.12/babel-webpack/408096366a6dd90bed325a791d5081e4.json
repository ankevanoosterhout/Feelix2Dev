{"ast":null,"code":"/**\n * Contains global resources of a model.\n */\nexport class ResourceManager {\n  constructor(hashTableNameToHandle = {}, hashTableMap = {}) {\n    this.hashTableNameToHandle = hashTableNameToHandle;\n    this.hashTableMap = hashTableMap;\n  }\n  /**\n   * Register a `HashTable` in the resource manager.\n   *\n   * The `HashTable` can be retrieved by `resourceManager.getHashTableById`,\n   * where id is the table handle tensor's id.\n   *\n   * @param name Op node name that creates the `HashTable`.\n   * @param hashTable The `HashTable` to be added to resource manager.\n   */\n\n\n  addHashTable(name, hashTable) {\n    this.hashTableNameToHandle[name] = hashTable.handle;\n    this.hashTableMap[hashTable.id] = hashTable;\n  }\n  /**\n   * Get the table handle by node name.\n   * @param name Op node name that creates the `HashTable`. This name is also\n   *     used in the inputs list of lookup and import `HashTable` ops.\n   */\n\n\n  getHashTableHandleByName(name) {\n    return this.hashTableNameToHandle[name];\n  }\n  /**\n   * Get the actual `HashTable` by its handle tensor's id.\n   * @param id The id of the handle tensor.\n   */\n\n\n  getHashTableById(id) {\n    return this.hashTableMap[id];\n  }\n  /**\n   * Dispose `ResourceManager`, including its hashTables and tensors in them.\n   */\n\n\n  dispose() {\n    for (const key in this.hashTableMap) {\n      this.hashTableMap[key].clearAndClose();\n      delete this.hashTableMap[key];\n    }\n\n    for (const name in this.hashTableNameToHandle) {\n      this.hashTableNameToHandle[name].dispose();\n      delete this.hashTableNameToHandle[name];\n    }\n  }\n\n}","map":{"version":3,"names":["ResourceManager","constructor","hashTableNameToHandle","hashTableMap","addHashTable","name","hashTable","handle","id","getHashTableHandleByName","getHashTableById","dispose","key","clearAndClose"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-converter/dist/executor/resource_manager.js"],"sourcesContent":["/**\n * Contains global resources of a model.\n */\nexport class ResourceManager {\n    constructor(hashTableNameToHandle = {}, hashTableMap = {}) {\n        this.hashTableNameToHandle = hashTableNameToHandle;\n        this.hashTableMap = hashTableMap;\n    }\n    /**\n     * Register a `HashTable` in the resource manager.\n     *\n     * The `HashTable` can be retrieved by `resourceManager.getHashTableById`,\n     * where id is the table handle tensor's id.\n     *\n     * @param name Op node name that creates the `HashTable`.\n     * @param hashTable The `HashTable` to be added to resource manager.\n     */\n    addHashTable(name, hashTable) {\n        this.hashTableNameToHandle[name] = hashTable.handle;\n        this.hashTableMap[hashTable.id] = hashTable;\n    }\n    /**\n     * Get the table handle by node name.\n     * @param name Op node name that creates the `HashTable`. This name is also\n     *     used in the inputs list of lookup and import `HashTable` ops.\n     */\n    getHashTableHandleByName(name) {\n        return this.hashTableNameToHandle[name];\n    }\n    /**\n     * Get the actual `HashTable` by its handle tensor's id.\n     * @param id The id of the handle tensor.\n     */\n    getHashTableById(id) {\n        return this.hashTableMap[id];\n    }\n    /**\n     * Dispose `ResourceManager`, including its hashTables and tensors in them.\n     */\n    dispose() {\n        for (const key in this.hashTableMap) {\n            this.hashTableMap[key].clearAndClose();\n            delete this.hashTableMap[key];\n        }\n        for (const name in this.hashTableNameToHandle) {\n            this.hashTableNameToHandle[name].dispose();\n            delete this.hashTableNameToHandle[name];\n        }\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,MAAMA,eAAN,CAAsB;EACzBC,WAAW,CAACC,qBAAqB,GAAG,EAAzB,EAA6BC,YAAY,GAAG,EAA5C,EAAgD;IACvD,KAAKD,qBAAL,GAA6BA,qBAA7B;IACA,KAAKC,YAAL,GAAoBA,YAApB;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIC,YAAY,CAACC,IAAD,EAAOC,SAAP,EAAkB;IAC1B,KAAKJ,qBAAL,CAA2BG,IAA3B,IAAmCC,SAAS,CAACC,MAA7C;IACA,KAAKJ,YAAL,CAAkBG,SAAS,CAACE,EAA5B,IAAkCF,SAAlC;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIG,wBAAwB,CAACJ,IAAD,EAAO;IAC3B,OAAO,KAAKH,qBAAL,CAA2BG,IAA3B,CAAP;EACH;EACD;AACJ;AACA;AACA;;;EACIK,gBAAgB,CAACF,EAAD,EAAK;IACjB,OAAO,KAAKL,YAAL,CAAkBK,EAAlB,CAAP;EACH;EACD;AACJ;AACA;;;EACIG,OAAO,GAAG;IACN,KAAK,MAAMC,GAAX,IAAkB,KAAKT,YAAvB,EAAqC;MACjC,KAAKA,YAAL,CAAkBS,GAAlB,EAAuBC,aAAvB;MACA,OAAO,KAAKV,YAAL,CAAkBS,GAAlB,CAAP;IACH;;IACD,KAAK,MAAMP,IAAX,IAAmB,KAAKH,qBAAxB,EAA+C;MAC3C,KAAKA,qBAAL,CAA2BG,IAA3B,EAAiCM,OAAjC;MACA,OAAO,KAAKT,qBAAL,CAA2BG,IAA3B,CAAP;IACH;EACJ;;AA7CwB"},"metadata":{},"sourceType":"module"}