{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, MaxPool3DGrad } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxPool3dPositions } from '../utils/pool_utils';\nexport function maxPool3DGrad(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    input\n  } = inputs;\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  assertNotComplex([dy, input], 'maxPool3DGrad');\n  const convInfo = backend_util.computePool3DInfo(input.shape, filterSize, strides, 1\n  /* dilations */\n  , pad, dimRoundingMode);\n  const inputBuf = backend.bufferSync(input);\n  const maxPosBuf = maxPool3dPositions(inputBuf, convInfo);\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input.shape, 'float32');\n  const dyBuf = backend.bufferSync(dy);\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n\n            for (let wDepth = 0; wDepth < effectiveFilterDepth; wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth || Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n\n              for (let wRow = 0; wRow < effectiveFilterHeight; wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n\n                if (dyRow < 0 || dyRow >= convInfo.outHeight || Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n\n                for (let wCol = 0; wCol < effectiveFilterWidth; wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth || Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n\n                  const maxPos = effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1 - maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  const curPos = wDepth * effectiveFilterHeight * effectiveFilterWidth + wRow * effectiveFilterWidth + wCol;\n                  const mask = maxPos === curPos ? 1 : 0;\n\n                  if (mask === 0) {\n                    continue;\n                  }\n\n                  const pixel = dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel * mask;\n                }\n              }\n            }\n\n            dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const maxPool3DGradConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPool3DGrad\n};","map":{"version":3,"names":["backend_util","buffer","MaxPool3DGrad","assertNotComplex","maxPool3dPositions","maxPool3DGrad","args","inputs","backend","attrs","dy","input","filterSize","strides","pad","dimRoundingMode","convInfo","computePool3DInfo","shape","inputBuf","bufferSync","maxPosBuf","strideDepth","strideHeight","strideWidth","dilationDepth","dilationHeight","dilationWidth","effectiveFilterDepth","effectiveFilterHeight","effectiveFilterWidth","padFront","padInfo","front","padLeft","left","padTop","top","dx","dyBuf","batch","batchSize","channel","inChannels","dxDepth","inDepth","dxRow","inHeight","dxCol","inWidth","dyDepthCorner","dyRowCorner","dyColCorner","dotProd","wDepth","dyDepth","outDepth","Math","floor","wRow","dyRow","outHeight","wCol","dyCol","outWidth","maxPos","get","curPos","mask","pixel","set","makeTensorInfo","dtype","values","maxPool3DGradConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/MaxPool3DGrad.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, MaxPool3DGrad } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxPool3dPositions } from '../utils/pool_utils';\nexport function maxPool3DGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, input } = inputs;\n    const { filterSize, strides, pad, dimRoundingMode } = attrs;\n    assertNotComplex([dy, input], 'maxPool3DGrad');\n    const convInfo = backend_util.computePool3DInfo(input.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);\n    const inputBuf = backend.bufferSync(input);\n    const maxPosBuf = maxPool3dPositions(inputBuf, convInfo);\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const dx = buffer(input.shape, 'float32');\n    const dyBuf = backend.bufferSync(dy);\n    for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n        for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n            for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n                for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n                    for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n                        // Shader code begins\n                        const dyDepthCorner = dxDepth - padFront;\n                        const dyRowCorner = dxRow - padTop;\n                        const dyColCorner = dxCol - padLeft;\n                        let dotProd = 0;\n                        for (let wDepth = 0; wDepth < effectiveFilterDepth; wDepth += dilationDepth) {\n                            const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n                            if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                                Math.floor(dyDepth) !== dyDepth) {\n                                continue;\n                            }\n                            for (let wRow = 0; wRow < effectiveFilterHeight; wRow += dilationHeight) {\n                                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                                    Math.floor(dyRow) !== dyRow) {\n                                    continue;\n                                }\n                                for (let wCol = 0; wCol < effectiveFilterWidth; wCol += dilationWidth) {\n                                    const dyCol = (dyColCorner + wCol) / strideWidth;\n                                    if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                                        Math.floor(dyCol) !== dyCol) {\n                                        continue;\n                                    }\n                                    const maxPos = effectiveFilterDepth * effectiveFilterHeight *\n                                        effectiveFilterWidth -\n                                        1 -\n                                        maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                                    const curPos = wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                                        wRow * effectiveFilterWidth + wCol;\n                                    const mask = maxPos === curPos ? 1 : 0;\n                                    if (mask === 0) {\n                                        continue;\n                                    }\n                                    const pixel = dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                                    dotProd += pixel * mask;\n                                }\n                            }\n                        }\n                        dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n                    }\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const maxPool3DGradConfig = {\n    kernelName: MaxPool3DGrad,\n    backendName: 'cpu',\n    kernelFunc: maxPool3DGrad\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}