{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPoolGrad } from '@tensorflow/tfjs-core';\nimport { MaxPool2DBackpropProgram } from '../max_pool_backprop_gpu';\nimport { Pool2DProgram } from '../pool_gpu';\nimport { assertNotComplex } from '../webgl_util';\nexport function maxPoolGrad(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    input,\n    output\n  } = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, 1\n  /* dilations */\n  , pad, dimRoundingMode);\n  const getPositions = true;\n  const maxPoolPositionsProgram = new Pool2DProgram(convInfo, 'max', getPositions);\n  const maxPoolPositions = backend.runWebGLProgram(maxPoolPositionsProgram, [x], x.dtype);\n  const maxPoolBackPropProgram = new MaxPool2DBackpropProgram(convInfo);\n  const result = backend.runWebGLProgram(maxPoolBackPropProgram, [dy, maxPoolPositions], x.dtype);\n  backend.disposeIntermediateTensorInfo(maxPoolPositions);\n  return result;\n}\nexport const maxPoolGradConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'webgl',\n  kernelFunc: maxPoolGrad\n};","map":{"version":3,"names":["backend_util","MaxPoolGrad","MaxPool2DBackpropProgram","Pool2DProgram","assertNotComplex","maxPoolGrad","args","inputs","backend","attrs","dy","input","output","x","filterSize","strides","pad","dimRoundingMode","convInfo","computePool2DInfo","shape","getPositions","maxPoolPositionsProgram","maxPoolPositions","runWebGLProgram","dtype","maxPoolBackPropProgram","result","disposeIntermediateTensorInfo","maxPoolGradConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPoolGrad.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPoolGrad } from '@tensorflow/tfjs-core';\nimport { MaxPool2DBackpropProgram } from '../max_pool_backprop_gpu';\nimport { Pool2DProgram } from '../pool_gpu';\nimport { assertNotComplex } from '../webgl_util';\nexport function maxPoolGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, input, output } = inputs;\n    const x = input;\n    assertNotComplex([input, output], 'maxPoolGrad');\n    const { filterSize, strides, pad, dimRoundingMode } = attrs;\n    const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);\n    const getPositions = true;\n    const maxPoolPositionsProgram = new Pool2DProgram(convInfo, 'max', getPositions);\n    const maxPoolPositions = backend.runWebGLProgram(maxPoolPositionsProgram, [x], x.dtype);\n    const maxPoolBackPropProgram = new MaxPool2DBackpropProgram(convInfo);\n    const result = backend.runWebGLProgram(maxPoolBackPropProgram, [dy, maxPoolPositions], x.dtype);\n    backend.disposeIntermediateTensorInfo(maxPoolPositions);\n    return result;\n}\nexport const maxPoolGradConfig = {\n    kernelName: MaxPoolGrad,\n    backendName: 'webgl',\n    kernelFunc: maxPoolGrad\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,EAAuBC,WAAvB,QAA0C,uBAA1C;AACA,SAASC,wBAAT,QAAyC,0BAAzC;AACA,SAASC,aAAT,QAA8B,aAA9B;AACA,SAASC,gBAAT,QAAiC,eAAjC;AACA,OAAO,SAASC,WAAT,CAAqBC,IAArB,EAA2B;EAC9B,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BH,IAAnC;EACA,MAAM;IAAEI,EAAF;IAAMC,KAAN;IAAaC;EAAb,IAAwBL,MAA9B;EACA,MAAMM,CAAC,GAAGF,KAAV;EACAP,gBAAgB,CAAC,CAACO,KAAD,EAAQC,MAAR,CAAD,EAAkB,aAAlB,CAAhB;EACA,MAAM;IAAEE,UAAF;IAAcC,OAAd;IAAuBC,GAAvB;IAA4BC;EAA5B,IAAgDR,KAAtD;EACA,MAAMS,QAAQ,GAAGlB,YAAY,CAACmB,iBAAb,CAA+BN,CAAC,CAACO,KAAjC,EAAwCN,UAAxC,EAAoDC,OAApD,EAA6D;EAAE;EAA/D,EAAgFC,GAAhF,EAAqFC,eAArF,CAAjB;EACA,MAAMI,YAAY,GAAG,IAArB;EACA,MAAMC,uBAAuB,GAAG,IAAInB,aAAJ,CAAkBe,QAAlB,EAA4B,KAA5B,EAAmCG,YAAnC,CAAhC;EACA,MAAME,gBAAgB,GAAGf,OAAO,CAACgB,eAAR,CAAwBF,uBAAxB,EAAiD,CAACT,CAAD,CAAjD,EAAsDA,CAAC,CAACY,KAAxD,CAAzB;EACA,MAAMC,sBAAsB,GAAG,IAAIxB,wBAAJ,CAA6BgB,QAA7B,CAA/B;EACA,MAAMS,MAAM,GAAGnB,OAAO,CAACgB,eAAR,CAAwBE,sBAAxB,EAAgD,CAAChB,EAAD,EAAKa,gBAAL,CAAhD,EAAwEV,CAAC,CAACY,KAA1E,CAAf;EACAjB,OAAO,CAACoB,6BAAR,CAAsCL,gBAAtC;EACA,OAAOI,MAAP;AACH;AACD,OAAO,MAAME,iBAAiB,GAAG;EAC7BC,UAAU,EAAE7B,WADiB;EAE7B8B,WAAW,EAAE,OAFgB;EAG7BC,UAAU,EAAE3B;AAHiB,CAA1B"},"metadata":{},"sourceType":"module"}