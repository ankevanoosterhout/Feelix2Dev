{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { SearchSorted } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { sizeFromShape } from '../util_base';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nconst INT32_MAX = 2147483648;\n/**\n * Searches for where a value would go in a sorted sequence.\n *\n * This is not a method for checking containment (like javascript in).\n *\n * The typical use case for this operation is \"binning\", \"bucketing\", or\n * \"discretizing\". The values are assigned to bucket-indices based on the edges\n * listed in 'sortedSequence'. This operation returns the bucket-index for each\n * value.\n *\n * The side argument controls which index is returned if a value lands exactly\n * on an edge.\n *\n * The axis is not settable for this operation. It always operates on the\n * innermost dimension (axis=-1). The operation will accept any number of outer\n * dimensions.\n *\n * Note: This operation assumes that 'sortedSequence' is sorted along the\n * innermost axis, maybe using 'sort(..., axis=-1)'. If the sequence is not\n * sorted no error is raised and the content of the returned tensor is not well\n * defined.\n *\n * ```js\n * const edges = tf.tensor1d([-1, 3.3, 9.1, 10.0]);\n * let values = tf.tensor1d([0.0, 4.1, 12.0]);\n * const result1 = tf.searchSorted(edges, values, 'left');\n * result1.print(); // [1, 2, 4]\n *\n * const seq = tf.tensor1d([0, 3, 9, 10, 10]);\n * values = tf.tensor1d([0, 4, 10]);\n * const result2 = tf.searchSorted(seq, values, 'left');\n * result2.print(); // [0, 2, 3]\n * const result3 = tf.searchSorted(seq, values, 'right');\n * result3.print(); // [1, 2, 5]\n *\n * const sortedSequence = tf.tensor2d([[0., 3., 8., 9., 10.],\n *                                     [1., 2., 3., 4., 5.]]);\n * values = tf.tensor2d([[9.8, 2.1, 4.3],\n *                       [0.1, 6.6, 4.5, ]]);\n * const result4 = tf.searchSorted(sortedSequence, values, 'left');\n * result4.print(); // [[4, 1, 2], [0, 5, 4]]\n * ```\n * @param sortedSequence: N-D. Sorted sequence.\n * @param values: N-D. Search values.\n * @param side: 'left'|'right'. Defaults to 'left'. 'left' corresponds to lower\n *     bound and 'right' to upper bound.\n * @return An N-D int32 tensor the size of values containing the result of\n *     applying either lower bound or upper bound (depending on side) to each\n *     value. The result is not a global index to the entire Tensor, but the\n *     index in the last dimension.\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\n */\n\nfunction searchSorted_(sortedSequence, values, side = 'left') {\n  const $sortedSequence = convertToTensor(sortedSequence, 'sortedSequence', 'searchSorted');\n  const $values = convertToTensor(values, 'values', 'searchSorted');\n  const sequenceSize = $sortedSequence.shape[$sortedSequence.shape.length - 1];\n  const valuesSize = $values.shape[$values.shape.length - 1];\n  const $sortedSequence2D = reshape($sortedSequence, [-1, sequenceSize]);\n  const $values2D = reshape($values, [-1, valuesSize]);\n\n  if ($sortedSequence2D.rank < 2) {\n    throw new Error(`Sorted input argument must be at least 2-dimensional`);\n  }\n\n  if ($sortedSequence2D.shape[0] !== $values2D.shape[0]) {\n    throw new Error(`Leading dimension of 'sortedSequence' and 'values' must match.`);\n  }\n\n  if (sizeFromShape($values2D.shape) >= INT32_MAX) {\n    throw new Error(`values tensor size must less than ${INT32_MAX}`);\n  }\n\n  if ($sortedSequence2D.shape[1] >= INT32_MAX) {\n    throw new Error(`trailing dim_size must less than ${INT32_MAX} for int32 output type, was ${$sortedSequence2D.shape[1]}`);\n  }\n\n  const inputs = {\n    sortedSequence: $sortedSequence2D,\n    values: $values2D\n  };\n  const attrs = {\n    side\n  };\n  return ENGINE.runKernel(SearchSorted, inputs, attrs);\n}\n\nexport const searchSorted = op({\n  searchSorted_\n});","map":{"version":3,"names":["ENGINE","SearchSorted","convertToTensor","sizeFromShape","op","reshape","INT32_MAX","searchSorted_","sortedSequence","values","side","$sortedSequence","$values","sequenceSize","shape","length","valuesSize","$sortedSequence2D","$values2D","rank","Error","inputs","attrs","runKernel","searchSorted"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/search_sorted.js"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { SearchSorted } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { sizeFromShape } from '../util_base';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nconst INT32_MAX = 2147483648;\n/**\n * Searches for where a value would go in a sorted sequence.\n *\n * This is not a method for checking containment (like javascript in).\n *\n * The typical use case for this operation is \"binning\", \"bucketing\", or\n * \"discretizing\". The values are assigned to bucket-indices based on the edges\n * listed in 'sortedSequence'. This operation returns the bucket-index for each\n * value.\n *\n * The side argument controls which index is returned if a value lands exactly\n * on an edge.\n *\n * The axis is not settable for this operation. It always operates on the\n * innermost dimension (axis=-1). The operation will accept any number of outer\n * dimensions.\n *\n * Note: This operation assumes that 'sortedSequence' is sorted along the\n * innermost axis, maybe using 'sort(..., axis=-1)'. If the sequence is not\n * sorted no error is raised and the content of the returned tensor is not well\n * defined.\n *\n * ```js\n * const edges = tf.tensor1d([-1, 3.3, 9.1, 10.0]);\n * let values = tf.tensor1d([0.0, 4.1, 12.0]);\n * const result1 = tf.searchSorted(edges, values, 'left');\n * result1.print(); // [1, 2, 4]\n *\n * const seq = tf.tensor1d([0, 3, 9, 10, 10]);\n * values = tf.tensor1d([0, 4, 10]);\n * const result2 = tf.searchSorted(seq, values, 'left');\n * result2.print(); // [0, 2, 3]\n * const result3 = tf.searchSorted(seq, values, 'right');\n * result3.print(); // [1, 2, 5]\n *\n * const sortedSequence = tf.tensor2d([[0., 3., 8., 9., 10.],\n *                                     [1., 2., 3., 4., 5.]]);\n * values = tf.tensor2d([[9.8, 2.1, 4.3],\n *                       [0.1, 6.6, 4.5, ]]);\n * const result4 = tf.searchSorted(sortedSequence, values, 'left');\n * result4.print(); // [[4, 1, 2], [0, 5, 4]]\n * ```\n * @param sortedSequence: N-D. Sorted sequence.\n * @param values: N-D. Search values.\n * @param side: 'left'|'right'. Defaults to 'left'. 'left' corresponds to lower\n *     bound and 'right' to upper bound.\n * @return An N-D int32 tensor the size of values containing the result of\n *     applying either lower bound or upper bound (depending on side) to each\n *     value. The result is not a global index to the entire Tensor, but the\n *     index in the last dimension.\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\n */\nfunction searchSorted_(sortedSequence, values, side = 'left') {\n    const $sortedSequence = convertToTensor(sortedSequence, 'sortedSequence', 'searchSorted');\n    const $values = convertToTensor(values, 'values', 'searchSorted');\n    const sequenceSize = $sortedSequence.shape[$sortedSequence.shape.length - 1];\n    const valuesSize = $values.shape[$values.shape.length - 1];\n    const $sortedSequence2D = reshape($sortedSequence, [-1, sequenceSize]);\n    const $values2D = reshape($values, [-1, valuesSize]);\n    if ($sortedSequence2D.rank < 2) {\n        throw new Error(`Sorted input argument must be at least 2-dimensional`);\n    }\n    if ($sortedSequence2D.shape[0] !== $values2D.shape[0]) {\n        throw new Error(`Leading dimension of 'sortedSequence' and 'values' must match.`);\n    }\n    if (sizeFromShape($values2D.shape) >= INT32_MAX) {\n        throw new Error(`values tensor size must less than ${INT32_MAX}`);\n    }\n    if ($sortedSequence2D.shape[1] >= INT32_MAX) {\n        throw new Error(`trailing dim_size must less than ${INT32_MAX} for int32 output type, was ${$sortedSequence2D.shape[1]}`);\n    }\n    const inputs = {\n        sortedSequence: $sortedSequence2D,\n        values: $values2D,\n    };\n    const attrs = { side };\n    return ENGINE.runKernel(SearchSorted, inputs, attrs);\n}\nexport const searchSorted = op({ searchSorted_ });\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,WAAvB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,SAASC,EAAT,QAAmB,aAAnB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,MAAMC,SAAS,GAAG,UAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,aAAT,CAAuBC,cAAvB,EAAuCC,MAAvC,EAA+CC,IAAI,GAAG,MAAtD,EAA8D;EAC1D,MAAMC,eAAe,GAAGT,eAAe,CAACM,cAAD,EAAiB,gBAAjB,EAAmC,cAAnC,CAAvC;EACA,MAAMI,OAAO,GAAGV,eAAe,CAACO,MAAD,EAAS,QAAT,EAAmB,cAAnB,CAA/B;EACA,MAAMI,YAAY,GAAGF,eAAe,CAACG,KAAhB,CAAsBH,eAAe,CAACG,KAAhB,CAAsBC,MAAtB,GAA+B,CAArD,CAArB;EACA,MAAMC,UAAU,GAAGJ,OAAO,CAACE,KAAR,CAAcF,OAAO,CAACE,KAAR,CAAcC,MAAd,GAAuB,CAArC,CAAnB;EACA,MAAME,iBAAiB,GAAGZ,OAAO,CAACM,eAAD,EAAkB,CAAC,CAAC,CAAF,EAAKE,YAAL,CAAlB,CAAjC;EACA,MAAMK,SAAS,GAAGb,OAAO,CAACO,OAAD,EAAU,CAAC,CAAC,CAAF,EAAKI,UAAL,CAAV,CAAzB;;EACA,IAAIC,iBAAiB,CAACE,IAAlB,GAAyB,CAA7B,EAAgC;IAC5B,MAAM,IAAIC,KAAJ,CAAW,sDAAX,CAAN;EACH;;EACD,IAAIH,iBAAiB,CAACH,KAAlB,CAAwB,CAAxB,MAA+BI,SAAS,CAACJ,KAAV,CAAgB,CAAhB,CAAnC,EAAuD;IACnD,MAAM,IAAIM,KAAJ,CAAW,gEAAX,CAAN;EACH;;EACD,IAAIjB,aAAa,CAACe,SAAS,CAACJ,KAAX,CAAb,IAAkCR,SAAtC,EAAiD;IAC7C,MAAM,IAAIc,KAAJ,CAAW,qCAAoCd,SAAU,EAAzD,CAAN;EACH;;EACD,IAAIW,iBAAiB,CAACH,KAAlB,CAAwB,CAAxB,KAA8BR,SAAlC,EAA6C;IACzC,MAAM,IAAIc,KAAJ,CAAW,oCAAmCd,SAAU,+BAA8BW,iBAAiB,CAACH,KAAlB,CAAwB,CAAxB,CAA2B,EAAjH,CAAN;EACH;;EACD,MAAMO,MAAM,GAAG;IACXb,cAAc,EAAES,iBADL;IAEXR,MAAM,EAAES;EAFG,CAAf;EAIA,MAAMI,KAAK,GAAG;IAAEZ;EAAF,CAAd;EACA,OAAOV,MAAM,CAACuB,SAAP,CAAiBtB,YAAjB,EAA+BoB,MAA/B,EAAuCC,KAAvC,CAAP;AACH;;AACD,OAAO,MAAME,YAAY,GAAGpB,EAAE,CAAC;EAAEG;AAAF,CAAD,CAAvB"},"metadata":{},"sourceType":"module"}