{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ArgMin, backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transpose } from './Transpose';\nexport function argMin(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis\n  } = attrs;\n  assertNotComplex(x, 'argMin');\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n\n  if (permutedAxes != null) {\n    $x = transpose({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        perm: permutedAxes\n      }\n    });\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMin', axes, $x.shape.length);\n  const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const outSize = util.sizeFromShape(outShape);\n  const vals = util.makeZerosTypedArray(outSize, 'int32');\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const aVals = backend.data.get($x.dataId).values;\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    let minIndex = 0;\n\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n\n      if (value < min) {\n        min = value;\n        minIndex = j;\n      }\n    }\n\n    vals[i] = minIndex;\n  }\n\n  intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\nexport const argMinConfig = {\n  kernelName: ArgMin,\n  backendName: 'cpu',\n  kernelFunc: argMin\n};","map":{"version":3,"names":["ArgMin","backend_util","util","assertNotComplex","transpose","argMin","args","inputs","backend","attrs","x","axis","axes","parseAxisParam","shape","permutedAxes","getAxesPermutation","length","$x","intermediateTensorInfos","perm","push","getInnerMostAxes","assertAxesAreInnerMostDims","outShape","reduceShape","computeOutAndReduceShapes","outSize","sizeFromShape","vals","makeZerosTypedArray","reduceSize","aVals","data","get","dataId","values","i","offset","min","minIndex","j","value","forEach","t","disposeIntermediateTensorInfo","makeTensorInfo","argMinConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/ArgMin.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ArgMin, backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transpose } from './Transpose';\nexport function argMin(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis } = attrs;\n    assertNotComplex(x, 'argMin');\n    let axes = util.parseAxisParam(axis, x.shape);\n    const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n    let $x = x;\n    const intermediateTensorInfos = [];\n    if (permutedAxes != null) {\n        $x = transpose({ inputs: { x }, backend, attrs: { perm: permutedAxes } });\n        intermediateTensorInfos.push($x);\n        axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n    }\n    axes = [axes[0]];\n    backend_util.assertAxesAreInnerMostDims('argMin', axes, $x.shape.length);\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes($x.shape, axes);\n    const outSize = util.sizeFromShape(outShape);\n    const vals = util.makeZerosTypedArray(outSize, 'int32');\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const aVals = backend.data.get($x.dataId).values;\n    for (let i = 0; i < vals.length; ++i) {\n        const offset = i * reduceSize;\n        let min = aVals[offset];\n        let minIndex = 0;\n        for (let j = 0; j < reduceSize; ++j) {\n            const value = aVals[offset + j];\n            if (value < min) {\n                min = value;\n                minIndex = j;\n            }\n        }\n        vals[i] = minIndex;\n    }\n    intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return backend.makeTensorInfo(outShape, 'int32', vals);\n}\nexport const argMinConfig = {\n    kernelName: ArgMin,\n    backendName: 'cpu',\n    kernelFunc: argMin\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,EAAiBC,YAAjB,EAA+BC,IAA/B,QAA2C,uBAA3C;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAO,SAASC,MAAT,CAAgBC,IAAhB,EAAsB;EACzB,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BH,IAAnC;EACA,MAAM;IAAEI;EAAF,IAAQH,MAAd;EACA,MAAM;IAAEI;EAAF,IAAWF,KAAjB;EACAN,gBAAgB,CAACO,CAAD,EAAI,QAAJ,CAAhB;EACA,IAAIE,IAAI,GAAGV,IAAI,CAACW,cAAL,CAAoBF,IAApB,EAA0BD,CAAC,CAACI,KAA5B,CAAX;EACA,MAAMC,YAAY,GAAGd,YAAY,CAACe,kBAAb,CAAgCJ,IAAhC,EAAsCF,CAAC,CAACI,KAAF,CAAQG,MAA9C,CAArB;EACA,IAAIC,EAAE,GAAGR,CAAT;EACA,MAAMS,uBAAuB,GAAG,EAAhC;;EACA,IAAIJ,YAAY,IAAI,IAApB,EAA0B;IACtBG,EAAE,GAAGd,SAAS,CAAC;MAAEG,MAAM,EAAE;QAAEG;MAAF,CAAV;MAAiBF,OAAjB;MAA0BC,KAAK,EAAE;QAAEW,IAAI,EAAEL;MAAR;IAAjC,CAAD,CAAd;IACAI,uBAAuB,CAACE,IAAxB,CAA6BH,EAA7B;IACAN,IAAI,GAAGX,YAAY,CAACqB,gBAAb,CAA8BV,IAAI,CAACK,MAAnC,EAA2CC,EAAE,CAACJ,KAAH,CAASG,MAApD,CAAP;EACH;;EACDL,IAAI,GAAG,CAACA,IAAI,CAAC,CAAD,CAAL,CAAP;EACAX,YAAY,CAACsB,0BAAb,CAAwC,QAAxC,EAAkDX,IAAlD,EAAwDM,EAAE,CAACJ,KAAH,CAASG,MAAjE;EACA,MAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BxB,YAAY,CAACyB,yBAAb,CAAuCR,EAAE,CAACJ,KAA1C,EAAiDF,IAAjD,CAAhC;EACA,MAAMe,OAAO,GAAGzB,IAAI,CAAC0B,aAAL,CAAmBJ,QAAnB,CAAhB;EACA,MAAMK,IAAI,GAAG3B,IAAI,CAAC4B,mBAAL,CAAyBH,OAAzB,EAAkC,OAAlC,CAAb;EACA,MAAMI,UAAU,GAAG7B,IAAI,CAAC0B,aAAL,CAAmBH,WAAnB,CAAnB;EACA,MAAMO,KAAK,GAAGxB,OAAO,CAACyB,IAAR,CAAaC,GAAb,CAAiBhB,EAAE,CAACiB,MAApB,EAA4BC,MAA1C;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,IAAI,CAACZ,MAAzB,EAAiC,EAAEoB,CAAnC,EAAsC;IAClC,MAAMC,MAAM,GAAGD,CAAC,GAAGN,UAAnB;IACA,IAAIQ,GAAG,GAAGP,KAAK,CAACM,MAAD,CAAf;IACA,IAAIE,QAAQ,GAAG,CAAf;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,UAApB,EAAgC,EAAEU,CAAlC,EAAqC;MACjC,MAAMC,KAAK,GAAGV,KAAK,CAACM,MAAM,GAAGG,CAAV,CAAnB;;MACA,IAAIC,KAAK,GAAGH,GAAZ,EAAiB;QACbA,GAAG,GAAGG,KAAN;QACAF,QAAQ,GAAGC,CAAX;MACH;IACJ;;IACDZ,IAAI,CAACQ,CAAD,CAAJ,GAAUG,QAAV;EACH;;EACDrB,uBAAuB,CAACwB,OAAxB,CAAgCC,CAAC,IAAIpC,OAAO,CAACqC,6BAAR,CAAsCD,CAAtC,CAArC;EACA,OAAOpC,OAAO,CAACsC,cAAR,CAAuBtB,QAAvB,EAAiC,OAAjC,EAA0CK,IAA1C,CAAP;AACH;AACD,OAAO,MAAMkB,YAAY,GAAG;EACxBC,UAAU,EAAEhD,MADY;EAExBiD,WAAW,EAAE,KAFW;EAGxBC,UAAU,EAAE7C;AAHY,CAArB"},"metadata":{},"sourceType":"module"}