{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { ValueError } from '../errors'; // tslint:enable\n\n/**\n * Determine whether the input is an Array of Shapes.\n */\n\nexport function isArrayOfShapes(x) {\n  return Array.isArray(x) && Array.isArray(x[0]);\n}\n/**\n * Special case of normalizing shapes to lists.\n *\n * @param x A shape or list of shapes to normalize into a list of Shapes.\n * @return A list of Shapes.\n */\n\nexport function normalizeShapeList(x) {\n  if (x.length === 0) {\n    return [];\n  }\n\n  if (!Array.isArray(x[0])) {\n    return [x];\n  }\n\n  return x;\n}\n/**\n * Helper function to obtain exactly one Tensor.\n * @param xs: A single `tf.Tensor` or an `Array` of `tf.Tensor`s.\n * @return A single `tf.Tensor`. If `xs` is an `Array`, return the first one.\n * @throws ValueError: If `xs` is an `Array` and its length is not 1.\n */\n\nexport function getExactlyOneTensor(xs) {\n  let x;\n\n  if (Array.isArray(xs)) {\n    if (xs.length !== 1) {\n      throw new ValueError(`Expected Tensor length to be 1; got ${xs.length}`);\n    }\n\n    x = xs[0];\n  } else {\n    x = xs;\n  }\n\n  return x;\n}\n/**\n * Helper function to obtain exactly on instance of Shape.\n *\n * @param shapes Input single `Shape` or Array of `Shape`s.\n * @returns If input is a single `Shape`, return it unchanged. If the input is\n *   an `Array` containing exactly one instance of `Shape`, return the instance.\n *   Otherwise, throw a `ValueError`.\n * @throws ValueError: If input is an `Array` of `Shape`s, and its length is not\n *   1.\n */\n\nexport function getExactlyOneShape(shapes) {\n  if (Array.isArray(shapes) && Array.isArray(shapes[0])) {\n    if (shapes.length === 1) {\n      shapes = shapes;\n      return shapes[0];\n    } else {\n      throw new ValueError(`Expected exactly 1 Shape; got ${shapes.length}`);\n    }\n  } else {\n    return shapes;\n  }\n}","map":{"version":3,"names":["ValueError","isArrayOfShapes","x","Array","isArray","normalizeShapeList","length","getExactlyOneTensor","xs","getExactlyOneShape","shapes"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-layers/dist/utils/types_utils.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { ValueError } from '../errors';\n// tslint:enable\n/**\n * Determine whether the input is an Array of Shapes.\n */\nexport function isArrayOfShapes(x) {\n    return Array.isArray(x) && Array.isArray(x[0]);\n}\n/**\n * Special case of normalizing shapes to lists.\n *\n * @param x A shape or list of shapes to normalize into a list of Shapes.\n * @return A list of Shapes.\n */\nexport function normalizeShapeList(x) {\n    if (x.length === 0) {\n        return [];\n    }\n    if (!Array.isArray(x[0])) {\n        return [x];\n    }\n    return x;\n}\n/**\n * Helper function to obtain exactly one Tensor.\n * @param xs: A single `tf.Tensor` or an `Array` of `tf.Tensor`s.\n * @return A single `tf.Tensor`. If `xs` is an `Array`, return the first one.\n * @throws ValueError: If `xs` is an `Array` and its length is not 1.\n */\nexport function getExactlyOneTensor(xs) {\n    let x;\n    if (Array.isArray(xs)) {\n        if (xs.length !== 1) {\n            throw new ValueError(`Expected Tensor length to be 1; got ${xs.length}`);\n        }\n        x = xs[0];\n    }\n    else {\n        x = xs;\n    }\n    return x;\n}\n/**\n * Helper function to obtain exactly on instance of Shape.\n *\n * @param shapes Input single `Shape` or Array of `Shape`s.\n * @returns If input is a single `Shape`, return it unchanged. If the input is\n *   an `Array` containing exactly one instance of `Shape`, return the instance.\n *   Otherwise, throw a `ValueError`.\n * @throws ValueError: If input is an `Array` of `Shape`s, and its length is not\n *   1.\n */\nexport function getExactlyOneShape(shapes) {\n    if (Array.isArray(shapes) && Array.isArray(shapes[0])) {\n        if (shapes.length === 1) {\n            shapes = shapes;\n            return shapes[0];\n        }\n        else {\n            throw new ValueError(`Expected exactly 1 Shape; got ${shapes.length}`);\n        }\n    }\n    else {\n        return shapes;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAT,QAA2B,WAA3B,C,CACA;;AACA;AACA;AACA;;AACA,OAAO,SAASC,eAAT,CAAyBC,CAAzB,EAA4B;EAC/B,OAAOC,KAAK,CAACC,OAAN,CAAcF,CAAd,KAAoBC,KAAK,CAACC,OAAN,CAAcF,CAAC,CAAC,CAAD,CAAf,CAA3B;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,kBAAT,CAA4BH,CAA5B,EAA+B;EAClC,IAAIA,CAAC,CAACI,MAAF,KAAa,CAAjB,EAAoB;IAChB,OAAO,EAAP;EACH;;EACD,IAAI,CAACH,KAAK,CAACC,OAAN,CAAcF,CAAC,CAAC,CAAD,CAAf,CAAL,EAA0B;IACtB,OAAO,CAACA,CAAD,CAAP;EACH;;EACD,OAAOA,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,mBAAT,CAA6BC,EAA7B,EAAiC;EACpC,IAAIN,CAAJ;;EACA,IAAIC,KAAK,CAACC,OAAN,CAAcI,EAAd,CAAJ,EAAuB;IACnB,IAAIA,EAAE,CAACF,MAAH,KAAc,CAAlB,EAAqB;MACjB,MAAM,IAAIN,UAAJ,CAAgB,uCAAsCQ,EAAE,CAACF,MAAO,EAAhE,CAAN;IACH;;IACDJ,CAAC,GAAGM,EAAE,CAAC,CAAD,CAAN;EACH,CALD,MAMK;IACDN,CAAC,GAAGM,EAAJ;EACH;;EACD,OAAON,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASO,kBAAT,CAA4BC,MAA5B,EAAoC;EACvC,IAAIP,KAAK,CAACC,OAAN,CAAcM,MAAd,KAAyBP,KAAK,CAACC,OAAN,CAAcM,MAAM,CAAC,CAAD,CAApB,CAA7B,EAAuD;IACnD,IAAIA,MAAM,CAACJ,MAAP,KAAkB,CAAtB,EAAyB;MACrBI,MAAM,GAAGA,MAAT;MACA,OAAOA,MAAM,CAAC,CAAD,CAAb;IACH,CAHD,MAIK;MACD,MAAM,IAAIV,UAAJ,CAAgB,iCAAgCU,MAAM,CAACJ,MAAO,EAA9D,CAAN;IACH;EACJ,CARD,MASK;IACD,OAAOI,MAAP;EACH;AACJ"},"metadata":{},"sourceType":"module"}