{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\n\nfunction lowerBound(array, value) {\n  let left = 0;\n  let right = array.length;\n  let mid = 0;\n\n  while (left < right) {\n    mid = Math.floor((left + right) / 2);\n\n    if (array[mid] < value) {\n      left = mid + 1;\n    } else {\n      right = mid;\n    }\n  }\n\n  return right;\n}\n\nfunction upperBound(array, value) {\n  let left = 0;\n  let right = array.length;\n  let mid = 0;\n\n  while (left < right) {\n    mid = Math.floor((left + right) / 2);\n\n    if (array[mid] <= value) {\n      left = mid + 1;\n    } else {\n      right = mid;\n    }\n  }\n\n  return right;\n}\n\nexport function searchSortedImpl(sortedInputs, values, batchSize, numInputs, numValues, side) {\n  const output = util.getArrayFromDType('int32', batchSize * numValues);\n\n  for (let b = 0; b < batchSize; ++b) {\n    const sortedInputsSlice = sortedInputs.slice(b * numInputs, (b + 1) * numInputs);\n    const outputOffset = b * numValues;\n\n    for (let i = 0; i < numValues; ++i) {\n      output[outputOffset + i] = side === 'left' ? lowerBound(sortedInputsSlice, values[i + outputOffset]) : upperBound(sortedInputsSlice, values[i + outputOffset]);\n    }\n  }\n\n  return output;\n}","map":{"version":3,"names":["util","lowerBound","array","value","left","right","length","mid","Math","floor","upperBound","searchSortedImpl","sortedInputs","values","batchSize","numInputs","numValues","side","output","getArrayFromDType","b","sortedInputsSlice","slice","outputOffset","i"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SearchSorted_impl.js"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nfunction lowerBound(array, value) {\n    let left = 0;\n    let right = array.length;\n    let mid = 0;\n    while (left < right) {\n        mid = Math.floor((left + right) / 2);\n        if (array[mid] < value) {\n            left = mid + 1;\n        }\n        else {\n            right = mid;\n        }\n    }\n    return right;\n}\nfunction upperBound(array, value) {\n    let left = 0;\n    let right = array.length;\n    let mid = 0;\n    while (left < right) {\n        mid = Math.floor((left + right) / 2);\n        if (array[mid] <= value) {\n            left = mid + 1;\n        }\n        else {\n            right = mid;\n        }\n    }\n    return right;\n}\nexport function searchSortedImpl(sortedInputs, values, batchSize, numInputs, numValues, side) {\n    const output = util.getArrayFromDType('int32', batchSize * numValues);\n    for (let b = 0; b < batchSize; ++b) {\n        const sortedInputsSlice = sortedInputs.slice(b * numInputs, (b + 1) * numInputs);\n        const outputOffset = b * numValues;\n        for (let i = 0; i < numValues; ++i) {\n            output[outputOffset + i] = side === 'left' ?\n                lowerBound(sortedInputsSlice, values[i + outputOffset]) :\n                upperBound(sortedInputsSlice, values[i + outputOffset]);\n        }\n    }\n    return output;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,IAAT,QAAqB,uBAArB;;AACA,SAASC,UAAT,CAAoBC,KAApB,EAA2BC,KAA3B,EAAkC;EAC9B,IAAIC,IAAI,GAAG,CAAX;EACA,IAAIC,KAAK,GAAGH,KAAK,CAACI,MAAlB;EACA,IAAIC,GAAG,GAAG,CAAV;;EACA,OAAOH,IAAI,GAAGC,KAAd,EAAqB;IACjBE,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACL,IAAI,GAAGC,KAAR,IAAiB,CAA5B,CAAN;;IACA,IAAIH,KAAK,CAACK,GAAD,CAAL,GAAaJ,KAAjB,EAAwB;MACpBC,IAAI,GAAGG,GAAG,GAAG,CAAb;IACH,CAFD,MAGK;MACDF,KAAK,GAAGE,GAAR;IACH;EACJ;;EACD,OAAOF,KAAP;AACH;;AACD,SAASK,UAAT,CAAoBR,KAApB,EAA2BC,KAA3B,EAAkC;EAC9B,IAAIC,IAAI,GAAG,CAAX;EACA,IAAIC,KAAK,GAAGH,KAAK,CAACI,MAAlB;EACA,IAAIC,GAAG,GAAG,CAAV;;EACA,OAAOH,IAAI,GAAGC,KAAd,EAAqB;IACjBE,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACL,IAAI,GAAGC,KAAR,IAAiB,CAA5B,CAAN;;IACA,IAAIH,KAAK,CAACK,GAAD,CAAL,IAAcJ,KAAlB,EAAyB;MACrBC,IAAI,GAAGG,GAAG,GAAG,CAAb;IACH,CAFD,MAGK;MACDF,KAAK,GAAGE,GAAR;IACH;EACJ;;EACD,OAAOF,KAAP;AACH;;AACD,OAAO,SAASM,gBAAT,CAA0BC,YAA1B,EAAwCC,MAAxC,EAAgDC,SAAhD,EAA2DC,SAA3D,EAAsEC,SAAtE,EAAiFC,IAAjF,EAAuF;EAC1F,MAAMC,MAAM,GAAGlB,IAAI,CAACmB,iBAAL,CAAuB,OAAvB,EAAgCL,SAAS,GAAGE,SAA5C,CAAf;;EACA,KAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,SAApB,EAA+B,EAAEM,CAAjC,EAAoC;IAChC,MAAMC,iBAAiB,GAAGT,YAAY,CAACU,KAAb,CAAmBF,CAAC,GAAGL,SAAvB,EAAkC,CAACK,CAAC,GAAG,CAAL,IAAUL,SAA5C,CAA1B;IACA,MAAMQ,YAAY,GAAGH,CAAC,GAAGJ,SAAzB;;IACA,KAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,SAApB,EAA+B,EAAEQ,CAAjC,EAAoC;MAChCN,MAAM,CAACK,YAAY,GAAGC,CAAhB,CAAN,GAA2BP,IAAI,KAAK,MAAT,GACvBhB,UAAU,CAACoB,iBAAD,EAAoBR,MAAM,CAACW,CAAC,GAAGD,YAAL,CAA1B,CADa,GAEvBb,UAAU,CAACW,iBAAD,EAAoBR,MAAM,CAACW,CAAC,GAAGD,YAAL,CAA1B,CAFd;IAGH;EACJ;;EACD,OAAOL,MAAP;AACH"},"metadata":{},"sourceType":"module"}