{"ast":null,"code":"import { convertToTensor, convertToTensorArray } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes the next states and outputs of a stack of LSTMCells.\n *\n * Each cell output is used as input to the next cell.\n *\n * Returns `[cellState, cellOutput]`.\n *\n * Derived from tf.contrib.rn.MultiRNNCell.\n *\n * @param lstmCells Array of LSTMCell functions.\n * @param data The input to the cell.\n * @param c Array of previous cell states.\n * @param h Array of previous cell outputs.\n *\n * @doc {heading: 'Operations', subheading: 'RNN'}\n */\n\nfunction multiRNNCell_(lstmCells, data, c, h) {\n  const $data = convertToTensor(data, 'data', 'multiRNNCell');\n  const $c = convertToTensorArray(c, 'c', 'multiRNNCell');\n  const $h = convertToTensorArray(h, 'h', 'multiRNNCell');\n  let input = $data;\n  const newStates = [];\n\n  for (let i = 0; i < lstmCells.length; i++) {\n    const output = lstmCells[i](input, $c[i], $h[i]);\n    newStates.push(output[0]);\n    newStates.push(output[1]);\n    input = output[1];\n  }\n\n  const newC = [];\n  const newH = [];\n\n  for (let i = 0; i < newStates.length; i += 2) {\n    newC.push(newStates[i]);\n    newH.push(newStates[i + 1]);\n  }\n\n  return [newC, newH];\n}\n\nexport const multiRNNCell = op({\n  multiRNNCell_\n});","map":{"version":3,"names":["convertToTensor","convertToTensorArray","op","multiRNNCell_","lstmCells","data","c","h","$data","$c","$h","input","newStates","i","length","output","push","newC","newH","multiRNNCell"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/multi_rnn_cell.js"],"sourcesContent":["import { convertToTensor, convertToTensorArray } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes the next states and outputs of a stack of LSTMCells.\n *\n * Each cell output is used as input to the next cell.\n *\n * Returns `[cellState, cellOutput]`.\n *\n * Derived from tf.contrib.rn.MultiRNNCell.\n *\n * @param lstmCells Array of LSTMCell functions.\n * @param data The input to the cell.\n * @param c Array of previous cell states.\n * @param h Array of previous cell outputs.\n *\n * @doc {heading: 'Operations', subheading: 'RNN'}\n */\nfunction multiRNNCell_(lstmCells, data, c, h) {\n    const $data = convertToTensor(data, 'data', 'multiRNNCell');\n    const $c = convertToTensorArray(c, 'c', 'multiRNNCell');\n    const $h = convertToTensorArray(h, 'h', 'multiRNNCell');\n    let input = $data;\n    const newStates = [];\n    for (let i = 0; i < lstmCells.length; i++) {\n        const output = lstmCells[i](input, $c[i], $h[i]);\n        newStates.push(output[0]);\n        newStates.push(output[1]);\n        input = output[1];\n    }\n    const newC = [];\n    const newH = [];\n    for (let i = 0; i < newStates.length; i += 2) {\n        newC.push(newStates[i]);\n        newH.push(newStates[i + 1]);\n    }\n    return [newC, newH];\n}\nexport const multiRNNCell = op({ multiRNNCell_ });\n"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,oBAA1B,QAAsD,oBAAtD;AACA,SAASC,EAAT,QAAmB,aAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,aAAT,CAAuBC,SAAvB,EAAkCC,IAAlC,EAAwCC,CAAxC,EAA2CC,CAA3C,EAA8C;EAC1C,MAAMC,KAAK,GAAGR,eAAe,CAACK,IAAD,EAAO,MAAP,EAAe,cAAf,CAA7B;EACA,MAAMI,EAAE,GAAGR,oBAAoB,CAACK,CAAD,EAAI,GAAJ,EAAS,cAAT,CAA/B;EACA,MAAMI,EAAE,GAAGT,oBAAoB,CAACM,CAAD,EAAI,GAAJ,EAAS,cAAT,CAA/B;EACA,IAAII,KAAK,GAAGH,KAAZ;EACA,MAAMI,SAAS,GAAG,EAAlB;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,SAAS,CAACU,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;IACvC,MAAME,MAAM,GAAGX,SAAS,CAACS,CAAD,CAAT,CAAaF,KAAb,EAAoBF,EAAE,CAACI,CAAD,CAAtB,EAA2BH,EAAE,CAACG,CAAD,CAA7B,CAAf;IACAD,SAAS,CAACI,IAAV,CAAeD,MAAM,CAAC,CAAD,CAArB;IACAH,SAAS,CAACI,IAAV,CAAeD,MAAM,CAAC,CAAD,CAArB;IACAJ,KAAK,GAAGI,MAAM,CAAC,CAAD,CAAd;EACH;;EACD,MAAME,IAAI,GAAG,EAAb;EACA,MAAMC,IAAI,GAAG,EAAb;;EACA,KAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,SAAS,CAACE,MAA9B,EAAsCD,CAAC,IAAI,CAA3C,EAA8C;IAC1CI,IAAI,CAACD,IAAL,CAAUJ,SAAS,CAACC,CAAD,CAAnB;IACAK,IAAI,CAACF,IAAL,CAAUJ,SAAS,CAACC,CAAC,GAAG,CAAL,CAAnB;EACH;;EACD,OAAO,CAACI,IAAD,EAAOC,IAAP,CAAP;AACH;;AACD,OAAO,MAAMC,YAAY,GAAGjB,EAAE,CAAC;EAAEC;AAAF,CAAD,CAAvB"},"metadata":{},"sourceType":"module"}