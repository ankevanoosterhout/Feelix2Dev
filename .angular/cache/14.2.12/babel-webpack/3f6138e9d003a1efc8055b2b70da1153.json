{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param name Kernel name.\n * @param op A `SimpleUnaryOperation` for the kernel.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\n\nexport function unaryKernelFunc(name, op, dtype) {\n  return ({\n    inputs,\n    attrs,\n    backend\n  }) => {\n    const {\n      x\n    } = inputs;\n    assertNotComplex(x, name);\n\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend;\n    const values = cpuBackend.data.get(x.dataId).values;\n    const xSize = util.sizeFromShape(x.shape);\n    const $dtype = dtype || x.dtype;\n    const newValues = util.getArrayFromDType($dtype, xSize);\n\n    for (let i = 0; i < xSize; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n/**\n * Template that creates a `KernelFunc` for unary ops from the given\n * `SimpleUnaryImpl`..\n * @param name Kernel name.\n * @param unaryImpl A `SimpleUnaryImpl` that implements the op.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\n\nexport function unaryKernelFuncFromImpl(name, unaryImpl, dtype) {\n  return ({\n    inputs,\n    attrs,\n    backend\n  }) => {\n    const {\n      x\n    } = inputs;\n    assertNotComplex(x, name);\n\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend;\n    const values = cpuBackend.data.get(x.dataId).values;\n    const $dtype = dtype || x.dtype;\n    const newValues = unaryImpl(values, $dtype, attrs);\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}","map":{"version":3,"names":["util","assertNotComplex","unaryKernelFunc","name","op","dtype","inputs","attrs","backend","x","Error","cpuBackend","values","data","get","dataId","xSize","sizeFromShape","shape","$dtype","newValues","getArrayFromDType","i","makeTensorInfo","unaryKernelFuncFromImpl","unaryImpl"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/unary_utils.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param name Kernel name.\n * @param op A `SimpleUnaryOperation` for the kernel.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFunc(name, op, dtype) {\n    return ({ inputs, attrs, backend }) => {\n        const { x } = inputs;\n        assertNotComplex(x, name);\n        if (x.dtype === 'string' || dtype === 'string') {\n            throw new Error('unaryKernelFunc does not support string input/output');\n        }\n        const cpuBackend = backend;\n        const values = cpuBackend.data.get(x.dataId).values;\n        const xSize = util.sizeFromShape(x.shape);\n        const $dtype = dtype || x.dtype;\n        const newValues = util.getArrayFromDType($dtype, xSize);\n        for (let i = 0; i < xSize; ++i) {\n            newValues[i] = op(values[i], attrs);\n        }\n        return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n    };\n}\n/**\n * Template that creates a `KernelFunc` for unary ops from the given\n * `SimpleUnaryImpl`..\n * @param name Kernel name.\n * @param unaryImpl A `SimpleUnaryImpl` that implements the op.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFuncFromImpl(name, unaryImpl, dtype) {\n    return ({ inputs, attrs, backend }) => {\n        const { x } = inputs;\n        assertNotComplex(x, name);\n        if (x.dtype === 'string' || dtype === 'string') {\n            throw new Error('unaryKernelFunc does not support string input/output');\n        }\n        const cpuBackend = backend;\n        const values = cpuBackend.data.get(x.dataId).values;\n        const $dtype = dtype || x.dtype;\n        const newValues = unaryImpl(values, $dtype, attrs);\n        return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n    };\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,IAAT,QAAqB,uBAArB;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,eAAT,CAAyBC,IAAzB,EAA+BC,EAA/B,EAAmCC,KAAnC,EAA0C;EAC7C,OAAO,CAAC;IAAEC,MAAF;IAAUC,KAAV;IAAiBC;EAAjB,CAAD,KAAgC;IACnC,MAAM;MAAEC;IAAF,IAAQH,MAAd;IACAL,gBAAgB,CAACQ,CAAD,EAAIN,IAAJ,CAAhB;;IACA,IAAIM,CAAC,CAACJ,KAAF,KAAY,QAAZ,IAAwBA,KAAK,KAAK,QAAtC,EAAgD;MAC5C,MAAM,IAAIK,KAAJ,CAAU,sDAAV,CAAN;IACH;;IACD,MAAMC,UAAU,GAAGH,OAAnB;IACA,MAAMI,MAAM,GAAGD,UAAU,CAACE,IAAX,CAAgBC,GAAhB,CAAoBL,CAAC,CAACM,MAAtB,EAA8BH,MAA7C;IACA,MAAMI,KAAK,GAAGhB,IAAI,CAACiB,aAAL,CAAmBR,CAAC,CAACS,KAArB,CAAd;IACA,MAAMC,MAAM,GAAGd,KAAK,IAAII,CAAC,CAACJ,KAA1B;IACA,MAAMe,SAAS,GAAGpB,IAAI,CAACqB,iBAAL,CAAuBF,MAAvB,EAA+BH,KAA/B,CAAlB;;IACA,KAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,KAApB,EAA2B,EAAEM,CAA7B,EAAgC;MAC5BF,SAAS,CAACE,CAAD,CAAT,GAAelB,EAAE,CAACQ,MAAM,CAACU,CAAD,CAAP,EAAYf,KAAZ,CAAjB;IACH;;IACD,OAAOI,UAAU,CAACY,cAAX,CAA0Bd,CAAC,CAACS,KAA5B,EAAmCC,MAAnC,EAA2CC,SAA3C,CAAP;EACH,CAfD;AAgBH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,uBAAT,CAAiCrB,IAAjC,EAAuCsB,SAAvC,EAAkDpB,KAAlD,EAAyD;EAC5D,OAAO,CAAC;IAAEC,MAAF;IAAUC,KAAV;IAAiBC;EAAjB,CAAD,KAAgC;IACnC,MAAM;MAAEC;IAAF,IAAQH,MAAd;IACAL,gBAAgB,CAACQ,CAAD,EAAIN,IAAJ,CAAhB;;IACA,IAAIM,CAAC,CAACJ,KAAF,KAAY,QAAZ,IAAwBA,KAAK,KAAK,QAAtC,EAAgD;MAC5C,MAAM,IAAIK,KAAJ,CAAU,sDAAV,CAAN;IACH;;IACD,MAAMC,UAAU,GAAGH,OAAnB;IACA,MAAMI,MAAM,GAAGD,UAAU,CAACE,IAAX,CAAgBC,GAAhB,CAAoBL,CAAC,CAACM,MAAtB,EAA8BH,MAA7C;IACA,MAAMO,MAAM,GAAGd,KAAK,IAAII,CAAC,CAACJ,KAA1B;IACA,MAAMe,SAAS,GAAGK,SAAS,CAACb,MAAD,EAASO,MAAT,EAAiBZ,KAAjB,CAA3B;IACA,OAAOI,UAAU,CAACY,cAAX,CAA0Bd,CAAC,CAACS,KAA5B,EAAmCC,MAAnC,EAA2CC,SAA3C,CAAP;EACH,CAXD;AAYH"},"metadata":{},"sourceType":"module"}