{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as seedrandom from 'seedrandom';\nimport { expectNumbersClose, testEpsilon } from '../test_util'; // https://en.wikipedia.org/wiki/Marsaglia_polar_method\n\nexport class MPRandGauss {\n  constructor(mean, stdDeviation, dtype, truncated, seed) {\n    this.mean = mean;\n    this.stdDev = stdDeviation;\n    this.dtype = dtype;\n    this.nextVal = NaN;\n    this.truncated = truncated;\n\n    if (this.truncated) {\n      this.upper = this.mean + this.stdDev * 2;\n      this.lower = this.mean - this.stdDev * 2;\n    }\n\n    const seedValue = seed ? seed : Math.random();\n    this.random = seedrandom.alea(seedValue.toString());\n  }\n  /** Returns next sample from a Gaussian distribution. */\n\n\n  nextValue() {\n    if (!isNaN(this.nextVal)) {\n      const value = this.nextVal;\n      this.nextVal = NaN;\n      return value;\n    }\n\n    let resultX, resultY;\n    let isValid = false;\n\n    while (!isValid) {\n      let v1, v2, s;\n\n      do {\n        v1 = 2 * this.random() - 1;\n        v2 = 2 * this.random() - 1;\n        s = v1 * v1 + v2 * v2;\n      } while (s >= 1 || s === 0);\n\n      const mul = Math.sqrt(-2.0 * Math.log(s) / s);\n      resultX = this.mean + this.stdDev * v1 * mul;\n      resultY = this.mean + this.stdDev * v2 * mul;\n\n      if (!this.truncated || this.isValidTruncated(resultX)) {\n        isValid = true;\n      }\n    }\n\n    if (!this.truncated || this.isValidTruncated(resultY)) {\n      this.nextVal = this.convertValue(resultY);\n    }\n\n    return this.convertValue(resultX);\n  }\n  /** Handles proper rounding for non-floating-point numbers. */\n\n\n  convertValue(value) {\n    if (this.dtype == null || this.dtype === 'float32') {\n      return value;\n    }\n\n    return Math.round(value);\n  }\n  /** Returns true if less than 2-standard-deviations from the mean. */\n\n\n  isValidTruncated(value) {\n    return value <= this.upper && value >= this.lower;\n  }\n\n} // Marsaglia, George, and Wai Wan Tsang. 2000. \"A Simple Method for Generating\n// Gamma Variables.\"\n\nexport class RandGamma {\n  constructor(alpha, beta, dtype, seed) {\n    this.alpha = alpha;\n    this.beta = 1 / beta; // convert rate to scale parameter\n\n    this.dtype = dtype;\n    const seedValue = seed ? seed : Math.random();\n    this.randu = seedrandom.alea(seedValue.toString());\n    this.randn = new MPRandGauss(0, 1, dtype, false, this.randu());\n\n    if (alpha < 1) {\n      this.d = alpha + 2 / 3;\n    } else {\n      this.d = alpha - 1 / 3;\n    }\n\n    this.c = 1 / Math.sqrt(9 * this.d);\n  }\n  /** Returns next sample from a gamma distribution. */\n\n\n  nextValue() {\n    let x2, v0, v1, x, u, v;\n\n    while (true) {\n      do {\n        x = this.randn.nextValue();\n        v = 1 + this.c * x;\n      } while (v <= 0);\n\n      v *= v * v;\n      x2 = x * x;\n      v0 = 1 - 0.331 * x2 * x2;\n      v1 = 0.5 * x2 + this.d * (1 - v + Math.log(v));\n      u = this.randu();\n\n      if (u < v0 || Math.log(u) < v1) {\n        break;\n      }\n    }\n\n    v = 1 / this.beta * this.d * v;\n\n    if (this.alpha < 1) {\n      v *= Math.pow(this.randu(), 1 / this.alpha);\n    }\n\n    return this.convertValue(v);\n  }\n  /** Handles proper rounding for non-floating-point numbers. */\n\n\n  convertValue(value) {\n    if (this.dtype === 'float32') {\n      return value;\n    }\n\n    return Math.round(value);\n  }\n\n}\nexport class UniformRandom {\n  constructor(min = 0, max = 1, dtype, seed) {\n    /** Handles proper rounding for non floating point numbers. */\n    this.canReturnFloat = () => this.dtype == null || this.dtype === 'float32';\n\n    this.min = min;\n    this.range = max - min;\n    this.dtype = dtype;\n\n    if (seed == null) {\n      seed = Math.random();\n    }\n\n    if (typeof seed === 'number') {\n      seed = seed.toString();\n    }\n\n    if (!this.canReturnFloat() && this.range <= 1) {\n      throw new Error(`The difference between ${min} - ${max} <= 1 and dtype is not float`);\n    }\n\n    this.random = seedrandom.alea(seed);\n  }\n\n  convertValue(value) {\n    if (this.canReturnFloat()) {\n      return value;\n    }\n\n    return Math.round(value);\n  }\n\n  nextValue() {\n    return this.convertValue(this.min + this.range * this.random());\n  }\n\n}\nexport function jarqueBeraNormalityTest(values) {\n  // https://en.wikipedia.org/wiki/Jarque%E2%80%93Bera_test\n  const n = values.length;\n  const s = skewness(values);\n  const k = kurtosis(values);\n  const jb = n / 6 * (Math.pow(s, 2) + 0.25 * Math.pow(k - 3, 2)); // JB test requires 2-degress of freedom from Chi-Square @ 0.95:\n  // http://www.itl.nist.gov/div898/handbook/eda/section3/eda3674.htm\n\n  const CHI_SQUARE_2DEG = 5.991;\n\n  if (jb > CHI_SQUARE_2DEG) {\n    throw new Error(`Invalid p-value for JB: ${jb}`);\n  }\n}\nexport function expectArrayInMeanStdRange(actual, expectedMean, expectedStdDev, epsilon) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n\n  const actualMean = mean(actual);\n  expectNumbersClose(actualMean, expectedMean, epsilon);\n  expectNumbersClose(standardDeviation(actual, actualMean), expectedStdDev, epsilon);\n}\n\nfunction mean(values) {\n  let sum = 0;\n\n  for (let i = 0; i < values.length; i++) {\n    sum += values[i];\n  }\n\n  return sum / values.length;\n}\n\nfunction standardDeviation(values, mean) {\n  let squareDiffSum = 0;\n\n  for (let i = 0; i < values.length; i++) {\n    const diff = values[i] - mean;\n    squareDiffSum += diff * diff;\n  }\n\n  return Math.sqrt(squareDiffSum / values.length);\n}\n\nfunction kurtosis(values) {\n  // https://en.wikipedia.org/wiki/Kurtosis\n  const valuesMean = mean(values);\n  const n = values.length;\n  let sum2 = 0;\n  let sum4 = 0;\n\n  for (let i = 0; i < n; i++) {\n    const v = values[i] - valuesMean;\n    sum2 += Math.pow(v, 2);\n    sum4 += Math.pow(v, 4);\n  }\n\n  return 1 / n * sum4 / Math.pow(1 / n * sum2, 2);\n}\n\nfunction skewness(values) {\n  // https://en.wikipedia.org/wiki/Skewness\n  const valuesMean = mean(values);\n  const n = values.length;\n  let sum2 = 0;\n  let sum3 = 0;\n\n  for (let i = 0; i < n; i++) {\n    const v = values[i] - valuesMean;\n    sum2 += Math.pow(v, 2);\n    sum3 += Math.pow(v, 3);\n  }\n\n  return 1 / n * sum3 / Math.pow(1 / (n - 1) * sum2, 3 / 2);\n}","map":{"version":3,"names":["seedrandom","expectNumbersClose","testEpsilon","MPRandGauss","constructor","mean","stdDeviation","dtype","truncated","seed","stdDev","nextVal","NaN","upper","lower","seedValue","Math","random","alea","toString","nextValue","isNaN","value","resultX","resultY","isValid","v1","v2","s","mul","sqrt","log","isValidTruncated","convertValue","round","RandGamma","alpha","beta","randu","randn","d","c","x2","v0","x","u","v","pow","UniformRandom","min","max","canReturnFloat","range","Error","jarqueBeraNormalityTest","values","n","length","skewness","k","kurtosis","jb","CHI_SQUARE_2DEG","expectArrayInMeanStdRange","actual","expectedMean","expectedStdDev","epsilon","actualMean","standardDeviation","sum","i","squareDiffSum","diff","valuesMean","sum2","sum4","sum3"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/rand_util.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as seedrandom from 'seedrandom';\nimport { expectNumbersClose, testEpsilon } from '../test_util';\n// https://en.wikipedia.org/wiki/Marsaglia_polar_method\nexport class MPRandGauss {\n    constructor(mean, stdDeviation, dtype, truncated, seed) {\n        this.mean = mean;\n        this.stdDev = stdDeviation;\n        this.dtype = dtype;\n        this.nextVal = NaN;\n        this.truncated = truncated;\n        if (this.truncated) {\n            this.upper = this.mean + this.stdDev * 2;\n            this.lower = this.mean - this.stdDev * 2;\n        }\n        const seedValue = seed ? seed : Math.random();\n        this.random = seedrandom.alea(seedValue.toString());\n    }\n    /** Returns next sample from a Gaussian distribution. */\n    nextValue() {\n        if (!isNaN(this.nextVal)) {\n            const value = this.nextVal;\n            this.nextVal = NaN;\n            return value;\n        }\n        let resultX, resultY;\n        let isValid = false;\n        while (!isValid) {\n            let v1, v2, s;\n            do {\n                v1 = 2 * this.random() - 1;\n                v2 = 2 * this.random() - 1;\n                s = v1 * v1 + v2 * v2;\n            } while (s >= 1 || s === 0);\n            const mul = Math.sqrt(-2.0 * Math.log(s) / s);\n            resultX = this.mean + this.stdDev * v1 * mul;\n            resultY = this.mean + this.stdDev * v2 * mul;\n            if (!this.truncated || this.isValidTruncated(resultX)) {\n                isValid = true;\n            }\n        }\n        if (!this.truncated || this.isValidTruncated(resultY)) {\n            this.nextVal = this.convertValue(resultY);\n        }\n        return this.convertValue(resultX);\n    }\n    /** Handles proper rounding for non-floating-point numbers. */\n    convertValue(value) {\n        if (this.dtype == null || this.dtype === 'float32') {\n            return value;\n        }\n        return Math.round(value);\n    }\n    /** Returns true if less than 2-standard-deviations from the mean. */\n    isValidTruncated(value) {\n        return value <= this.upper && value >= this.lower;\n    }\n}\n// Marsaglia, George, and Wai Wan Tsang. 2000. \"A Simple Method for Generating\n// Gamma Variables.\"\nexport class RandGamma {\n    constructor(alpha, beta, dtype, seed) {\n        this.alpha = alpha;\n        this.beta = 1 / beta; // convert rate to scale parameter\n        this.dtype = dtype;\n        const seedValue = seed ? seed : Math.random();\n        this.randu = seedrandom.alea(seedValue.toString());\n        this.randn = new MPRandGauss(0, 1, dtype, false, this.randu());\n        if (alpha < 1) {\n            this.d = alpha + (2 / 3);\n        }\n        else {\n            this.d = alpha - (1 / 3);\n        }\n        this.c = 1 / Math.sqrt(9 * this.d);\n    }\n    /** Returns next sample from a gamma distribution. */\n    nextValue() {\n        let x2, v0, v1, x, u, v;\n        while (true) {\n            do {\n                x = this.randn.nextValue();\n                v = 1 + (this.c * x);\n            } while (v <= 0);\n            v *= v * v;\n            x2 = x * x;\n            v0 = 1 - (0.331 * x2 * x2);\n            v1 = (0.5 * x2) + (this.d * (1 - v + Math.log(v)));\n            u = this.randu();\n            if (u < v0 || Math.log(u) < v1) {\n                break;\n            }\n        }\n        v = (1 / this.beta) * this.d * v;\n        if (this.alpha < 1) {\n            v *= Math.pow(this.randu(), 1 / this.alpha);\n        }\n        return this.convertValue(v);\n    }\n    /** Handles proper rounding for non-floating-point numbers. */\n    convertValue(value) {\n        if (this.dtype === 'float32') {\n            return value;\n        }\n        return Math.round(value);\n    }\n}\nexport class UniformRandom {\n    constructor(min = 0, max = 1, dtype, seed) {\n        /** Handles proper rounding for non floating point numbers. */\n        this.canReturnFloat = () => (this.dtype == null || this.dtype === 'float32');\n        this.min = min;\n        this.range = max - min;\n        this.dtype = dtype;\n        if (seed == null) {\n            seed = Math.random();\n        }\n        if (typeof seed === 'number') {\n            seed = seed.toString();\n        }\n        if (!this.canReturnFloat() && this.range <= 1) {\n            throw new Error(`The difference between ${min} - ${max} <= 1 and dtype is not float`);\n        }\n        this.random = seedrandom.alea(seed);\n    }\n    convertValue(value) {\n        if (this.canReturnFloat()) {\n            return value;\n        }\n        return Math.round(value);\n    }\n    nextValue() {\n        return this.convertValue(this.min + this.range * this.random());\n    }\n}\nexport function jarqueBeraNormalityTest(values) {\n    // https://en.wikipedia.org/wiki/Jarque%E2%80%93Bera_test\n    const n = values.length;\n    const s = skewness(values);\n    const k = kurtosis(values);\n    const jb = n / 6 * (Math.pow(s, 2) + 0.25 * Math.pow(k - 3, 2));\n    // JB test requires 2-degress of freedom from Chi-Square @ 0.95:\n    // http://www.itl.nist.gov/div898/handbook/eda/section3/eda3674.htm\n    const CHI_SQUARE_2DEG = 5.991;\n    if (jb > CHI_SQUARE_2DEG) {\n        throw new Error(`Invalid p-value for JB: ${jb}`);\n    }\n}\nexport function expectArrayInMeanStdRange(actual, expectedMean, expectedStdDev, epsilon) {\n    if (epsilon == null) {\n        epsilon = testEpsilon();\n    }\n    const actualMean = mean(actual);\n    expectNumbersClose(actualMean, expectedMean, epsilon);\n    expectNumbersClose(standardDeviation(actual, actualMean), expectedStdDev, epsilon);\n}\nfunction mean(values) {\n    let sum = 0;\n    for (let i = 0; i < values.length; i++) {\n        sum += values[i];\n    }\n    return sum / values.length;\n}\nfunction standardDeviation(values, mean) {\n    let squareDiffSum = 0;\n    for (let i = 0; i < values.length; i++) {\n        const diff = values[i] - mean;\n        squareDiffSum += diff * diff;\n    }\n    return Math.sqrt(squareDiffSum / values.length);\n}\nfunction kurtosis(values) {\n    // https://en.wikipedia.org/wiki/Kurtosis\n    const valuesMean = mean(values);\n    const n = values.length;\n    let sum2 = 0;\n    let sum4 = 0;\n    for (let i = 0; i < n; i++) {\n        const v = values[i] - valuesMean;\n        sum2 += Math.pow(v, 2);\n        sum4 += Math.pow(v, 4);\n    }\n    return (1 / n) * sum4 / Math.pow((1 / n) * sum2, 2);\n}\nfunction skewness(values) {\n    // https://en.wikipedia.org/wiki/Skewness\n    const valuesMean = mean(values);\n    const n = values.length;\n    let sum2 = 0;\n    let sum3 = 0;\n    for (let i = 0; i < n; i++) {\n        const v = values[i] - valuesMean;\n        sum2 += Math.pow(v, 2);\n        sum3 += Math.pow(v, 3);\n    }\n    return (1 / n) * sum3 / Math.pow((1 / (n - 1)) * sum2, 3 / 2);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}