{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { BatchMatMul, broadcast_util, buffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { reshape } from './Reshape';\nexport function batchMatMul(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    a,\n    b\n  } = inputs;\n  const {\n    transposeA,\n    transposeB\n  } = attrs;\n  assertNotComplex([a, b], 'matMul');\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n  const outShapeOuterDims = broadcast_util.assertAndGetBroadcastShape(a.shape.slice(0, -2), b.shape.slice(0, -2));\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n  util.assert(innerShapeA === innerShapeB, () => `Error in matMul: inner shapes (${innerShapeA}) and (` + `${innerShapeB}) of Tensors with shapes ${a.shape} and ` + `${b.shape} and transposeA=${transposeA}` + ` and transposeB=${transposeB} must match.`);\n  const a3dShape = transposeA ? [batchDimA, innerShapeA, outerShapeA] : [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape = transposeB ? [batchDimB, outerShapeB, innerShapeB] : [batchDimB, innerShapeB, outerShapeB]; // The rest of the implementation is designed to operate on rank-3 tensors\n\n  const a3d = reshape({\n    inputs: {\n      x: a\n    },\n    backend,\n    attrs: {\n      shape: a3dShape\n    }\n  });\n  const b3d = reshape({\n    inputs: {\n      x: b\n    },\n    backend,\n    attrs: {\n      shape: b3dShape\n    }\n  });\n  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n  const leftDim = transposeA ? a3d.shape[2] : a3d.shape[1];\n  const rightDim = transposeB ? b3d.shape[1] : b3d.shape[2];\n  const batchDim = Math.max(batchDimA, batchDimB);\n  const a3dValues = backend.data.get(a3d.dataId).values;\n  const b3dValues = backend.data.get(b3d.dataId).values;\n  const a3dStrides = util.computeStrides(a3d.shape);\n  const b3dStrides = util.computeStrides(b3d.shape);\n  const [aBatch, aOuterStep, aInnerStep] = transposeA ? [a3dStrides[0], 1, a3dStrides[1]] : [a3dStrides[0], a3dStrides[1], 1];\n  const [bInnerStep, bOuterStep, bBatch] = transposeB ? [1, b3dStrides[1], b3dStrides[0]] : [b3dStrides[1], 1, b3dStrides[0]];\n  const size = leftDim * rightDim;\n  const result = buffer([batchDim, leftDim, rightDim], a3d.dtype);\n  const resVals = result.values;\n  const blockSize = backend.blockSize;\n\n  for (let bi = 0; bi < batchDim; bi++) {\n    for (let i0 = 0; i0 < leftDim; i0 += blockSize) {\n      for (let j0 = 0; j0 < rightDim; j0 += blockSize) {\n        for (let k0 = 0; k0 < sharedDim; k0 += blockSize) {\n          // for when blockSize doesn't evenly divide the input\n          const iBlock = Math.min(i0 + blockSize, leftDim);\n          const jBlock = Math.min(j0 + blockSize, rightDim);\n          const kBlock = Math.min(k0 + blockSize, sharedDim);\n\n          for (let i = i0; i < iBlock; i++) {\n            for (let j = j0; j < jBlock; j++) {\n              let sum = 0.0;\n\n              for (let k = k0; k < kBlock; k++) {\n                const batchOffsetA = Math.min(bi, batchDimA - 1) * aBatch;\n                const batchOffsetB = Math.min(bi, batchDimB - 1) * bBatch;\n                const aVal = a3dValues[batchOffsetA + i * aOuterStep + k * aInnerStep];\n                const bVal = b3dValues[k * bInnerStep + j * bOuterStep + batchOffsetB];\n                sum += aVal * bVal;\n              }\n\n              resVals[bi * size + (i * rightDim + j)] += sum;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  backend.disposeIntermediateTensorInfo(a3d);\n  backend.disposeIntermediateTensorInfo(b3d); // set correct shape on output.\n\n  return backend.makeTensorInfo(outShape, result.dtype, result.values);\n}\nexport const batchMatMulConfig = {\n  kernelName: BatchMatMul,\n  backendName: 'cpu',\n  kernelFunc: batchMatMul\n};","map":{"version":3,"names":["BatchMatMul","broadcast_util","buffer","util","assertNotComplex","reshape","batchMatMul","args","inputs","backend","attrs","a","b","transposeA","transposeB","aRank","shape","length","bRank","innerShapeA","innerShapeB","outerShapeA","outerShapeB","outerDimsA","slice","outerDimsB","batchDimA","sizeFromShape","batchDimB","outShapeOuterDims","assertAndGetBroadcastShape","outShape","concat","assert","a3dShape","b3dShape","a3d","x","b3d","sharedDim","leftDim","rightDim","batchDim","Math","max","a3dValues","data","get","dataId","values","b3dValues","a3dStrides","computeStrides","b3dStrides","aBatch","aOuterStep","aInnerStep","bInnerStep","bOuterStep","bBatch","size","result","dtype","resVals","blockSize","bi","i0","j0","k0","iBlock","min","jBlock","kBlock","i","j","sum","k","batchOffsetA","batchOffsetB","aVal","bVal","disposeIntermediateTensorInfo","makeTensorInfo","batchMatMulConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/BatchMatMul.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { BatchMatMul, broadcast_util, buffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { reshape } from './Reshape';\nexport function batchMatMul(args) {\n    const { inputs, backend, attrs } = args;\n    const { a, b } = inputs;\n    const { transposeA, transposeB } = attrs;\n    assertNotComplex([a, b], 'matMul');\n    const aRank = a.shape.length;\n    const bRank = b.shape.length;\n    const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n    const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n    const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n    const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n    const outerDimsA = a.shape.slice(0, -2);\n    const outerDimsB = b.shape.slice(0, -2);\n    const batchDimA = util.sizeFromShape(outerDimsA);\n    const batchDimB = util.sizeFromShape(outerDimsB);\n    const outShapeOuterDims = broadcast_util.assertAndGetBroadcastShape(a.shape.slice(0, -2), b.shape.slice(0, -2));\n    const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n    util.assert(innerShapeA === innerShapeB, () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n        `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n        `${b.shape} and transposeA=${transposeA}` +\n        ` and transposeB=${transposeB} must match.`);\n    const a3dShape = transposeA ? [batchDimA, innerShapeA, outerShapeA] :\n        [batchDimA, outerShapeA, innerShapeA];\n    const b3dShape = transposeB ? [batchDimB, outerShapeB, innerShapeB] :\n        [batchDimB, innerShapeB, outerShapeB];\n    // The rest of the implementation is designed to operate on rank-3 tensors\n    const a3d = reshape({ inputs: { x: a }, backend, attrs: { shape: a3dShape } });\n    const b3d = reshape({ inputs: { x: b }, backend, attrs: { shape: b3dShape } });\n    const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n    const leftDim = transposeA ? a3d.shape[2] : a3d.shape[1];\n    const rightDim = transposeB ? b3d.shape[1] : b3d.shape[2];\n    const batchDim = Math.max(batchDimA, batchDimB);\n    const a3dValues = backend.data.get(a3d.dataId).values;\n    const b3dValues = backend.data.get(b3d.dataId).values;\n    const a3dStrides = util.computeStrides(a3d.shape);\n    const b3dStrides = util.computeStrides(b3d.shape);\n    const [aBatch, aOuterStep, aInnerStep] = transposeA ?\n        [a3dStrides[0], 1, a3dStrides[1]] :\n        [a3dStrides[0], a3dStrides[1], 1];\n    const [bInnerStep, bOuterStep, bBatch] = transposeB ?\n        [1, b3dStrides[1], b3dStrides[0]] :\n        [b3dStrides[1], 1, b3dStrides[0]];\n    const size = leftDim * rightDim;\n    const result = buffer([batchDim, leftDim, rightDim], a3d.dtype);\n    const resVals = result.values;\n    const blockSize = backend.blockSize;\n    for (let bi = 0; bi < batchDim; bi++) {\n        for (let i0 = 0; i0 < leftDim; i0 += blockSize) {\n            for (let j0 = 0; j0 < rightDim; j0 += blockSize) {\n                for (let k0 = 0; k0 < sharedDim; k0 += blockSize) {\n                    // for when blockSize doesn't evenly divide the input\n                    const iBlock = Math.min(i0 + blockSize, leftDim);\n                    const jBlock = Math.min(j0 + blockSize, rightDim);\n                    const kBlock = Math.min(k0 + blockSize, sharedDim);\n                    for (let i = i0; i < iBlock; i++) {\n                        for (let j = j0; j < jBlock; j++) {\n                            let sum = 0.0;\n                            for (let k = k0; k < kBlock; k++) {\n                                const batchOffsetA = Math.min(bi, batchDimA - 1) * aBatch;\n                                const batchOffsetB = Math.min(bi, batchDimB - 1) * bBatch;\n                                const aVal = a3dValues[batchOffsetA + i * aOuterStep + k * aInnerStep];\n                                const bVal = b3dValues[k * bInnerStep + j * bOuterStep + batchOffsetB];\n                                sum += aVal * bVal;\n                            }\n                            resVals[bi * size + (i * rightDim + j)] += sum;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    backend.disposeIntermediateTensorInfo(a3d);\n    backend.disposeIntermediateTensorInfo(b3d);\n    // set correct shape on output.\n    return backend.makeTensorInfo(outShape, result.dtype, result.values);\n}\nexport const batchMatMulConfig = {\n    kernelName: BatchMatMul,\n    backendName: 'cpu',\n    kernelFunc: batchMatMul,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}