{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, LeakyRelu, util } from '@tensorflow/tfjs-core';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nexport const LEAKYRELU = `return (a < 0.) ? b * a : a;`;\nexport const LEAKYRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\nexport function leakyRelu(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    alpha\n  } = attrs;\n  const $alpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(alpha, 'float32'));\n  const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ? new BinaryOpPackedProgram(LEAKYRELU_PACKED, x.shape, $alpha.shape) : new BinaryOpProgram(LEAKYRELU, x.shape, $alpha.shape);\n  const result = backend.runWebGLProgram(program, [x, $alpha], 'float32');\n  backend.disposeIntermediateTensorInfo($alpha);\n  return result;\n}\nexport const leakyReluConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'webgl',\n  kernelFunc: leakyRelu\n};","map":{"version":3,"names":["env","LeakyRelu","util","BinaryOpProgram","BinaryOpPackedProgram","LEAKYRELU","LEAKYRELU_PACKED","leakyRelu","args","inputs","backend","attrs","x","alpha","$alpha","makeTensorInfo","createScalarValue","program","getBool","shape","result","runWebGLProgram","disposeIntermediateTensorInfo","leakyReluConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LeakyRelu.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, LeakyRelu, util } from '@tensorflow/tfjs-core';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nexport const LEAKYRELU = `return (a < 0.) ? b * a : a;`;\nexport const LEAKYRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\nexport function leakyRelu(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { alpha } = attrs;\n    const $alpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(alpha, 'float32'));\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(LEAKYRELU_PACKED, x.shape, $alpha.shape) :\n        new BinaryOpProgram(LEAKYRELU, x.shape, $alpha.shape);\n    const result = backend.runWebGLProgram(program, [x, $alpha], 'float32');\n    backend.disposeIntermediateTensorInfo($alpha);\n    return result;\n}\nexport const leakyReluConfig = {\n    kernelName: LeakyRelu,\n    backendName: 'webgl',\n    kernelFunc: leakyRelu\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,GAAT,EAAcC,SAAd,EAAyBC,IAAzB,QAAqC,uBAArC;AACA,SAASC,eAAT,QAAgC,iBAAhC;AACA,SAASC,qBAAT,QAAsC,wBAAtC;AACA,OAAO,MAAMC,SAAS,GAAI,8BAAnB;AACP,OAAO,MAAMC,gBAAgB,GAAI;AACjC;AACA;AACA,CAHO;AAIP,OAAO,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;EAC5B,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BH,IAAnC;EACA,MAAM;IAAEI;EAAF,IAAQH,MAAd;EACA,MAAM;IAAEI;EAAF,IAAYF,KAAlB;EACA,MAAMG,MAAM,GAAGJ,OAAO,CAACK,cAAR,CAAuB,EAAvB,EAA2B,SAA3B,EAAsCb,IAAI,CAACc,iBAAL,CAAuBH,KAAvB,EAA8B,SAA9B,CAAtC,CAAf;EACA,MAAMI,OAAO,GAAGjB,GAAG,GAAGkB,OAAN,CAAc,8BAAd,IACZ,IAAId,qBAAJ,CAA0BE,gBAA1B,EAA4CM,CAAC,CAACO,KAA9C,EAAqDL,MAAM,CAACK,KAA5D,CADY,GAEZ,IAAIhB,eAAJ,CAAoBE,SAApB,EAA+BO,CAAC,CAACO,KAAjC,EAAwCL,MAAM,CAACK,KAA/C,CAFJ;EAGA,MAAMC,MAAM,GAAGV,OAAO,CAACW,eAAR,CAAwBJ,OAAxB,EAAiC,CAACL,CAAD,EAAIE,MAAJ,CAAjC,EAA8C,SAA9C,CAAf;EACAJ,OAAO,CAACY,6BAAR,CAAsCR,MAAtC;EACA,OAAOM,MAAP;AACH;AACD,OAAO,MAAMG,eAAe,GAAG;EAC3BC,UAAU,EAAEvB,SADe;EAE3BwB,WAAW,EAAE,OAFc;EAG3BC,UAAU,EAAEnB;AAHe,CAAxB"},"metadata":{},"sourceType":"module"}