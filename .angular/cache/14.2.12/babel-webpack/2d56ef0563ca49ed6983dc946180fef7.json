{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from './engine';\nimport { Tensor, Variable } from './tensor';\nimport { convertToTensor, convertToTensorArray } from './tensor_util_env';\nimport * as util from './util';\n/**\n * Provided `f(x)`, returns another function `g(x, dy?)`, which gives the\n * gradient of `f(x)` with respect to `x`.\n *\n * If `dy` is provided, the gradient of `f(x).mul(dy).sum()` with respect to\n * `x` is computed instead. `f(x)` must take a single tensor `x` and return a\n * single tensor `y`. If `f()` takes multiple inputs, use `tf.grads` instead.\n *\n * ```js\n * // f(x) = x ^ 2\n * const f = x => x.square();\n * // f'(x) = 2x\n * const g = tf.grad(f);\n *\n * const x = tf.tensor1d([2, 3]);\n * g(x).print();\n * ```\n *\n * ```js\n * // f(x) = x ^ 3\n * const f = x => x.pow(tf.scalar(3, 'int32'));\n * // f'(x) = 3x ^ 2\n * const g = tf.grad(f);\n * // f''(x) = 6x\n * const gg = tf.grad(g);\n *\n * const x = tf.tensor1d([2, 3]);\n * gg(x).print();\n * ```\n *\n * @param f The function f(x), to compute gradient for.\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\n\nfunction grad(f) {\n  util.assert(util.isFunction(f), () => 'The f passed in grad(f) must be a function');\n  return (x, dy) => {\n    // x can be of any dtype, thus null as the last argument.\n    const $x = convertToTensor(x, 'x', 'tf.grad', 'string_or_numeric');\n    const $dy = dy != null ? convertToTensor(dy, 'dy', 'tf.grad') : null;\n    return ENGINE.tidy(() => {\n      const {\n        value,\n        grads\n      } = ENGINE.gradients(() => f($x), [$x], $dy);\n\n      if ($dy != null) {\n        util.assertShapesMatch(value.shape, $dy.shape, 'The shape of dy passed in grad(f)(x, dy) must match the shape ' + 'returned by f(x)');\n      }\n\n      checkGrads(grads);\n      return grads[0];\n    });\n  };\n}\n/**\n * Provided `f(x1, x2,...)`, returns another function `g([x1, x2,...], dy?)`,\n * which gives an array of gradients of `f()` with respect to each input\n * [`x1`,`x2`,...].\n *\n * If `dy` is passed when calling `g()`, the gradient of\n * `f(x1,...).mul(dy).sum()` with respect to each input is computed instead.\n * The provided `f` must take one or more tensors and return a single tensor\n * `y`. If `f()` takes a single input, we recommend using `tf.grad` instead.\n *\n * ```js\n * // f(a, b) = a * b\n * const f = (a, b) => a.mul(b);\n * // df / da = b, df / db = a\n * const g = tf.grads(f);\n *\n * const a = tf.tensor1d([2, 3]);\n * const b = tf.tensor1d([-2, -3]);\n * const [da, db] = g([a, b]);\n * console.log('da');\n * da.print();\n * console.log('db');\n * db.print();\n * ```\n *\n * @param f The function `f(x1, x2,...)` to compute gradients for.\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\n\n\nfunction grads(f) {\n  util.assert(util.isFunction(f), () => 'The f passed in grads(f) must be a function');\n  return (args, dy) => {\n    util.assert(Array.isArray(args), () => 'The args passed in grads(f)(args) must be an array ' + 'of `Tensor`s or `TensorLike`s'); // args can be of any dtype, thus null as the last argument.\n\n    const $args = convertToTensorArray(args, 'args', 'tf.grads', 'string_or_numeric');\n    const $dy = dy != null ? convertToTensor(dy, 'dy', 'tf.grads') : null;\n    return ENGINE.tidy(() => {\n      const {\n        value,\n        grads\n      } = ENGINE.gradients(() => f(...$args), $args, $dy);\n\n      if ($dy != null) {\n        util.assertShapesMatch(value.shape, $dy.shape, 'The shape of dy passed in grads(f)([x1,...], dy) must ' + 'match the shape returned by f([x1,...])');\n      }\n\n      checkGrads(grads);\n      return grads;\n    });\n  };\n}\n/**\n * Like `tf.grad`, but also returns the value of `f()`. Useful when `f()`\n * returns a metric you want to show.\n *\n * The result is a rich object with the following properties:\n * - grad: The gradient of `f(x)` w.r.t. `x` (result of `tf.grad`).\n * - value: The value returned by `f(x)`.\n *\n * ```js\n * // f(x) = x ^ 2\n * const f = x => x.square();\n * // f'(x) = 2x\n * const g = tf.valueAndGrad(f);\n *\n * const x = tf.tensor1d([2, 3]);\n * const {value, grad} = g(x);\n *\n * console.log('value');\n * value.print();\n * console.log('grad');\n * grad.print();\n * ```\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\n\n\nfunction valueAndGrad(f) {\n  util.assert(util.isFunction(f), () => 'The f passed in valueAndGrad(f) must be a function');\n  return (x, dy) => {\n    util.assert(x instanceof Tensor, () => 'The x passed in valueAndGrad(f)(x) must be a tensor');\n    util.assert(dy == null || dy instanceof Tensor, () => 'The dy passed in valueAndGrad(f)(x, dy) must be a tensor');\n    const {\n      grads,\n      value\n    } = ENGINE.gradients(() => f(x), [x], dy);\n    checkGrads(grads);\n    return {\n      grad: grads[0],\n      value\n    };\n  };\n}\n/**\n * Like `tf.grads`, but returns also the value of `f()`. Useful when `f()`\n * returns a metric you want to show.\n *\n * The result is a rich object with the following properties:\n * - grads: The gradients of `f()` w.r.t. each input (result of `tf.grads`).\n * - value: The value returned by `f(x)`.\n *\n * ```js\n * // f(a, b) = a * b\n * const f = (a, b) => a.mul(b);\n * // df/da = b, df/db = a\n * const g = tf.valueAndGrads(f);\n *\n * const a = tf.tensor1d([2, 3]);\n * const b = tf.tensor1d([-2, -3]);\n * const {value, grads} = g([a, b]);\n *\n * const [da, db] = grads;\n *\n * console.log('value');\n * value.print();\n *\n * console.log('da');\n * da.print();\n * console.log('db');\n * db.print();\n * ```\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\n\n\nfunction valueAndGrads(f) {\n  util.assert(util.isFunction(f), () => 'The f passed in valueAndGrads(f) must be a function');\n  return (args, dy) => {\n    util.assert(Array.isArray(args) && args.every(arg => arg instanceof Tensor), () => 'The args passed in valueAndGrads(f)(args) must be array of ' + 'tensors');\n    util.assert(dy == null || dy instanceof Tensor, () => 'The dy passed in valueAndGrads(f)(args, dy) must be a tensor');\n    const res = ENGINE.gradients(() => f(...args), args, dy);\n\n    if (dy != null) {\n      util.assertShapesMatch(res.value.shape, dy.shape, 'The shape of dy passed in valueAndGrads(f)([x1,...], dy) must ' + 'match the shape returned by f([x1,...])');\n    }\n\n    checkGrads(res.grads);\n    return res;\n  };\n}\n/**\n * Computes and returns the gradient of f(x) with respect to the list of\n * trainable variables provided by `varList`. If no list is provided, it\n * defaults to all trainable variables.\n *\n * ```js\n * const a = tf.variable(tf.tensor1d([3, 4]));\n * const b = tf.variable(tf.tensor1d([5, 6]));\n * const x = tf.tensor1d([1, 2]);\n *\n * // f(a, b) = a * x ^ 2 + b * x\n * const f = () => a.mul(x.square()).add(b.mul(x)).sum();\n * // df/da = x ^ 2, df/db = x\n * const {value, grads} = tf.variableGrads(f);\n *\n * Object.keys(grads).forEach(varName => grads[varName].print());\n * ```\n *\n * @param f The function to execute. f() should return a scalar.\n * @param varList The list of variables to compute the gradients with respect\n *     to. Defaults to all trainable variables.\n * @returns An object with the following keys and values:\n *   - `value`: The value of the function `f`.\n *   - `grads`: A map from the names of the variables to the gradients.\n *     If the `varList` argument is provided explicitly and contains a subset of\n *     non-trainable variables, this map in the return value will contain keys\n *     that map the names of the non-trainable variables to `null`.\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\n\n\nfunction variableGrads(f, varList) {\n  util.assert(util.isFunction(f), () => 'The f passed in variableGrads(f) must be a function');\n  util.assert(varList == null || Array.isArray(varList) && varList.every(v => v instanceof Variable), () => 'The varList passed in variableGrads(f, varList) must be an array ' + 'of variables');\n  const specifiedVarList = varList != null;\n\n  if (!specifiedVarList) {\n    // Get all of the trainable variables.\n    varList = [];\n\n    for (const varName in ENGINE.registeredVariables) {\n      varList.push(ENGINE.registeredVariables[varName]);\n    }\n  }\n\n  const specifiedNonTrainable = specifiedVarList ? varList.filter(variable => !variable.trainable) : null; // Prune non-trainable variables.\n\n  const originalVarCount = varList.length;\n  varList = varList.filter(variable => variable.trainable);\n  util.assert(varList.length > 0, () => `variableGrads() expects at least one of the input variables to ` + `be trainable, but none of the ${originalVarCount} variables is ` + `trainable.`);\n  const allowNoGradients = true;\n  const {\n    value,\n    grads\n  } = ENGINE.gradients(f, varList, null, allowNoGradients);\n  util.assert(grads.some(g => g != null), () => 'Cannot find a connection between any variable and the result of ' + 'the loss function y=f(x). Please make sure the operations that ' + 'use variables are inside the function f passed to minimize().');\n  util.assert(value.rank === 0, () => `The f passed in variableGrads(f) must return a scalar, but it ` + `returned a rank-${value.rank} tensor`);\n  const namedGrads = {};\n  varList.forEach((v, i) => {\n    if (grads[i] != null) {\n      namedGrads[v.name] = grads[i];\n    }\n  });\n\n  if (specifiedNonTrainable != null) {\n    // If varList is explicitly provided and contains non-trainable values,\n    // add them to the returned gradients with `null` values.\n    specifiedNonTrainable.forEach(v => namedGrads[v.name] = null);\n  }\n\n  return {\n    value,\n    grads: namedGrads\n  };\n}\n/**\n * Overrides the gradient computation of a function `f`.\n *\n * Takes a function\n * `f(...inputs, save) => {value: Tensor, gradFunc: (dy, saved) => Tensor[]}`\n * and returns another function `g(...inputs)` which takes the same inputs as\n * `f`. When called, `g` returns `f().value`. In backward mode, custom gradients\n * with respect to each input of `f` are computed using `f().gradFunc`.\n *\n * The `save` function passed to `f` should be used for saving tensors needed\n * in the gradient. And the `saved` passed to the `gradFunc` is a\n * `NamedTensorMap`, which contains those saved tensors.\n *\n * ```js\n * const customOp = tf.customGrad((x, save) => {\n *   // Save x to make sure it's available later for the gradient.\n *   save([x]);\n *   // Override gradient of our custom x ^ 2 op to be dy * abs(x);\n *   return {\n *     value: x.square(),\n *     // Note `saved.x` which points to the `x` we saved earlier.\n *     gradFunc: (dy, saved) => [dy.mul(saved[0].abs())]\n *   };\n * });\n *\n * const x = tf.tensor1d([-1, -2, 3]);\n * const dx = tf.grad(x => customOp(x));\n *\n * console.log(`f(x):`);\n * customOp(x).print();\n * console.log(`f'(x):`);\n * dx(x).print();\n * ```\n *\n * @param f The function to evaluate in forward mode, which should return\n *     `{value: Tensor, gradFunc: (dy, saved) => Tensor[]}`, where `gradFunc`\n *     returns the custom gradients of `f` with respect to its inputs.\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\n\n\nfunction customGrad(f) {\n  return ENGINE.customGrad(f);\n}\n\nfunction checkGrads(grads) {\n  const numNullGradients = grads.filter(g => g == null).length;\n\n  if (numNullGradients > 0) {\n    throw new Error(`Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.`);\n  }\n}\n\nexport { customGrad, variableGrads, valueAndGrad, valueAndGrads, grad, grads };","map":{"version":3,"names":["ENGINE","Tensor","Variable","convertToTensor","convertToTensorArray","util","grad","f","assert","isFunction","x","dy","$x","$dy","tidy","value","grads","gradients","assertShapesMatch","shape","checkGrads","args","Array","isArray","$args","valueAndGrad","valueAndGrads","every","arg","res","variableGrads","varList","v","specifiedVarList","varName","registeredVariables","push","specifiedNonTrainable","filter","variable","trainable","originalVarCount","length","allowNoGradients","some","g","rank","namedGrads","forEach","i","name","customGrad","numNullGradients","Error"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/gradients.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from './engine';\nimport { Tensor, Variable } from './tensor';\nimport { convertToTensor, convertToTensorArray } from './tensor_util_env';\nimport * as util from './util';\n/**\n * Provided `f(x)`, returns another function `g(x, dy?)`, which gives the\n * gradient of `f(x)` with respect to `x`.\n *\n * If `dy` is provided, the gradient of `f(x).mul(dy).sum()` with respect to\n * `x` is computed instead. `f(x)` must take a single tensor `x` and return a\n * single tensor `y`. If `f()` takes multiple inputs, use `tf.grads` instead.\n *\n * ```js\n * // f(x) = x ^ 2\n * const f = x => x.square();\n * // f'(x) = 2x\n * const g = tf.grad(f);\n *\n * const x = tf.tensor1d([2, 3]);\n * g(x).print();\n * ```\n *\n * ```js\n * // f(x) = x ^ 3\n * const f = x => x.pow(tf.scalar(3, 'int32'));\n * // f'(x) = 3x ^ 2\n * const g = tf.grad(f);\n * // f''(x) = 6x\n * const gg = tf.grad(g);\n *\n * const x = tf.tensor1d([2, 3]);\n * gg(x).print();\n * ```\n *\n * @param f The function f(x), to compute gradient for.\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction grad(f) {\n    util.assert(util.isFunction(f), () => 'The f passed in grad(f) must be a function');\n    return (x, dy) => {\n        // x can be of any dtype, thus null as the last argument.\n        const $x = convertToTensor(x, 'x', 'tf.grad', 'string_or_numeric');\n        const $dy = (dy != null) ? convertToTensor(dy, 'dy', 'tf.grad') : null;\n        return ENGINE.tidy(() => {\n            const { value, grads } = ENGINE.gradients(() => f($x), [$x], $dy);\n            if ($dy != null) {\n                util.assertShapesMatch(value.shape, $dy.shape, 'The shape of dy passed in grad(f)(x, dy) must match the shape ' +\n                    'returned by f(x)');\n            }\n            checkGrads(grads);\n            return grads[0];\n        });\n    };\n}\n/**\n * Provided `f(x1, x2,...)`, returns another function `g([x1, x2,...], dy?)`,\n * which gives an array of gradients of `f()` with respect to each input\n * [`x1`,`x2`,...].\n *\n * If `dy` is passed when calling `g()`, the gradient of\n * `f(x1,...).mul(dy).sum()` with respect to each input is computed instead.\n * The provided `f` must take one or more tensors and return a single tensor\n * `y`. If `f()` takes a single input, we recommend using `tf.grad` instead.\n *\n * ```js\n * // f(a, b) = a * b\n * const f = (a, b) => a.mul(b);\n * // df / da = b, df / db = a\n * const g = tf.grads(f);\n *\n * const a = tf.tensor1d([2, 3]);\n * const b = tf.tensor1d([-2, -3]);\n * const [da, db] = g([a, b]);\n * console.log('da');\n * da.print();\n * console.log('db');\n * db.print();\n * ```\n *\n * @param f The function `f(x1, x2,...)` to compute gradients for.\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction grads(f) {\n    util.assert(util.isFunction(f), () => 'The f passed in grads(f) must be a function');\n    return (args, dy) => {\n        util.assert(Array.isArray(args), () => 'The args passed in grads(f)(args) must be an array ' +\n            'of `Tensor`s or `TensorLike`s');\n        // args can be of any dtype, thus null as the last argument.\n        const $args = convertToTensorArray(args, 'args', 'tf.grads', 'string_or_numeric');\n        const $dy = (dy != null) ? convertToTensor(dy, 'dy', 'tf.grads') : null;\n        return ENGINE.tidy(() => {\n            const { value, grads } = ENGINE.gradients(() => f(...$args), $args, $dy);\n            if ($dy != null) {\n                util.assertShapesMatch(value.shape, $dy.shape, 'The shape of dy passed in grads(f)([x1,...], dy) must ' +\n                    'match the shape returned by f([x1,...])');\n            }\n            checkGrads(grads);\n            return grads;\n        });\n    };\n}\n/**\n * Like `tf.grad`, but also returns the value of `f()`. Useful when `f()`\n * returns a metric you want to show.\n *\n * The result is a rich object with the following properties:\n * - grad: The gradient of `f(x)` w.r.t. `x` (result of `tf.grad`).\n * - value: The value returned by `f(x)`.\n *\n * ```js\n * // f(x) = x ^ 2\n * const f = x => x.square();\n * // f'(x) = 2x\n * const g = tf.valueAndGrad(f);\n *\n * const x = tf.tensor1d([2, 3]);\n * const {value, grad} = g(x);\n *\n * console.log('value');\n * value.print();\n * console.log('grad');\n * grad.print();\n * ```\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction valueAndGrad(f) {\n    util.assert(util.isFunction(f), () => 'The f passed in valueAndGrad(f) must be a function');\n    return (x, dy) => {\n        util.assert(x instanceof Tensor, () => 'The x passed in valueAndGrad(f)(x) must be a tensor');\n        util.assert(dy == null || dy instanceof Tensor, () => 'The dy passed in valueAndGrad(f)(x, dy) must be a tensor');\n        const { grads, value } = ENGINE.gradients(() => f(x), [x], dy);\n        checkGrads(grads);\n        return { grad: grads[0], value };\n    };\n}\n/**\n * Like `tf.grads`, but returns also the value of `f()`. Useful when `f()`\n * returns a metric you want to show.\n *\n * The result is a rich object with the following properties:\n * - grads: The gradients of `f()` w.r.t. each input (result of `tf.grads`).\n * - value: The value returned by `f(x)`.\n *\n * ```js\n * // f(a, b) = a * b\n * const f = (a, b) => a.mul(b);\n * // df/da = b, df/db = a\n * const g = tf.valueAndGrads(f);\n *\n * const a = tf.tensor1d([2, 3]);\n * const b = tf.tensor1d([-2, -3]);\n * const {value, grads} = g([a, b]);\n *\n * const [da, db] = grads;\n *\n * console.log('value');\n * value.print();\n *\n * console.log('da');\n * da.print();\n * console.log('db');\n * db.print();\n * ```\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction valueAndGrads(f) {\n    util.assert(util.isFunction(f), () => 'The f passed in valueAndGrads(f) must be a function');\n    return (args, dy) => {\n        util.assert(Array.isArray(args) && args.every(arg => arg instanceof Tensor), () => 'The args passed in valueAndGrads(f)(args) must be array of ' +\n            'tensors');\n        util.assert(dy == null || dy instanceof Tensor, () => 'The dy passed in valueAndGrads(f)(args, dy) must be a tensor');\n        const res = ENGINE.gradients(() => f(...args), args, dy);\n        if (dy != null) {\n            util.assertShapesMatch(res.value.shape, dy.shape, 'The shape of dy passed in valueAndGrads(f)([x1,...], dy) must ' +\n                'match the shape returned by f([x1,...])');\n        }\n        checkGrads(res.grads);\n        return res;\n    };\n}\n/**\n * Computes and returns the gradient of f(x) with respect to the list of\n * trainable variables provided by `varList`. If no list is provided, it\n * defaults to all trainable variables.\n *\n * ```js\n * const a = tf.variable(tf.tensor1d([3, 4]));\n * const b = tf.variable(tf.tensor1d([5, 6]));\n * const x = tf.tensor1d([1, 2]);\n *\n * // f(a, b) = a * x ^ 2 + b * x\n * const f = () => a.mul(x.square()).add(b.mul(x)).sum();\n * // df/da = x ^ 2, df/db = x\n * const {value, grads} = tf.variableGrads(f);\n *\n * Object.keys(grads).forEach(varName => grads[varName].print());\n * ```\n *\n * @param f The function to execute. f() should return a scalar.\n * @param varList The list of variables to compute the gradients with respect\n *     to. Defaults to all trainable variables.\n * @returns An object with the following keys and values:\n *   - `value`: The value of the function `f`.\n *   - `grads`: A map from the names of the variables to the gradients.\n *     If the `varList` argument is provided explicitly and contains a subset of\n *     non-trainable variables, this map in the return value will contain keys\n *     that map the names of the non-trainable variables to `null`.\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction variableGrads(f, varList) {\n    util.assert(util.isFunction(f), () => 'The f passed in variableGrads(f) must be a function');\n    util.assert(varList == null ||\n        Array.isArray(varList) && varList.every(v => v instanceof Variable), () => 'The varList passed in variableGrads(f, varList) must be an array ' +\n        'of variables');\n    const specifiedVarList = varList != null;\n    if (!specifiedVarList) {\n        // Get all of the trainable variables.\n        varList = [];\n        for (const varName in ENGINE.registeredVariables) {\n            varList.push(ENGINE.registeredVariables[varName]);\n        }\n    }\n    const specifiedNonTrainable = specifiedVarList ? varList.filter(variable => !variable.trainable) : null;\n    // Prune non-trainable variables.\n    const originalVarCount = varList.length;\n    varList = varList.filter(variable => variable.trainable);\n    util.assert(varList.length > 0, () => `variableGrads() expects at least one of the input variables to ` +\n        `be trainable, but none of the ${originalVarCount} variables is ` +\n        `trainable.`);\n    const allowNoGradients = true;\n    const { value, grads } = ENGINE.gradients(f, varList, null, allowNoGradients);\n    util.assert(grads.some(g => g != null), () => 'Cannot find a connection between any variable and the result of ' +\n        'the loss function y=f(x). Please make sure the operations that ' +\n        'use variables are inside the function f passed to minimize().');\n    util.assert(value.rank === 0, () => `The f passed in variableGrads(f) must return a scalar, but it ` +\n        `returned a rank-${value.rank} tensor`);\n    const namedGrads = {};\n    varList.forEach((v, i) => {\n        if (grads[i] != null) {\n            namedGrads[v.name] = grads[i];\n        }\n    });\n    if (specifiedNonTrainable != null) {\n        // If varList is explicitly provided and contains non-trainable values,\n        // add them to the returned gradients with `null` values.\n        specifiedNonTrainable.forEach(v => namedGrads[v.name] = null);\n    }\n    return { value, grads: namedGrads };\n}\n/**\n * Overrides the gradient computation of a function `f`.\n *\n * Takes a function\n * `f(...inputs, save) => {value: Tensor, gradFunc: (dy, saved) => Tensor[]}`\n * and returns another function `g(...inputs)` which takes the same inputs as\n * `f`. When called, `g` returns `f().value`. In backward mode, custom gradients\n * with respect to each input of `f` are computed using `f().gradFunc`.\n *\n * The `save` function passed to `f` should be used for saving tensors needed\n * in the gradient. And the `saved` passed to the `gradFunc` is a\n * `NamedTensorMap`, which contains those saved tensors.\n *\n * ```js\n * const customOp = tf.customGrad((x, save) => {\n *   // Save x to make sure it's available later for the gradient.\n *   save([x]);\n *   // Override gradient of our custom x ^ 2 op to be dy * abs(x);\n *   return {\n *     value: x.square(),\n *     // Note `saved.x` which points to the `x` we saved earlier.\n *     gradFunc: (dy, saved) => [dy.mul(saved[0].abs())]\n *   };\n * });\n *\n * const x = tf.tensor1d([-1, -2, 3]);\n * const dx = tf.grad(x => customOp(x));\n *\n * console.log(`f(x):`);\n * customOp(x).print();\n * console.log(`f'(x):`);\n * dx(x).print();\n * ```\n *\n * @param f The function to evaluate in forward mode, which should return\n *     `{value: Tensor, gradFunc: (dy, saved) => Tensor[]}`, where `gradFunc`\n *     returns the custom gradients of `f` with respect to its inputs.\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction customGrad(f) {\n    return ENGINE.customGrad(f);\n}\nfunction checkGrads(grads) {\n    const numNullGradients = grads.filter(g => g == null).length;\n    if (numNullGradients > 0) {\n        throw new Error(`Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.`);\n    }\n}\nexport { customGrad, variableGrads, valueAndGrad, valueAndGrads, grad, grads, };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}