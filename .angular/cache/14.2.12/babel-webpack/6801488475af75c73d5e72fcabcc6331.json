{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, GatherNd, util } from '@tensorflow/tfjs-core';\nimport { gatherNdImpl } from './GatherNd_Impl';\nexport function gatherNd(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    params,\n    indices\n  } = inputs;\n  const paramsSize = util.sizeFromShape(params.shape);\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n  const [resultShape, numSlices, sliceSize, strides] = backend_util.prepareAndValidate(params, indices);\n\n  if (numSlices === 0) {\n    return backend.makeTensorInfo(resultShape, params.dtype, []);\n  }\n\n  const indicesData = backend.data.get(indices.dataId).values;\n  const paramsBuf = backend.bufferSync(params);\n  const outBuf = gatherNdImpl(indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize, strides, params.shape, paramsSize);\n  return backend.makeTensorInfo(resultShape, params.dtype, outBuf.values);\n}\nexport const gatherNdConfig = {\n  kernelName: GatherNd,\n  backendName: 'cpu',\n  kernelFunc: gatherNd\n};","map":{"version":3,"names":["backend_util","GatherNd","util","gatherNdImpl","gatherNd","args","inputs","backend","params","indices","paramsSize","sizeFromShape","shape","indicesShape","sliceRank","length","resultShape","numSlices","sliceSize","strides","prepareAndValidate","makeTensorInfo","dtype","indicesData","data","get","dataId","values","paramsBuf","bufferSync","outBuf","gatherNdConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GatherNd.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, GatherNd, util } from '@tensorflow/tfjs-core';\nimport { gatherNdImpl } from './GatherNd_Impl';\nexport function gatherNd(args) {\n    const { inputs, backend } = args;\n    const { params, indices } = inputs;\n    const paramsSize = util.sizeFromShape(params.shape);\n    const indicesShape = indices.shape;\n    const sliceRank = indicesShape[indicesShape.length - 1];\n    const [resultShape, numSlices, sliceSize, strides] = backend_util.prepareAndValidate(params, indices);\n    if (numSlices === 0) {\n        return backend.makeTensorInfo(resultShape, params.dtype, []);\n    }\n    const indicesData = backend.data.get(indices.dataId).values;\n    const paramsBuf = backend.bufferSync(params);\n    const outBuf = gatherNdImpl(indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize, strides, params.shape, paramsSize);\n    return backend.makeTensorInfo(resultShape, params.dtype, outBuf.values);\n}\nexport const gatherNdConfig = {\n    kernelName: GatherNd,\n    backendName: 'cpu',\n    kernelFunc: gatherNd\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,EAAuBC,QAAvB,EAAiCC,IAAjC,QAA6C,uBAA7C;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,OAAO,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;EAC3B,MAAM;IAAEC,MAAF;IAAUC;EAAV,IAAsBF,IAA5B;EACA,MAAM;IAAEG,MAAF;IAAUC;EAAV,IAAsBH,MAA5B;EACA,MAAMI,UAAU,GAAGR,IAAI,CAACS,aAAL,CAAmBH,MAAM,CAACI,KAA1B,CAAnB;EACA,MAAMC,YAAY,GAAGJ,OAAO,CAACG,KAA7B;EACA,MAAME,SAAS,GAAGD,YAAY,CAACA,YAAY,CAACE,MAAb,GAAsB,CAAvB,CAA9B;EACA,MAAM,CAACC,WAAD,EAAcC,SAAd,EAAyBC,SAAzB,EAAoCC,OAApC,IAA+CnB,YAAY,CAACoB,kBAAb,CAAgCZ,MAAhC,EAAwCC,OAAxC,CAArD;;EACA,IAAIQ,SAAS,KAAK,CAAlB,EAAqB;IACjB,OAAOV,OAAO,CAACc,cAAR,CAAuBL,WAAvB,EAAoCR,MAAM,CAACc,KAA3C,EAAkD,EAAlD,CAAP;EACH;;EACD,MAAMC,WAAW,GAAGhB,OAAO,CAACiB,IAAR,CAAaC,GAAb,CAAiBhB,OAAO,CAACiB,MAAzB,EAAiCC,MAArD;EACA,MAAMC,SAAS,GAAGrB,OAAO,CAACsB,UAAR,CAAmBrB,MAAnB,CAAlB;EACA,MAAMsB,MAAM,GAAG3B,YAAY,CAACoB,WAAD,EAAcK,SAAd,EAAyBpB,MAAM,CAACc,KAAhC,EAAuCL,SAAvC,EAAkDH,SAAlD,EAA6DI,SAA7D,EAAwEC,OAAxE,EAAiFX,MAAM,CAACI,KAAxF,EAA+FF,UAA/F,CAA3B;EACA,OAAOH,OAAO,CAACc,cAAR,CAAuBL,WAAvB,EAAoCR,MAAM,CAACc,KAA3C,EAAkDQ,MAAM,CAACH,MAAzD,CAAP;AACH;AACD,OAAO,MAAMI,cAAc,GAAG;EAC1BC,UAAU,EAAE/B,QADc;EAE1BgC,WAAW,EAAE,KAFa;EAG1BC,UAAU,EAAE9B;AAHc,CAAvB"},"metadata":{},"sourceType":"module"}