{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { MirrorPad, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function mirrorPad(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    paddings,\n    mode\n  } = attrs;\n  assertNotComplex(x, 'mirrorPad');\n  const outShape = paddings.map((p, i) => p[0]\n  /* beforePad */\n  + x.shape[i] + p[1]\n  /* afterPad */\n  );\n  const start = paddings.map(p => p[0]);\n  const end = paddings.map((p, i) => p[0] + x.shape[i]);\n  const offset = mode === 'reflect' ? 0 : 1;\n  const xVals = backend.data.get(x.dataId).values;\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals = util.getTypedArrayFromDType(x.dtype, resultSize);\n\n  for (let i = 0; i < resultSize; i++) {\n    let coords = util.indexToLoc(i, resultRank, resultStrides);\n\n    for (let i = 0; i < resultRank; i++) {\n      if (coords[i] < start[i]) {\n        coords[i] = start[i] * 2 - coords[i] - offset;\n      } else if (coords[i] >= end[i]) {\n        coords[i] = (end[i] - 1) * 2 - coords[i] + offset;\n      }\n    }\n\n    coords = coords.map((c, i) => c - start[i]);\n    const inIndex = util.locToIndex(coords, xRank, xStrides);\n    resVals[i] = xVals[inIndex];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n  return {\n    dataId: outId,\n    shape: outShape,\n    dtype: x.dtype\n  };\n}\nexport const mirrorPadConfig = {\n  kernelName: MirrorPad,\n  backendName: 'cpu',\n  kernelFunc: mirrorPad\n};","map":{"version":3,"names":["MirrorPad","util","assertNotComplex","mirrorPad","args","inputs","backend","attrs","x","paddings","mode","outShape","map","p","i","shape","start","end","offset","xVals","data","get","dataId","values","xRank","length","xStrides","computeStrides","resultSize","sizeFromShape","resultRank","resultStrides","resVals","getTypedArrayFromDType","dtype","coords","indexToLoc","c","inIndex","locToIndex","outId","write","mirrorPadConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/MirrorPad.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { MirrorPad, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function mirrorPad(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { paddings, mode } = attrs;\n    assertNotComplex(x, 'mirrorPad');\n    const outShape = paddings.map((p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n    const start = paddings.map(p => p[0]);\n    const end = paddings.map((p, i) => p[0] + x.shape[i]);\n    const offset = mode === 'reflect' ? 0 : 1;\n    const xVals = backend.data.get(x.dataId).values;\n    const xRank = x.shape.length;\n    const xStrides = util.computeStrides(x.shape);\n    const resultSize = util.sizeFromShape(outShape);\n    const resultRank = outShape.length;\n    const resultStrides = util.computeStrides(outShape);\n    const resVals = util.getTypedArrayFromDType(x.dtype, resultSize);\n    for (let i = 0; i < resultSize; i++) {\n        let coords = util.indexToLoc(i, resultRank, resultStrides);\n        for (let i = 0; i < resultRank; i++) {\n            if (coords[i] < start[i]) {\n                coords[i] = start[i] * 2 - coords[i] - offset;\n            }\n            else if (coords[i] >= end[i]) {\n                coords[i] = (end[i] - 1) * 2 - coords[i] + offset;\n            }\n        }\n        coords = coords.map((c, i) => c - start[i]);\n        const inIndex = util.locToIndex(coords, xRank, xStrides);\n        resVals[i] = xVals[inIndex];\n    }\n    const outId = backend.write(resVals, outShape, x.dtype);\n    return { dataId: outId, shape: outShape, dtype: x.dtype };\n}\nexport const mirrorPadConfig = {\n    kernelName: MirrorPad,\n    backendName: 'cpu',\n    kernelFunc: mirrorPad\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}