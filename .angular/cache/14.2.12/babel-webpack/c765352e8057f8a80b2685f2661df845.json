{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transpose } from '@tensorflow/tfjs-core';\nimport { transposeImpl } from './Transpose_impl';\nimport { transposeImplCPU as cpuTranspose } from './Transpose_impl';\nexport function transpose(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    perm\n  } = attrs;\n  const webglBackend = backend;\n  const xRank = x.shape.length;\n  const newShape = new Array(xRank);\n\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  let out;\n\n  if (webglBackend.shouldExecuteOnCPU([x])) {\n    const xTexData = webglBackend.texData.get(x.dataId);\n    const values = xTexData.values;\n    const outValues = cpuTranspose(values, x.shape, x.dtype, perm, newShape);\n    out = webglBackend.makeTensorInfo(newShape, x.dtype);\n    const outData = webglBackend.texData.get(out.dataId);\n    outData.values = outValues;\n  } else {\n    out = transposeImpl(x, perm, webglBackend);\n  }\n\n  return out;\n}\nexport const transposeConfig = {\n  kernelName: Transpose,\n  backendName: 'webgl',\n  kernelFunc: transpose\n};","map":{"version":3,"names":["Transpose","transposeImpl","transposeImplCPU","cpuTranspose","transpose","args","inputs","backend","attrs","x","perm","webglBackend","xRank","shape","length","newShape","Array","i","out","shouldExecuteOnCPU","xTexData","texData","get","dataId","values","outValues","dtype","makeTensorInfo","outData","transposeConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transpose } from '@tensorflow/tfjs-core';\nimport { transposeImpl } from './Transpose_impl';\nimport { transposeImplCPU as cpuTranspose } from './Transpose_impl';\nexport function transpose(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { perm } = attrs;\n    const webglBackend = backend;\n    const xRank = x.shape.length;\n    const newShape = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = x.shape[perm[i]];\n    }\n    let out;\n    if (webglBackend.shouldExecuteOnCPU([x])) {\n        const xTexData = webglBackend.texData.get(x.dataId);\n        const values = xTexData.values;\n        const outValues = cpuTranspose(values, x.shape, x.dtype, perm, newShape);\n        out = webglBackend.makeTensorInfo(newShape, x.dtype);\n        const outData = webglBackend.texData.get(out.dataId);\n        outData.values = outValues;\n    }\n    else {\n        out = transposeImpl(x, perm, webglBackend);\n    }\n    return out;\n}\nexport const transposeConfig = {\n    kernelName: Transpose,\n    backendName: 'webgl',\n    kernelFunc: transpose\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAT,QAA0B,uBAA1B;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,gBAAgB,IAAIC,YAA7B,QAAiD,kBAAjD;AACA,OAAO,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;EAC5B,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BH,IAAnC;EACA,MAAM;IAAEI;EAAF,IAAQH,MAAd;EACA,MAAM;IAAEI;EAAF,IAAWF,KAAjB;EACA,MAAMG,YAAY,GAAGJ,OAArB;EACA,MAAMK,KAAK,GAAGH,CAAC,CAACI,KAAF,CAAQC,MAAtB;EACA,MAAMC,QAAQ,GAAG,IAAIC,KAAJ,CAAUJ,KAAV,CAAjB;;EACA,KAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACD,MAA7B,EAAqCG,CAAC,EAAtC,EAA0C;IACtCF,QAAQ,CAACE,CAAD,CAAR,GAAcR,CAAC,CAACI,KAAF,CAAQH,IAAI,CAACO,CAAD,CAAZ,CAAd;EACH;;EACD,IAAIC,GAAJ;;EACA,IAAIP,YAAY,CAACQ,kBAAb,CAAgC,CAACV,CAAD,CAAhC,CAAJ,EAA0C;IACtC,MAAMW,QAAQ,GAAGT,YAAY,CAACU,OAAb,CAAqBC,GAArB,CAAyBb,CAAC,CAACc,MAA3B,CAAjB;IACA,MAAMC,MAAM,GAAGJ,QAAQ,CAACI,MAAxB;IACA,MAAMC,SAAS,GAAGtB,YAAY,CAACqB,MAAD,EAASf,CAAC,CAACI,KAAX,EAAkBJ,CAAC,CAACiB,KAApB,EAA2BhB,IAA3B,EAAiCK,QAAjC,CAA9B;IACAG,GAAG,GAAGP,YAAY,CAACgB,cAAb,CAA4BZ,QAA5B,EAAsCN,CAAC,CAACiB,KAAxC,CAAN;IACA,MAAME,OAAO,GAAGjB,YAAY,CAACU,OAAb,CAAqBC,GAArB,CAAyBJ,GAAG,CAACK,MAA7B,CAAhB;IACAK,OAAO,CAACJ,MAAR,GAAiBC,SAAjB;EACH,CAPD,MAQK;IACDP,GAAG,GAAGjB,aAAa,CAACQ,CAAD,EAAIC,IAAJ,EAAUC,YAAV,CAAnB;EACH;;EACD,OAAOO,GAAP;AACH;AACD,OAAO,MAAMW,eAAe,GAAG;EAC3BC,UAAU,EAAE9B,SADe;EAE3B+B,WAAW,EAAE,OAFc;EAG3BC,UAAU,EAAE5B;AAHe,CAAxB"},"metadata":{},"sourceType":"module"}