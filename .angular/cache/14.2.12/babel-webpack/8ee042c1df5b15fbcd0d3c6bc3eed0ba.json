{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, util } from '@tensorflow/tfjs-core';\nimport { ArgMinMaxProgram } from '../argminmax_gpu';\nimport { ArgMinMaxPackedProgram } from '../argminmax_packed_gpu';\nimport { reshape } from '../kernels/Reshape';\n\nfunction argReduce(backend, x, reduceType, bestIndicesA = null) {\n  let batchSize = x.shape[0];\n  let inSize = x.shape[1];\n\n  if (bestIndicesA != null) {\n    batchSize = bestIndicesA.shape[0];\n    inSize = bestIndicesA.shape[1];\n  }\n\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const reduceInfo = {\n    windowSize,\n    inSize,\n    batchSize,\n    outSize: Math.ceil(inSize / windowSize)\n  };\n  const program = new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n  const inputs = [x];\n\n  if (bestIndicesA != null) {\n    inputs.push(bestIndicesA);\n  }\n\n  const output = backend.runWebGLProgram(program, inputs, 'int32'); // No need to run another GPGPU program.\n\n  if (output.shape[1] === 1) {\n    return output;\n  }\n\n  const result = argReduce(backend, x, reduceType, output);\n  backend.disposeIntermediateTensorInfo(output);\n  return result;\n}\n\nfunction argReducePacked(backend, x, reduceType, bestIndicesA = null) {\n  const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n  const inSize = inShape[inShape.length - 1];\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const program = new ArgMinMaxPackedProgram(inShape, windowSize, reduceType, bestIndicesA == null);\n  const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n\n  if (output.shape.length === x.shape.length) {\n    const result = argReducePacked(backend, x, reduceType, output);\n    backend.disposeIntermediateTensorInfo(output);\n    return result;\n  }\n\n  return output;\n}\n\nexport function argMinMaxReduce(backend, x, axis, reduceType) {\n  const axes = [axis];\n  backend_util.assertAxesAreInnerMostDims('arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes, x.shape.length);\n\n  if (!env().getBool('WEBGL_PACK_REDUCE') || x.shape.length <= 2) {\n    const intermediateTensorInfos = []; // Eagerly unpack x input since it is passed in to all the shaders which\n    // require unpacked inputs.\n\n    const xtexData = backend.texData.get(x.dataId);\n    const xIsPacked = xtexData !== null && xtexData.isPacked;\n    let xUnPacked = x;\n\n    if (xIsPacked) {\n      xUnPacked = backend.unpackTensor(x);\n      intermediateTensorInfos.push(xUnPacked);\n    }\n\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(xUnPacked.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape({\n      inputs: {\n        x: xUnPacked\n      },\n      backend,\n      attrs: {\n        shape: [-1, inSize]\n      }\n    });\n    intermediateTensorInfos.push(a2D);\n    const reduced = argReduce(backend, a2D, reduceType);\n    intermediateTensorInfos.push(reduced);\n    const reshaped = reshape({\n      inputs: {\n        x: reduced\n      },\n      backend,\n      attrs: {\n        shape: outShape\n      }\n    });\n    intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return reshaped;\n  }\n\n  return argReducePacked(backend, x, reduceType);\n}","map":{"version":3,"names":["backend_util","env","util","ArgMinMaxProgram","ArgMinMaxPackedProgram","reshape","argReduce","backend","x","reduceType","bestIndicesA","batchSize","shape","inSize","windowSize","computeOptimalWindowSize","reduceInfo","outSize","Math","ceil","program","inputs","push","output","runWebGLProgram","result","disposeIntermediateTensorInfo","argReducePacked","inShape","length","argMinMaxReduce","axis","axes","assertAxesAreInnerMostDims","charAt","toUpperCase","slice","getBool","intermediateTensorInfos","xtexData","texData","get","dataId","xIsPacked","isPacked","xUnPacked","unpackTensor","outShape","reduceShape","computeOutAndReduceShapes","sizeFromShape","a2D","attrs","reduced","reshaped","forEach","t"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/arg_min_max.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, util } from '@tensorflow/tfjs-core';\nimport { ArgMinMaxProgram } from '../argminmax_gpu';\nimport { ArgMinMaxPackedProgram } from '../argminmax_packed_gpu';\nimport { reshape } from '../kernels/Reshape';\nfunction argReduce(backend, x, reduceType, bestIndicesA = null) {\n    let batchSize = x.shape[0];\n    let inSize = x.shape[1];\n    if (bestIndicesA != null) {\n        batchSize = bestIndicesA.shape[0];\n        inSize = bestIndicesA.shape[1];\n    }\n    const windowSize = backend_util.computeOptimalWindowSize(inSize);\n    const reduceInfo = { windowSize, inSize, batchSize, outSize: Math.ceil(inSize / windowSize) };\n    const program = new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n    const inputs = [x];\n    if (bestIndicesA != null) {\n        inputs.push(bestIndicesA);\n    }\n    const output = backend.runWebGLProgram(program, inputs, 'int32');\n    // No need to run another GPGPU program.\n    if (output.shape[1] === 1) {\n        return output;\n    }\n    const result = argReduce(backend, x, reduceType, output);\n    backend.disposeIntermediateTensorInfo(output);\n    return result;\n}\nfunction argReducePacked(backend, x, reduceType, bestIndicesA = null) {\n    const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n    const inSize = inShape[inShape.length - 1];\n    const windowSize = backend_util.computeOptimalWindowSize(inSize);\n    const program = new ArgMinMaxPackedProgram(inShape, windowSize, reduceType, bestIndicesA == null);\n    const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n    const output = backend.runWebGLProgram(program, inputs, 'int32');\n    if (output.shape.length === x.shape.length) {\n        const result = argReducePacked(backend, x, reduceType, output);\n        backend.disposeIntermediateTensorInfo(output);\n        return result;\n    }\n    return output;\n}\nexport function argMinMaxReduce(backend, x, axis, reduceType) {\n    const axes = [axis];\n    backend_util.assertAxesAreInnerMostDims('arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes, x.shape.length);\n    if (!env().getBool('WEBGL_PACK_REDUCE') || x.shape.length <= 2) {\n        const intermediateTensorInfos = [];\n        // Eagerly unpack x input since it is passed in to all the shaders which\n        // require unpacked inputs.\n        const xtexData = backend.texData.get(x.dataId);\n        const xIsPacked = xtexData !== null && xtexData.isPacked;\n        let xUnPacked = x;\n        if (xIsPacked) {\n            xUnPacked = backend.unpackTensor(x);\n            intermediateTensorInfos.push(xUnPacked);\n        }\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(xUnPacked.shape, axes);\n        const inSize = util.sizeFromShape(reduceShape);\n        const a2D = reshape({ inputs: { x: xUnPacked }, backend, attrs: { shape: [-1, inSize] } });\n        intermediateTensorInfos.push(a2D);\n        const reduced = argReduce(backend, a2D, reduceType);\n        intermediateTensorInfos.push(reduced);\n        const reshaped = reshape({ inputs: { x: reduced }, backend, attrs: { shape: outShape } });\n        intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n        return reshaped;\n    }\n    return argReducePacked(backend, x, reduceType);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}