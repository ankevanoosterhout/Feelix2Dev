{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { StringSplit } from '@tensorflow/tfjs-core';\nimport { stringSplitImpl } from './StringSplit_impl';\nexport function stringSplit(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    skipEmpty\n  } = attrs;\n  const {\n    input,\n    delimiter\n  } = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n\n  if (input.shape.length !== 1) {\n    throw new Error(`Input must be a vector, got shape: ${input.shape}`);\n  }\n\n  if (delimiter.shape.length !== 0) {\n    throw new Error(`Delimiter must be a scalar, got shape: ${delimiter.shape}`);\n  }\n\n  const $input = backend.data.get(input.dataId).values;\n  const $delimiter = backend.data.get(delimiter.dataId).values[0];\n  const [indices, values, shape] = stringSplitImpl($input, $delimiter, skipEmpty);\n  const outputSize = values.length;\n  return [backend.makeTensorInfo([outputSize, 2], 'int32', indices), backend.makeTensorInfo([outputSize], 'string', values), backend.makeTensorInfo([2], 'int32', new Int32Array(shape))];\n}\nexport const stringSplitConfig = {\n  kernelName: StringSplit,\n  backendName: 'cpu',\n  kernelFunc: stringSplit\n};","map":{"version":3,"names":["StringSplit","stringSplitImpl","stringSplit","args","inputs","backend","attrs","skipEmpty","input","delimiter","dtype","Error","shape","length","$input","data","get","dataId","values","$delimiter","indices","outputSize","makeTensorInfo","Int32Array","stringSplitConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StringSplit.js"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { StringSplit } from '@tensorflow/tfjs-core';\nimport { stringSplitImpl } from './StringSplit_impl';\nexport function stringSplit(args) {\n    const { inputs, backend, attrs } = args;\n    const { skipEmpty } = attrs;\n    const { input, delimiter } = inputs;\n    if (input.dtype !== 'string') {\n        throw new Error('Input must be of datatype string');\n    }\n    if (input.shape.length !== 1) {\n        throw new Error(`Input must be a vector, got shape: ${input.shape}`);\n    }\n    if (delimiter.shape.length !== 0) {\n        throw new Error(`Delimiter must be a scalar, got shape: ${delimiter.shape}`);\n    }\n    const $input = backend.data.get(input.dataId).values;\n    const $delimiter = backend.data.get(delimiter.dataId).values[0];\n    const [indices, values, shape] = stringSplitImpl($input, $delimiter, skipEmpty);\n    const outputSize = values.length;\n    return [\n        backend.makeTensorInfo([outputSize, 2], 'int32', indices),\n        backend.makeTensorInfo([outputSize], 'string', values),\n        backend.makeTensorInfo([2], 'int32', new Int32Array(shape))\n    ];\n}\nexport const stringSplitConfig = {\n    kernelName: StringSplit,\n    backendName: 'cpu',\n    kernelFunc: stringSplit,\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,WAAT,QAA4B,uBAA5B;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,OAAO,SAASC,WAAT,CAAqBC,IAArB,EAA2B;EAC9B,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BH,IAAnC;EACA,MAAM;IAAEI;EAAF,IAAgBD,KAAtB;EACA,MAAM;IAAEE,KAAF;IAASC;EAAT,IAAuBL,MAA7B;;EACA,IAAII,KAAK,CAACE,KAAN,KAAgB,QAApB,EAA8B;IAC1B,MAAM,IAAIC,KAAJ,CAAU,kCAAV,CAAN;EACH;;EACD,IAAIH,KAAK,CAACI,KAAN,CAAYC,MAAZ,KAAuB,CAA3B,EAA8B;IAC1B,MAAM,IAAIF,KAAJ,CAAW,sCAAqCH,KAAK,CAACI,KAAM,EAA5D,CAAN;EACH;;EACD,IAAIH,SAAS,CAACG,KAAV,CAAgBC,MAAhB,KAA2B,CAA/B,EAAkC;IAC9B,MAAM,IAAIF,KAAJ,CAAW,0CAAyCF,SAAS,CAACG,KAAM,EAApE,CAAN;EACH;;EACD,MAAME,MAAM,GAAGT,OAAO,CAACU,IAAR,CAAaC,GAAb,CAAiBR,KAAK,CAACS,MAAvB,EAA+BC,MAA9C;EACA,MAAMC,UAAU,GAAGd,OAAO,CAACU,IAAR,CAAaC,GAAb,CAAiBP,SAAS,CAACQ,MAA3B,EAAmCC,MAAnC,CAA0C,CAA1C,CAAnB;EACA,MAAM,CAACE,OAAD,EAAUF,MAAV,EAAkBN,KAAlB,IAA2BX,eAAe,CAACa,MAAD,EAASK,UAAT,EAAqBZ,SAArB,CAAhD;EACA,MAAMc,UAAU,GAAGH,MAAM,CAACL,MAA1B;EACA,OAAO,CACHR,OAAO,CAACiB,cAAR,CAAuB,CAACD,UAAD,EAAa,CAAb,CAAvB,EAAwC,OAAxC,EAAiDD,OAAjD,CADG,EAEHf,OAAO,CAACiB,cAAR,CAAuB,CAACD,UAAD,CAAvB,EAAqC,QAArC,EAA+CH,MAA/C,CAFG,EAGHb,OAAO,CAACiB,cAAR,CAAuB,CAAC,CAAD,CAAvB,EAA4B,OAA5B,EAAqC,IAAIC,UAAJ,CAAeX,KAAf,CAArC,CAHG,CAAP;AAKH;AACD,OAAO,MAAMY,iBAAiB,GAAG;EAC7BC,UAAU,EAAEzB,WADiB;EAE7B0B,WAAW,EAAE,KAFgB;EAG7BC,UAAU,EAAEzB;AAHiB,CAA1B"},"metadata":{},"sourceType":"module"}