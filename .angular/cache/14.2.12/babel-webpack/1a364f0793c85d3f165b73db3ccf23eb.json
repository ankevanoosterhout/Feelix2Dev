{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DenseBincount } from '@tensorflow/tfjs-core';\nimport { bincountImplCPU, bincountReduceImplCPU } from '../kernel_utils/shared';\nexport function denseBincount(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    weights\n  } = inputs;\n  const {\n    size,\n    binaryOutput\n  } = attrs;\n\n  if (x.shape.length === 1) {\n    const xVals = backend.readSync(x.dataId);\n    const weightsVals = backend.readSync(weights.dataId);\n    const outVals = bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync(x);\n    const weightsBuf = backend.bufferSync(weights);\n    const outBuf = bincountReduceImplCPU(xBuf, weightsBuf, size, binaryOutput);\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n\n  throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank` + `${x.shape.length}.`);\n}\nexport const denseBincountConfig = {\n  kernelName: DenseBincount,\n  backendName: 'webgl',\n  kernelFunc: denseBincount\n};","map":{"version":3,"names":["DenseBincount","bincountImplCPU","bincountReduceImplCPU","denseBincount","args","inputs","backend","attrs","x","weights","size","binaryOutput","shape","length","xVals","readSync","dataId","weightsVals","outVals","dtype","makeTensorInfo","xBuf","bufferSync","weightsBuf","outBuf","values","Error","denseBincountConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DenseBincount.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DenseBincount } from '@tensorflow/tfjs-core';\nimport { bincountImplCPU, bincountReduceImplCPU } from '../kernel_utils/shared';\nexport function denseBincount(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, weights } = inputs;\n    const { size, binaryOutput } = attrs;\n    if (x.shape.length === 1) {\n        const xVals = backend.readSync(x.dataId);\n        const weightsVals = backend.readSync(weights.dataId);\n        const outVals = bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n        return backend.makeTensorInfo([size], weights.dtype, outVals);\n    }\n    else if (x.shape.length === 2) {\n        const xBuf = backend.bufferSync(x);\n        const weightsBuf = backend.bufferSync(weights);\n        const outBuf = bincountReduceImplCPU(xBuf, weightsBuf, size, binaryOutput);\n        return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n    }\n    throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank` +\n        `${x.shape.length}.`);\n}\nexport const denseBincountConfig = {\n    kernelName: DenseBincount,\n    backendName: 'webgl',\n    kernelFunc: denseBincount\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,aAAT,QAA8B,uBAA9B;AACA,SAASC,eAAT,EAA0BC,qBAA1B,QAAuD,wBAAvD;AACA,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;EAChC,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BH,IAAnC;EACA,MAAM;IAAEI,CAAF;IAAKC;EAAL,IAAiBJ,MAAvB;EACA,MAAM;IAAEK,IAAF;IAAQC;EAAR,IAAyBJ,KAA/B;;EACA,IAAIC,CAAC,CAACI,KAAF,CAAQC,MAAR,KAAmB,CAAvB,EAA0B;IACtB,MAAMC,KAAK,GAAGR,OAAO,CAACS,QAAR,CAAiBP,CAAC,CAACQ,MAAnB,CAAd;IACA,MAAMC,WAAW,GAAGX,OAAO,CAACS,QAAR,CAAiBN,OAAO,CAACO,MAAzB,CAApB;IACA,MAAME,OAAO,GAAGjB,eAAe,CAACa,KAAD,EAAQG,WAAR,EAAqBR,OAAO,CAACU,KAA7B,EAAoCV,OAAO,CAACG,KAA5C,EAAmDF,IAAnD,CAA/B;IACA,OAAOJ,OAAO,CAACc,cAAR,CAAuB,CAACV,IAAD,CAAvB,EAA+BD,OAAO,CAACU,KAAvC,EAA8CD,OAA9C,CAAP;EACH,CALD,MAMK,IAAIV,CAAC,CAACI,KAAF,CAAQC,MAAR,KAAmB,CAAvB,EAA0B;IAC3B,MAAMQ,IAAI,GAAGf,OAAO,CAACgB,UAAR,CAAmBd,CAAnB,CAAb;IACA,MAAMe,UAAU,GAAGjB,OAAO,CAACgB,UAAR,CAAmBb,OAAnB,CAAnB;IACA,MAAMe,MAAM,GAAGtB,qBAAqB,CAACmB,IAAD,EAAOE,UAAP,EAAmBb,IAAnB,EAAyBC,YAAzB,CAApC;IACA,OAAOL,OAAO,CAACc,cAAR,CAAuBI,MAAM,CAACZ,KAA9B,EAAqCH,OAAO,CAACU,KAA7C,EAAoDK,MAAM,CAACC,MAA3D,CAAP;EACH;;EACD,MAAM,IAAIC,KAAJ,CAAW,oEAAD,GACX,GAAElB,CAAC,CAACI,KAAF,CAAQC,MAAO,GADhB,CAAN;AAEH;AACD,OAAO,MAAMc,mBAAmB,GAAG;EAC/BC,UAAU,EAAE5B,aADmB;EAE/B6B,WAAW,EAAE,OAFkB;EAG/BC,UAAU,EAAE3B;AAHmB,CAA5B"},"metadata":{},"sourceType":"module"}