{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport { add } from './add';\nimport { concat } from './concat';\nimport { matMul } from './mat_mul';\nimport { mul } from './mul';\nimport { op } from './operation';\nimport { sigmoid } from './sigmoid';\nimport { slice } from './slice';\nimport { tanh } from './tanh';\n/**\n * Computes the next state and output of a BasicLSTMCell.\n *\n * Returns `[newC, newH]`.\n *\n * Derived from tf.contrib.rnn.BasicLSTMCell.\n *\n * @param forgetBias Forget bias for the cell.\n * @param lstmKernel The weights for the cell.\n * @param lstmBias The bias for the cell.\n * @param data The input to the cell.\n * @param c Previous cell state.\n * @param h Previous cell output.\n *\n * @doc {heading: 'Operations', subheading: 'RNN'}\n */\n\nfunction basicLSTMCell_(forgetBias, lstmKernel, lstmBias, data, c, h) {\n  const $forgetBias = convertToTensor(forgetBias, 'forgetBias', 'basicLSTMCell');\n  const $lstmKernel = convertToTensor(lstmKernel, 'lstmKernel', 'basicLSTMCell');\n  const $lstmBias = convertToTensor(lstmBias, 'lstmBias', 'basicLSTMCell');\n  const $data = convertToTensor(data, 'data', 'basicLSTMCell');\n  const $c = convertToTensor(c, 'c', 'basicLSTMCell');\n  const $h = convertToTensor(h, 'h', 'basicLSTMCell');\n  const combined = concat([$data, $h], 1);\n  const weighted = matMul(combined, $lstmKernel);\n  const res = add(weighted, $lstmBias); // i = input_gate, j = new_input, f = forget_gate, o = output_gate\n\n  const batchSize = res.shape[0];\n  const sliceCols = res.shape[1] / 4;\n  const sliceSize = [batchSize, sliceCols];\n  const i = slice(res, [0, 0], sliceSize);\n  const j = slice(res, [0, sliceCols], sliceSize);\n  const f = slice(res, [0, sliceCols * 2], sliceSize);\n  const o = slice(res, [0, sliceCols * 3], sliceSize);\n  const newC = add(mul(sigmoid(i), tanh(j)), mul($c, sigmoid(add($forgetBias, f))));\n  const newH = mul(tanh(newC), sigmoid(o));\n  return [newC, newH];\n}\n\nexport const basicLSTMCell = op({\n  basicLSTMCell_\n});","map":{"version":3,"names":["convertToTensor","add","concat","matMul","mul","op","sigmoid","slice","tanh","basicLSTMCell_","forgetBias","lstmKernel","lstmBias","data","c","h","$forgetBias","$lstmKernel","$lstmBias","$data","$c","$h","combined","weighted","res","batchSize","shape","sliceCols","sliceSize","i","j","f","o","newC","newH","basicLSTMCell"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/basic_lstm_cell.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport { add } from './add';\nimport { concat } from './concat';\nimport { matMul } from './mat_mul';\nimport { mul } from './mul';\nimport { op } from './operation';\nimport { sigmoid } from './sigmoid';\nimport { slice } from './slice';\nimport { tanh } from './tanh';\n/**\n * Computes the next state and output of a BasicLSTMCell.\n *\n * Returns `[newC, newH]`.\n *\n * Derived from tf.contrib.rnn.BasicLSTMCell.\n *\n * @param forgetBias Forget bias for the cell.\n * @param lstmKernel The weights for the cell.\n * @param lstmBias The bias for the cell.\n * @param data The input to the cell.\n * @param c Previous cell state.\n * @param h Previous cell output.\n *\n * @doc {heading: 'Operations', subheading: 'RNN'}\n */\nfunction basicLSTMCell_(forgetBias, lstmKernel, lstmBias, data, c, h) {\n    const $forgetBias = convertToTensor(forgetBias, 'forgetBias', 'basicLSTMCell');\n    const $lstmKernel = convertToTensor(lstmKernel, 'lstmKernel', 'basicLSTMCell');\n    const $lstmBias = convertToTensor(lstmBias, 'lstmBias', 'basicLSTMCell');\n    const $data = convertToTensor(data, 'data', 'basicLSTMCell');\n    const $c = convertToTensor(c, 'c', 'basicLSTMCell');\n    const $h = convertToTensor(h, 'h', 'basicLSTMCell');\n    const combined = concat([$data, $h], 1);\n    const weighted = matMul(combined, $lstmKernel);\n    const res = add(weighted, $lstmBias);\n    // i = input_gate, j = new_input, f = forget_gate, o = output_gate\n    const batchSize = res.shape[0];\n    const sliceCols = res.shape[1] / 4;\n    const sliceSize = [batchSize, sliceCols];\n    const i = slice(res, [0, 0], sliceSize);\n    const j = slice(res, [0, sliceCols], sliceSize);\n    const f = slice(res, [0, sliceCols * 2], sliceSize);\n    const o = slice(res, [0, sliceCols * 3], sliceSize);\n    const newC = add(mul(sigmoid(i), tanh(j)), mul($c, sigmoid(add($forgetBias, f))));\n    const newH = mul(tanh(newC), sigmoid(o));\n    return [newC, newH];\n}\nexport const basicLSTMCell = op({ basicLSTMCell_ });\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,eAAT,QAAgC,oBAAhC;AACA,SAASC,GAAT,QAAoB,OAApB;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,GAAT,QAAoB,OAApB;AACA,SAASC,EAAT,QAAmB,aAAnB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,SAASC,IAAT,QAAqB,QAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,CAAwBC,UAAxB,EAAoCC,UAApC,EAAgDC,QAAhD,EAA0DC,IAA1D,EAAgEC,CAAhE,EAAmEC,CAAnE,EAAsE;EAClE,MAAMC,WAAW,GAAGhB,eAAe,CAACU,UAAD,EAAa,YAAb,EAA2B,eAA3B,CAAnC;EACA,MAAMO,WAAW,GAAGjB,eAAe,CAACW,UAAD,EAAa,YAAb,EAA2B,eAA3B,CAAnC;EACA,MAAMO,SAAS,GAAGlB,eAAe,CAACY,QAAD,EAAW,UAAX,EAAuB,eAAvB,CAAjC;EACA,MAAMO,KAAK,GAAGnB,eAAe,CAACa,IAAD,EAAO,MAAP,EAAe,eAAf,CAA7B;EACA,MAAMO,EAAE,GAAGpB,eAAe,CAACc,CAAD,EAAI,GAAJ,EAAS,eAAT,CAA1B;EACA,MAAMO,EAAE,GAAGrB,eAAe,CAACe,CAAD,EAAI,GAAJ,EAAS,eAAT,CAA1B;EACA,MAAMO,QAAQ,GAAGpB,MAAM,CAAC,CAACiB,KAAD,EAAQE,EAAR,CAAD,EAAc,CAAd,CAAvB;EACA,MAAME,QAAQ,GAAGpB,MAAM,CAACmB,QAAD,EAAWL,WAAX,CAAvB;EACA,MAAMO,GAAG,GAAGvB,GAAG,CAACsB,QAAD,EAAWL,SAAX,CAAf,CATkE,CAUlE;;EACA,MAAMO,SAAS,GAAGD,GAAG,CAACE,KAAJ,CAAU,CAAV,CAAlB;EACA,MAAMC,SAAS,GAAGH,GAAG,CAACE,KAAJ,CAAU,CAAV,IAAe,CAAjC;EACA,MAAME,SAAS,GAAG,CAACH,SAAD,EAAYE,SAAZ,CAAlB;EACA,MAAME,CAAC,GAAGtB,KAAK,CAACiB,GAAD,EAAM,CAAC,CAAD,EAAI,CAAJ,CAAN,EAAcI,SAAd,CAAf;EACA,MAAME,CAAC,GAAGvB,KAAK,CAACiB,GAAD,EAAM,CAAC,CAAD,EAAIG,SAAJ,CAAN,EAAsBC,SAAtB,CAAf;EACA,MAAMG,CAAC,GAAGxB,KAAK,CAACiB,GAAD,EAAM,CAAC,CAAD,EAAIG,SAAS,GAAG,CAAhB,CAAN,EAA0BC,SAA1B,CAAf;EACA,MAAMI,CAAC,GAAGzB,KAAK,CAACiB,GAAD,EAAM,CAAC,CAAD,EAAIG,SAAS,GAAG,CAAhB,CAAN,EAA0BC,SAA1B,CAAf;EACA,MAAMK,IAAI,GAAGhC,GAAG,CAACG,GAAG,CAACE,OAAO,CAACuB,CAAD,CAAR,EAAarB,IAAI,CAACsB,CAAD,CAAjB,CAAJ,EAA2B1B,GAAG,CAACgB,EAAD,EAAKd,OAAO,CAACL,GAAG,CAACe,WAAD,EAAce,CAAd,CAAJ,CAAZ,CAA9B,CAAhB;EACA,MAAMG,IAAI,GAAG9B,GAAG,CAACI,IAAI,CAACyB,IAAD,CAAL,EAAa3B,OAAO,CAAC0B,CAAD,CAApB,CAAhB;EACA,OAAO,CAACC,IAAD,EAAOC,IAAP,CAAP;AACH;;AACD,OAAO,MAAMC,aAAa,GAAG9B,EAAE,CAAC;EAAEI;AAAF,CAAD,CAAxB"},"metadata":{},"sourceType":"module"}