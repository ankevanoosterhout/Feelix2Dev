{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class AvgPool2DBackpropProgram {\n  constructor(convInfo) {\n    this.variableNames = ['dy'];\n    this.outputShape = convInfo.inShape;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const avgMultiplier = 1 / (filterHeight * filterWidth);\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth};\n            wC+= ${dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n\n}\nexport class AvgPool3DBackpropProgram {\n  constructor(convInfo) {\n    this.variableNames = ['dy'];\n    this.outputShape = convInfo.inShape;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n\n}","map":{"version":3,"names":["AvgPool2DBackpropProgram","constructor","convInfo","variableNames","outputShape","inShape","filterHeight","filterWidth","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padTop","padInfo","top","padLeft","left","avgMultiplier","userCode","outHeight","outWidth","AvgPool3DBackpropProgram","filterDepth","strideDepth","dilationDepth","effectiveFilterDepth","padFront","front","outDepth"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/avg_pool_backprop_gpu.js"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class AvgPool2DBackpropProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy'];\n        this.outputShape = convInfo.inShape;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const avgMultiplier = 1 / (filterHeight * filterWidth);\n        this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth};\n            wC+= ${dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\nexport class AvgPool3DBackpropProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy'];\n        this.outputShape = convInfo.inShape;\n        const filterDepth = convInfo.filterDepth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n        this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}