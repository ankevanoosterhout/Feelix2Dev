{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Complex } from '@tensorflow/tfjs-core';\nimport { identity } from './Identity';\n/**\n * In WebGL data is stored in GPU textures which can't be efficiently copied, so\n * complex tensors share data with their real and imaginary components. Complex\n * tensors' reference to the components is tracked by refCount on the individual\n * component. The refCounts are increased by the identity call.\n *\n * When a complex tensor is disposed, it will reduce the refCount on the\n * components by calling disposeData on each.\n */\n\nexport function complex(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    real,\n    imag\n  } = inputs;\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n  const complex = backend.texData.get(complexInfo.dataId);\n  const realTensorInfo = identity({\n    inputs: {\n      x: real\n    },\n    backend\n  });\n  const imagTensorInfo = identity({\n    inputs: {\n      x: imag\n    },\n    backend\n  });\n  complex.complexTensorInfos = {\n    real: realTensorInfo,\n    imag: imagTensorInfo\n  };\n  return complexInfo;\n}\nexport const complexConfig = {\n  kernelName: Complex,\n  backendName: 'webgl',\n  kernelFunc: complex\n};","map":{"version":3,"names":["Complex","identity","complex","args","inputs","backend","real","imag","complexInfo","makeTensorInfo","shape","texData","get","dataId","realTensorInfo","x","imagTensorInfo","complexTensorInfos","complexConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Complex.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Complex } from '@tensorflow/tfjs-core';\nimport { identity } from './Identity';\n/**\n * In WebGL data is stored in GPU textures which can't be efficiently copied, so\n * complex tensors share data with their real and imaginary components. Complex\n * tensors' reference to the components is tracked by refCount on the individual\n * component. The refCounts are increased by the identity call.\n *\n * When a complex tensor is disposed, it will reduce the refCount on the\n * components by calling disposeData on each.\n */\nexport function complex(args) {\n    const { inputs, backend } = args;\n    const { real, imag } = inputs;\n    const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n    const complex = backend.texData.get(complexInfo.dataId);\n    const realTensorInfo = identity({ inputs: { x: real }, backend });\n    const imagTensorInfo = identity({ inputs: { x: imag }, backend });\n    complex.complexTensorInfos = { real: realTensorInfo, imag: imagTensorInfo };\n    return complexInfo;\n}\nexport const complexConfig = {\n    kernelName: Complex,\n    backendName: 'webgl',\n    kernelFunc: complex\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAT,QAAwB,uBAAxB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,OAAT,CAAiBC,IAAjB,EAAuB;EAC1B,MAAM;IAAEC,MAAF;IAAUC;EAAV,IAAsBF,IAA5B;EACA,MAAM;IAAEG,IAAF;IAAQC;EAAR,IAAiBH,MAAvB;EACA,MAAMI,WAAW,GAAGH,OAAO,CAACI,cAAR,CAAuBH,IAAI,CAACI,KAA5B,EAAmC,WAAnC,CAApB;EACA,MAAMR,OAAO,GAAGG,OAAO,CAACM,OAAR,CAAgBC,GAAhB,CAAoBJ,WAAW,CAACK,MAAhC,CAAhB;EACA,MAAMC,cAAc,GAAGb,QAAQ,CAAC;IAAEG,MAAM,EAAE;MAAEW,CAAC,EAAET;IAAL,CAAV;IAAuBD;EAAvB,CAAD,CAA/B;EACA,MAAMW,cAAc,GAAGf,QAAQ,CAAC;IAAEG,MAAM,EAAE;MAAEW,CAAC,EAAER;IAAL,CAAV;IAAuBF;EAAvB,CAAD,CAA/B;EACAH,OAAO,CAACe,kBAAR,GAA6B;IAAEX,IAAI,EAAEQ,cAAR;IAAwBP,IAAI,EAAES;EAA9B,CAA7B;EACA,OAAOR,WAAP;AACH;AACD,OAAO,MAAMU,aAAa,GAAG;EACzBC,UAAU,EAAEnB,OADa;EAEzBoB,WAAW,EAAE,OAFY;EAGzBC,UAAU,EAAEnB;AAHa,CAAtB"},"metadata":{},"sourceType":"module"}