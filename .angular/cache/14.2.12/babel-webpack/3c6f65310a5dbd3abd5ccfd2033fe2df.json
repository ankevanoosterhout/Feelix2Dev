{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Prod, sumOutType, util } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nimport { prodImplCPU } from '../kernel_utils/shared';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function prod(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis,\n    keepDims\n  } = attrs;\n  const xRank = x.shape.length;\n  const toDispose = [];\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n\n  if (permutedAxes != null) {\n    permutedX = transpose({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        perm: permutedAxes\n      }\n    });\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    toDispose.push(permutedX);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('prod', axes, xRank);\n  let res;\n\n  if (backend.shouldExecuteOnCPU([permutedX])) {\n    const xVals = backend.texData.get(permutedX.dataId).values;\n    const {\n      outVals,\n      outShape,\n      outDtype\n    } = prodImplCPU(permutedX.shape, permutedX.dtype, xVals, axes);\n    res = backend.makeTensorInfo(outShape, outDtype, outVals);\n  } else {\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape({\n      inputs: {\n        x: permutedX\n      },\n      backend,\n      attrs: {\n        shape: [-1, inSize]\n      }\n    });\n    const outputDType = sumOutType(x.dtype);\n    const reduced = reduce(a2D, outputDType, 'prod', backend);\n    res = reshape({\n      inputs: {\n        x: reduced\n      },\n      backend,\n      attrs: {\n        shape: outShape\n      }\n    });\n    toDispose.push(a2D);\n    toDispose.push(reduced);\n  }\n\n  if (keepDims) {\n    toDispose.push(res);\n    const newShape = backend_util.expandShapeToKeepDim(res.shape, origAxes);\n    res = reshape({\n      inputs: {\n        x: res\n      },\n      backend,\n      attrs: {\n        shape: newShape\n      }\n    });\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return res;\n}\nexport const prodConfig = {\n  kernelName: Prod,\n  backendName: 'webgl',\n  kernelFunc: prod\n};","map":{"version":3,"names":["backend_util","Prod","sumOutType","util","reduce","prodImplCPU","reshape","transpose","prod","args","inputs","backend","attrs","x","axis","keepDims","xRank","shape","length","toDispose","origAxes","parseAxisParam","axes","permutedAxes","getAxesPermutation","permutedX","perm","getInnerMostAxes","push","assertAxesAreInnerMostDims","res","shouldExecuteOnCPU","xVals","texData","get","dataId","values","outVals","outShape","outDtype","dtype","makeTensorInfo","reduceShape","computeOutAndReduceShapes","inSize","sizeFromShape","a2D","outputDType","reduced","newShape","expandShapeToKeepDim","forEach","t","disposeIntermediateTensorInfo","prodConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Prod.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Prod, sumOutType, util } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nimport { prodImplCPU } from '../kernel_utils/shared';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function prod(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    const xRank = x.shape.length;\n    const toDispose = [];\n    const origAxes = util.parseAxisParam(axis, x.shape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    let permutedX = x;\n    if (permutedAxes != null) {\n        permutedX = transpose({ inputs: { x }, backend, attrs: { perm: permutedAxes } });\n        axes = backend_util.getInnerMostAxes(axes.length, xRank);\n        toDispose.push(permutedX);\n    }\n    backend_util.assertAxesAreInnerMostDims('prod', axes, xRank);\n    let res;\n    if (backend.shouldExecuteOnCPU([permutedX])) {\n        const xVals = backend.texData.get(permutedX.dataId).values;\n        const { outVals, outShape, outDtype } = prodImplCPU(permutedX.shape, permutedX.dtype, xVals, axes);\n        res = backend.makeTensorInfo(outShape, outDtype, outVals);\n    }\n    else {\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n        const inSize = util.sizeFromShape(reduceShape);\n        const a2D = reshape({ inputs: { x: permutedX }, backend, attrs: { shape: [-1, inSize] } });\n        const outputDType = sumOutType(x.dtype);\n        const reduced = reduce(a2D, outputDType, 'prod', backend);\n        res = reshape({ inputs: { x: reduced }, backend, attrs: { shape: outShape } });\n        toDispose.push(a2D);\n        toDispose.push(reduced);\n    }\n    if (keepDims) {\n        toDispose.push(res);\n        const newShape = backend_util.expandShapeToKeepDim(res.shape, origAxes);\n        res = reshape({ inputs: { x: res }, backend, attrs: { shape: newShape } });\n    }\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return res;\n}\nexport const prodConfig = {\n    kernelName: Prod,\n    backendName: 'webgl',\n    kernelFunc: prod\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,EAAuBC,IAAvB,EAA6BC,UAA7B,EAAyCC,IAAzC,QAAqD,uBAArD;AACA,SAASC,MAAT,QAAuB,wBAAvB;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAO,SAASC,IAAT,CAAcC,IAAd,EAAoB;EACvB,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BH,IAAnC;EACA,MAAM;IAAEI;EAAF,IAAQH,MAAd;EACA,MAAM;IAAEI,IAAF;IAAQC;EAAR,IAAqBH,KAA3B;EACA,MAAMI,KAAK,GAAGH,CAAC,CAACI,KAAF,CAAQC,MAAtB;EACA,MAAMC,SAAS,GAAG,EAAlB;EACA,MAAMC,QAAQ,GAAGjB,IAAI,CAACkB,cAAL,CAAoBP,IAApB,EAA0BD,CAAC,CAACI,KAA5B,CAAjB;EACA,IAAIK,IAAI,GAAGF,QAAX;EACA,MAAMG,YAAY,GAAGvB,YAAY,CAACwB,kBAAb,CAAgCF,IAAhC,EAAsCN,KAAtC,CAArB;EACA,IAAIS,SAAS,GAAGZ,CAAhB;;EACA,IAAIU,YAAY,IAAI,IAApB,EAA0B;IACtBE,SAAS,GAAGlB,SAAS,CAAC;MAAEG,MAAM,EAAE;QAAEG;MAAF,CAAV;MAAiBF,OAAjB;MAA0BC,KAAK,EAAE;QAAEc,IAAI,EAAEH;MAAR;IAAjC,CAAD,CAArB;IACAD,IAAI,GAAGtB,YAAY,CAAC2B,gBAAb,CAA8BL,IAAI,CAACJ,MAAnC,EAA2CF,KAA3C,CAAP;IACAG,SAAS,CAACS,IAAV,CAAeH,SAAf;EACH;;EACDzB,YAAY,CAAC6B,0BAAb,CAAwC,MAAxC,EAAgDP,IAAhD,EAAsDN,KAAtD;EACA,IAAIc,GAAJ;;EACA,IAAInB,OAAO,CAACoB,kBAAR,CAA2B,CAACN,SAAD,CAA3B,CAAJ,EAA6C;IACzC,MAAMO,KAAK,GAAGrB,OAAO,CAACsB,OAAR,CAAgBC,GAAhB,CAAoBT,SAAS,CAACU,MAA9B,EAAsCC,MAApD;IACA,MAAM;MAAEC,OAAF;MAAWC,QAAX;MAAqBC;IAArB,IAAkClC,WAAW,CAACoB,SAAS,CAACR,KAAX,EAAkBQ,SAAS,CAACe,KAA5B,EAAmCR,KAAnC,EAA0CV,IAA1C,CAAnD;IACAQ,GAAG,GAAGnB,OAAO,CAAC8B,cAAR,CAAuBH,QAAvB,EAAiCC,QAAjC,EAA2CF,OAA3C,CAAN;EACH,CAJD,MAKK;IACD,MAAM,CAACC,QAAD,EAAWI,WAAX,IAA0B1C,YAAY,CAAC2C,yBAAb,CAAuClB,SAAS,CAACR,KAAjD,EAAwDK,IAAxD,CAAhC;IACA,MAAMsB,MAAM,GAAGzC,IAAI,CAAC0C,aAAL,CAAmBH,WAAnB,CAAf;IACA,MAAMI,GAAG,GAAGxC,OAAO,CAAC;MAAEI,MAAM,EAAE;QAAEG,CAAC,EAAEY;MAAL,CAAV;MAA4Bd,OAA5B;MAAqCC,KAAK,EAAE;QAAEK,KAAK,EAAE,CAAC,CAAC,CAAF,EAAK2B,MAAL;MAAT;IAA5C,CAAD,CAAnB;IACA,MAAMG,WAAW,GAAG7C,UAAU,CAACW,CAAC,CAAC2B,KAAH,CAA9B;IACA,MAAMQ,OAAO,GAAG5C,MAAM,CAAC0C,GAAD,EAAMC,WAAN,EAAmB,MAAnB,EAA2BpC,OAA3B,CAAtB;IACAmB,GAAG,GAAGxB,OAAO,CAAC;MAAEI,MAAM,EAAE;QAAEG,CAAC,EAAEmC;MAAL,CAAV;MAA0BrC,OAA1B;MAAmCC,KAAK,EAAE;QAAEK,KAAK,EAAEqB;MAAT;IAA1C,CAAD,CAAb;IACAnB,SAAS,CAACS,IAAV,CAAekB,GAAf;IACA3B,SAAS,CAACS,IAAV,CAAeoB,OAAf;EACH;;EACD,IAAIjC,QAAJ,EAAc;IACVI,SAAS,CAACS,IAAV,CAAeE,GAAf;IACA,MAAMmB,QAAQ,GAAGjD,YAAY,CAACkD,oBAAb,CAAkCpB,GAAG,CAACb,KAAtC,EAA6CG,QAA7C,CAAjB;IACAU,GAAG,GAAGxB,OAAO,CAAC;MAAEI,MAAM,EAAE;QAAEG,CAAC,EAAEiB;MAAL,CAAV;MAAsBnB,OAAtB;MAA+BC,KAAK,EAAE;QAAEK,KAAK,EAAEgC;MAAT;IAAtC,CAAD,CAAb;EACH;;EACD9B,SAAS,CAACgC,OAAV,CAAkBC,CAAC,IAAIzC,OAAO,CAAC0C,6BAAR,CAAsCD,CAAtC,CAAvB;EACA,OAAOtB,GAAP;AACH;AACD,OAAO,MAAMwB,UAAU,GAAG;EACtBC,UAAU,EAAEtD,IADU;EAEtBuD,WAAW,EAAE,OAFS;EAGtBC,UAAU,EAAEjD;AAHU,CAAnB"},"metadata":{},"sourceType":"module"}