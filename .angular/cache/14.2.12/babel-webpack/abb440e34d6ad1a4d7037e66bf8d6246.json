{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SparseSegmentMean } from '@tensorflow/tfjs-core';\nimport { sparseSegmentReductionImplCPU } from '../kernel_utils/shared';\nexport function sparseSegmentMean(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    data,\n    indices,\n    segmentIds\n  } = inputs;\n\n  if (data.shape.length < 1) {\n    throw new Error(`Data should be at least 1 dimensional but received scalar`);\n  }\n\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n              ${indices.shape}`);\n  }\n\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n              ${segmentIds.shape}`);\n  }\n\n  const $data = backend.readSync(data.dataId);\n  const $indices = backend.readSync(indices.dataId);\n  const $segmentIds = backend.readSync(segmentIds.dataId);\n  const [outputData, outputDataShape] = sparseSegmentReductionImplCPU($data, data.shape, data.dtype, $indices, $segmentIds, true);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\nexport const sparseSegmentMeanConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: 'webgl',\n  kernelFunc: sparseSegmentMean\n};","map":{"version":3,"names":["SparseSegmentMean","sparseSegmentReductionImplCPU","sparseSegmentMean","args","inputs","backend","data","indices","segmentIds","shape","length","Error","$data","readSync","dataId","$indices","$segmentIds","outputData","outputDataShape","dtype","makeTensorInfo","sparseSegmentMeanConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SparseSegmentMean.js"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SparseSegmentMean } from '@tensorflow/tfjs-core';\nimport { sparseSegmentReductionImplCPU } from '../kernel_utils/shared';\nexport function sparseSegmentMean(args) {\n    const { inputs, backend } = args;\n    const { data, indices, segmentIds } = inputs;\n    if (data.shape.length < 1) {\n        throw new Error(`Data should be at least 1 dimensional but received scalar`);\n    }\n    if (indices.shape.length !== 1) {\n        throw new Error(`Indices should be a vector but received shape\n              ${indices.shape}`);\n    }\n    if (segmentIds.shape.length !== 1) {\n        throw new Error(`Segment ids should be a vector but received shape\n              ${segmentIds.shape}`);\n    }\n    const $data = backend.readSync(data.dataId);\n    const $indices = backend.readSync(indices.dataId);\n    const $segmentIds = backend.readSync(segmentIds.dataId);\n    const [outputData, outputDataShape] = sparseSegmentReductionImplCPU($data, data.shape, data.dtype, $indices, $segmentIds, true);\n    return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\nexport const sparseSegmentMeanConfig = {\n    kernelName: SparseSegmentMean,\n    backendName: 'webgl',\n    kernelFunc: sparseSegmentMean,\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,iBAAT,QAAkC,uBAAlC;AACA,SAASC,6BAAT,QAA8C,wBAA9C;AACA,OAAO,SAASC,iBAAT,CAA2BC,IAA3B,EAAiC;EACpC,MAAM;IAAEC,MAAF;IAAUC;EAAV,IAAsBF,IAA5B;EACA,MAAM;IAAEG,IAAF;IAAQC,OAAR;IAAiBC;EAAjB,IAAgCJ,MAAtC;;EACA,IAAIE,IAAI,CAACG,KAAL,CAAWC,MAAX,GAAoB,CAAxB,EAA2B;IACvB,MAAM,IAAIC,KAAJ,CAAW,2DAAX,CAAN;EACH;;EACD,IAAIJ,OAAO,CAACE,KAAR,CAAcC,MAAd,KAAyB,CAA7B,EAAgC;IAC5B,MAAM,IAAIC,KAAJ,CAAW;AACzB,gBAAgBJ,OAAO,CAACE,KAAM,EADhB,CAAN;EAEH;;EACD,IAAID,UAAU,CAACC,KAAX,CAAiBC,MAAjB,KAA4B,CAAhC,EAAmC;IAC/B,MAAM,IAAIC,KAAJ,CAAW;AACzB,gBAAgBH,UAAU,CAACC,KAAM,EADnB,CAAN;EAEH;;EACD,MAAMG,KAAK,GAAGP,OAAO,CAACQ,QAAR,CAAiBP,IAAI,CAACQ,MAAtB,CAAd;EACA,MAAMC,QAAQ,GAAGV,OAAO,CAACQ,QAAR,CAAiBN,OAAO,CAACO,MAAzB,CAAjB;EACA,MAAME,WAAW,GAAGX,OAAO,CAACQ,QAAR,CAAiBL,UAAU,CAACM,MAA5B,CAApB;EACA,MAAM,CAACG,UAAD,EAAaC,eAAb,IAAgCjB,6BAA6B,CAACW,KAAD,EAAQN,IAAI,CAACG,KAAb,EAAoBH,IAAI,CAACa,KAAzB,EAAgCJ,QAAhC,EAA0CC,WAA1C,EAAuD,IAAvD,CAAnE;EACA,OAAOX,OAAO,CAACe,cAAR,CAAuBF,eAAvB,EAAwCZ,IAAI,CAACa,KAA7C,EAAoDF,UAApD,CAAP;AACH;AACD,OAAO,MAAMI,uBAAuB,GAAG;EACnCC,UAAU,EAAEtB,iBADuB;EAEnCuB,WAAW,EAAE,OAFsB;EAGnCC,UAAU,EAAEtB;AAHuB,CAAhC"},"metadata":{},"sourceType":"module"}