{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * IOHandlers related to files, such as browser-triggered file downloads,\n * user-selected files in browser.\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { basename, concatenateArrayBuffers, getModelArtifactsForJSON, getModelArtifactsInfoForJSON, getModelJSONForModelArtifacts } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nconst DEFAULT_FILE_NAME_PREFIX = 'model';\nconst DEFAULT_JSON_EXTENSION_NAME = '.json';\nconst DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';\n\nfunction defer(f) {\n  return new Promise(resolve => setTimeout(resolve)).then(f);\n}\n\nexport class BrowserDownloads {\n  constructor(fileNamePrefix) {\n    if (!env().getBool('IS_BROWSER')) {\n      // TODO(cais): Provide info on what IOHandlers are available under the\n      //   current environment.\n      throw new Error('browserDownloads() cannot proceed because the current environment ' + 'is not a browser.');\n    }\n\n    if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {\n      fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);\n    }\n\n    if (fileNamePrefix == null || fileNamePrefix.length === 0) {\n      fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;\n    }\n\n    this.modelJsonFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;\n    this.weightDataFileName = fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;\n  }\n\n  save(modelArtifacts) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (typeof document === 'undefined') {\n        throw new Error('Browser downloads are not supported in ' + 'this environment since `document` is not present');\n      }\n\n      const weightsURL = window.URL.createObjectURL(new Blob([modelArtifacts.weightData], {\n        type: 'application/octet-stream'\n      }));\n\n      if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n        throw new Error('BrowserDownloads.save() does not support saving model topology ' + 'in binary formats yet.');\n      } else {\n        const weightsManifest = [{\n          paths: ['./' + _this.weightDataFileName],\n          weights: modelArtifacts.weightSpecs\n        }];\n        const modelJSON = getModelJSONForModelArtifacts(modelArtifacts, weightsManifest);\n        const modelJsonURL = window.URL.createObjectURL(new Blob([JSON.stringify(modelJSON)], {\n          type: 'application/json'\n        })); // If anchor elements are not provided, create them without attaching them\n        // to parents, so that the downloaded file names can be controlled.\n\n        const jsonAnchor = _this.modelJsonAnchor == null ? document.createElement('a') : _this.modelJsonAnchor;\n        jsonAnchor.download = _this.modelJsonFileName;\n        jsonAnchor.href = modelJsonURL; // Trigger downloads by evoking a click event on the download anchors.\n        // When multiple downloads are started synchronously, Firefox will only\n        // save the last one.\n\n        yield defer(() => jsonAnchor.dispatchEvent(new MouseEvent('click')));\n\n        if (modelArtifacts.weightData != null) {\n          const weightDataAnchor = _this.weightDataAnchor == null ? document.createElement('a') : _this.weightDataAnchor;\n          weightDataAnchor.download = _this.weightDataFileName;\n          weightDataAnchor.href = weightsURL;\n          yield defer(() => weightDataAnchor.dispatchEvent(new MouseEvent('click')));\n        }\n\n        return {\n          modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts)\n        };\n      }\n    })();\n  }\n\n}\nBrowserDownloads.URL_SCHEME = 'downloads://';\n\nclass BrowserFiles {\n  constructor(files) {\n    if (files == null || files.length < 1) {\n      throw new Error(`When calling browserFiles, at least 1 file is required, ` + `but received ${files}`);\n    }\n\n    this.jsonFile = files[0];\n    this.weightsFiles = files.slice(1);\n  }\n\n  load() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        const jsonReader = new FileReader();\n\n        jsonReader.onload = event => {\n          // tslint:disable-next-line:no-any\n          const modelJSON = JSON.parse(event.target.result);\n          const modelTopology = modelJSON.modelTopology;\n\n          if (modelTopology == null) {\n            reject(new Error(`modelTopology field is missing from file ${_this2.jsonFile.name}`));\n            return;\n          }\n\n          const weightsManifest = modelJSON.weightsManifest;\n\n          if (weightsManifest == null) {\n            reject(new Error(`weightManifest field is missing from file ${_this2.jsonFile.name}`));\n            return;\n          }\n\n          if (_this2.weightsFiles.length === 0) {\n            resolve({\n              modelTopology\n            });\n            return;\n          }\n\n          const modelArtifactsPromise = getModelArtifactsForJSON(modelJSON, weightsManifest => _this2.loadWeights(weightsManifest));\n          resolve(modelArtifactsPromise);\n        };\n\n        jsonReader.onerror = error => reject(`Failed to read model topology and weights manifest JSON ` + `from file '${_this2.jsonFile.name}'. BrowserFiles supports loading ` + `Keras-style tf.Model artifacts only.`);\n\n        jsonReader.readAsText(_this2.jsonFile);\n      });\n    })();\n  }\n\n  loadWeights(weightsManifest) {\n    const weightSpecs = [];\n    const paths = [];\n\n    for (const entry of weightsManifest) {\n      weightSpecs.push(...entry.weights);\n      paths.push(...entry.paths);\n    }\n\n    const pathToFile = this.checkManifestAndWeightFiles(weightsManifest);\n    const promises = paths.map(path => this.loadWeightsFile(path, pathToFile[path]));\n    return Promise.all(promises).then(buffers => [weightSpecs, concatenateArrayBuffers(buffers)]);\n  }\n\n  loadWeightsFile(path, file) {\n    return new Promise((resolve, reject) => {\n      const weightFileReader = new FileReader();\n\n      weightFileReader.onload = event => {\n        // tslint:disable-next-line:no-any\n        const weightData = event.target.result;\n        resolve(weightData);\n      };\n\n      weightFileReader.onerror = error => reject(`Failed to weights data from file of path '${path}'.`);\n\n      weightFileReader.readAsArrayBuffer(file);\n    });\n  }\n  /**\n   * Check the compatibility between weights manifest and weight files.\n   */\n\n\n  checkManifestAndWeightFiles(manifest) {\n    const basenames = [];\n    const fileNames = this.weightsFiles.map(file => basename(file.name));\n    const pathToFile = {};\n\n    for (const group of manifest) {\n      group.paths.forEach(path => {\n        const pathBasename = basename(path);\n\n        if (basenames.indexOf(pathBasename) !== -1) {\n          throw new Error(`Duplicate file basename found in weights manifest: ` + `'${pathBasename}'`);\n        }\n\n        basenames.push(pathBasename);\n\n        if (fileNames.indexOf(pathBasename) === -1) {\n          throw new Error(`Weight file with basename '${pathBasename}' is not provided.`);\n        } else {\n          pathToFile[path] = this.weightsFiles[fileNames.indexOf(pathBasename)];\n        }\n      });\n    }\n\n    if (basenames.length !== this.weightsFiles.length) {\n      throw new Error(`Mismatch in the number of files in weights manifest ` + `(${basenames.length}) and the number of weight files provided ` + `(${this.weightsFiles.length}).`);\n    }\n\n    return pathToFile;\n  }\n\n}\n\nexport const browserDownloadsRouter = url => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {\n      return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(browserDownloadsRouter);\n/**\n * Creates an IOHandler that triggers file downloads from the browser.\n *\n * The returned `IOHandler` instance can be used as model exporting methods such\n * as `tf.Model.save` and supports only saving.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * const saveResult = await model.save('downloads://mymodel');\n * // This will trigger downloading of two files:\n * //   'mymodel.json' and 'mymodel.weights.bin'.\n * console.log(saveResult);\n * ```\n *\n * @param fileNamePrefix Prefix name of the files to be downloaded. For use with\n *   `tf.Model`, `fileNamePrefix` should follow either of the following two\n *   formats:\n *   1. `null` or `undefined`, in which case the default file\n *      names will be used:\n *      - 'model.json' for the JSON file containing the model topology and\n *        weights manifest.\n *      - 'model.weights.bin' for the binary file containing the binary weight\n *        values.\n *   2. A single string or an Array of a single string, as the file name prefix.\n *      For example, if `'foo'` is provided, the downloaded JSON\n *      file and binary weights file will be named 'foo.json' and\n *      'foo.weights.bin', respectively.\n * @param config Additional configuration for triggering downloads.\n * @returns An instance of `BrowserDownloads` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\n\nexport function browserDownloads(fileNamePrefix = 'model') {\n  return new BrowserDownloads(fileNamePrefix);\n}\n/**\n * Creates an IOHandler that loads model artifacts from user-selected files.\n *\n * This method can be used for loading from files such as user-selected files\n * in the browser.\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * // Note: This code snippet won't run properly without the actual file input\n * //   elements in the HTML DOM.\n *\n * // Suppose there are two HTML file input (`<input type=\"file\" ...>`)\n * // elements.\n * const uploadJSONInput = document.getElementById('upload-json');\n * const uploadWeightsInput = document.getElementById('upload-weights');\n * const model = await tf.loadLayersModel(tf.io.browserFiles(\n *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n * ```\n *\n * @param files `File`s to load from. Currently, this function supports only\n *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for\n *   which an `Array` of `File`s is expected (in that order):\n *   - A JSON file containing the model topology and weight manifest.\n *   - Optionally, one or more binary files containing the binary weights.\n *     These files must have names that match the paths in the `weightsManifest`\n *     contained by the aforementioned JSON file, or errors will be thrown\n *     during loading. These weights files have the same format as the ones\n *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`\n *     Python PIP package. If no weights files are provided, only the model\n *     topology will be loaded from the JSON file above.\n * @returns An instance of `Files` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\n\nexport function browserFiles(files) {\n  return new BrowserFiles(files);\n}","map":{"version":3,"names":["env","basename","concatenateArrayBuffers","getModelArtifactsForJSON","getModelArtifactsInfoForJSON","getModelJSONForModelArtifacts","IORouterRegistry","DEFAULT_FILE_NAME_PREFIX","DEFAULT_JSON_EXTENSION_NAME","DEFAULT_WEIGHT_DATA_EXTENSION_NAME","defer","f","Promise","resolve","setTimeout","then","BrowserDownloads","constructor","fileNamePrefix","getBool","Error","startsWith","URL_SCHEME","slice","length","modelJsonFileName","weightDataFileName","save","modelArtifacts","document","weightsURL","window","URL","createObjectURL","Blob","weightData","type","modelTopology","ArrayBuffer","weightsManifest","paths","weights","weightSpecs","modelJSON","modelJsonURL","JSON","stringify","jsonAnchor","modelJsonAnchor","createElement","download","href","dispatchEvent","MouseEvent","weightDataAnchor","modelArtifactsInfo","BrowserFiles","files","jsonFile","weightsFiles","load","reject","jsonReader","FileReader","onload","event","parse","target","result","name","modelArtifactsPromise","loadWeights","onerror","error","readAsText","entry","push","pathToFile","checkManifestAndWeightFiles","promises","map","path","loadWeightsFile","all","buffers","file","weightFileReader","readAsArrayBuffer","manifest","basenames","fileNames","group","forEach","pathBasename","indexOf","browserDownloadsRouter","url","Array","isArray","browserDownloads","registerSaveRouter","browserFiles"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/io/browser_files.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * IOHandlers related to files, such as browser-triggered file downloads,\n * user-selected files in browser.\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { basename, concatenateArrayBuffers, getModelArtifactsForJSON, getModelArtifactsInfoForJSON, getModelJSONForModelArtifacts } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nconst DEFAULT_FILE_NAME_PREFIX = 'model';\nconst DEFAULT_JSON_EXTENSION_NAME = '.json';\nconst DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';\nfunction defer(f) {\n    return new Promise(resolve => setTimeout(resolve)).then(f);\n}\nexport class BrowserDownloads {\n    constructor(fileNamePrefix) {\n        if (!env().getBool('IS_BROWSER')) {\n            // TODO(cais): Provide info on what IOHandlers are available under the\n            //   current environment.\n            throw new Error('browserDownloads() cannot proceed because the current environment ' +\n                'is not a browser.');\n        }\n        if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {\n            fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);\n        }\n        if (fileNamePrefix == null || fileNamePrefix.length === 0) {\n            fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;\n        }\n        this.modelJsonFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;\n        this.weightDataFileName =\n            fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;\n    }\n    async save(modelArtifacts) {\n        if (typeof (document) === 'undefined') {\n            throw new Error('Browser downloads are not supported in ' +\n                'this environment since `document` is not present');\n        }\n        const weightsURL = window.URL.createObjectURL(new Blob([modelArtifacts.weightData], { type: 'application/octet-stream' }));\n        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n            throw new Error('BrowserDownloads.save() does not support saving model topology ' +\n                'in binary formats yet.');\n        }\n        else {\n            const weightsManifest = [{\n                    paths: ['./' + this.weightDataFileName],\n                    weights: modelArtifacts.weightSpecs\n                }];\n            const modelJSON = getModelJSONForModelArtifacts(modelArtifacts, weightsManifest);\n            const modelJsonURL = window.URL.createObjectURL(new Blob([JSON.stringify(modelJSON)], { type: 'application/json' }));\n            // If anchor elements are not provided, create them without attaching them\n            // to parents, so that the downloaded file names can be controlled.\n            const jsonAnchor = this.modelJsonAnchor == null ?\n                document.createElement('a') :\n                this.modelJsonAnchor;\n            jsonAnchor.download = this.modelJsonFileName;\n            jsonAnchor.href = modelJsonURL;\n            // Trigger downloads by evoking a click event on the download anchors.\n            // When multiple downloads are started synchronously, Firefox will only\n            // save the last one.\n            await defer(() => jsonAnchor.dispatchEvent(new MouseEvent('click')));\n            if (modelArtifacts.weightData != null) {\n                const weightDataAnchor = this.weightDataAnchor == null ?\n                    document.createElement('a') :\n                    this.weightDataAnchor;\n                weightDataAnchor.download = this.weightDataFileName;\n                weightDataAnchor.href = weightsURL;\n                await defer(() => weightDataAnchor.dispatchEvent(new MouseEvent('click')));\n            }\n            return { modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts) };\n        }\n    }\n}\nBrowserDownloads.URL_SCHEME = 'downloads://';\nclass BrowserFiles {\n    constructor(files) {\n        if (files == null || files.length < 1) {\n            throw new Error(`When calling browserFiles, at least 1 file is required, ` +\n                `but received ${files}`);\n        }\n        this.jsonFile = files[0];\n        this.weightsFiles = files.slice(1);\n    }\n    async load() {\n        return new Promise((resolve, reject) => {\n            const jsonReader = new FileReader();\n            jsonReader.onload = (event) => {\n                // tslint:disable-next-line:no-any\n                const modelJSON = JSON.parse(event.target.result);\n                const modelTopology = modelJSON.modelTopology;\n                if (modelTopology == null) {\n                    reject(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));\n                    return;\n                }\n                const weightsManifest = modelJSON.weightsManifest;\n                if (weightsManifest == null) {\n                    reject(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));\n                    return;\n                }\n                if (this.weightsFiles.length === 0) {\n                    resolve({ modelTopology });\n                    return;\n                }\n                const modelArtifactsPromise = getModelArtifactsForJSON(modelJSON, (weightsManifest) => this.loadWeights(weightsManifest));\n                resolve(modelArtifactsPromise);\n            };\n            jsonReader.onerror = error => reject(`Failed to read model topology and weights manifest JSON ` +\n                `from file '${this.jsonFile.name}'. BrowserFiles supports loading ` +\n                `Keras-style tf.Model artifacts only.`);\n            jsonReader.readAsText(this.jsonFile);\n        });\n    }\n    loadWeights(weightsManifest) {\n        const weightSpecs = [];\n        const paths = [];\n        for (const entry of weightsManifest) {\n            weightSpecs.push(...entry.weights);\n            paths.push(...entry.paths);\n        }\n        const pathToFile = this.checkManifestAndWeightFiles(weightsManifest);\n        const promises = paths.map(path => this.loadWeightsFile(path, pathToFile[path]));\n        return Promise.all(promises).then(buffers => [weightSpecs, concatenateArrayBuffers(buffers)]);\n    }\n    loadWeightsFile(path, file) {\n        return new Promise((resolve, reject) => {\n            const weightFileReader = new FileReader();\n            weightFileReader.onload = (event) => {\n                // tslint:disable-next-line:no-any\n                const weightData = event.target.result;\n                resolve(weightData);\n            };\n            weightFileReader.onerror = error => reject(`Failed to weights data from file of path '${path}'.`);\n            weightFileReader.readAsArrayBuffer(file);\n        });\n    }\n    /**\n     * Check the compatibility between weights manifest and weight files.\n     */\n    checkManifestAndWeightFiles(manifest) {\n        const basenames = [];\n        const fileNames = this.weightsFiles.map(file => basename(file.name));\n        const pathToFile = {};\n        for (const group of manifest) {\n            group.paths.forEach(path => {\n                const pathBasename = basename(path);\n                if (basenames.indexOf(pathBasename) !== -1) {\n                    throw new Error(`Duplicate file basename found in weights manifest: ` +\n                        `'${pathBasename}'`);\n                }\n                basenames.push(pathBasename);\n                if (fileNames.indexOf(pathBasename) === -1) {\n                    throw new Error(`Weight file with basename '${pathBasename}' is not provided.`);\n                }\n                else {\n                    pathToFile[path] = this.weightsFiles[fileNames.indexOf(pathBasename)];\n                }\n            });\n        }\n        if (basenames.length !== this.weightsFiles.length) {\n            throw new Error(`Mismatch in the number of files in weights manifest ` +\n                `(${basenames.length}) and the number of weight files provided ` +\n                `(${this.weightsFiles.length}).`);\n        }\n        return pathToFile;\n    }\n}\nexport const browserDownloadsRouter = (url) => {\n    if (!env().getBool('IS_BROWSER')) {\n        return null;\n    }\n    else {\n        if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {\n            return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));\n        }\n        else {\n            return null;\n        }\n    }\n};\nIORouterRegistry.registerSaveRouter(browserDownloadsRouter);\n/**\n * Creates an IOHandler that triggers file downloads from the browser.\n *\n * The returned `IOHandler` instance can be used as model exporting methods such\n * as `tf.Model.save` and supports only saving.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * const saveResult = await model.save('downloads://mymodel');\n * // This will trigger downloading of two files:\n * //   'mymodel.json' and 'mymodel.weights.bin'.\n * console.log(saveResult);\n * ```\n *\n * @param fileNamePrefix Prefix name of the files to be downloaded. For use with\n *   `tf.Model`, `fileNamePrefix` should follow either of the following two\n *   formats:\n *   1. `null` or `undefined`, in which case the default file\n *      names will be used:\n *      - 'model.json' for the JSON file containing the model topology and\n *        weights manifest.\n *      - 'model.weights.bin' for the binary file containing the binary weight\n *        values.\n *   2. A single string or an Array of a single string, as the file name prefix.\n *      For example, if `'foo'` is provided, the downloaded JSON\n *      file and binary weights file will be named 'foo.json' and\n *      'foo.weights.bin', respectively.\n * @param config Additional configuration for triggering downloads.\n * @returns An instance of `BrowserDownloads` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserDownloads(fileNamePrefix = 'model') {\n    return new BrowserDownloads(fileNamePrefix);\n}\n/**\n * Creates an IOHandler that loads model artifacts from user-selected files.\n *\n * This method can be used for loading from files such as user-selected files\n * in the browser.\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * // Note: This code snippet won't run properly without the actual file input\n * //   elements in the HTML DOM.\n *\n * // Suppose there are two HTML file input (`<input type=\"file\" ...>`)\n * // elements.\n * const uploadJSONInput = document.getElementById('upload-json');\n * const uploadWeightsInput = document.getElementById('upload-weights');\n * const model = await tf.loadLayersModel(tf.io.browserFiles(\n *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n * ```\n *\n * @param files `File`s to load from. Currently, this function supports only\n *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for\n *   which an `Array` of `File`s is expected (in that order):\n *   - A JSON file containing the model topology and weight manifest.\n *   - Optionally, one or more binary files containing the binary weights.\n *     These files must have names that match the paths in the `weightsManifest`\n *     contained by the aforementioned JSON file, or errors will be thrown\n *     during loading. These weights files have the same format as the ones\n *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`\n *     Python PIP package. If no weights files are provided, only the model\n *     topology will be loaded from the JSON file above.\n * @returns An instance of `Files` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserFiles(files) {\n    return new BrowserFiles(files);\n}\n"],"mappings":"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L,gBAAgB,CAACM,UAAhC,CAA3B,EAAwE;MACpE,OAAO6E,gBAAgB,CAACH,GAAG,CAACzE,KAAJ,CAAUP,gBAAgB,CAACM,UAAjB,CAA4BE,MAAtC,CAAD,CAAvB;IACH,CAFD,MAGK;MACD,OAAO,IAAP;IACH;EACJ;AACJ,CAZM;AAaPlB,gBAAgB,CAAC8F,kBAAjB,CAAoCL,sBAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,gBAAT,CAA0BjF,cAAc,GAAG,OAA3C,EAAoD;EACvD,OAAO,IAAIF,gBAAJ,CAAqBE,cAArB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASmF,YAAT,CAAsB5C,KAAtB,EAA6B;EAChC,OAAO,IAAID,YAAJ,CAAiBC,KAAjB,CAAP;AACH"},"metadata":{},"sourceType":"module"}