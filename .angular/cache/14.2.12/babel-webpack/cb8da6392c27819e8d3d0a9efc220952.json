{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { ValueError } from '../errors';\nimport { pyListRepeat } from './generic_utils';\nimport { isInteger, max } from './math_utils';\n/**\n * Transforms a single number of array of numbers into an array of numbers.\n * @param value\n * @param n: The size of the tuple to be returned.\n * @param name: Name of the parameter, used for generating error messages.\n * @returns An array of numbers.\n */\n\nexport function normalizeArray(value, n, name) {\n  if (typeof value === 'number') {\n    return pyListRepeat(value, n);\n  } else {\n    if (value.length !== n) {\n      throw new ValueError(`The ${name} argument must be an integer or tuple of ${n} integers.` + ` Received: ${value.length} elements.`);\n    }\n\n    for (let i = 0; i < n; ++i) {\n      const singleValue = value[i];\n\n      if (!isInteger(singleValue)) {\n        throw new ValueError(`The ${name} argument must be an integer or tuple of ${n}` + ` integers. Received: ${JSON.stringify(value)} including a` + ` non-integer number ${singleValue}`);\n      }\n    }\n\n    return value;\n  }\n}\n/**\n * Determines output length of a convolution given input length.\n * @param inputLength\n * @param filterSize\n * @param padding\n * @param stride\n * @param dilation: dilation rate.\n */\n\nexport function convOutputLength(inputLength, filterSize, padding, stride, dilation = 1) {\n  if (inputLength == null) {\n    return inputLength;\n  }\n\n  const dilatedFilterSize = filterSize + (filterSize - 1) * (dilation - 1);\n  let outputLength;\n\n  if (padding === 'same') {\n    outputLength = inputLength;\n  } else {\n    // VALID\n    outputLength = inputLength - dilatedFilterSize + 1;\n  }\n\n  return Math.floor((outputLength + stride - 1) / stride);\n}\nexport function deconvLength(dimSize, strideSize, kernelSize, padding) {\n  if (dimSize == null) {\n    return null;\n  }\n\n  if (padding === 'valid') {\n    dimSize = dimSize * strideSize + max([kernelSize - strideSize, 0]);\n  } else if (padding === 'same') {\n    dimSize = dimSize * strideSize;\n  } else {\n    throw new ValueError(`Unsupport padding mode: ${padding}.`);\n  }\n\n  return dimSize;\n}","map":{"version":3,"names":["ValueError","pyListRepeat","isInteger","max","normalizeArray","value","n","name","length","i","singleValue","JSON","stringify","convOutputLength","inputLength","filterSize","padding","stride","dilation","dilatedFilterSize","outputLength","Math","floor","deconvLength","dimSize","strideSize","kernelSize"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-layers/dist/utils/conv_utils.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { ValueError } from '../errors';\nimport { pyListRepeat } from './generic_utils';\nimport { isInteger, max } from './math_utils';\n/**\n * Transforms a single number of array of numbers into an array of numbers.\n * @param value\n * @param n: The size of the tuple to be returned.\n * @param name: Name of the parameter, used for generating error messages.\n * @returns An array of numbers.\n */\nexport function normalizeArray(value, n, name) {\n    if (typeof value === 'number') {\n        return pyListRepeat(value, n);\n    }\n    else {\n        if (value.length !== n) {\n            throw new ValueError(`The ${name} argument must be an integer or tuple of ${n} integers.` +\n                ` Received: ${value.length} elements.`);\n        }\n        for (let i = 0; i < n; ++i) {\n            const singleValue = value[i];\n            if (!isInteger(singleValue)) {\n                throw new ValueError(`The ${name} argument must be an integer or tuple of ${n}` +\n                    ` integers. Received: ${JSON.stringify(value)} including a` +\n                    ` non-integer number ${singleValue}`);\n            }\n        }\n        return value;\n    }\n}\n/**\n * Determines output length of a convolution given input length.\n * @param inputLength\n * @param filterSize\n * @param padding\n * @param stride\n * @param dilation: dilation rate.\n */\nexport function convOutputLength(inputLength, filterSize, padding, stride, dilation = 1) {\n    if (inputLength == null) {\n        return inputLength;\n    }\n    const dilatedFilterSize = filterSize + (filterSize - 1) * (dilation - 1);\n    let outputLength;\n    if (padding === 'same') {\n        outputLength = inputLength;\n    }\n    else { // VALID\n        outputLength = inputLength - dilatedFilterSize + 1;\n    }\n    return Math.floor((outputLength + stride - 1) / stride);\n}\nexport function deconvLength(dimSize, strideSize, kernelSize, padding) {\n    if (dimSize == null) {\n        return null;\n    }\n    if (padding === 'valid') {\n        dimSize = dimSize * strideSize + max([kernelSize - strideSize, 0]);\n    }\n    else if (padding === 'same') {\n        dimSize = dimSize * strideSize;\n    }\n    else {\n        throw new ValueError(`Unsupport padding mode: ${padding}.`);\n    }\n    return dimSize;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAT,QAA2B,WAA3B;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,SAAT,EAAoBC,GAApB,QAA+B,cAA/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,cAAT,CAAwBC,KAAxB,EAA+BC,CAA/B,EAAkCC,IAAlC,EAAwC;EAC3C,IAAI,OAAOF,KAAP,KAAiB,QAArB,EAA+B;IAC3B,OAAOJ,YAAY,CAACI,KAAD,EAAQC,CAAR,CAAnB;EACH,CAFD,MAGK;IACD,IAAID,KAAK,CAACG,MAAN,KAAiBF,CAArB,EAAwB;MACpB,MAAM,IAAIN,UAAJ,CAAgB,OAAMO,IAAK,4CAA2CD,CAAE,YAAzD,GAChB,cAAaD,KAAK,CAACG,MAAO,YADzB,CAAN;IAEH;;IACD,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,CAApB,EAAuB,EAAEG,CAAzB,EAA4B;MACxB,MAAMC,WAAW,GAAGL,KAAK,CAACI,CAAD,CAAzB;;MACA,IAAI,CAACP,SAAS,CAACQ,WAAD,CAAd,EAA6B;QACzB,MAAM,IAAIV,UAAJ,CAAgB,OAAMO,IAAK,4CAA2CD,CAAE,EAAzD,GAChB,wBAAuBK,IAAI,CAACC,SAAL,CAAeP,KAAf,CAAsB,cAD7B,GAEhB,uBAAsBK,WAAY,EAFjC,CAAN;MAGH;IACJ;;IACD,OAAOL,KAAP;EACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASQ,gBAAT,CAA0BC,WAA1B,EAAuCC,UAAvC,EAAmDC,OAAnD,EAA4DC,MAA5D,EAAoEC,QAAQ,GAAG,CAA/E,EAAkF;EACrF,IAAIJ,WAAW,IAAI,IAAnB,EAAyB;IACrB,OAAOA,WAAP;EACH;;EACD,MAAMK,iBAAiB,GAAGJ,UAAU,GAAG,CAACA,UAAU,GAAG,CAAd,KAAoBG,QAAQ,GAAG,CAA/B,CAAvC;EACA,IAAIE,YAAJ;;EACA,IAAIJ,OAAO,KAAK,MAAhB,EAAwB;IACpBI,YAAY,GAAGN,WAAf;EACH,CAFD,MAGK;IAAE;IACHM,YAAY,GAAGN,WAAW,GAAGK,iBAAd,GAAkC,CAAjD;EACH;;EACD,OAAOE,IAAI,CAACC,KAAL,CAAW,CAACF,YAAY,GAAGH,MAAf,GAAwB,CAAzB,IAA8BA,MAAzC,CAAP;AACH;AACD,OAAO,SAASM,YAAT,CAAsBC,OAAtB,EAA+BC,UAA/B,EAA2CC,UAA3C,EAAuDV,OAAvD,EAAgE;EACnE,IAAIQ,OAAO,IAAI,IAAf,EAAqB;IACjB,OAAO,IAAP;EACH;;EACD,IAAIR,OAAO,KAAK,OAAhB,EAAyB;IACrBQ,OAAO,GAAGA,OAAO,GAAGC,UAAV,GAAuBtB,GAAG,CAAC,CAACuB,UAAU,GAAGD,UAAd,EAA0B,CAA1B,CAAD,CAApC;EACH,CAFD,MAGK,IAAIT,OAAO,KAAK,MAAhB,EAAwB;IACzBQ,OAAO,GAAGA,OAAO,GAAGC,UAApB;EACH,CAFI,MAGA;IACD,MAAM,IAAIzB,UAAJ,CAAgB,2BAA0BgB,OAAQ,GAAlD,CAAN;EACH;;EACD,OAAOQ,OAAP;AACH"},"metadata":{},"sourceType":"module"}