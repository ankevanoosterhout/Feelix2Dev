{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { DepthToSpace } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Rearranges data from depth into blocks of spatial data. More specifically,\n * this op outputs a copy of the input tensor where values from the `depth`\n * dimension are moved in spatial blocks to the `height` and `width` dimensions.\n * The attr `blockSize` indicates the input block size and how the data is\n * moved.\n *\n *  - Chunks of data of size `blockSize * blockSize` from depth are rearranged\n * into non-overlapping blocks of size `blockSize x blockSize`\n *\n *  - The width the output tensor is `inputWidth * blockSize`, whereas the\n * height is `inputHeight * blockSize`\n *\n *  - The Y, X coordinates within each block of the output image are determined\n * by the high order component of the input channel index\n *\n *  - The depth of the input tensor must be divisible by `blockSize *\n * blockSize`\n *\n * The `dataFormat` attr specifies the layout of the input and output tensors\n * with the following options: \"NHWC\": [ `batch, height, width, channels` ]\n * \"NCHW\": [ `batch, channels, height, width` ]\n *\n * ```js\n * const x = tf.tensor4d([1, 2, 3, 4], [1, 1, 1, 4]);\n * const blockSize = 2;\n * const dataFormat = \"NHWC\";\n *\n * tf.depthToSpace(x, blockSize, dataFormat).print();\n * ```\n *\n * @param x The input tensor of rank 4\n * @param blockSIze  An `int` that is `>= 2`. The size of the spatial block\n * @param dataFormat An optional string from: \"NHWC\", \"NCHW\". Defaults to \"NHWC\"\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\n\nfunction depthToSpace_(x, blockSize, dataFormat = 'NHWC') {\n  const $x = convertToTensor(x, 'x', 'depthToSpace', 'float32');\n  const inputHeight = dataFormat === 'NHWC' ? $x.shape[1] : $x.shape[2];\n  const inputWidth = dataFormat === 'NHWC' ? $x.shape[2] : $x.shape[3];\n  const inputDepth = dataFormat === 'NHWC' ? $x.shape[3] : $x.shape[1];\n  util.assert(blockSize > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n  util.assert(inputHeight * blockSize >= 0, () => `Negative dimension size caused by overflow when multiplying\n    ${inputHeight} and ${blockSize}  for depthToSpace with input shape\n    ${$x.shape}`);\n  util.assert(inputWidth * blockSize >= 0, () => `Negative dimension size caused by overflow when multiplying\n    ${inputWidth} and ${blockSize} for depthToSpace with input shape\n        ${$x.shape}`);\n  util.assert(inputDepth % (blockSize * blockSize) === 0, () => `Dimension size must be evenly divisible by ${blockSize * blockSize} but is ${inputDepth} for depthToSpace with input shape ${$x.shape}`);\n  const inputs = {\n    x: $x\n  };\n  const attrs = {\n    blockSize,\n    dataFormat\n  };\n  return ENGINE.runKernel(DepthToSpace, inputs, attrs);\n}\n\nexport const depthToSpace = op({\n  depthToSpace_\n});","map":{"version":3,"names":["ENGINE","DepthToSpace","convertToTensor","util","op","depthToSpace_","x","blockSize","dataFormat","$x","inputHeight","shape","inputWidth","inputDepth","assert","inputs","attrs","runKernel","depthToSpace"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/depth_to_space.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { DepthToSpace } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Rearranges data from depth into blocks of spatial data. More specifically,\n * this op outputs a copy of the input tensor where values from the `depth`\n * dimension are moved in spatial blocks to the `height` and `width` dimensions.\n * The attr `blockSize` indicates the input block size and how the data is\n * moved.\n *\n *  - Chunks of data of size `blockSize * blockSize` from depth are rearranged\n * into non-overlapping blocks of size `blockSize x blockSize`\n *\n *  - The width the output tensor is `inputWidth * blockSize`, whereas the\n * height is `inputHeight * blockSize`\n *\n *  - The Y, X coordinates within each block of the output image are determined\n * by the high order component of the input channel index\n *\n *  - The depth of the input tensor must be divisible by `blockSize *\n * blockSize`\n *\n * The `dataFormat` attr specifies the layout of the input and output tensors\n * with the following options: \"NHWC\": [ `batch, height, width, channels` ]\n * \"NCHW\": [ `batch, channels, height, width` ]\n *\n * ```js\n * const x = tf.tensor4d([1, 2, 3, 4], [1, 1, 1, 4]);\n * const blockSize = 2;\n * const dataFormat = \"NHWC\";\n *\n * tf.depthToSpace(x, blockSize, dataFormat).print();\n * ```\n *\n * @param x The input tensor of rank 4\n * @param blockSIze  An `int` that is `>= 2`. The size of the spatial block\n * @param dataFormat An optional string from: \"NHWC\", \"NCHW\". Defaults to \"NHWC\"\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction depthToSpace_(x, blockSize, dataFormat = 'NHWC') {\n    const $x = convertToTensor(x, 'x', 'depthToSpace', 'float32');\n    const inputHeight = (dataFormat === 'NHWC') ? $x.shape[1] : $x.shape[2];\n    const inputWidth = (dataFormat === 'NHWC') ? $x.shape[2] : $x.shape[3];\n    const inputDepth = (dataFormat === 'NHWC') ? $x.shape[3] : $x.shape[1];\n    util.assert(blockSize > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n    util.assert(inputHeight * blockSize >= 0, () => `Negative dimension size caused by overflow when multiplying\n    ${inputHeight} and ${blockSize}  for depthToSpace with input shape\n    ${$x.shape}`);\n    util.assert(inputWidth * blockSize >= 0, () => `Negative dimension size caused by overflow when multiplying\n    ${inputWidth} and ${blockSize} for depthToSpace with input shape\n        ${$x.shape}`);\n    util.assert((inputDepth % (blockSize * blockSize) === 0), () => `Dimension size must be evenly divisible by ${blockSize * blockSize} but is ${inputDepth} for depthToSpace with input shape ${$x.shape}`);\n    const inputs = { x: $x };\n    const attrs = { blockSize, dataFormat };\n    return ENGINE.runKernel(DepthToSpace, inputs, attrs);\n}\nexport const depthToSpace = op({ depthToSpace_ });\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,WAAvB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AACA,SAASC,EAAT,QAAmB,aAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,aAAT,CAAuBC,CAAvB,EAA0BC,SAA1B,EAAqCC,UAAU,GAAG,MAAlD,EAA0D;EACtD,MAAMC,EAAE,GAAGP,eAAe,CAACI,CAAD,EAAI,GAAJ,EAAS,cAAT,EAAyB,SAAzB,CAA1B;EACA,MAAMI,WAAW,GAAIF,UAAU,KAAK,MAAhB,GAA0BC,EAAE,CAACE,KAAH,CAAS,CAAT,CAA1B,GAAwCF,EAAE,CAACE,KAAH,CAAS,CAAT,CAA5D;EACA,MAAMC,UAAU,GAAIJ,UAAU,KAAK,MAAhB,GAA0BC,EAAE,CAACE,KAAH,CAAS,CAAT,CAA1B,GAAwCF,EAAE,CAACE,KAAH,CAAS,CAAT,CAA3D;EACA,MAAME,UAAU,GAAIL,UAAU,KAAK,MAAhB,GAA0BC,EAAE,CAACE,KAAH,CAAS,CAAT,CAA1B,GAAwCF,EAAE,CAACE,KAAH,CAAS,CAAT,CAA3D;EACAR,IAAI,CAACW,MAAL,CAAYP,SAAS,GAAG,CAAxB,EAA2B,MAAO,sDAAqDA,SAAU,EAAjG;EACAJ,IAAI,CAACW,MAAL,CAAYJ,WAAW,GAAGH,SAAd,IAA2B,CAAvC,EAA0C,MAAO;AACrD,MAAMG,WAAY,QAAOH,SAAU;AACnC,MAAME,EAAE,CAACE,KAAM,EAFX;EAGAR,IAAI,CAACW,MAAL,CAAYF,UAAU,GAAGL,SAAb,IAA0B,CAAtC,EAAyC,MAAO;AACpD,MAAMK,UAAW,QAAOL,SAAU;AAClC,UAAUE,EAAE,CAACE,KAAM,EAFf;EAGAR,IAAI,CAACW,MAAL,CAAaD,UAAU,IAAIN,SAAS,GAAGA,SAAhB,CAAV,KAAyC,CAAtD,EAA0D,MAAO,8CAA6CA,SAAS,GAAGA,SAAU,WAAUM,UAAW,sCAAqCJ,EAAE,CAACE,KAAM,EAAvM;EACA,MAAMI,MAAM,GAAG;IAAET,CAAC,EAAEG;EAAL,CAAf;EACA,MAAMO,KAAK,GAAG;IAAET,SAAF;IAAaC;EAAb,CAAd;EACA,OAAOR,MAAM,CAACiB,SAAP,CAAiBhB,YAAjB,EAA+Bc,MAA/B,EAAuCC,KAAvC,CAAP;AACH;;AACD,OAAO,MAAME,YAAY,GAAGd,EAAE,CAAC;EAAEC;AAAF,CAAD,CAAvB"},"metadata":{},"sourceType":"module"}