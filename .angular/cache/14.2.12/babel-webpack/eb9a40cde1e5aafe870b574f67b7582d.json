{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: keras/contraints.py */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { epsilon } from './backend/common';\nimport { deserializeKerasObject, serializeKerasObject } from './utils/generic_utils';\n/**\n * Helper function used by many of the Constraints to find the L2Norms.\n */\n\nfunction calcL2Norms(w, axis) {\n  return tidy(() => tfc.sqrt(tfc.sum(tfc.mul(w, w), axis, true)));\n}\n/**\n * Base class for functions that impose constraints on weight values\n *\n * @doc {\n *   heading: 'Constraints',\n *   subheading: 'Classes',\n *   namespace: 'constraints'\n * }\n */\n\n\nexport class Constraint extends serialization.Serializable {\n  getConfig() {\n    return {};\n  }\n\n}\nexport class MaxNorm extends Constraint {\n  constructor(args) {\n    super();\n    this.defaultMaxValue = 2;\n    this.defaultAxis = 0;\n    this.maxValue = args.maxValue != null ? args.maxValue : this.defaultMaxValue;\n    this.axis = args.axis != null ? args.axis : this.defaultAxis;\n  }\n\n  apply(w) {\n    return tidy(() => {\n      const norms = calcL2Norms(w, this.axis);\n      const desired = tfc.clipByValue(norms, 0, this.maxValue);\n      return tfc.mul(w, tfc.div(desired, tfc.add(epsilon(), norms)));\n    });\n  }\n\n  getConfig() {\n    return {\n      maxValue: this.maxValue,\n      axis: this.axis\n    };\n  }\n\n}\n/** @nocollapse */\n\nMaxNorm.className = 'MaxNorm';\nserialization.registerClass(MaxNorm);\nexport class UnitNorm extends Constraint {\n  constructor(args) {\n    super();\n    this.defaultAxis = 0;\n    this.axis = args.axis != null ? args.axis : this.defaultAxis;\n  }\n\n  apply(w) {\n    return tidy(() => tfc.div(w, tfc.add(epsilon(), calcL2Norms(w, this.axis))));\n  }\n\n  getConfig() {\n    return {\n      axis: this.axis\n    };\n  }\n\n}\n/** @nocollapse */\n\nUnitNorm.className = 'UnitNorm';\nserialization.registerClass(UnitNorm);\nexport class NonNeg extends Constraint {\n  apply(w) {\n    return tfc.relu(w);\n  }\n\n}\n/** @nocollapse */\n\nNonNeg.className = 'NonNeg';\nserialization.registerClass(NonNeg);\nexport class MinMaxNorm extends Constraint {\n  constructor(args) {\n    super();\n    this.defaultMinValue = 0.0;\n    this.defaultMaxValue = 1.0;\n    this.defaultRate = 1.0;\n    this.defaultAxis = 0;\n    this.minValue = args.minValue != null ? args.minValue : this.defaultMinValue;\n    this.maxValue = args.maxValue != null ? args.maxValue : this.defaultMaxValue;\n    this.rate = args.rate != null ? args.rate : this.defaultRate;\n    this.axis = args.axis != null ? args.axis : this.defaultAxis;\n  }\n\n  apply(w) {\n    return tidy(() => {\n      const norms = calcL2Norms(w, this.axis);\n      const desired = tfc.add(tfc.mul(this.rate, tfc.clipByValue(norms, this.minValue, this.maxValue)), tfc.mul(1.0 - this.rate, norms));\n      return tfc.mul(w, tfc.div(desired, tfc.add(epsilon(), norms)));\n    });\n  }\n\n  getConfig() {\n    return {\n      minValue: this.minValue,\n      maxValue: this.maxValue,\n      rate: this.rate,\n      axis: this.axis\n    };\n  }\n\n}\n/** @nocollapse */\n\nMinMaxNorm.className = 'MinMaxNorm';\nserialization.registerClass(MinMaxNorm); // Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\n\nexport const CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n  'maxNorm': 'MaxNorm',\n  'minMaxNorm': 'MinMaxNorm',\n  'nonNeg': 'NonNeg',\n  'unitNorm': 'UnitNorm'\n};\nexport function serializeConstraint(constraint) {\n  return serializeKerasObject(constraint);\n}\nexport function deserializeConstraint(config, customObjects = {}) {\n  return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'constraint');\n}\nexport function getConstraint(identifier) {\n  if (identifier == null) {\n    return null;\n  }\n\n  if (typeof identifier === 'string') {\n    const className = identifier in CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP ? CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] : identifier;\n    const config = {\n      className,\n      config: {}\n    };\n    return deserializeConstraint(config);\n  } else if (identifier instanceof Constraint) {\n    return identifier;\n  } else {\n    return deserializeConstraint(identifier);\n  }\n}","map":{"version":3,"names":["tfc","serialization","tidy","epsilon","deserializeKerasObject","serializeKerasObject","calcL2Norms","w","axis","sqrt","sum","mul","Constraint","Serializable","getConfig","MaxNorm","constructor","args","defaultMaxValue","defaultAxis","maxValue","apply","norms","desired","clipByValue","div","add","className","registerClass","UnitNorm","NonNeg","relu","MinMaxNorm","defaultMinValue","defaultRate","minValue","rate","CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP","serializeConstraint","constraint","deserializeConstraint","config","customObjects","SerializationMap","getMap","classNameMap","getConstraint","identifier"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-layers/dist/constraints.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original source: keras/contraints.py */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { epsilon } from './backend/common';\nimport { deserializeKerasObject, serializeKerasObject } from './utils/generic_utils';\n/**\n * Helper function used by many of the Constraints to find the L2Norms.\n */\nfunction calcL2Norms(w, axis) {\n    return tidy(() => tfc.sqrt(tfc.sum(tfc.mul(w, w), axis, true)));\n}\n/**\n * Base class for functions that impose constraints on weight values\n *\n * @doc {\n *   heading: 'Constraints',\n *   subheading: 'Classes',\n *   namespace: 'constraints'\n * }\n */\nexport class Constraint extends serialization.Serializable {\n    getConfig() {\n        return {};\n    }\n}\nexport class MaxNorm extends Constraint {\n    constructor(args) {\n        super();\n        this.defaultMaxValue = 2;\n        this.defaultAxis = 0;\n        this.maxValue =\n            args.maxValue != null ? args.maxValue : this.defaultMaxValue;\n        this.axis = args.axis != null ? args.axis : this.defaultAxis;\n    }\n    apply(w) {\n        return tidy(() => {\n            const norms = calcL2Norms(w, this.axis);\n            const desired = tfc.clipByValue(norms, 0, this.maxValue);\n            return tfc.mul(w, tfc.div(desired, tfc.add(epsilon(), norms)));\n        });\n    }\n    getConfig() {\n        return { maxValue: this.maxValue, axis: this.axis };\n    }\n}\n/** @nocollapse */\nMaxNorm.className = 'MaxNorm';\nserialization.registerClass(MaxNorm);\nexport class UnitNorm extends Constraint {\n    constructor(args) {\n        super();\n        this.defaultAxis = 0;\n        this.axis = args.axis != null ? args.axis : this.defaultAxis;\n    }\n    apply(w) {\n        return tidy(() => tfc.div(w, tfc.add(epsilon(), calcL2Norms(w, this.axis))));\n    }\n    getConfig() {\n        return { axis: this.axis };\n    }\n}\n/** @nocollapse */\nUnitNorm.className = 'UnitNorm';\nserialization.registerClass(UnitNorm);\nexport class NonNeg extends Constraint {\n    apply(w) {\n        return tfc.relu(w);\n    }\n}\n/** @nocollapse */\nNonNeg.className = 'NonNeg';\nserialization.registerClass(NonNeg);\nexport class MinMaxNorm extends Constraint {\n    constructor(args) {\n        super();\n        this.defaultMinValue = 0.0;\n        this.defaultMaxValue = 1.0;\n        this.defaultRate = 1.0;\n        this.defaultAxis = 0;\n        this.minValue =\n            args.minValue != null ? args.minValue : this.defaultMinValue;\n        this.maxValue =\n            args.maxValue != null ? args.maxValue : this.defaultMaxValue;\n        this.rate = args.rate != null ? args.rate : this.defaultRate;\n        this.axis = args.axis != null ? args.axis : this.defaultAxis;\n    }\n    apply(w) {\n        return tidy(() => {\n            const norms = calcL2Norms(w, this.axis);\n            const desired = tfc.add(tfc.mul(this.rate, tfc.clipByValue(norms, this.minValue, this.maxValue)), tfc.mul(1.0 - this.rate, norms));\n            return tfc.mul(w, tfc.div(desired, tfc.add(epsilon(), norms)));\n        });\n    }\n    getConfig() {\n        return {\n            minValue: this.minValue,\n            maxValue: this.maxValue,\n            rate: this.rate,\n            axis: this.axis\n        };\n    }\n}\n/** @nocollapse */\nMinMaxNorm.className = 'MinMaxNorm';\nserialization.registerClass(MinMaxNorm);\n// Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\nexport const CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n    'maxNorm': 'MaxNorm',\n    'minMaxNorm': 'MinMaxNorm',\n    'nonNeg': 'NonNeg',\n    'unitNorm': 'UnitNorm'\n};\nexport function serializeConstraint(constraint) {\n    return serializeKerasObject(constraint);\n}\nexport function deserializeConstraint(config, customObjects = {}) {\n    return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'constraint');\n}\nexport function getConstraint(identifier) {\n    if (identifier == null) {\n        return null;\n    }\n    if (typeof identifier === 'string') {\n        const className = identifier in CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP ?\n            CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :\n            identifier;\n        const config = { className, config: {} };\n        return deserializeConstraint(config);\n    }\n    else if (identifier instanceof Constraint) {\n        return identifier;\n    }\n    else {\n        return deserializeConstraint(identifier);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}