{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { RaggedGather } from '@tensorflow/tfjs-core';\nimport { raggedGatherImplCPU } from '../kernel_utils/shared';\nexport function raggedGather(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    paramsNestedSplits,\n    paramsDenseValues,\n    indices\n  } = inputs;\n  const {\n    outputRaggedRank\n  } = attrs;\n  const $paramsNestedSplits = paramsNestedSplits.map(t => backend.readSync(t.dataId));\n  const $paramsNestedSplitsShapes = paramsNestedSplits.map(t => t.shape);\n  const $paramsDenseValues = backend.readSync(paramsDenseValues.dataId);\n  const $indices = backend.readSync(indices.dataId);\n  const [outputNestedSplits, outputDenseValues, outputDenseValuesShape] = raggedGatherImplCPU($paramsNestedSplits, $paramsNestedSplitsShapes, $paramsDenseValues, paramsDenseValues.shape, paramsDenseValues.dtype, $indices, indices.shape, outputRaggedRank);\n  const outputNestedSplitsTensors = outputNestedSplits.map(splits => backend.makeTensorInfo([splits.length], 'int32', splits));\n  const outputDenseValuesTensor = backend.makeTensorInfo(outputDenseValuesShape, paramsDenseValues.dtype, outputDenseValues);\n  return outputNestedSplitsTensors.concat([outputDenseValuesTensor]);\n}\nexport const raggedGatherConfig = {\n  kernelName: RaggedGather,\n  backendName: 'webgl',\n  kernelFunc: raggedGather\n};","map":{"version":3,"names":["RaggedGather","raggedGatherImplCPU","raggedGather","args","inputs","backend","attrs","paramsNestedSplits","paramsDenseValues","indices","outputRaggedRank","$paramsNestedSplits","map","t","readSync","dataId","$paramsNestedSplitsShapes","shape","$paramsDenseValues","$indices","outputNestedSplits","outputDenseValues","outputDenseValuesShape","dtype","outputNestedSplitsTensors","splits","makeTensorInfo","length","outputDenseValuesTensor","concat","raggedGatherConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/RaggedGather.js"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { RaggedGather } from '@tensorflow/tfjs-core';\nimport { raggedGatherImplCPU } from '../kernel_utils/shared';\nexport function raggedGather(args) {\n    const { inputs, backend, attrs } = args;\n    const { paramsNestedSplits, paramsDenseValues, indices } = inputs;\n    const { outputRaggedRank } = attrs;\n    const $paramsNestedSplits = paramsNestedSplits.map(t => backend.readSync(t.dataId));\n    const $paramsNestedSplitsShapes = paramsNestedSplits.map(t => t.shape);\n    const $paramsDenseValues = backend.readSync(paramsDenseValues.dataId);\n    const $indices = backend.readSync(indices.dataId);\n    const [outputNestedSplits, outputDenseValues, outputDenseValuesShape] = raggedGatherImplCPU($paramsNestedSplits, $paramsNestedSplitsShapes, $paramsDenseValues, paramsDenseValues.shape, paramsDenseValues.dtype, $indices, indices.shape, outputRaggedRank);\n    const outputNestedSplitsTensors = outputNestedSplits.map((splits) => backend.makeTensorInfo([splits.length], 'int32', splits));\n    const outputDenseValuesTensor = backend.makeTensorInfo(outputDenseValuesShape, paramsDenseValues.dtype, outputDenseValues);\n    return outputNestedSplitsTensors.concat([outputDenseValuesTensor]);\n}\nexport const raggedGatherConfig = {\n    kernelName: RaggedGather,\n    backendName: 'webgl',\n    kernelFunc: raggedGather,\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,QAA6B,uBAA7B;AACA,SAASC,mBAAT,QAAoC,wBAApC;AACA,OAAO,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;EAC/B,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BH,IAAnC;EACA,MAAM;IAAEI,kBAAF;IAAsBC,iBAAtB;IAAyCC;EAAzC,IAAqDL,MAA3D;EACA,MAAM;IAAEM;EAAF,IAAuBJ,KAA7B;EACA,MAAMK,mBAAmB,GAAGJ,kBAAkB,CAACK,GAAnB,CAAuBC,CAAC,IAAIR,OAAO,CAACS,QAAR,CAAiBD,CAAC,CAACE,MAAnB,CAA5B,CAA5B;EACA,MAAMC,yBAAyB,GAAGT,kBAAkB,CAACK,GAAnB,CAAuBC,CAAC,IAAIA,CAAC,CAACI,KAA9B,CAAlC;EACA,MAAMC,kBAAkB,GAAGb,OAAO,CAACS,QAAR,CAAiBN,iBAAiB,CAACO,MAAnC,CAA3B;EACA,MAAMI,QAAQ,GAAGd,OAAO,CAACS,QAAR,CAAiBL,OAAO,CAACM,MAAzB,CAAjB;EACA,MAAM,CAACK,kBAAD,EAAqBC,iBAArB,EAAwCC,sBAAxC,IAAkErB,mBAAmB,CAACU,mBAAD,EAAsBK,yBAAtB,EAAiDE,kBAAjD,EAAqEV,iBAAiB,CAACS,KAAvF,EAA8FT,iBAAiB,CAACe,KAAhH,EAAuHJ,QAAvH,EAAiIV,OAAO,CAACQ,KAAzI,EAAgJP,gBAAhJ,CAA3F;EACA,MAAMc,yBAAyB,GAAGJ,kBAAkB,CAACR,GAAnB,CAAwBa,MAAD,IAAYpB,OAAO,CAACqB,cAAR,CAAuB,CAACD,MAAM,CAACE,MAAR,CAAvB,EAAwC,OAAxC,EAAiDF,MAAjD,CAAnC,CAAlC;EACA,MAAMG,uBAAuB,GAAGvB,OAAO,CAACqB,cAAR,CAAuBJ,sBAAvB,EAA+Cd,iBAAiB,CAACe,KAAjE,EAAwEF,iBAAxE,CAAhC;EACA,OAAOG,yBAAyB,CAACK,MAA1B,CAAiC,CAACD,uBAAD,CAAjC,CAAP;AACH;AACD,OAAO,MAAME,kBAAkB,GAAG;EAC9BC,UAAU,EAAE/B,YADkB;EAE9BgC,WAAW,EAAE,OAFiB;EAG9BC,UAAU,EAAE/B;AAHkB,CAA3B"},"metadata":{},"sourceType":"module"}