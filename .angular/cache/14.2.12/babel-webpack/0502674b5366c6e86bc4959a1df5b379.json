{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { RaggedGather } from '@tensorflow/tfjs-core';\nimport { raggedGatherImpl } from './RaggedGather_impl';\nexport function raggedGather(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    paramsNestedSplits,\n    paramsDenseValues,\n    indices\n  } = inputs;\n  const {\n    outputRaggedRank\n  } = attrs;\n  const $paramsNestedSplits = paramsNestedSplits.map(t => backend.data.get(t.dataId).values);\n  const $paramsNestedSplitsShapes = paramsNestedSplits.map(t => t.shape);\n  const $paramsDenseValues = backend.data.get(paramsDenseValues.dataId).values;\n  const $indices = backend.data.get(indices.dataId).values;\n  const [outputNestedSplits, outputDenseValues, outputDenseValuesShape] = raggedGatherImpl($paramsNestedSplits, $paramsNestedSplitsShapes, $paramsDenseValues, paramsDenseValues.shape, paramsDenseValues.dtype, $indices, indices.shape, outputRaggedRank);\n  const outputNestedSplitsTensors = outputNestedSplits.map(splits => backend.makeTensorInfo([splits.length], 'int32', splits));\n  const outputDenseValuesTensor = backend.makeTensorInfo(outputDenseValuesShape, paramsDenseValues.dtype, outputDenseValues);\n  return outputNestedSplitsTensors.concat([outputDenseValuesTensor]);\n}\nexport const raggedGatherConfig = {\n  kernelName: RaggedGather,\n  backendName: 'cpu',\n  kernelFunc: raggedGather\n};","map":{"version":3,"names":["RaggedGather","raggedGatherImpl","raggedGather","args","inputs","backend","attrs","paramsNestedSplits","paramsDenseValues","indices","outputRaggedRank","$paramsNestedSplits","map","t","data","get","dataId","values","$paramsNestedSplitsShapes","shape","$paramsDenseValues","$indices","outputNestedSplits","outputDenseValues","outputDenseValuesShape","dtype","outputNestedSplitsTensors","splits","makeTensorInfo","length","outputDenseValuesTensor","concat","raggedGatherConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/RaggedGather.js"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { RaggedGather } from '@tensorflow/tfjs-core';\nimport { raggedGatherImpl } from './RaggedGather_impl';\nexport function raggedGather(args) {\n    const { inputs, backend, attrs } = args;\n    const { paramsNestedSplits, paramsDenseValues, indices } = inputs;\n    const { outputRaggedRank } = attrs;\n    const $paramsNestedSplits = paramsNestedSplits.map(t => backend.data.get(t.dataId).values);\n    const $paramsNestedSplitsShapes = paramsNestedSplits.map(t => t.shape);\n    const $paramsDenseValues = backend.data.get(paramsDenseValues.dataId).values;\n    const $indices = backend.data.get(indices.dataId).values;\n    const [outputNestedSplits, outputDenseValues, outputDenseValuesShape] = raggedGatherImpl($paramsNestedSplits, $paramsNestedSplitsShapes, $paramsDenseValues, paramsDenseValues.shape, paramsDenseValues.dtype, $indices, indices.shape, outputRaggedRank);\n    const outputNestedSplitsTensors = outputNestedSplits.map((splits) => backend.makeTensorInfo([splits.length], 'int32', splits));\n    const outputDenseValuesTensor = backend.makeTensorInfo(outputDenseValuesShape, paramsDenseValues.dtype, outputDenseValues);\n    return outputNestedSplitsTensors.concat([outputDenseValuesTensor]);\n}\nexport const raggedGatherConfig = {\n    kernelName: RaggedGather,\n    backendName: 'cpu',\n    kernelFunc: raggedGather,\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,QAA6B,uBAA7B;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,OAAO,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;EAC/B,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BH,IAAnC;EACA,MAAM;IAAEI,kBAAF;IAAsBC,iBAAtB;IAAyCC;EAAzC,IAAqDL,MAA3D;EACA,MAAM;IAAEM;EAAF,IAAuBJ,KAA7B;EACA,MAAMK,mBAAmB,GAAGJ,kBAAkB,CAACK,GAAnB,CAAuBC,CAAC,IAAIR,OAAO,CAACS,IAAR,CAAaC,GAAb,CAAiBF,CAAC,CAACG,MAAnB,EAA2BC,MAAvD,CAA5B;EACA,MAAMC,yBAAyB,GAAGX,kBAAkB,CAACK,GAAnB,CAAuBC,CAAC,IAAIA,CAAC,CAACM,KAA9B,CAAlC;EACA,MAAMC,kBAAkB,GAAGf,OAAO,CAACS,IAAR,CAAaC,GAAb,CAAiBP,iBAAiB,CAACQ,MAAnC,EAA2CC,MAAtE;EACA,MAAMI,QAAQ,GAAGhB,OAAO,CAACS,IAAR,CAAaC,GAAb,CAAiBN,OAAO,CAACO,MAAzB,EAAiCC,MAAlD;EACA,MAAM,CAACK,kBAAD,EAAqBC,iBAArB,EAAwCC,sBAAxC,IAAkEvB,gBAAgB,CAACU,mBAAD,EAAsBO,yBAAtB,EAAiDE,kBAAjD,EAAqEZ,iBAAiB,CAACW,KAAvF,EAA8FX,iBAAiB,CAACiB,KAAhH,EAAuHJ,QAAvH,EAAiIZ,OAAO,CAACU,KAAzI,EAAgJT,gBAAhJ,CAAxF;EACA,MAAMgB,yBAAyB,GAAGJ,kBAAkB,CAACV,GAAnB,CAAwBe,MAAD,IAAYtB,OAAO,CAACuB,cAAR,CAAuB,CAACD,MAAM,CAACE,MAAR,CAAvB,EAAwC,OAAxC,EAAiDF,MAAjD,CAAnC,CAAlC;EACA,MAAMG,uBAAuB,GAAGzB,OAAO,CAACuB,cAAR,CAAuBJ,sBAAvB,EAA+ChB,iBAAiB,CAACiB,KAAjE,EAAwEF,iBAAxE,CAAhC;EACA,OAAOG,yBAAyB,CAACK,MAA1B,CAAiC,CAACD,uBAAD,CAAjC,CAAP;AACH;AACD,OAAO,MAAME,kBAAkB,GAAG;EAC9BC,UAAU,EAAEjC,YADkB;EAE9BkC,WAAW,EAAE,KAFiB;EAG9BC,UAAU,EAAEjC;AAHkB,CAA3B"},"metadata":{},"sourceType":"module"}