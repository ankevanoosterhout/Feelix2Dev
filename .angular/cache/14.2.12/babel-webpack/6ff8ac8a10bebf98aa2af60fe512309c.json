{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { cast } from '../kernels/Cast';\nimport { complex } from '../kernels/Complex';\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param name Kernel name.\n * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.\n * @param binaryKernelComplexImpl Optional. If exists, represents a\n *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype\n *     is `complex64`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\n\nexport function binaryKernelFunc(name, simpleImpl, complexImpl, dtype) {\n  if (complexImpl == null) {\n    return ({\n      inputs,\n      backend\n    }) => {\n      const {\n        a,\n        b\n      } = inputs;\n      const cpuBackend = backend;\n      assertNotComplex([a, b], name);\n      const aVals = cpuBackend.data.get(a.dataId).values;\n      const bVals = cpuBackend.data.get(b.dataId).values;\n      const decodedAVals = a.dtype === 'string' ? // tslint:disable-next-line: no-any\n      backend_util.fromUint8ToStringArray(aVals) : aVals;\n      const decodedBVals = a.dtype === 'string' ? // tslint:disable-next-line: no-any\n      backend_util.fromUint8ToStringArray(bVals) : bVals;\n      const $dtype = dtype || a.dtype;\n      const [resultData, resultShape] = simpleImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    };\n  }\n\n  return ({\n    inputs,\n    backend\n  }) => {\n    const {\n      a,\n      b\n    } = inputs;\n    const cpuBackend = backend;\n\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      const $aComplex = cast({\n        inputs: {\n          x: a\n        },\n        backend: cpuBackend,\n        attrs: {\n          dtype: 'complex64'\n        }\n      });\n      const $aComplexVals = cpuBackend.data.get($aComplex.dataId);\n      const aReal = $aComplexVals.complexTensorInfos.real;\n      const aImag = $aComplexVals.complexTensorInfos.imag;\n      const aRealVals = cpuBackend.data.get(aReal.dataId).values;\n      const aImagVals = cpuBackend.data.get(aImag.dataId).values;\n      const $bComplex = cast({\n        inputs: {\n          x: b\n        },\n        backend: cpuBackend,\n        attrs: {\n          dtype: 'complex64'\n        }\n      });\n      const $bComplexVals = cpuBackend.data.get($bComplex.dataId);\n      const bReal = $bComplexVals.complexTensorInfos.real;\n      const bImag = $bComplexVals.complexTensorInfos.imag;\n      const bRealVals = cpuBackend.data.get(bReal.dataId).values;\n      const bImagVals = cpuBackend.data.get(bImag.dataId).values;\n      const [resultRealData, resultImagData, resultShape] = complexImpl(a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);\n      const resultReal = cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);\n      const resultImag = cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);\n      const result = complex({\n        inputs: {\n          real: resultReal,\n          imag: resultImag\n        },\n        backend: cpuBackend\n      });\n      cpuBackend.disposeIntermediateTensorInfo($aComplex);\n      cpuBackend.disposeIntermediateTensorInfo($bComplex);\n      cpuBackend.disposeIntermediateTensorInfo(resultReal);\n      cpuBackend.disposeIntermediateTensorInfo(resultImag);\n      return result;\n    } else {\n      const aVals = cpuBackend.data.get(a.dataId).values;\n      const bVals = cpuBackend.data.get(b.dataId).values;\n      const $dtype = dtype || a.dtype;\n      const [resultData, resultShape] = simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    }\n  };\n}\n/**\n * Template that creates the complex type implementation for binary ops.\n * Supports broadcast.\n */\n\nexport function createComplexBinaryKernelImpl(op) {\n  return (aShape, bShape, aRealVals, aImagVals, bRealVals, bImagVals) => {\n    const resultShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const resultSize = util.sizeFromShape(resultShape);\n    const resultRank = resultShape.length;\n    const resultStrides = util.computeStrides(resultShape);\n    const resultRealVals = util.getTypedArrayFromDType('float32', resultSize);\n    const resultImagVals = util.getTypedArrayFromDType('float32', resultSize);\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, resultShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, resultShape);\n    const aVals = backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);\n    const bVals = backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);\n    const aRank = aShape.length;\n    const aStrides = util.computeStrides(aShape);\n    const bRank = bShape.length;\n    const bStrides = util.computeStrides(bShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const aIdx = i % aVals.length;\n        const bIdx = i % bVals.length;\n        const result = op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2], bVals[bIdx * 2 + 1]);\n        resultRealVals[i] = result.real;\n        resultImagVals[i] = result.imag;\n      }\n    } else {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n        const opResult = op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2], bVals[bIndex * 2 + 1]);\n        resultRealVals[i] = opResult.real;\n        resultImagVals[i] = opResult.imag;\n      }\n    }\n\n    return [resultRealVals, resultImagVals, resultShape];\n  };\n}","map":{"version":3,"names":["backend_util","util","assertNotComplex","cast","complex","binaryKernelFunc","name","simpleImpl","complexImpl","dtype","inputs","backend","a","b","cpuBackend","aVals","data","get","dataId","values","bVals","decodedAVals","fromUint8ToStringArray","decodedBVals","$dtype","resultData","resultShape","shape","makeTensorInfo","$aComplex","x","attrs","$aComplexVals","aReal","complexTensorInfos","real","aImag","imag","aRealVals","aImagVals","$bComplex","$bComplexVals","bReal","bImag","bRealVals","bImagVals","resultRealData","resultImagData","resultReal","resultImag","result","disposeIntermediateTensorInfo","createComplexBinaryKernelImpl","op","aShape","bShape","assertAndGetBroadcastShape","resultSize","sizeFromShape","resultRank","length","resultStrides","computeStrides","resultRealVals","getTypedArrayFromDType","resultImagVals","aBroadcastDims","getBroadcastDims","bBroadcastDims","mergeRealAndImagArrays","aRank","aStrides","bRank","bStrides","i","aIdx","bIdx","loc","indexToLoc","aLoc","slice","forEach","d","aIndex","locToIndex","bLoc","bIndex","opResult"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_utils.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { cast } from '../kernels/Cast';\nimport { complex } from '../kernels/Complex';\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param name Kernel name.\n * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.\n * @param binaryKernelComplexImpl Optional. If exists, represents a\n *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype\n *     is `complex64`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc(name, simpleImpl, complexImpl, dtype) {\n    if (complexImpl == null) {\n        return ({ inputs, backend }) => {\n            const { a, b } = inputs;\n            const cpuBackend = backend;\n            assertNotComplex([a, b], name);\n            const aVals = cpuBackend.data.get(a.dataId).values;\n            const bVals = cpuBackend.data.get(b.dataId).values;\n            const decodedAVals = a.dtype === 'string' ?\n                // tslint:disable-next-line: no-any\n                backend_util.fromUint8ToStringArray(aVals) :\n                aVals;\n            const decodedBVals = a.dtype === 'string' ?\n                // tslint:disable-next-line: no-any\n                backend_util.fromUint8ToStringArray(bVals) :\n                bVals;\n            const $dtype = dtype || a.dtype;\n            const [resultData, resultShape] = simpleImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n            return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n        };\n    }\n    return ({ inputs, backend }) => {\n        const { a, b } = inputs;\n        const cpuBackend = backend;\n        if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n            const $aComplex = cast({ inputs: { x: a }, backend: cpuBackend, attrs: { dtype: 'complex64' } });\n            const $aComplexVals = cpuBackend.data.get($aComplex.dataId);\n            const aReal = $aComplexVals.complexTensorInfos.real;\n            const aImag = $aComplexVals.complexTensorInfos.imag;\n            const aRealVals = cpuBackend.data.get(aReal.dataId).values;\n            const aImagVals = cpuBackend.data.get(aImag.dataId).values;\n            const $bComplex = cast({ inputs: { x: b }, backend: cpuBackend, attrs: { dtype: 'complex64' } });\n            const $bComplexVals = cpuBackend.data.get($bComplex.dataId);\n            const bReal = $bComplexVals.complexTensorInfos.real;\n            const bImag = $bComplexVals.complexTensorInfos.imag;\n            const bRealVals = cpuBackend.data.get(bReal.dataId).values;\n            const bImagVals = cpuBackend.data.get(bImag.dataId).values;\n            const [resultRealData, resultImagData, resultShape] = complexImpl(a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);\n            const resultReal = cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);\n            const resultImag = cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);\n            const result = complex({ inputs: { real: resultReal, imag: resultImag }, backend: cpuBackend });\n            cpuBackend.disposeIntermediateTensorInfo($aComplex);\n            cpuBackend.disposeIntermediateTensorInfo($bComplex);\n            cpuBackend.disposeIntermediateTensorInfo(resultReal);\n            cpuBackend.disposeIntermediateTensorInfo(resultImag);\n            return result;\n        }\n        else {\n            const aVals = cpuBackend.data.get(a.dataId).values;\n            const bVals = cpuBackend.data.get(b.dataId).values;\n            const $dtype = dtype || a.dtype;\n            const [resultData, resultShape] = simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n            return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n        }\n    };\n}\n/**\n * Template that creates the complex type implementation for binary ops.\n * Supports broadcast.\n */\nexport function createComplexBinaryKernelImpl(op) {\n    return (aShape, bShape, aRealVals, aImagVals, bRealVals, bImagVals) => {\n        const resultShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n        const resultSize = util.sizeFromShape(resultShape);\n        const resultRank = resultShape.length;\n        const resultStrides = util.computeStrides(resultShape);\n        const resultRealVals = util.getTypedArrayFromDType('float32', resultSize);\n        const resultImagVals = util.getTypedArrayFromDType('float32', resultSize);\n        const aBroadcastDims = backend_util.getBroadcastDims(aShape, resultShape);\n        const bBroadcastDims = backend_util.getBroadcastDims(bShape, resultShape);\n        const aVals = backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);\n        const bVals = backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);\n        const aRank = aShape.length;\n        const aStrides = util.computeStrides(aShape);\n        const bRank = bShape.length;\n        const bStrides = util.computeStrides(bShape);\n        if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n            for (let i = 0; i < resultRealVals.length; i++) {\n                const aIdx = i % aVals.length;\n                const bIdx = i % bVals.length;\n                const result = op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2], bVals[bIdx * 2 + 1]);\n                resultRealVals[i] = result.real;\n                resultImagVals[i] = result.imag;\n            }\n        }\n        else {\n            for (let i = 0; i < resultRealVals.length; i++) {\n                const loc = util.indexToLoc(i, resultRank, resultStrides);\n                const aLoc = loc.slice(-aRank);\n                aBroadcastDims.forEach(d => aLoc[d] = 0);\n                const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n                const bLoc = loc.slice(-bRank);\n                bBroadcastDims.forEach(d => bLoc[d] = 0);\n                const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n                const opResult = op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2], bVals[bIndex * 2 + 1]);\n                resultRealVals[i] = opResult.real;\n                resultImagVals[i] = opResult.imag;\n            }\n        }\n        return [resultRealVals, resultImagVals, resultShape];\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}