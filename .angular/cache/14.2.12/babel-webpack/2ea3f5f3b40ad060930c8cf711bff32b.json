{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, Slice, slice_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function sliceImpl(vals, begin, size, shape, dtype) {\n  const isContinous = slice_util.isSliceContinous(shape, begin, size);\n  const length = util.sizeFromShape(size);\n  const xStrides = util.computeStrides(shape);\n\n  if (isContinous) {\n    const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n\n    if (dtype === 'string') {\n      return vals.slice(flatOffset, flatOffset + length);\n    }\n\n    return vals.subarray(flatOffset, flatOffset + length);\n  }\n\n  const decodedData = dtype === 'string' ? backend_util.fromUint8ToStringArray(vals) : vals;\n  const inBuf = buffer(shape, dtype, decodedData);\n  const outBuf = buffer(size, dtype);\n\n  for (let i = 0; i < outBuf.size; ++i) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.map((idx, j) => idx + begin[j]);\n    outBuf.set(inBuf.get(...inLoc), ...outLoc);\n  }\n\n  if (dtype === 'string') {\n    return backend_util.fromStringArrayToUint8(outBuf.values);\n  }\n\n  return outBuf.values;\n}\nexport function slice(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    begin,\n    size\n  } = attrs;\n  assertNotComplex(x, 'slice');\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n  const vals = backend.data.get(x.dataId).values;\n  const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n  return backend.makeTensorInfo($size, x.dtype, outVals);\n}\nexport const sliceConfig = {\n  kernelName: Slice,\n  backendName: 'cpu',\n  kernelFunc: slice\n};","map":{"version":3,"names":["backend_util","buffer","Slice","slice_util","util","assertNotComplex","sliceImpl","vals","begin","size","shape","dtype","isContinous","isSliceContinous","length","sizeFromShape","xStrides","computeStrides","flatOffset","computeFlatOffset","slice","subarray","decodedData","fromUint8ToStringArray","inBuf","outBuf","i","outLoc","indexToLoc","inLoc","map","idx","j","set","get","fromStringArrayToUint8","values","args","inputs","backend","attrs","x","$begin","$size","parseSliceParams","assertParamsValid","data","dataId","outVals","makeTensorInfo","sliceConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Slice.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, Slice, slice_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function sliceImpl(vals, begin, size, shape, dtype) {\n    const isContinous = slice_util.isSliceContinous(shape, begin, size);\n    const length = util.sizeFromShape(size);\n    const xStrides = util.computeStrides(shape);\n    if (isContinous) {\n        const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n        if (dtype === 'string') {\n            return vals.slice(flatOffset, flatOffset + length);\n        }\n        return vals.subarray(flatOffset, flatOffset + length);\n    }\n    const decodedData = dtype === 'string' ?\n        backend_util.fromUint8ToStringArray(vals) :\n        vals;\n    const inBuf = buffer(shape, dtype, decodedData);\n    const outBuf = buffer(size, dtype);\n    for (let i = 0; i < outBuf.size; ++i) {\n        const outLoc = outBuf.indexToLoc(i);\n        const inLoc = outLoc.map((idx, j) => idx + begin[j]);\n        outBuf.set(inBuf.get(...inLoc), ...outLoc);\n    }\n    if (dtype === 'string') {\n        return backend_util.fromStringArrayToUint8(outBuf.values);\n    }\n    return outBuf.values;\n}\nexport function slice(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { begin, size } = attrs;\n    assertNotComplex(x, 'slice');\n    const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n    slice_util.assertParamsValid(x, $begin, $size);\n    const vals = backend.data.get(x.dataId).values;\n    const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n    return backend.makeTensorInfo($size, x.dtype, outVals);\n}\nexport const sliceConfig = {\n    kernelName: Slice,\n    backendName: 'cpu',\n    kernelFunc: slice\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}