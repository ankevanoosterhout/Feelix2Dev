{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { UnsortedSegmentSum } from '../kernel_names';\nimport { expandDims } from '../ops/expand_dims';\nimport { gather } from '../ops/gather';\nimport { greaterEqual } from '../ops/greater_equal';\nimport { logicalAnd } from '../ops/logical_and';\nimport { maximum } from '../ops/maximum';\nimport { ones } from '../ops/ones';\nimport { scalar } from '../ops/scalar';\nimport { where } from '../ops/where';\nimport { zerosLike } from '../ops/zeros_like';\nexport const unsortedSegmentSumGradConfig = {\n  kernelName: UnsortedSegmentSum,\n  inputsToSave: ['segmentIds'],\n  gradFunc: (dy, saved) => {\n    const [segmentIds] = saved;\n\n    const derX = () => {\n      return gatherDropNegatives(dy, segmentIds);\n    };\n\n    return {\n      x: derX\n    };\n  }\n};\n\nfunction gatherDropNegatives(x, indices) {\n  // Helper function for unsorted segment ops. Gathers params for\n  // positive segment ids and gathers 0 for inputs with negative segment id.\n  // Mirrors _GatherDropNegatives from tensorflow/python/ops/math_grad.py\n  const zeroClippedIndices = maximum(indices, zerosLike(indices));\n  const gathered = gather(x, zeroClippedIndices);\n  let isPositive = greaterEqual(indices, scalar(0, 'int32'));\n  const numIters = gathered.rank - isPositive.rank;\n\n  for (let i = 0; i < numIters; ++i) {\n    isPositive = expandDims(isPositive, i + 1);\n  }\n\n  isPositive = logicalAnd(isPositive, ones(gathered.shape, 'bool'));\n  const zeroSlice = zerosLike(gathered);\n  return where(isPositive, gathered, zeroSlice);\n}","map":{"version":3,"names":["UnsortedSegmentSum","expandDims","gather","greaterEqual","logicalAnd","maximum","ones","scalar","where","zerosLike","unsortedSegmentSumGradConfig","kernelName","inputsToSave","gradFunc","dy","saved","segmentIds","derX","gatherDropNegatives","x","indices","zeroClippedIndices","gathered","isPositive","numIters","rank","i","shape","zeroSlice"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/gradients/UnsortedSegmentSum_grad.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { UnsortedSegmentSum } from '../kernel_names';\nimport { expandDims } from '../ops/expand_dims';\nimport { gather } from '../ops/gather';\nimport { greaterEqual } from '../ops/greater_equal';\nimport { logicalAnd } from '../ops/logical_and';\nimport { maximum } from '../ops/maximum';\nimport { ones } from '../ops/ones';\nimport { scalar } from '../ops/scalar';\nimport { where } from '../ops/where';\nimport { zerosLike } from '../ops/zeros_like';\nexport const unsortedSegmentSumGradConfig = {\n    kernelName: UnsortedSegmentSum,\n    inputsToSave: ['segmentIds'],\n    gradFunc: (dy, saved) => {\n        const [segmentIds] = saved;\n        const derX = () => {\n            return gatherDropNegatives(dy, segmentIds);\n        };\n        return { x: derX };\n    }\n};\nfunction gatherDropNegatives(x, indices) {\n    // Helper function for unsorted segment ops. Gathers params for\n    // positive segment ids and gathers 0 for inputs with negative segment id.\n    // Mirrors _GatherDropNegatives from tensorflow/python/ops/math_grad.py\n    const zeroClippedIndices = maximum(indices, zerosLike(indices));\n    const gathered = gather(x, zeroClippedIndices);\n    let isPositive = greaterEqual(indices, scalar(0, 'int32'));\n    const numIters = gathered.rank - isPositive.rank;\n    for (let i = 0; i < numIters; ++i) {\n        isPositive = expandDims(isPositive, i + 1);\n    }\n    isPositive = logicalAnd(isPositive, ones(gathered.shape, 'bool'));\n    const zeroSlice = zerosLike(gathered);\n    return where(isPositive, gathered, zeroSlice);\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,kBAAT,QAAmC,iBAAnC;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,SAASC,YAAT,QAA6B,sBAA7B;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,SAASC,IAAT,QAAqB,aAArB;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,OAAO,MAAMC,4BAA4B,GAAG;EACxCC,UAAU,EAAEX,kBAD4B;EAExCY,YAAY,EAAE,CAAC,YAAD,CAF0B;EAGxCC,QAAQ,EAAE,CAACC,EAAD,EAAKC,KAAL,KAAe;IACrB,MAAM,CAACC,UAAD,IAAeD,KAArB;;IACA,MAAME,IAAI,GAAG,MAAM;MACf,OAAOC,mBAAmB,CAACJ,EAAD,EAAKE,UAAL,CAA1B;IACH,CAFD;;IAGA,OAAO;MAAEG,CAAC,EAAEF;IAAL,CAAP;EACH;AATuC,CAArC;;AAWP,SAASC,mBAAT,CAA6BC,CAA7B,EAAgCC,OAAhC,EAAyC;EACrC;EACA;EACA;EACA,MAAMC,kBAAkB,GAAGhB,OAAO,CAACe,OAAD,EAAUX,SAAS,CAACW,OAAD,CAAnB,CAAlC;EACA,MAAME,QAAQ,GAAGpB,MAAM,CAACiB,CAAD,EAAIE,kBAAJ,CAAvB;EACA,IAAIE,UAAU,GAAGpB,YAAY,CAACiB,OAAD,EAAUb,MAAM,CAAC,CAAD,EAAI,OAAJ,CAAhB,CAA7B;EACA,MAAMiB,QAAQ,GAAGF,QAAQ,CAACG,IAAT,GAAgBF,UAAU,CAACE,IAA5C;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAApB,EAA8B,EAAEE,CAAhC,EAAmC;IAC/BH,UAAU,GAAGtB,UAAU,CAACsB,UAAD,EAAaG,CAAC,GAAG,CAAjB,CAAvB;EACH;;EACDH,UAAU,GAAGnB,UAAU,CAACmB,UAAD,EAAajB,IAAI,CAACgB,QAAQ,CAACK,KAAV,EAAiB,MAAjB,CAAjB,CAAvB;EACA,MAAMC,SAAS,GAAGnB,SAAS,CAACa,QAAD,CAA3B;EACA,OAAOd,KAAK,CAACe,UAAD,EAAaD,QAAb,EAAuBM,SAAvB,CAAZ;AACH"},"metadata":{},"sourceType":"module"}