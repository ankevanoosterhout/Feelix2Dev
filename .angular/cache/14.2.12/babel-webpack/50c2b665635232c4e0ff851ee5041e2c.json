{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DepthwiseConv2dNative } from '../kernel_names';\nimport * as conv_util from '../ops/conv_util';\nimport { depthwiseConv2dNativeBackpropFilter } from '../ops/depthwise_conv2d_native_backprop_filter';\nimport { depthwiseConv2dNativeBackpropInput } from '../ops/depthwise_conv2d_native_backprop_input';\nimport * as util from '../util';\nexport const depthwiseConv2dNativeGradConfig = {\n  kernelName: DepthwiseConv2dNative,\n  inputsToSave: ['x', 'filter'],\n  gradFunc: (dy, saved, attrs) => {\n    const {\n      dilations,\n      strides,\n      pad,\n      dimRoundingMode\n    } = attrs;\n    const $dilations = dilations == null ? [1, 1] : dilations;\n    util.assert(conv_util.tupleValuesAreOne($dilations), () => 'Error in gradient of depthwiseConv2dNative: dilation rates ' + `greater than 1 are not yet supported. Got dilations ` + `'${$dilations}'`);\n    const [x, filter] = saved;\n    util.assert(x.rank === 4, () => `Error in gradient of depthwiseConv2dNative: input must be ` + `rank 4, but got rank ${x.rank}.`);\n    util.assert(filter.rank === 4, () => `Error in gradient of depthwiseConv2dNative: filter must be ` + `rank 4, but got rank ${filter.rank}.`);\n    util.assert(x.shape[3] === filter.shape[2], () => `Error in gradient of depthwiseConv2d: number of input ` + `channels (${x.shape[3]}) must match the inChannels dimension ` + `in filter ${filter.shape[2]}.`);\n    util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in gradient of depthwiseConv2d: Either strides or ' + `dilations must be  1. Got strides ${strides} and dilations ` + `'${$dilations}'.`);\n    conv_util.checkPadOnDimRoundingMode('depthwiseConv2d', pad, dimRoundingMode);\n    return {\n      x: () => depthwiseConv2dNativeBackpropInput(x.shape, dy, filter, strides, pad, $dilations, dimRoundingMode),\n      filter: () => depthwiseConv2dNativeBackpropFilter(x, dy, filter.shape, strides, pad, $dilations, dimRoundingMode)\n    };\n  }\n};","map":{"version":3,"names":["DepthwiseConv2dNative","conv_util","depthwiseConv2dNativeBackpropFilter","depthwiseConv2dNativeBackpropInput","util","depthwiseConv2dNativeGradConfig","kernelName","inputsToSave","gradFunc","dy","saved","attrs","dilations","strides","pad","dimRoundingMode","$dilations","assert","tupleValuesAreOne","x","filter","rank","shape","eitherStridesOrDilationsAreOne","checkPadOnDimRoundingMode"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/gradients/DepthwiseConv2dNative_grad.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DepthwiseConv2dNative } from '../kernel_names';\nimport * as conv_util from '../ops/conv_util';\nimport { depthwiseConv2dNativeBackpropFilter } from '../ops/depthwise_conv2d_native_backprop_filter';\nimport { depthwiseConv2dNativeBackpropInput } from '../ops/depthwise_conv2d_native_backprop_input';\nimport * as util from '../util';\nexport const depthwiseConv2dNativeGradConfig = {\n    kernelName: DepthwiseConv2dNative,\n    inputsToSave: ['x', 'filter'],\n    gradFunc: (dy, saved, attrs) => {\n        const { dilations, strides, pad, dimRoundingMode } = attrs;\n        const $dilations = dilations == null ? [1, 1] : dilations;\n        util.assert(conv_util.tupleValuesAreOne($dilations), () => 'Error in gradient of depthwiseConv2dNative: dilation rates ' +\n            `greater than 1 are not yet supported. Got dilations ` +\n            `'${$dilations}'`);\n        const [x, filter] = saved;\n        util.assert(x.rank === 4, () => `Error in gradient of depthwiseConv2dNative: input must be ` +\n            `rank 4, but got rank ${x.rank}.`);\n        util.assert(filter.rank === 4, () => `Error in gradient of depthwiseConv2dNative: filter must be ` +\n            `rank 4, but got rank ${filter.rank}.`);\n        util.assert(x.shape[3] === filter.shape[2], () => `Error in gradient of depthwiseConv2d: number of input ` +\n            `channels (${x.shape[3]}) must match the inChannels dimension ` +\n            `in filter ${filter.shape[2]}.`);\n        util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in gradient of depthwiseConv2d: Either strides or ' +\n            `dilations must be  1. Got strides ${strides} and dilations ` +\n            `'${$dilations}'.`);\n        conv_util.checkPadOnDimRoundingMode('depthwiseConv2d', pad, dimRoundingMode);\n        return {\n            x: () => depthwiseConv2dNativeBackpropInput(x.shape, dy, filter, strides, pad, $dilations, dimRoundingMode),\n            filter: () => depthwiseConv2dNativeBackpropFilter(x, dy, filter.shape, strides, pad, $dilations, dimRoundingMode),\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,qBAAT,QAAsC,iBAAtC;AACA,OAAO,KAAKC,SAAZ,MAA2B,kBAA3B;AACA,SAASC,mCAAT,QAAoD,gDAApD;AACA,SAASC,kCAAT,QAAmD,+CAAnD;AACA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AACA,OAAO,MAAMC,+BAA+B,GAAG;EAC3CC,UAAU,EAAEN,qBAD+B;EAE3CO,YAAY,EAAE,CAAC,GAAD,EAAM,QAAN,CAF6B;EAG3CC,QAAQ,EAAE,CAACC,EAAD,EAAKC,KAAL,EAAYC,KAAZ,KAAsB;IAC5B,MAAM;MAAEC,SAAF;MAAaC,OAAb;MAAsBC,GAAtB;MAA2BC;IAA3B,IAA+CJ,KAArD;IACA,MAAMK,UAAU,GAAGJ,SAAS,IAAI,IAAb,GAAoB,CAAC,CAAD,EAAI,CAAJ,CAApB,GAA6BA,SAAhD;IACAR,IAAI,CAACa,MAAL,CAAYhB,SAAS,CAACiB,iBAAV,CAA4BF,UAA5B,CAAZ,EAAqD,MAAM,gEACtD,sDADsD,GAEtD,IAAGA,UAAW,GAFnB;IAGA,MAAM,CAACG,CAAD,EAAIC,MAAJ,IAAcV,KAApB;IACAN,IAAI,CAACa,MAAL,CAAYE,CAAC,CAACE,IAAF,KAAW,CAAvB,EAA0B,MAAO,4DAAD,GAC3B,wBAAuBF,CAAC,CAACE,IAAK,GADnC;IAEAjB,IAAI,CAACa,MAAL,CAAYG,MAAM,CAACC,IAAP,KAAgB,CAA5B,EAA+B,MAAO,6DAAD,GAChC,wBAAuBD,MAAM,CAACC,IAAK,GADxC;IAEAjB,IAAI,CAACa,MAAL,CAAYE,CAAC,CAACG,KAAF,CAAQ,CAAR,MAAeF,MAAM,CAACE,KAAP,CAAa,CAAb,CAA3B,EAA4C,MAAO,wDAAD,GAC7C,aAAYH,CAAC,CAACG,KAAF,CAAQ,CAAR,CAAW,wCADsB,GAE7C,aAAYF,MAAM,CAACE,KAAP,CAAa,CAAb,CAAgB,GAFjC;IAGAlB,IAAI,CAACa,MAAL,CAAYhB,SAAS,CAACsB,8BAAV,CAAyCV,OAAzC,EAAkDG,UAAlD,CAAZ,EAA2E,MAAM,6DAC5E,qCAAoCH,OAAQ,iBADgC,GAE5E,IAAGG,UAAW,IAFnB;IAGAf,SAAS,CAACuB,yBAAV,CAAoC,iBAApC,EAAuDV,GAAvD,EAA4DC,eAA5D;IACA,OAAO;MACHI,CAAC,EAAE,MAAMhB,kCAAkC,CAACgB,CAAC,CAACG,KAAH,EAAUb,EAAV,EAAcW,MAAd,EAAsBP,OAAtB,EAA+BC,GAA/B,EAAoCE,UAApC,EAAgDD,eAAhD,CADxC;MAEHK,MAAM,EAAE,MAAMlB,mCAAmC,CAACiB,CAAD,EAAIV,EAAJ,EAAQW,MAAM,CAACE,KAAf,EAAsBT,OAAtB,EAA+BC,GAA/B,EAAoCE,UAApC,EAAgDD,eAAhD;IAF9C,CAAP;EAIH;AAzB0C,CAAxC"},"metadata":{},"sourceType":"module"}