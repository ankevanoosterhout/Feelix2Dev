{"ast":null,"code":"/**\n * Gauss-Jordan elimination\n */\nvar linear = function () {\n  /**\n   * Used internally to solve systems\n   * If you want to solve A.x = B,\n   * choose data=A and mirror=B.\n   * mirror can be either an array representing a vector\n   * or an array of arrays representing a matrix.\n   */\n  function Mat(data, mirror) {\n    // Clone the original matrix\n    this.data = new Array(data.length);\n\n    for (var i = 0, cols = data[0].length; i < data.length; i++) {\n      this.data[i] = new Array(cols);\n\n      for (var j = 0; j < cols; j++) {\n        this.data[i][j] = data[i][j];\n      }\n    }\n\n    if (mirror) {\n      if (typeof mirror[0] !== \"object\") {\n        for (var i = 0; i < mirror.length; i++) {\n          mirror[i] = [mirror[i]];\n        }\n      }\n\n      this.mirror = new Mat(mirror);\n    }\n  }\n  /**\n   * Swap lines i and j in the matrix\n   */\n\n\n  Mat.prototype.swap = function (i, j) {\n    if (this.mirror) this.mirror.swap(i, j);\n    var tmp = this.data[i];\n    this.data[i] = this.data[j];\n    this.data[j] = tmp;\n  };\n  /**\n   * Multiply line number i by l\n   */\n\n\n  Mat.prototype.multline = function (i, l) {\n    if (this.mirror) this.mirror.multline(i, l);\n    var line = this.data[i];\n\n    for (var k = line.length - 1; k >= 0; k--) {\n      line[k] *= l;\n    }\n  };\n  /**\n   * Add line number j multiplied by l to line number i\n   */\n\n\n  Mat.prototype.addmul = function (i, j, l) {\n    if (this.mirror) this.mirror.addmul(i, j, l);\n    var lineI = this.data[i],\n        lineJ = this.data[j];\n\n    for (var k = lineI.length - 1; k >= 0; k--) {\n      lineI[k] = lineI[k] + l * lineJ[k];\n    }\n  };\n  /**\n   * Tests if line number i is composed only of zeroes\n   */\n\n\n  Mat.prototype.hasNullLine = function (i) {\n    for (var j = 0; j < this.data[i].length; j++) {\n      if (this.data[i][j] !== 0) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  Mat.prototype.gauss = function () {\n    var pivot = 0,\n        lines = this.data.length,\n        columns = this.data[0].length,\n        nullLines = [];\n\n    for (var j = 0; j < columns; j++) {\n      // Find the line on which there is the maximum value of column j\n      var maxValue = 0,\n          maxLine = 0;\n\n      for (var k = pivot; k < lines; k++) {\n        var val = this.data[k][j];\n\n        if (Math.abs(val) > Math.abs(maxValue)) {\n          maxLine = k;\n          maxValue = val;\n        }\n      }\n\n      if (maxValue === 0) {\n        // The matrix is not invertible. The system may still have solutions.\n        nullLines.push(pivot);\n      } else {\n        // The value of the pivot is maxValue\n        this.multline(maxLine, 1 / maxValue);\n        this.swap(maxLine, pivot);\n\n        for (var i = 0; i < lines; i++) {\n          if (i !== pivot) {\n            this.addmul(i, pivot, -this.data[i][j]);\n          }\n        }\n      }\n\n      pivot++;\n    } // Check that the system has null lines where it should\n\n\n    for (var i = 0; i < nullLines.length; i++) {\n      if (!this.mirror.hasNullLine(nullLines[i])) {\n        throw new Error(\"singular matrix\");\n      }\n    }\n\n    return this.mirror.data;\n  };\n  /**\n   * Solves A.x = b\n   * @param A\n   * @param b\n   * @return x\n   */\n\n\n  exports.solve = function solve(A, b) {\n    var result = new Mat(A, b).gauss();\n\n    if (result.length > 0 && result[0].length === 1) {\n      // Convert Nx1 matrices to simple javascript arrays\n      for (var i = 0; i < result.length; i++) result[i] = result[i][0];\n    }\n\n    return result;\n  };\n\n  function identity(n) {\n    var id = new Array(n);\n\n    for (var i = 0; i < n; i++) {\n      id[i] = new Array(n);\n\n      for (var j = 0; j < n; j++) {\n        id[i][j] = i === j ? 1 : 0;\n      }\n    }\n\n    return id;\n  }\n  /**\n   * invert a matrix\n   */\n\n\n  exports.invert = function invert(A) {\n    return new Mat(A, identity(A.length)).gauss();\n  };\n\n  return exports;\n}();\n\nif (typeof module.exports === \"object\") module.exports = linear;","map":{"version":3,"names":["linear","Mat","data","mirror","Array","length","i","cols","j","prototype","swap","tmp","multline","l","line","k","addmul","lineI","lineJ","hasNullLine","gauss","pivot","lines","columns","nullLines","maxValue","maxLine","val","Math","abs","push","Error","exports","solve","A","b","result","identity","n","id","invert","module"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/linear-solve/gauss-jordan.js"],"sourcesContent":["/**\n * Gauss-Jordan elimination\n */\n\nvar linear = (function(){\n/**\n * Used internally to solve systems\n * If you want to solve A.x = B,\n * choose data=A and mirror=B.\n * mirror can be either an array representing a vector\n * or an array of arrays representing a matrix.\n */\nfunction Mat(data, mirror) {\n  // Clone the original matrix\n  this.data = new Array(data.length);\n  for (var i=0, cols=data[0].length; i<data.length; i++) {\n    this.data[i] = new Array(cols);\n    for(var j=0; j<cols; j++) {\n      this.data[i][j] = data[i][j];\n    }\n  }\n\n  if (mirror) {\n    if (typeof mirror[0] !== \"object\") {\n      for (var i=0; i<mirror.length; i++) {\n        mirror[i] = [mirror[i]];\n      }\n    }\n    this.mirror = new Mat(mirror);\n  }\n}\n\n/**\n * Swap lines i and j in the matrix\n */\nMat.prototype.swap = function (i, j) {\n  if (this.mirror) this.mirror.swap(i,j);\n  var tmp = this.data[i];\n  this.data[i] = this.data[j];\n  this.data[j] = tmp;\n}\n\n/**\n * Multiply line number i by l\n */\nMat.prototype.multline = function (i, l) {\n  if (this.mirror) this.mirror.multline(i,l);\n  var line = this.data[i];\n  for (var k=line.length-1; k>=0; k--) {\n    line[k] *= l;\n  }\n}\n\n/**\n * Add line number j multiplied by l to line number i\n */\nMat.prototype.addmul = function (i, j, l) {\n  if (this.mirror) this.mirror.addmul(i,j,l);\n  var lineI = this.data[i], lineJ = this.data[j];\n  for (var k=lineI.length-1; k>=0; k--) {\n    lineI[k] = lineI[k] + l*lineJ[k];\n  }\n}\n\n/**\n * Tests if line number i is composed only of zeroes\n */\nMat.prototype.hasNullLine = function (i) {\n  for (var j=0; j<this.data[i].length; j++) {\n    if (this.data[i][j] !== 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nMat.prototype.gauss = function() {\n  var pivot = 0,\n      lines = this.data.length,\n      columns = this.data[0].length,\n      nullLines = [];\n\n  for (var j=0; j<columns; j++) {\n    // Find the line on which there is the maximum value of column j\n    var maxValue = 0, maxLine = 0;\n    for (var k=pivot; k<lines; k++) {\n      var val = this.data[k][j];\n      if (Math.abs(val) > Math.abs(maxValue)) {\n        maxLine = k;\n        maxValue = val;\n      } \n    }\n    if (maxValue === 0) {\n      // The matrix is not invertible. The system may still have solutions.\n      nullLines.push(pivot);\n    } else {\n      // The value of the pivot is maxValue\n      this.multline(maxLine, 1/maxValue);\n      this.swap(maxLine, pivot);\n      for (var i=0; i<lines; i++) {\n        if (i !== pivot) {\n          this.addmul(i, pivot, -this.data[i][j]);\n        }\n      }\n    }\n    pivot++;\n  }\n\n  // Check that the system has null lines where it should\n  for (var i=0; i<nullLines.length; i++) {\n    if (!this.mirror.hasNullLine(nullLines[i])) {\n      throw new Error(\"singular matrix\");\n    }\n  }\n  return this.mirror.data;\n}\n\n/**\n * Solves A.x = b\n * @param A\n * @param b\n * @return x\n */\nexports.solve = function solve(A, b) {\n  var result = new Mat(A,b).gauss();\n  if (result.length > 0 && result[0].length === 1) {\n    // Convert Nx1 matrices to simple javascript arrays\n    for (var i=0; i<result.length; i++) result[i] = result[i][0];\n  }\n  return result;\n}\n\nfunction identity(n) {\n  var id = new Array(n);\n  for (var i=0; i<n; i++) {\n    id[i] = new Array(n);\n    for (var j=0; j<n; j++) {\n      id[i][j] = (i === j) ? 1 : 0;\n    }\n  }\n  return id;\n}\n\n/**\n * invert a matrix\n */\nexports.invert = function invert(A) {\n  return new Mat(A, identity(A.length)).gauss();\n}\n\nreturn exports;\n})();\n\nif (typeof module.exports === \"object\") module.exports = linear;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}