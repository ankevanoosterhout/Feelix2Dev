{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Conv2DBackpropFilter } from '../kernel_names';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the derivative of the filter of a 2D convolution.\n *\n * @param x The input tensor, of rank 4 or rank 3 of shape\n *     [batch, height, width, inChannels]. If rank 3, batch of 1 is assumed.\n * @param dy The dy image, of rank 4 or rank 3, of shape\n *     [batch, height, width, outDepth]. If rank 3, batch of 1 is assumed.\n * @param filterShape The shape of the filter, length 4,\n *     [filterHeight, filterWidth, inDepth, outDepth].\n * @param strides The strides of the convolution: [strideHeight,\n * strideWidth].\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels].\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\n\nfunction conv2DBackpropFilter_(x, dy, filterShape, strides, pad, dataFormat = 'NHWC', dimRoundingMode) {\n  let x4D = x;\n\n  if (x.rank === 3) {\n    x4D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2]]);\n  }\n\n  let dy4D = dy;\n\n  if (dy4D.rank === 3) {\n    dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n  }\n\n  util.assert(x4D.rank === 4, () => `Error in conv2dDerFilter: input must be rank 4, but got shape ` + `${x4D.shape}.`);\n  util.assert(dy4D.rank === 4, () => `Error in conv2dDerFilter: dy must be rank 4, but got shape ` + `${dy4D.shape}.`);\n  util.assert(filterShape.length === 4, () => `Error in conv2dDerFilter: filterShape must be length 4, but got ` + `${filterShape}.`);\n  const inDepth = dataFormat === 'NHWC' ? x4D.shape[3] : x4D.shape[1];\n  const outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];\n  util.assert(inDepth === filterShape[2], () => `Error in conv2dDerFilter: depth of input ${inDepth}) must ` + `match input depth in filter (${filterShape[2]}.`);\n  util.assert(outDepth === filterShape[3], () => `Error in conv2dDerFilter: depth of dy (${outDepth}) must ` + `match output depth for filter (${filterShape[3]}).`);\n  conv_util.checkPadOnDimRoundingMode('conv2dDerFilter', pad, dimRoundingMode);\n  const inputs = {\n    x: x4D,\n    dy: dy4D\n  };\n  const attrs = {\n    strides,\n    pad,\n    dataFormat,\n    dimRoundingMode,\n    filterShape\n  }; // tslint:disable-next-line: no-unnecessary-type-assertion\n\n  return ENGINE.runKernel(Conv2DBackpropFilter, inputs, attrs);\n}\n\nexport const conv2DBackpropFilter = op({\n  conv2DBackpropFilter_\n});","map":{"version":3,"names":["ENGINE","Conv2DBackpropFilter","util","conv_util","op","reshape","conv2DBackpropFilter_","x","dy","filterShape","strides","pad","dataFormat","dimRoundingMode","x4D","rank","shape","dy4D","assert","length","inDepth","outDepth","checkPadOnDimRoundingMode","inputs","attrs","runKernel","conv2DBackpropFilter"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_backprop_filter.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Conv2DBackpropFilter } from '../kernel_names';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the derivative of the filter of a 2D convolution.\n *\n * @param x The input tensor, of rank 4 or rank 3 of shape\n *     [batch, height, width, inChannels]. If rank 3, batch of 1 is assumed.\n * @param dy The dy image, of rank 4 or rank 3, of shape\n *     [batch, height, width, outDepth]. If rank 3, batch of 1 is assumed.\n * @param filterShape The shape of the filter, length 4,\n *     [filterHeight, filterWidth, inDepth, outDepth].\n * @param strides The strides of the convolution: [strideHeight,\n * strideWidth].\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels].\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\nfunction conv2DBackpropFilter_(x, dy, filterShape, strides, pad, dataFormat = 'NHWC', dimRoundingMode) {\n    let x4D = x;\n    if (x.rank === 3) {\n        x4D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2]]);\n    }\n    let dy4D = dy;\n    if (dy4D.rank === 3) {\n        dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n    }\n    util.assert(x4D.rank === 4, () => `Error in conv2dDerFilter: input must be rank 4, but got shape ` +\n        `${x4D.shape}.`);\n    util.assert(dy4D.rank === 4, () => `Error in conv2dDerFilter: dy must be rank 4, but got shape ` +\n        `${dy4D.shape}.`);\n    util.assert(filterShape.length === 4, () => `Error in conv2dDerFilter: filterShape must be length 4, but got ` +\n        `${filterShape}.`);\n    const inDepth = dataFormat === 'NHWC' ? x4D.shape[3] : x4D.shape[1];\n    const outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];\n    util.assert(inDepth === filterShape[2], () => `Error in conv2dDerFilter: depth of input ${inDepth}) must ` +\n        `match input depth in filter (${filterShape[2]}.`);\n    util.assert(outDepth === filterShape[3], () => `Error in conv2dDerFilter: depth of dy (${outDepth}) must ` +\n        `match output depth for filter (${filterShape[3]}).`);\n    conv_util.checkPadOnDimRoundingMode('conv2dDerFilter', pad, dimRoundingMode);\n    const inputs = { x: x4D, dy: dy4D };\n    const attrs = { strides, pad, dataFormat, dimRoundingMode, filterShape };\n    // tslint:disable-next-line: no-unnecessary-type-assertion\n    return ENGINE.runKernel(Conv2DBackpropFilter, inputs, attrs);\n}\nexport const conv2DBackpropFilter = op({ conv2DBackpropFilter_ });\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}