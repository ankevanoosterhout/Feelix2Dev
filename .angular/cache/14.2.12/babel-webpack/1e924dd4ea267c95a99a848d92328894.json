{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Padding Layers.\n */\n// Porting Note: In Python Keras, the padding layers are in convolutional.py,\n//   but we decided to put them in a separate file (padding.ts) for clarity.\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { imageDataFormat } from '../backend/common';\nimport { InputSpec, Layer } from '../engine/topology';\nimport { ValueError } from '../errors';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\n/**\n * Pads the middle dimension of a 3D tensor.\n *\n * @param x Input `tf.Tensor` to be padded.\n * @param padding `Array` of 2 integers, how many zeros to add at the start and\n *   end of the middle dimension (i.e., dimension 1).\n * @return A padded 3D `tf.Tensor`.\n */\n\nexport function temporalPadding(x, padding) {\n  return tidy(() => {\n    if (x.rank !== 3) {\n      throw new ValueError(`temporalPadding expects input tensor to be 3-D, but received a ` + `${x.rank}-D tensor.`);\n    }\n\n    if (padding == null) {\n      padding = [1, 1];\n    }\n\n    if (padding.length !== 2) {\n      throw new ValueError(`temporalPadding expects input padding pattern to be a length-2 ` + `array, but received a length-${padding.length} array.`);\n    }\n\n    const pattern = [[0, 0], padding, [0, 0]];\n    return tfc.pad(x, pattern);\n  });\n}\n/**\n * Pads the 2nd and 3rd dimensions of a 4D tensor.\n *\n * @param x Input `tf.Tensor` to be padded.\n * @param padding `Array` of two `Array`s, each of which is an `Array` of two\n *   integers. The amount of padding at the beginning and end of the 2nd and 3rd\n *   dimensions, respectively.\n * @param dataFormat 'channelsLast' (default) or 'channelsFirst'.\n * @return Padded 4D `tf.Tensor`.\n */\n\nexport function spatial2dPadding(x, padding, dataFormat) {\n  return tidy(() => {\n    if (x.rank !== 4) {\n      throw new ValueError(`temporalPadding expects input tensor to be 4-D, but received a ` + `${x.rank}-D tensor.`);\n    }\n\n    if (padding == null) {\n      padding = [[1, 1], [1, 1]];\n    }\n\n    if (padding.length !== 2 || padding[0].length !== 2 || padding[1].length !== 2) {\n      throw new ValueError('spatial2dPadding expects `padding` to be an Array of two Arrays, ' + 'each of which is an Array of two integers.');\n    }\n\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n\n    if (dataFormat !== 'channelsLast' && dataFormat !== 'channelsFirst') {\n      throw new ValueError(`Unknown data format: ${dataFormat}. ` + `Supported data formats are 'channelsLast' and 'channelsFirst.`);\n    }\n\n    let pattern;\n\n    if (dataFormat === 'channelsFirst') {\n      pattern = [[0, 0], [0, 0], padding[0], padding[1]];\n    } else {\n      pattern = [[0, 0], padding[0], padding[1], [0, 0]];\n    }\n\n    return tfc.pad(x, pattern);\n  });\n}\nexport class ZeroPadding2D extends Layer {\n  constructor(args) {\n    if (args == null) {\n      args = {};\n    }\n\n    super(args);\n    this.dataFormat = args.dataFormat == null ? imageDataFormat() : args.dataFormat; // TODO(cais): Maybe refactor the following logic surrounding `padding`\n    //   into a helper method.\n\n    if (args.padding == null) {\n      this.padding = [[1, 1], [1, 1]];\n    } else if (typeof args.padding === 'number') {\n      this.padding = [[args.padding, args.padding], [args.padding, args.padding]];\n    } else {\n      args.padding = args.padding;\n\n      if (args.padding.length !== 2) {\n        throw new ValueError(`ZeroPadding2D expects padding to be a length-2 array, but ` + `received a length-${args.padding.length} array.`);\n      }\n\n      let heightPadding;\n      let widthPadding;\n\n      if (typeof args.padding[0] === 'number') {\n        heightPadding = [args.padding[0], args.padding[0]];\n        widthPadding = [args.padding[1], args.padding[1]];\n      } else {\n        args.padding = args.padding;\n\n        if (args.padding[0].length !== 2) {\n          throw new ValueError(`ZeroPadding2D expects height padding to be a length-2 array, ` + `but received a length-${args.padding[0].length} array.`);\n        }\n\n        heightPadding = args.padding[0];\n\n        if (args.padding[1].length !== 2) {\n          throw new ValueError(`ZeroPadding2D expects width padding to be a length-2 array, ` + `but received a length-${args.padding[1].length} array.`);\n        }\n\n        widthPadding = args.padding[1];\n      }\n\n      this.padding = [heightPadding, widthPadding];\n    }\n\n    this.inputSpec = [new InputSpec({\n      ndim: 4\n    })];\n  }\n\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    let rows;\n    let cols;\n\n    if (this.dataFormat === 'channelsFirst') {\n      if (inputShape[2] != null && inputShape[2] >= 0) {\n        rows = inputShape[2] + this.padding[0][0] + this.padding[0][1];\n      } else {\n        rows = null;\n      }\n\n      if (inputShape[3] != null && inputShape[3] >= 0) {\n        cols = inputShape[3] + this.padding[1][0] + this.padding[1][1];\n      } else {\n        cols = null;\n      }\n\n      return [inputShape[0], inputShape[1], rows, cols];\n    } else {\n      if (inputShape[1] != null && inputShape[1] >= 0) {\n        rows = inputShape[1] + this.padding[0][0] + this.padding[0][1];\n      } else {\n        rows = null;\n      }\n\n      if (inputShape[2] != null && inputShape[2] >= 0) {\n        cols = inputShape[2] + this.padding[1][0] + this.padding[1][1];\n      } else {\n        cols = null;\n      }\n\n      return [inputShape[0], rows, cols, inputShape[3]];\n    }\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => spatial2dPadding(getExactlyOneTensor(inputs), this.padding, this.dataFormat));\n  }\n\n  getConfig() {\n    const config = {\n      padding: this.padding,\n      dataFormat: this.dataFormat\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nZeroPadding2D.className = 'ZeroPadding2D';\nserialization.registerClass(ZeroPadding2D);","map":{"version":3,"names":["tfc","serialization","tidy","imageDataFormat","InputSpec","Layer","ValueError","getExactlyOneShape","getExactlyOneTensor","temporalPadding","x","padding","rank","length","pattern","pad","spatial2dPadding","dataFormat","ZeroPadding2D","constructor","args","heightPadding","widthPadding","inputSpec","ndim","computeOutputShape","inputShape","rows","cols","call","inputs","kwargs","getConfig","config","baseConfig","Object","assign","className","registerClass"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-layers/dist/layers/padding.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Padding Layers.\n */\n// Porting Note: In Python Keras, the padding layers are in convolutional.py,\n//   but we decided to put them in a separate file (padding.ts) for clarity.\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { imageDataFormat } from '../backend/common';\nimport { InputSpec, Layer } from '../engine/topology';\nimport { ValueError } from '../errors';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\n/**\n * Pads the middle dimension of a 3D tensor.\n *\n * @param x Input `tf.Tensor` to be padded.\n * @param padding `Array` of 2 integers, how many zeros to add at the start and\n *   end of the middle dimension (i.e., dimension 1).\n * @return A padded 3D `tf.Tensor`.\n */\nexport function temporalPadding(x, padding) {\n    return tidy(() => {\n        if (x.rank !== 3) {\n            throw new ValueError(`temporalPadding expects input tensor to be 3-D, but received a ` +\n                `${x.rank}-D tensor.`);\n        }\n        if (padding == null) {\n            padding = [1, 1];\n        }\n        if (padding.length !== 2) {\n            throw new ValueError(`temporalPadding expects input padding pattern to be a length-2 ` +\n                `array, but received a length-${padding.length} array.`);\n        }\n        const pattern = [[0, 0], padding, [0, 0]];\n        return tfc.pad(x, pattern);\n    });\n}\n/**\n * Pads the 2nd and 3rd dimensions of a 4D tensor.\n *\n * @param x Input `tf.Tensor` to be padded.\n * @param padding `Array` of two `Array`s, each of which is an `Array` of two\n *   integers. The amount of padding at the beginning and end of the 2nd and 3rd\n *   dimensions, respectively.\n * @param dataFormat 'channelsLast' (default) or 'channelsFirst'.\n * @return Padded 4D `tf.Tensor`.\n */\nexport function spatial2dPadding(x, padding, dataFormat) {\n    return tidy(() => {\n        if (x.rank !== 4) {\n            throw new ValueError(`temporalPadding expects input tensor to be 4-D, but received a ` +\n                `${x.rank}-D tensor.`);\n        }\n        if (padding == null) {\n            padding = [[1, 1], [1, 1]];\n        }\n        if (padding.length !== 2 || padding[0].length !== 2 ||\n            padding[1].length !== 2) {\n            throw new ValueError('spatial2dPadding expects `padding` to be an Array of two Arrays, ' +\n                'each of which is an Array of two integers.');\n        }\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        if (dataFormat !== 'channelsLast' && dataFormat !== 'channelsFirst') {\n            throw new ValueError(`Unknown data format: ${dataFormat}. ` +\n                `Supported data formats are 'channelsLast' and 'channelsFirst.`);\n        }\n        let pattern;\n        if (dataFormat === 'channelsFirst') {\n            pattern = [[0, 0], [0, 0], padding[0], padding[1]];\n        }\n        else {\n            pattern = [[0, 0], padding[0], padding[1], [0, 0]];\n        }\n        return tfc.pad(x, pattern);\n    });\n}\nexport class ZeroPadding2D extends Layer {\n    constructor(args) {\n        if (args == null) {\n            args = {};\n        }\n        super(args);\n        this.dataFormat =\n            args.dataFormat == null ? imageDataFormat() : args.dataFormat;\n        // TODO(cais): Maybe refactor the following logic surrounding `padding`\n        //   into a helper method.\n        if (args.padding == null) {\n            this.padding = [[1, 1], [1, 1]];\n        }\n        else if (typeof args.padding === 'number') {\n            this.padding =\n                [[args.padding, args.padding], [args.padding, args.padding]];\n        }\n        else {\n            args.padding = args.padding;\n            if (args.padding.length !== 2) {\n                throw new ValueError(`ZeroPadding2D expects padding to be a length-2 array, but ` +\n                    `received a length-${args.padding.length} array.`);\n            }\n            let heightPadding;\n            let widthPadding;\n            if (typeof args.padding[0] === 'number') {\n                heightPadding = [args.padding[0], args.padding[0]];\n                widthPadding = [args.padding[1], args.padding[1]];\n            }\n            else {\n                args.padding = args.padding;\n                if (args.padding[0].length !== 2) {\n                    throw new ValueError(`ZeroPadding2D expects height padding to be a length-2 array, ` +\n                        `but received a length-${args.padding[0].length} array.`);\n                }\n                heightPadding = args.padding[0];\n                if (args.padding[1].length !== 2) {\n                    throw new ValueError(`ZeroPadding2D expects width padding to be a length-2 array, ` +\n                        `but received a length-${args.padding[1].length} array.`);\n                }\n                widthPadding = args.padding[1];\n            }\n            this.padding = [heightPadding, widthPadding];\n        }\n        this.inputSpec = [new InputSpec({ ndim: 4 })];\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        let rows;\n        let cols;\n        if (this.dataFormat === 'channelsFirst') {\n            if (inputShape[2] != null && inputShape[2] >= 0) {\n                rows = inputShape[2] + this.padding[0][0] + this.padding[0][1];\n            }\n            else {\n                rows = null;\n            }\n            if (inputShape[3] != null && inputShape[3] >= 0) {\n                cols = inputShape[3] + this.padding[1][0] + this.padding[1][1];\n            }\n            else {\n                cols = null;\n            }\n            return [inputShape[0], inputShape[1], rows, cols];\n        }\n        else {\n            if (inputShape[1] != null && inputShape[1] >= 0) {\n                rows = inputShape[1] + this.padding[0][0] + this.padding[0][1];\n            }\n            else {\n                rows = null;\n            }\n            if (inputShape[2] != null && inputShape[2] >= 0) {\n                cols = inputShape[2] + this.padding[1][0] + this.padding[1][1];\n            }\n            else {\n                cols = null;\n            }\n            return [inputShape[0], rows, cols, inputShape[3]];\n        }\n    }\n    call(inputs, kwargs) {\n        return tidy(() => spatial2dPadding(getExactlyOneTensor(inputs), this.padding, this.dataFormat));\n    }\n    getConfig() {\n        const config = {\n            padding: this.padding,\n            dataFormat: this.dataFormat,\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nZeroPadding2D.className = 'ZeroPadding2D';\nserialization.registerClass(ZeroPadding2D);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}