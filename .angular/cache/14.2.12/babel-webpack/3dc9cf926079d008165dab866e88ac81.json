{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat } from '../concat';\nimport { fill } from '../fill';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\nimport { slice } from '../slice';\nimport { tensor2d } from '../tensor2d';\n/**\n * Expands input into frames of frameLength.\n * Slides a window size with frameStep.\n *\n * ```js\n * tf.signal.frame([1, 2, 3], 2, 1).print();\n * ```\n * @param signal The input tensor to be expanded\n * @param frameLength Length of each frame\n * @param frameStep The frame hop size in samples.\n * @param padEnd Whether to pad the end of signal with padValue.\n * @param padValue A number to use where the input signal does\n *     not exist when padEnd is True.\n *\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\n\nfunction frame_(signal, frameLength, frameStep, padEnd = false, padValue = 0) {\n  let start = 0;\n  const output = [];\n\n  while (start + frameLength <= signal.size) {\n    output.push(slice(signal, start, frameLength));\n    start += frameStep;\n  }\n\n  if (padEnd) {\n    while (start < signal.size) {\n      const padLen = start + frameLength - signal.size;\n      const pad = concat([slice(signal, start, frameLength - padLen), fill([padLen], padValue)]);\n      output.push(pad);\n      start += frameStep;\n    }\n  }\n\n  if (output.length === 0) {\n    return tensor2d([], [0, frameLength]);\n  }\n\n  return reshape(concat(output), [output.length, frameLength]);\n}\n\nexport const frame = op({\n  frame_\n});","map":{"version":3,"names":["concat","fill","op","reshape","slice","tensor2d","frame_","signal","frameLength","frameStep","padEnd","padValue","start","output","size","push","padLen","pad","length","frame"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/signal/frame.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat } from '../concat';\nimport { fill } from '../fill';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\nimport { slice } from '../slice';\nimport { tensor2d } from '../tensor2d';\n/**\n * Expands input into frames of frameLength.\n * Slides a window size with frameStep.\n *\n * ```js\n * tf.signal.frame([1, 2, 3], 2, 1).print();\n * ```\n * @param signal The input tensor to be expanded\n * @param frameLength Length of each frame\n * @param frameStep The frame hop size in samples.\n * @param padEnd Whether to pad the end of signal with padValue.\n * @param padValue A number to use where the input signal does\n *     not exist when padEnd is True.\n *\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\nfunction frame_(signal, frameLength, frameStep, padEnd = false, padValue = 0) {\n    let start = 0;\n    const output = [];\n    while (start + frameLength <= signal.size) {\n        output.push(slice(signal, start, frameLength));\n        start += frameStep;\n    }\n    if (padEnd) {\n        while (start < signal.size) {\n            const padLen = (start + frameLength) - signal.size;\n            const pad = concat([\n                slice(signal, start, frameLength - padLen), fill([padLen], padValue)\n            ]);\n            output.push(pad);\n            start += frameStep;\n        }\n    }\n    if (output.length === 0) {\n        return tensor2d([], [0, frameLength]);\n    }\n    return reshape(concat(output), [output.length, frameLength]);\n}\nexport const frame = op({ frame_ });\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,WAAvB;AACA,SAASC,IAAT,QAAqB,SAArB;AACA,SAASC,EAAT,QAAmB,cAAnB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,MAAT,CAAgBC,MAAhB,EAAwBC,WAAxB,EAAqCC,SAArC,EAAgDC,MAAM,GAAG,KAAzD,EAAgEC,QAAQ,GAAG,CAA3E,EAA8E;EAC1E,IAAIC,KAAK,GAAG,CAAZ;EACA,MAAMC,MAAM,GAAG,EAAf;;EACA,OAAOD,KAAK,GAAGJ,WAAR,IAAuBD,MAAM,CAACO,IAArC,EAA2C;IACvCD,MAAM,CAACE,IAAP,CAAYX,KAAK,CAACG,MAAD,EAASK,KAAT,EAAgBJ,WAAhB,CAAjB;IACAI,KAAK,IAAIH,SAAT;EACH;;EACD,IAAIC,MAAJ,EAAY;IACR,OAAOE,KAAK,GAAGL,MAAM,CAACO,IAAtB,EAA4B;MACxB,MAAME,MAAM,GAAIJ,KAAK,GAAGJ,WAAT,GAAwBD,MAAM,CAACO,IAA9C;MACA,MAAMG,GAAG,GAAGjB,MAAM,CAAC,CACfI,KAAK,CAACG,MAAD,EAASK,KAAT,EAAgBJ,WAAW,GAAGQ,MAA9B,CADU,EAC6Bf,IAAI,CAAC,CAACe,MAAD,CAAD,EAAWL,QAAX,CADjC,CAAD,CAAlB;MAGAE,MAAM,CAACE,IAAP,CAAYE,GAAZ;MACAL,KAAK,IAAIH,SAAT;IACH;EACJ;;EACD,IAAII,MAAM,CAACK,MAAP,KAAkB,CAAtB,EAAyB;IACrB,OAAOb,QAAQ,CAAC,EAAD,EAAK,CAAC,CAAD,EAAIG,WAAJ,CAAL,CAAf;EACH;;EACD,OAAOL,OAAO,CAACH,MAAM,CAACa,MAAD,CAAP,EAAiB,CAACA,MAAM,CAACK,MAAR,EAAgBV,WAAhB,CAAjB,CAAd;AACH;;AACD,OAAO,MAAMW,KAAK,GAAGjB,EAAE,CAAC;EAAEI;AAAF,CAAD,CAAhB"},"metadata":{},"sourceType":"module"}