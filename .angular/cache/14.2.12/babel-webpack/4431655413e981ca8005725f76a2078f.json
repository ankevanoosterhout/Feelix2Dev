{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { assert } from '../util';\nimport { arrayBufferToBase64String, base64StringToArrayBuffer, getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nconst PATH_SEPARATOR = '/';\nconst PATH_PREFIX = 'tensorflowjs_models';\nconst INFO_SUFFIX = 'info';\nconst MODEL_TOPOLOGY_SUFFIX = 'model_topology';\nconst WEIGHT_SPECS_SUFFIX = 'weight_specs';\nconst WEIGHT_DATA_SUFFIX = 'weight_data';\nconst MODEL_METADATA_SUFFIX = 'model_metadata';\n/**\n * Purge all tensorflow.js-saved model artifacts from local storage.\n *\n * @returns Paths of the models purged.\n */\n\nexport function purgeLocalStorageArtifacts() {\n  if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' || typeof window.localStorage === 'undefined') {\n    throw new Error('purgeLocalStorageModels() cannot proceed because local storage is ' + 'unavailable in the current environment.');\n  }\n\n  const LS = window.localStorage;\n  const purgedModelPaths = [];\n\n  for (let i = 0; i < LS.length; ++i) {\n    const key = LS.key(i);\n    const prefix = PATH_PREFIX + PATH_SEPARATOR;\n\n    if (key.startsWith(prefix) && key.length > prefix.length) {\n      LS.removeItem(key);\n      const modelName = getModelPathFromKey(key);\n\n      if (purgedModelPaths.indexOf(modelName) === -1) {\n        purgedModelPaths.push(modelName);\n      }\n    }\n  }\n\n  return purgedModelPaths;\n}\n\nfunction getModelKeys(path) {\n  return {\n    info: [PATH_PREFIX, path, INFO_SUFFIX].join(PATH_SEPARATOR),\n    topology: [PATH_PREFIX, path, MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),\n    weightSpecs: [PATH_PREFIX, path, WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),\n    weightData: [PATH_PREFIX, path, WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),\n    modelMetadata: [PATH_PREFIX, path, MODEL_METADATA_SUFFIX].join(PATH_SEPARATOR)\n  };\n}\n\nfunction removeItems(keys) {\n  for (const key of Object.values(keys)) {\n    window.localStorage.removeItem(key);\n  }\n}\n/**\n * Get model path from a local-storage key.\n *\n * E.g., 'tensorflowjs_models/my/model/1/info' --> 'my/model/1'\n *\n * @param key\n */\n\n\nfunction getModelPathFromKey(key) {\n  const items = key.split(PATH_SEPARATOR);\n\n  if (items.length < 3) {\n    throw new Error(`Invalid key format: ${key}`);\n  }\n\n  return items.slice(1, items.length - 1).join(PATH_SEPARATOR);\n}\n\nfunction maybeStripScheme(key) {\n  return key.startsWith(BrowserLocalStorage.URL_SCHEME) ? key.slice(BrowserLocalStorage.URL_SCHEME.length) : key;\n}\n/**\n * IOHandler subclass: Browser Local Storage.\n *\n * See the doc string to `browserLocalStorage` for more details.\n */\n\n\nexport class BrowserLocalStorage {\n  constructor(modelPath) {\n    if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' || typeof window.localStorage === 'undefined') {\n      // TODO(cais): Add more info about what IOHandler subtypes are\n      // available.\n      //   Maybe point to a doc page on the web and/or automatically determine\n      //   the available IOHandlers and print them in the error message.\n      throw new Error('The current environment does not support local storage.');\n    }\n\n    this.LS = window.localStorage;\n\n    if (modelPath == null || !modelPath) {\n      throw new Error('For local storage, modelPath must not be null, undefined or empty.');\n    }\n\n    this.modelPath = modelPath;\n    this.keys = getModelKeys(this.modelPath);\n  }\n  /**\n   * Save model artifacts to browser local storage.\n   *\n   * See the documentation to `browserLocalStorage` for details on the saved\n   * artifacts.\n   *\n   * @param modelArtifacts The model artifacts to be stored.\n   * @returns An instance of SaveResult.\n   */\n\n\n  save(modelArtifacts) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n        throw new Error('BrowserLocalStorage.save() does not support saving model topology ' + 'in binary formats yet.');\n      } else {\n        const topology = JSON.stringify(modelArtifacts.modelTopology);\n        const weightSpecs = JSON.stringify(modelArtifacts.weightSpecs);\n        const modelArtifactsInfo = getModelArtifactsInfoForJSON(modelArtifacts);\n\n        try {\n          _this.LS.setItem(_this.keys.info, JSON.stringify(modelArtifactsInfo));\n\n          _this.LS.setItem(_this.keys.topology, topology);\n\n          _this.LS.setItem(_this.keys.weightSpecs, weightSpecs);\n\n          _this.LS.setItem(_this.keys.weightData, arrayBufferToBase64String(modelArtifacts.weightData)); // Note that JSON.stringify doesn't write out keys that have undefined\n          // values, so for some keys, we set undefined instead of a null-ish\n          // value.\n\n\n          const metadata = {\n            format: modelArtifacts.format,\n            generatedBy: modelArtifacts.generatedBy,\n            convertedBy: modelArtifacts.convertedBy,\n            signature: modelArtifacts.signature != null ? modelArtifacts.signature : undefined,\n            userDefinedMetadata: modelArtifacts.userDefinedMetadata != null ? modelArtifacts.userDefinedMetadata : undefined,\n            modelInitializer: modelArtifacts.modelInitializer != null ? modelArtifacts.modelInitializer : undefined,\n            trainingConfig: modelArtifacts.trainingConfig != null ? modelArtifacts.trainingConfig : undefined\n          };\n\n          _this.LS.setItem(_this.keys.modelMetadata, JSON.stringify(metadata));\n\n          return {\n            modelArtifactsInfo\n          };\n        } catch (err) {\n          // If saving failed, clean up all items saved so far.\n          removeItems(_this.keys);\n          throw new Error(`Failed to save model '${_this.modelPath}' to local storage: ` + `size quota being exceeded is a possible cause of this failure: ` + `modelTopologyBytes=${modelArtifactsInfo.modelTopologyBytes}, ` + `weightSpecsBytes=${modelArtifactsInfo.weightSpecsBytes}, ` + `weightDataBytes=${modelArtifactsInfo.weightDataBytes}.`);\n        }\n      }\n    })();\n  }\n  /**\n   * Load a model from local storage.\n   *\n   * See the documentation to `browserLocalStorage` for details on the saved\n   * artifacts.\n   *\n   * @returns The loaded model (if loading succeeds).\n   */\n\n\n  load() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const info = JSON.parse(_this2.LS.getItem(_this2.keys.info));\n\n      if (info == null) {\n        throw new Error(`In local storage, there is no model with name '${_this2.modelPath}'`);\n      }\n\n      if (info.modelTopologyType !== 'JSON') {\n        throw new Error('BrowserLocalStorage does not support loading non-JSON model ' + 'topology yet.');\n      }\n\n      const out = {}; // Load topology.\n\n      const topology = JSON.parse(_this2.LS.getItem(_this2.keys.topology));\n\n      if (topology == null) {\n        throw new Error(`In local storage, the topology of model '${_this2.modelPath}' ` + `is missing.`);\n      }\n\n      out.modelTopology = topology; // Load weight specs.\n\n      const weightSpecs = JSON.parse(_this2.LS.getItem(_this2.keys.weightSpecs));\n\n      if (weightSpecs == null) {\n        throw new Error(`In local storage, the weight specs of model '${_this2.modelPath}' ` + `are missing.`);\n      }\n\n      out.weightSpecs = weightSpecs; // Load meta-data fields.\n\n      const metadataString = _this2.LS.getItem(_this2.keys.modelMetadata);\n\n      if (metadataString != null) {\n        const metadata = JSON.parse(metadataString);\n        out.format = metadata.format;\n        out.generatedBy = metadata.generatedBy;\n        out.convertedBy = metadata.convertedBy;\n\n        if (metadata.signature != null) {\n          out.signature = metadata.signature;\n        }\n\n        if (metadata.userDefinedMetadata != null) {\n          out.userDefinedMetadata = metadata.userDefinedMetadata;\n        }\n\n        if (metadata.modelInitializer != null) {\n          out.modelInitializer = metadata.modelInitializer;\n        }\n\n        if (metadata.trainingConfig != null) {\n          out.trainingConfig = metadata.trainingConfig;\n        }\n      } // Load weight data.\n\n\n      const weightDataBase64 = _this2.LS.getItem(_this2.keys.weightData);\n\n      if (weightDataBase64 == null) {\n        throw new Error(`In local storage, the binary weight values of model ` + `'${_this2.modelPath}' are missing.`);\n      }\n\n      out.weightData = base64StringToArrayBuffer(weightDataBase64);\n      return out;\n    })();\n  }\n\n}\nBrowserLocalStorage.URL_SCHEME = 'localstorage://';\nexport const localStorageRouter = url => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserLocalStorage.URL_SCHEME)) {\n      return browserLocalStorage(url.slice(BrowserLocalStorage.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(localStorageRouter);\nIORouterRegistry.registerLoadRouter(localStorageRouter);\n/**\n * Factory function for local storage IOHandler.\n *\n * This `IOHandler` supports both `save` and `load`.\n *\n * For each model's saved artifacts, four items are saved to local storage.\n *   - `${PATH_SEPARATOR}/${modelPath}/info`: Contains meta-info about the\n *     model, such as date saved, type of the topology, size in bytes, etc.\n *   - `${PATH_SEPARATOR}/${modelPath}/topology`: Model topology. For Keras-\n *     style models, this is a stringized JSON.\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_specs`: Weight specs of the\n *     model, can be used to decode the saved binary weight values (see\n *     item below).\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_data`: Concatenated binary\n *     weight values, stored as a base64-encoded string.\n *\n * Saving may throw an `Error` if the total size of the artifacts exceed the\n * browser-specific quota.\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `IOHandler`, which can be used with, e.g.,\n *   `tf.Model.save`.\n */\n\nexport function browserLocalStorage(modelPath) {\n  return new BrowserLocalStorage(modelPath);\n}\nexport class BrowserLocalStorageManager {\n  constructor() {\n    assert(env().getBool('IS_BROWSER'), () => 'Current environment is not a web browser');\n    assert(typeof window === 'undefined' || typeof window.localStorage !== 'undefined', () => 'Current browser does not appear to support localStorage');\n    this.LS = window.localStorage;\n  }\n\n  listModels() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const out = {};\n      const prefix = PATH_PREFIX + PATH_SEPARATOR;\n      const suffix = PATH_SEPARATOR + INFO_SUFFIX;\n\n      for (let i = 0; i < _this3.LS.length; ++i) {\n        const key = _this3.LS.key(i);\n\n        if (key.startsWith(prefix) && key.endsWith(suffix)) {\n          const modelPath = getModelPathFromKey(key);\n          out[modelPath] = JSON.parse(_this3.LS.getItem(key));\n        }\n      }\n\n      return out;\n    })();\n  }\n\n  removeModel(path) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      path = maybeStripScheme(path);\n      const keys = getModelKeys(path);\n\n      if (_this4.LS.getItem(keys.info) == null) {\n        throw new Error(`Cannot find model at path '${path}'`);\n      }\n\n      const info = JSON.parse(_this4.LS.getItem(keys.info));\n      removeItems(keys);\n      return info;\n    })();\n  }\n\n}","map":{"version":3,"names":["env","assert","arrayBufferToBase64String","base64StringToArrayBuffer","getModelArtifactsInfoForJSON","IORouterRegistry","PATH_SEPARATOR","PATH_PREFIX","INFO_SUFFIX","MODEL_TOPOLOGY_SUFFIX","WEIGHT_SPECS_SUFFIX","WEIGHT_DATA_SUFFIX","MODEL_METADATA_SUFFIX","purgeLocalStorageArtifacts","getBool","window","localStorage","Error","LS","purgedModelPaths","i","length","key","prefix","startsWith","removeItem","modelName","getModelPathFromKey","indexOf","push","getModelKeys","path","info","join","topology","weightSpecs","weightData","modelMetadata","removeItems","keys","Object","values","items","split","slice","maybeStripScheme","BrowserLocalStorage","URL_SCHEME","constructor","modelPath","save","modelArtifacts","modelTopology","ArrayBuffer","JSON","stringify","modelArtifactsInfo","setItem","metadata","format","generatedBy","convertedBy","signature","undefined","userDefinedMetadata","modelInitializer","trainingConfig","err","modelTopologyBytes","weightSpecsBytes","weightDataBytes","load","parse","getItem","modelTopologyType","out","metadataString","weightDataBase64","localStorageRouter","url","Array","isArray","browserLocalStorage","registerSaveRouter","registerLoadRouter","BrowserLocalStorageManager","listModels","suffix","endsWith","removeModel"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/io/local_storage.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { assert } from '../util';\nimport { arrayBufferToBase64String, base64StringToArrayBuffer, getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nconst PATH_SEPARATOR = '/';\nconst PATH_PREFIX = 'tensorflowjs_models';\nconst INFO_SUFFIX = 'info';\nconst MODEL_TOPOLOGY_SUFFIX = 'model_topology';\nconst WEIGHT_SPECS_SUFFIX = 'weight_specs';\nconst WEIGHT_DATA_SUFFIX = 'weight_data';\nconst MODEL_METADATA_SUFFIX = 'model_metadata';\n/**\n * Purge all tensorflow.js-saved model artifacts from local storage.\n *\n * @returns Paths of the models purged.\n */\nexport function purgeLocalStorageArtifacts() {\n    if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' ||\n        typeof window.localStorage === 'undefined') {\n        throw new Error('purgeLocalStorageModels() cannot proceed because local storage is ' +\n            'unavailable in the current environment.');\n    }\n    const LS = window.localStorage;\n    const purgedModelPaths = [];\n    for (let i = 0; i < LS.length; ++i) {\n        const key = LS.key(i);\n        const prefix = PATH_PREFIX + PATH_SEPARATOR;\n        if (key.startsWith(prefix) && key.length > prefix.length) {\n            LS.removeItem(key);\n            const modelName = getModelPathFromKey(key);\n            if (purgedModelPaths.indexOf(modelName) === -1) {\n                purgedModelPaths.push(modelName);\n            }\n        }\n    }\n    return purgedModelPaths;\n}\nfunction getModelKeys(path) {\n    return {\n        info: [PATH_PREFIX, path, INFO_SUFFIX].join(PATH_SEPARATOR),\n        topology: [PATH_PREFIX, path, MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),\n        weightSpecs: [PATH_PREFIX, path, WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),\n        weightData: [PATH_PREFIX, path, WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),\n        modelMetadata: [PATH_PREFIX, path, MODEL_METADATA_SUFFIX].join(PATH_SEPARATOR)\n    };\n}\nfunction removeItems(keys) {\n    for (const key of Object.values(keys)) {\n        window.localStorage.removeItem(key);\n    }\n}\n/**\n * Get model path from a local-storage key.\n *\n * E.g., 'tensorflowjs_models/my/model/1/info' --> 'my/model/1'\n *\n * @param key\n */\nfunction getModelPathFromKey(key) {\n    const items = key.split(PATH_SEPARATOR);\n    if (items.length < 3) {\n        throw new Error(`Invalid key format: ${key}`);\n    }\n    return items.slice(1, items.length - 1).join(PATH_SEPARATOR);\n}\nfunction maybeStripScheme(key) {\n    return key.startsWith(BrowserLocalStorage.URL_SCHEME) ?\n        key.slice(BrowserLocalStorage.URL_SCHEME.length) :\n        key;\n}\n/**\n * IOHandler subclass: Browser Local Storage.\n *\n * See the doc string to `browserLocalStorage` for more details.\n */\nexport class BrowserLocalStorage {\n    constructor(modelPath) {\n        if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' ||\n            typeof window.localStorage === 'undefined') {\n            // TODO(cais): Add more info about what IOHandler subtypes are\n            // available.\n            //   Maybe point to a doc page on the web and/or automatically determine\n            //   the available IOHandlers and print them in the error message.\n            throw new Error('The current environment does not support local storage.');\n        }\n        this.LS = window.localStorage;\n        if (modelPath == null || !modelPath) {\n            throw new Error('For local storage, modelPath must not be null, undefined or empty.');\n        }\n        this.modelPath = modelPath;\n        this.keys = getModelKeys(this.modelPath);\n    }\n    /**\n     * Save model artifacts to browser local storage.\n     *\n     * See the documentation to `browserLocalStorage` for details on the saved\n     * artifacts.\n     *\n     * @param modelArtifacts The model artifacts to be stored.\n     * @returns An instance of SaveResult.\n     */\n    async save(modelArtifacts) {\n        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n            throw new Error('BrowserLocalStorage.save() does not support saving model topology ' +\n                'in binary formats yet.');\n        }\n        else {\n            const topology = JSON.stringify(modelArtifacts.modelTopology);\n            const weightSpecs = JSON.stringify(modelArtifacts.weightSpecs);\n            const modelArtifactsInfo = getModelArtifactsInfoForJSON(modelArtifacts);\n            try {\n                this.LS.setItem(this.keys.info, JSON.stringify(modelArtifactsInfo));\n                this.LS.setItem(this.keys.topology, topology);\n                this.LS.setItem(this.keys.weightSpecs, weightSpecs);\n                this.LS.setItem(this.keys.weightData, arrayBufferToBase64String(modelArtifacts.weightData));\n                // Note that JSON.stringify doesn't write out keys that have undefined\n                // values, so for some keys, we set undefined instead of a null-ish\n                // value.\n                const metadata = {\n                    format: modelArtifacts.format,\n                    generatedBy: modelArtifacts.generatedBy,\n                    convertedBy: modelArtifacts.convertedBy,\n                    signature: modelArtifacts.signature != null ?\n                        modelArtifacts.signature :\n                        undefined,\n                    userDefinedMetadata: modelArtifacts.userDefinedMetadata != null ?\n                        modelArtifacts.userDefinedMetadata :\n                        undefined,\n                    modelInitializer: modelArtifacts.modelInitializer != null ?\n                        modelArtifacts.modelInitializer :\n                        undefined,\n                    trainingConfig: modelArtifacts.trainingConfig != null ?\n                        modelArtifacts.trainingConfig :\n                        undefined\n                };\n                this.LS.setItem(this.keys.modelMetadata, JSON.stringify(metadata));\n                return { modelArtifactsInfo };\n            }\n            catch (err) {\n                // If saving failed, clean up all items saved so far.\n                removeItems(this.keys);\n                throw new Error(`Failed to save model '${this.modelPath}' to local storage: ` +\n                    `size quota being exceeded is a possible cause of this failure: ` +\n                    `modelTopologyBytes=${modelArtifactsInfo.modelTopologyBytes}, ` +\n                    `weightSpecsBytes=${modelArtifactsInfo.weightSpecsBytes}, ` +\n                    `weightDataBytes=${modelArtifactsInfo.weightDataBytes}.`);\n            }\n        }\n    }\n    /**\n     * Load a model from local storage.\n     *\n     * See the documentation to `browserLocalStorage` for details on the saved\n     * artifacts.\n     *\n     * @returns The loaded model (if loading succeeds).\n     */\n    async load() {\n        const info = JSON.parse(this.LS.getItem(this.keys.info));\n        if (info == null) {\n            throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);\n        }\n        if (info.modelTopologyType !== 'JSON') {\n            throw new Error('BrowserLocalStorage does not support loading non-JSON model ' +\n                'topology yet.');\n        }\n        const out = {};\n        // Load topology.\n        const topology = JSON.parse(this.LS.getItem(this.keys.topology));\n        if (topology == null) {\n            throw new Error(`In local storage, the topology of model '${this.modelPath}' ` +\n                `is missing.`);\n        }\n        out.modelTopology = topology;\n        // Load weight specs.\n        const weightSpecs = JSON.parse(this.LS.getItem(this.keys.weightSpecs));\n        if (weightSpecs == null) {\n            throw new Error(`In local storage, the weight specs of model '${this.modelPath}' ` +\n                `are missing.`);\n        }\n        out.weightSpecs = weightSpecs;\n        // Load meta-data fields.\n        const metadataString = this.LS.getItem(this.keys.modelMetadata);\n        if (metadataString != null) {\n            const metadata = JSON.parse(metadataString);\n            out.format = metadata.format;\n            out.generatedBy = metadata.generatedBy;\n            out.convertedBy = metadata.convertedBy;\n            if (metadata.signature != null) {\n                out.signature = metadata.signature;\n            }\n            if (metadata.userDefinedMetadata != null) {\n                out.userDefinedMetadata = metadata.userDefinedMetadata;\n            }\n            if (metadata.modelInitializer != null) {\n                out.modelInitializer = metadata.modelInitializer;\n            }\n            if (metadata.trainingConfig != null) {\n                out.trainingConfig = metadata.trainingConfig;\n            }\n        }\n        // Load weight data.\n        const weightDataBase64 = this.LS.getItem(this.keys.weightData);\n        if (weightDataBase64 == null) {\n            throw new Error(`In local storage, the binary weight values of model ` +\n                `'${this.modelPath}' are missing.`);\n        }\n        out.weightData = base64StringToArrayBuffer(weightDataBase64);\n        return out;\n    }\n}\nBrowserLocalStorage.URL_SCHEME = 'localstorage://';\nexport const localStorageRouter = (url) => {\n    if (!env().getBool('IS_BROWSER')) {\n        return null;\n    }\n    else {\n        if (!Array.isArray(url) && url.startsWith(BrowserLocalStorage.URL_SCHEME)) {\n            return browserLocalStorage(url.slice(BrowserLocalStorage.URL_SCHEME.length));\n        }\n        else {\n            return null;\n        }\n    }\n};\nIORouterRegistry.registerSaveRouter(localStorageRouter);\nIORouterRegistry.registerLoadRouter(localStorageRouter);\n/**\n * Factory function for local storage IOHandler.\n *\n * This `IOHandler` supports both `save` and `load`.\n *\n * For each model's saved artifacts, four items are saved to local storage.\n *   - `${PATH_SEPARATOR}/${modelPath}/info`: Contains meta-info about the\n *     model, such as date saved, type of the topology, size in bytes, etc.\n *   - `${PATH_SEPARATOR}/${modelPath}/topology`: Model topology. For Keras-\n *     style models, this is a stringized JSON.\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_specs`: Weight specs of the\n *     model, can be used to decode the saved binary weight values (see\n *     item below).\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_data`: Concatenated binary\n *     weight values, stored as a base64-encoded string.\n *\n * Saving may throw an `Error` if the total size of the artifacts exceed the\n * browser-specific quota.\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `IOHandler`, which can be used with, e.g.,\n *   `tf.Model.save`.\n */\nexport function browserLocalStorage(modelPath) {\n    return new BrowserLocalStorage(modelPath);\n}\nexport class BrowserLocalStorageManager {\n    constructor() {\n        assert(env().getBool('IS_BROWSER'), () => 'Current environment is not a web browser');\n        assert(typeof window === 'undefined' ||\n            typeof window.localStorage !== 'undefined', () => 'Current browser does not appear to support localStorage');\n        this.LS = window.localStorage;\n    }\n    async listModels() {\n        const out = {};\n        const prefix = PATH_PREFIX + PATH_SEPARATOR;\n        const suffix = PATH_SEPARATOR + INFO_SUFFIX;\n        for (let i = 0; i < this.LS.length; ++i) {\n            const key = this.LS.key(i);\n            if (key.startsWith(prefix) && key.endsWith(suffix)) {\n                const modelPath = getModelPathFromKey(key);\n                out[modelPath] = JSON.parse(this.LS.getItem(key));\n            }\n        }\n        return out;\n    }\n    async removeModel(path) {\n        path = maybeStripScheme(path);\n        const keys = getModelKeys(path);\n        if (this.LS.getItem(keys.info) == null) {\n            throw new Error(`Cannot find model at path '${path}'`);\n        }\n        const info = JSON.parse(this.LS.getItem(keys.info));\n        removeItems(keys);\n        return info;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}