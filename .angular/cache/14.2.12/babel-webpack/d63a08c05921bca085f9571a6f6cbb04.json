{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../../tensor_util_env';\nimport { assert } from '../../util';\nimport { greaterEqual } from '../greater_equal';\nimport { lessEqual } from '../less_equal';\nimport { logicalAnd } from '../logical_and';\nimport { op } from '../operation';\nimport { range } from '../range';\nimport { reshape } from '../reshape';\nimport { scalar } from '../scalar';\nimport { stack } from '../stack';\nimport { sub } from '../sub';\nimport { unstack } from '../unstack';\nimport { where } from '../where';\nimport { zeros } from '../zeros';\n/**\n * Copy a tensor setting everything outside a central band in each innermost\n * matrix to zero.\n *\n * The band part is computed as follows: Assume input has `k` dimensions\n * `[I, J, K, ..., M, N]`, then the output is a tensor with the same shape where\n * `band[i, j, k, ..., m, n] = in_band(m, n) * input[i, j, k, ..., m, n]`.\n * The indicator function\n * `in_band(m, n) = (num_lower < 0 || (m-n) <= num_lower)`\n * `&& (num_upper < 0 || (n-m) <= num_upper)`\n *\n * ```js\n * const x = tf.tensor2d([[ 0,  1,  2, 3],\n *                        [-1,  0,  1, 2],\n *                        [-2, -1,  0, 1],\n *                        [-3, -2, -1, 0]]);\n * let y = tf.linalg.bandPart(x, 1, -1);\n * y.print(); // [[ 0,  1,  2, 3],\n *            //  [-1,  0,  1, 2],\n *            //  [ 0, -1,  0, 1],\n *            //  [ 0, 0 , -1, 0]]\n * let z = tf.linalg.bandPart(x, 2, 1);\n * z.print(); // [[ 0,  1,  0, 0],\n *            //  [-1,  0,  1, 0],\n *            //  [-2, -1,  0, 1],\n *            //  [ 0, -2, -1, 0]]\n * ```\n *\n * @param x Rank `k` tensor\n * @param numLower Number of subdiagonals to keep.\n *   If negative, keep entire lower triangle.\n * @param numUpper Number of subdiagonals to keep.\n *   If negative, keep entire upper triangle.\n * @returns Rank `k` tensor of the same shape as input.\n *   The extracted banded tensor.\n *\n * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}\n */\n\nfunction bandPart_(a, numLower, numUpper) {\n  assert(numLower % 1 === 0, () => `bandPart(): numLower must be an integer, got ${numLower}.`);\n  assert(numUpper % 1 === 0, () => `bandPart(): numUpper must be an integer, got ${numUpper}.`);\n  const $a = convertToTensor(a, 'a', 'bandPart');\n  assert($a.rank >= 2, () => `bandPart(): Rank must be at least 2, got ${$a.rank}.`);\n  const shape = $a.shape;\n  const [M, N] = $a.shape.slice(-2);\n\n  if (!(numLower <= M)) {\n    throw new Error(`bandPart(): numLower (${numLower})` + ` must not be greater than the number of rows (${M}).`);\n  }\n\n  if (!(numUpper <= N)) {\n    throw new Error(`bandPart(): numUpper (${numUpper})` + ` must not be greater than the number of columns (${N}).`);\n  }\n\n  if (numLower < 0) {\n    numLower = M;\n  }\n\n  if (numUpper < 0) {\n    numUpper = N;\n  }\n\n  const i = reshape(range(0, M, 1, 'int32'), [-1, 1]);\n  const j = range(0, N, 1, 'int32');\n  const ij = sub(i, j);\n  const inBand = logicalAnd(lessEqual(ij, scalar(+numLower, 'int32')), greaterEqual(ij, scalar(-numUpper, 'int32')));\n  const zero = zeros([M, N], $a.dtype);\n  return reshape(stack(unstack(reshape($a, [-1, M, N])).map(mat => where(inBand, mat, zero))), shape);\n}\n\nexport const bandPart = op({\n  bandPart_\n});","map":{"version":3,"names":["convertToTensor","assert","greaterEqual","lessEqual","logicalAnd","op","range","reshape","scalar","stack","sub","unstack","where","zeros","bandPart_","a","numLower","numUpper","$a","rank","shape","M","N","slice","Error","i","j","ij","inBand","zero","dtype","map","mat","bandPart"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/linalg/band_part.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../../tensor_util_env';\nimport { assert } from '../../util';\nimport { greaterEqual } from '../greater_equal';\nimport { lessEqual } from '../less_equal';\nimport { logicalAnd } from '../logical_and';\nimport { op } from '../operation';\nimport { range } from '../range';\nimport { reshape } from '../reshape';\nimport { scalar } from '../scalar';\nimport { stack } from '../stack';\nimport { sub } from '../sub';\nimport { unstack } from '../unstack';\nimport { where } from '../where';\nimport { zeros } from '../zeros';\n/**\n * Copy a tensor setting everything outside a central band in each innermost\n * matrix to zero.\n *\n * The band part is computed as follows: Assume input has `k` dimensions\n * `[I, J, K, ..., M, N]`, then the output is a tensor with the same shape where\n * `band[i, j, k, ..., m, n] = in_band(m, n) * input[i, j, k, ..., m, n]`.\n * The indicator function\n * `in_band(m, n) = (num_lower < 0 || (m-n) <= num_lower)`\n * `&& (num_upper < 0 || (n-m) <= num_upper)`\n *\n * ```js\n * const x = tf.tensor2d([[ 0,  1,  2, 3],\n *                        [-1,  0,  1, 2],\n *                        [-2, -1,  0, 1],\n *                        [-3, -2, -1, 0]]);\n * let y = tf.linalg.bandPart(x, 1, -1);\n * y.print(); // [[ 0,  1,  2, 3],\n *            //  [-1,  0,  1, 2],\n *            //  [ 0, -1,  0, 1],\n *            //  [ 0, 0 , -1, 0]]\n * let z = tf.linalg.bandPart(x, 2, 1);\n * z.print(); // [[ 0,  1,  0, 0],\n *            //  [-1,  0,  1, 0],\n *            //  [-2, -1,  0, 1],\n *            //  [ 0, -2, -1, 0]]\n * ```\n *\n * @param x Rank `k` tensor\n * @param numLower Number of subdiagonals to keep.\n *   If negative, keep entire lower triangle.\n * @param numUpper Number of subdiagonals to keep.\n *   If negative, keep entire upper triangle.\n * @returns Rank `k` tensor of the same shape as input.\n *   The extracted banded tensor.\n *\n * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}\n */\nfunction bandPart_(a, numLower, numUpper) {\n    assert(numLower % 1 === 0, () => `bandPart(): numLower must be an integer, got ${numLower}.`);\n    assert(numUpper % 1 === 0, () => `bandPart(): numUpper must be an integer, got ${numUpper}.`);\n    const $a = convertToTensor(a, 'a', 'bandPart');\n    assert($a.rank >= 2, () => `bandPart(): Rank must be at least 2, got ${$a.rank}.`);\n    const shape = $a.shape;\n    const [M, N] = $a.shape.slice(-2);\n    if (!(numLower <= M)) {\n        throw new Error(`bandPart(): numLower (${numLower})` +\n            ` must not be greater than the number of rows (${M}).`);\n    }\n    if (!(numUpper <= N)) {\n        throw new Error(`bandPart(): numUpper (${numUpper})` +\n            ` must not be greater than the number of columns (${N}).`);\n    }\n    if (numLower < 0) {\n        numLower = M;\n    }\n    if (numUpper < 0) {\n        numUpper = N;\n    }\n    const i = reshape(range(0, M, 1, 'int32'), [-1, 1]);\n    const j = range(0, N, 1, 'int32');\n    const ij = sub(i, j);\n    const inBand = logicalAnd(lessEqual(ij, scalar(+numLower, 'int32')), greaterEqual(ij, scalar(-numUpper, 'int32')));\n    const zero = zeros([M, N], $a.dtype);\n    return reshape(stack(unstack(reshape($a, [-1, M, N]))\n        .map(mat => where(inBand, mat, zero))), shape);\n}\nexport const bandPart = op({ bandPart_ });\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}