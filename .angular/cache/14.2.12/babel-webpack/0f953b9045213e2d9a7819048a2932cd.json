{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from '../util';\n/**\n * Returns true if the axis specifies the inner most dimensions of the\n * array.\n */\n\nexport function axesAreInnerMostDims(axes, rank) {\n  for (let i = 0; i < axes.length; ++i) {\n    if (axes[axes.length - i - 1] !== rank - 1 - i) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function combineLocations(outputLoc, reduceLoc, axes) {\n  const rank = outputLoc.length + reduceLoc.length;\n  const loc = [];\n  let outIdx = 0;\n  let reduceIdx = 0;\n\n  for (let dim = 0; dim < rank; dim++) {\n    if (axes.indexOf(dim) === -1) {\n      loc.push(outputLoc[outIdx++]);\n    } else {\n      loc.push(reduceLoc[reduceIdx++]);\n    }\n  }\n\n  return loc;\n}\nexport function computeOutAndReduceShapes(aShape, axes) {\n  const outShape = [];\n  const rank = aShape.length;\n\n  for (let dim = 0; dim < rank; dim++) {\n    if (axes.indexOf(dim) === -1) {\n      outShape.push(aShape[dim]);\n    }\n  }\n\n  const reduceShape = axes.map(dim => aShape[dim]);\n  return [outShape, reduceShape];\n}\nexport function expandShapeToKeepDim(shape, axes) {\n  const reduceSubShape = axes.map(x => 1);\n  return combineLocations(shape, reduceSubShape, axes);\n}\nexport function assertAxesAreInnerMostDims(msg, axes, rank) {\n  util.assert(axesAreInnerMostDims(axes, rank), () => `${msg} supports only inner-most axes for now. ` + `Got axes ${axes} and rank-${rank} input.`);\n}\n/**\n * Returns the axes permutation to be used with `tf.transpose`, if such\n * permutation is necessary. Otherwise it returns null. This method is used by\n * operations that operate only on inner-most axes.\n */\n\nexport function getAxesPermutation(axes, rank) {\n  if (axesAreInnerMostDims(axes, rank)) {\n    return null;\n  }\n\n  const result = [];\n\n  for (let i = 0; i < rank; ++i) {\n    if (axes.indexOf(i) === -1) {\n      result.push(i);\n    }\n  }\n\n  axes.forEach(axis => result.push(axis));\n  return result;\n}\n/** Returns the axes permutation that undoes the original permutation. */\n\nexport function getUndoAxesPermutation(axes) {\n  return axes.map((axis, i) => [i, axis]).sort((a, b) => a[1] - b[1]).map(x => x[0]);\n}\nexport function getInnerMostAxes(numAxes, rank) {\n  const res = [];\n\n  for (let i = rank - numAxes; i < rank; ++i) {\n    res.push(i);\n  }\n\n  return res;\n}","map":{"version":3,"names":["util","axesAreInnerMostDims","axes","rank","i","length","combineLocations","outputLoc","reduceLoc","loc","outIdx","reduceIdx","dim","indexOf","push","computeOutAndReduceShapes","aShape","outShape","reduceShape","map","expandShapeToKeepDim","shape","reduceSubShape","x","assertAxesAreInnerMostDims","msg","assert","getAxesPermutation","result","forEach","axis","getUndoAxesPermutation","sort","a","b","getInnerMostAxes","numAxes","res"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from '../util';\n/**\n * Returns true if the axis specifies the inner most dimensions of the\n * array.\n */\nexport function axesAreInnerMostDims(axes, rank) {\n    for (let i = 0; i < axes.length; ++i) {\n        if (axes[axes.length - i - 1] !== rank - 1 - i) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function combineLocations(outputLoc, reduceLoc, axes) {\n    const rank = outputLoc.length + reduceLoc.length;\n    const loc = [];\n    let outIdx = 0;\n    let reduceIdx = 0;\n    for (let dim = 0; dim < rank; dim++) {\n        if (axes.indexOf(dim) === -1) {\n            loc.push(outputLoc[outIdx++]);\n        }\n        else {\n            loc.push(reduceLoc[reduceIdx++]);\n        }\n    }\n    return loc;\n}\nexport function computeOutAndReduceShapes(aShape, axes) {\n    const outShape = [];\n    const rank = aShape.length;\n    for (let dim = 0; dim < rank; dim++) {\n        if (axes.indexOf(dim) === -1) {\n            outShape.push(aShape[dim]);\n        }\n    }\n    const reduceShape = axes.map(dim => aShape[dim]);\n    return [outShape, reduceShape];\n}\nexport function expandShapeToKeepDim(shape, axes) {\n    const reduceSubShape = axes.map(x => 1);\n    return combineLocations(shape, reduceSubShape, axes);\n}\nexport function assertAxesAreInnerMostDims(msg, axes, rank) {\n    util.assert(axesAreInnerMostDims(axes, rank), () => `${msg} supports only inner-most axes for now. ` +\n        `Got axes ${axes} and rank-${rank} input.`);\n}\n/**\n * Returns the axes permutation to be used with `tf.transpose`, if such\n * permutation is necessary. Otherwise it returns null. This method is used by\n * operations that operate only on inner-most axes.\n */\nexport function getAxesPermutation(axes, rank) {\n    if (axesAreInnerMostDims(axes, rank)) {\n        return null;\n    }\n    const result = [];\n    for (let i = 0; i < rank; ++i) {\n        if (axes.indexOf(i) === -1) {\n            result.push(i);\n        }\n    }\n    axes.forEach(axis => result.push(axis));\n    return result;\n}\n/** Returns the axes permutation that undoes the original permutation. */\nexport function getUndoAxesPermutation(axes) {\n    return axes.map((axis, i) => [i, axis])\n        .sort((a, b) => a[1] - b[1])\n        .map(x => x[0]);\n}\nexport function getInnerMostAxes(numAxes, rank) {\n    const res = [];\n    for (let i = rank - numAxes; i < rank; ++i) {\n        res.push(i);\n    }\n    return res;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}