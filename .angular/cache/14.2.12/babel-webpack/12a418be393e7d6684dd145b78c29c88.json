{"ast":null,"code":"import { assert } from '../util';\n/**\n * Prepare the split size array. When the input is a number, the axis is evenly\n * divided among the split size. When the input contains the negative value, the\n * rest of the axis is allocated toward that.\n */\n\nexport function prepareSplitSize(x, numOrSizeSplits, axis = 0) {\n  let splitSizes = [];\n\n  if (typeof numOrSizeSplits === 'number') {\n    assert(x.shape[axis] % numOrSizeSplits === 0, () => 'Number of splits must evenly divide the axis.');\n    splitSizes = new Array(numOrSizeSplits).fill(x.shape[axis] / numOrSizeSplits);\n  } else {\n    const numOfNegs = numOrSizeSplits.reduce((count, value) => {\n      if (value === -1) {\n        count += 1;\n      }\n\n      return count;\n    }, 0);\n    assert(numOfNegs <= 1, () => 'There should be only one negative value in split array.');\n    const negIndex = numOrSizeSplits.indexOf(-1); // Allow the number of split array to be -1, which indicates the rest\n    // of dimension is allocated to that split.\n\n    if (negIndex !== -1) {\n      const total = numOrSizeSplits.reduce((a, b) => b > 0 ? a + b : a);\n      numOrSizeSplits[negIndex] = x.shape[axis] - total;\n    }\n\n    assert(x.shape[axis] === numOrSizeSplits.reduce((a, b) => a + b), () => 'The sum of sizes must match the size of the axis dimension.');\n    splitSizes = numOrSizeSplits;\n  }\n\n  return splitSizes;\n}","map":{"version":3,"names":["assert","prepareSplitSize","x","numOrSizeSplits","axis","splitSizes","shape","Array","fill","numOfNegs","reduce","count","value","negIndex","indexOf","total","a","b"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/split_util.js"],"sourcesContent":["import { assert } from '../util';\n/**\n * Prepare the split size array. When the input is a number, the axis is evenly\n * divided among the split size. When the input contains the negative value, the\n * rest of the axis is allocated toward that.\n */\nexport function prepareSplitSize(x, numOrSizeSplits, axis = 0) {\n    let splitSizes = [];\n    if (typeof (numOrSizeSplits) === 'number') {\n        assert(x.shape[axis] % numOrSizeSplits === 0, () => 'Number of splits must evenly divide the axis.');\n        splitSizes =\n            new Array(numOrSizeSplits).fill(x.shape[axis] / numOrSizeSplits);\n    }\n    else {\n        const numOfNegs = numOrSizeSplits.reduce((count, value) => {\n            if (value === -1) {\n                count += 1;\n            }\n            return count;\n        }, 0);\n        assert(numOfNegs <= 1, () => 'There should be only one negative value in split array.');\n        const negIndex = numOrSizeSplits.indexOf(-1);\n        // Allow the number of split array to be -1, which indicates the rest\n        // of dimension is allocated to that split.\n        if (negIndex !== -1) {\n            const total = numOrSizeSplits.reduce((a, b) => b > 0 ? a + b : a);\n            numOrSizeSplits[negIndex] = x.shape[axis] - total;\n        }\n        assert(x.shape[axis] === numOrSizeSplits.reduce((a, b) => a + b), () => 'The sum of sizes must match the size of the axis dimension.');\n        splitSizes = numOrSizeSplits;\n    }\n    return splitSizes;\n}\n"],"mappings":"AAAA,SAASA,MAAT,QAAuB,SAAvB;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,gBAAT,CAA0BC,CAA1B,EAA6BC,eAA7B,EAA8CC,IAAI,GAAG,CAArD,EAAwD;EAC3D,IAAIC,UAAU,GAAG,EAAjB;;EACA,IAAI,OAAQF,eAAR,KAA6B,QAAjC,EAA2C;IACvCH,MAAM,CAACE,CAAC,CAACI,KAAF,CAAQF,IAAR,IAAgBD,eAAhB,KAAoC,CAArC,EAAwC,MAAM,+CAA9C,CAAN;IACAE,UAAU,GACN,IAAIE,KAAJ,CAAUJ,eAAV,EAA2BK,IAA3B,CAAgCN,CAAC,CAACI,KAAF,CAAQF,IAAR,IAAgBD,eAAhD,CADJ;EAEH,CAJD,MAKK;IACD,MAAMM,SAAS,GAAGN,eAAe,CAACO,MAAhB,CAAuB,CAACC,KAAD,EAAQC,KAAR,KAAkB;MACvD,IAAIA,KAAK,KAAK,CAAC,CAAf,EAAkB;QACdD,KAAK,IAAI,CAAT;MACH;;MACD,OAAOA,KAAP;IACH,CALiB,EAKf,CALe,CAAlB;IAMAX,MAAM,CAACS,SAAS,IAAI,CAAd,EAAiB,MAAM,yDAAvB,CAAN;IACA,MAAMI,QAAQ,GAAGV,eAAe,CAACW,OAAhB,CAAwB,CAAC,CAAzB,CAAjB,CARC,CASD;IACA;;IACA,IAAID,QAAQ,KAAK,CAAC,CAAlB,EAAqB;MACjB,MAAME,KAAK,GAAGZ,eAAe,CAACO,MAAhB,CAAuB,CAACM,CAAD,EAAIC,CAAJ,KAAUA,CAAC,GAAG,CAAJ,GAAQD,CAAC,GAAGC,CAAZ,GAAgBD,CAAjD,CAAd;MACAb,eAAe,CAACU,QAAD,CAAf,GAA4BX,CAAC,CAACI,KAAF,CAAQF,IAAR,IAAgBW,KAA5C;IACH;;IACDf,MAAM,CAACE,CAAC,CAACI,KAAF,CAAQF,IAAR,MAAkBD,eAAe,CAACO,MAAhB,CAAuB,CAACM,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAArC,CAAnB,EAA4D,MAAM,6DAAlE,CAAN;IACAZ,UAAU,GAAGF,eAAb;EACH;;EACD,OAAOE,UAAP;AACH"},"metadata":{},"sourceType":"module"}