{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2DBackpropInput, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv2DBackpropInput(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    filter\n  } = inputs;\n  const {\n    inputShape,\n    strides,\n    pad,\n    dataFormat,\n    dimRoundingMode\n  } = attrs;\n  assertNotComplex([dy, filter], 'conv2dBackpropInput');\n  const filterStrides = util.computeStrides(filter.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n  let $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(inputShape, filter.shape, strides, 1\n  /* dilations */\n  , pad, dimRoundingMode, false, $dataFormat);\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const dyValues = backend.data.get(dy.dataId).values;\n  const fltValues = backend.data.get(filter.dataId).values;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  $dataFormat = convInfo.dataFormat;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n  const isChannelsLast = $dataFormat === 'channelsLast';\n  const xBatchStride = dx.strides[0];\n  const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n  const xColStride = isChannelsLast ? dx.strides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n  const yBatchStride = dyStrides[0];\n  const yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];\n  const yColStride = isChannelsLast ? dyStrides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : dyStrides[1];\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n          let dotProd = 0;\n\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset = yBatchStride * b + yRowStride * yR + yColStride * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) + fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let d2 = 0; d2 < outChannels; ++d2) {\n                const pixel = dyValues[dyOffset + yChannelStride * d2];\n                const weight = fltValues[fltOffset + d2];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n\n          const dxOffset = xBatchStride * b + xRowStride * xR + xColStride * xC + xChannelStride * d1;\n          dxValues[dxOffset] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const conv2DBackpropInputConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropInput\n};","map":{"version":3,"names":["backend_util","Conv2DBackpropInput","TensorBuffer","util","assertNotComplex","conv2DBackpropInput","args","inputs","backend","attrs","dy","filter","inputShape","strides","pad","dataFormat","dimRoundingMode","filterStrides","computeStrides","shape","dyStrides","$dataFormat","convertConv2DDataFormat","convInfo","computeConv2DInfo","dx","inShape","dxValues","values","dyValues","data","get","dataId","fltValues","fltS0","fltS1","fltS2","batchSize","filterHeight","filterWidth","inChannels","inHeight","inWidth","outChannels","outHeight","outWidth","strideHeight","strideWidth","topPad","padInfo","top","leftPad","left","isChannelsLast","xBatchStride","xRowStride","xColStride","xChannelStride","yBatchStride","yRowStride","yColStride","yChannelStride","b","d1","xR","xRCorner","xRMin","Math","max","ceil","yRMax","min","xC","xCCorner","xCMin","yCMax","dotProd","yR","wR","yC","wC","dyOffset","fltOffset","d2","pixel","weight","dxOffset","makeTensorInfo","dtype","conv2DBackpropInputConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Conv2DBackpropInput.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2DBackpropInput, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv2DBackpropInput(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, filter } = inputs;\n    const { inputShape, strides, pad, dataFormat, dimRoundingMode } = attrs;\n    assertNotComplex([dy, filter], 'conv2dBackpropInput');\n    const filterStrides = util.computeStrides(filter.shape);\n    const dyStrides = util.computeStrides(dy.shape);\n    let $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n    const convInfo = backend_util.computeConv2DInfo(inputShape, filter.shape, strides, 1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n    const dx = new TensorBuffer(convInfo.inShape, 'float32');\n    const dxValues = dx.values;\n    const dyValues = backend.data.get(dy.dataId).values;\n    const fltValues = backend.data.get(filter.dataId).values;\n    const [fltS0, fltS1, fltS2] = filterStrides;\n    const { batchSize, filterHeight, filterWidth, inChannels, inHeight, inWidth, outChannels, outHeight, outWidth, strideHeight, strideWidth } = convInfo;\n    $dataFormat = convInfo.dataFormat;\n    const topPad = filterHeight - 1 - convInfo.padInfo.top;\n    const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n    const isChannelsLast = $dataFormat === 'channelsLast';\n    const xBatchStride = dx.strides[0];\n    const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n    const xColStride = isChannelsLast ? dx.strides[2] : 1;\n    const xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n    const yBatchStride = dyStrides[0];\n    const yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];\n    const yColStride = isChannelsLast ? dyStrides[2] : 1;\n    const yChannelStride = isChannelsLast ? 1 : dyStrides[1];\n    for (let b = 0; b < batchSize; ++b) {\n        for (let d1 = 0; d1 < inChannels; ++d1) {\n            for (let xR = 0; xR < inHeight; ++xR) {\n                const xRCorner = xR - topPad;\n                const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n                const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n                for (let xC = 0; xC < inWidth; ++xC) {\n                    const xCCorner = xC - leftPad;\n                    const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n                    const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n                    let dotProd = 0;\n                    for (let yR = xRMin; yR < yRMax; ++yR) {\n                        const wR = yR * strideHeight - xRCorner;\n                        for (let yC = xCMin; yC < yCMax; ++yC) {\n                            const wC = yC * strideWidth - xCCorner;\n                            const dyOffset = yBatchStride * b + yRowStride * yR + yColStride * yC;\n                            const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                                fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n                            for (let d2 = 0; d2 < outChannels; ++d2) {\n                                const pixel = dyValues[dyOffset + yChannelStride * d2];\n                                const weight = fltValues[fltOffset + d2];\n                                dotProd += pixel * weight;\n                            }\n                        }\n                    }\n                    const dxOffset = xBatchStride * b + xRowStride * xR +\n                        xColStride * xC + xChannelStride * d1;\n                    dxValues[dxOffset] = dotProd;\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const conv2DBackpropInputConfig = {\n    kernelName: Conv2DBackpropInput,\n    backendName: 'cpu',\n    kernelFunc: conv2DBackpropInput\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}