{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { assert } from '../../util';\nimport { div } from '../div';\nimport { mul } from '../mul';\nimport { norm } from '../norm';\nimport { op } from '../operation';\nimport { split } from '../split';\nimport { squeeze } from '../squeeze';\nimport { stack } from '../stack';\nimport { sub } from '../sub';\nimport { sum } from '../sum';\n/**\n * Gram-Schmidt orthogonalization.\n *\n * ```js\n * const x = tf.tensor2d([[1, 2], [3, 4]]);\n * let y = tf.linalg.gramSchmidt(x);\n * y.print();\n * console.log('Orthogonalized:');\n * y.dot(y.transpose()).print();  // should be nearly the identity matrix.\n * console.log('First row direction maintained:');\n * const data = await y.array();\n * console.log(data[0][1] / data[0][0]);  // should be nearly 2.\n * ```\n *\n * @param xs The vectors to be orthogonalized, in one of the two following\n *   formats:\n *   - An Array of `tf.Tensor1D`.\n *   - A `tf.Tensor2D`, i.e., a matrix, in which case the vectors are the rows\n *     of `xs`.\n *   In each case, all the vectors must have the same length and the length\n *   must be greater than or equal to the number of vectors.\n * @returns The orthogonalized and normalized vectors or matrix.\n *   Orthogonalization means that the vectors or the rows of the matrix\n *   are orthogonal (zero inner products). Normalization means that each\n *   vector or each row of the matrix has an L2 norm that equals `1`.\n *\n * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}\n */\n\nfunction gramSchmidt_(xs) {\n  let inputIsTensor2D;\n\n  if (Array.isArray(xs)) {\n    inputIsTensor2D = false;\n    assert(xs != null && xs.length > 0, () => 'Gram-Schmidt process: input must not be null, undefined, or ' + 'empty');\n    const dim = xs[0].shape[0];\n\n    for (let i = 1; i < xs.length; ++i) {\n      assert(xs[i].shape[0] === dim, () => 'Gram-Schmidt: Non-unique lengths found in the input vectors: ' + `(${xs[i].shape[0]} vs. ${dim})`);\n    }\n  } else {\n    inputIsTensor2D = true;\n    xs = split(xs, xs.shape[0], 0).map(x => squeeze(x, [0]));\n  }\n\n  assert(xs.length <= xs[0].shape[0], () => `Gram-Schmidt: Number of vectors (${xs.length}) exceeds ` + `number of dimensions (${xs[0].shape[0]}).`);\n  const ys = [];\n  const xs1d = xs;\n\n  for (let i = 0; i < xs.length; ++i) {\n    ys.push(ENGINE.tidy(() => {\n      let x = xs1d[i];\n\n      if (i > 0) {\n        for (let j = 0; j < i; ++j) {\n          const proj = mul(sum(mul(ys[j], x)), ys[j]);\n          x = sub(x, proj);\n        }\n      }\n\n      return div(x, norm(x, 'euclidean'));\n    }));\n  }\n\n  if (inputIsTensor2D) {\n    return stack(ys, 0);\n  } else {\n    return ys;\n  }\n}\n\nexport const gramSchmidt = op({\n  gramSchmidt_\n});","map":{"version":3,"names":["ENGINE","assert","div","mul","norm","op","split","squeeze","stack","sub","sum","gramSchmidt_","xs","inputIsTensor2D","Array","isArray","length","dim","shape","i","map","x","ys","xs1d","push","tidy","j","proj","gramSchmidt"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/linalg/gram_schmidt.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { assert } from '../../util';\nimport { div } from '../div';\nimport { mul } from '../mul';\nimport { norm } from '../norm';\nimport { op } from '../operation';\nimport { split } from '../split';\nimport { squeeze } from '../squeeze';\nimport { stack } from '../stack';\nimport { sub } from '../sub';\nimport { sum } from '../sum';\n/**\n * Gram-Schmidt orthogonalization.\n *\n * ```js\n * const x = tf.tensor2d([[1, 2], [3, 4]]);\n * let y = tf.linalg.gramSchmidt(x);\n * y.print();\n * console.log('Orthogonalized:');\n * y.dot(y.transpose()).print();  // should be nearly the identity matrix.\n * console.log('First row direction maintained:');\n * const data = await y.array();\n * console.log(data[0][1] / data[0][0]);  // should be nearly 2.\n * ```\n *\n * @param xs The vectors to be orthogonalized, in one of the two following\n *   formats:\n *   - An Array of `tf.Tensor1D`.\n *   - A `tf.Tensor2D`, i.e., a matrix, in which case the vectors are the rows\n *     of `xs`.\n *   In each case, all the vectors must have the same length and the length\n *   must be greater than or equal to the number of vectors.\n * @returns The orthogonalized and normalized vectors or matrix.\n *   Orthogonalization means that the vectors or the rows of the matrix\n *   are orthogonal (zero inner products). Normalization means that each\n *   vector or each row of the matrix has an L2 norm that equals `1`.\n *\n * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}\n */\nfunction gramSchmidt_(xs) {\n    let inputIsTensor2D;\n    if (Array.isArray(xs)) {\n        inputIsTensor2D = false;\n        assert(xs != null && xs.length > 0, () => 'Gram-Schmidt process: input must not be null, undefined, or ' +\n            'empty');\n        const dim = xs[0].shape[0];\n        for (let i = 1; i < xs.length; ++i) {\n            assert(xs[i].shape[0] === dim, () => 'Gram-Schmidt: Non-unique lengths found in the input vectors: ' +\n                `(${xs[i].shape[0]} vs. ${dim})`);\n        }\n    }\n    else {\n        inputIsTensor2D = true;\n        xs = split(xs, xs.shape[0], 0).map(x => squeeze(x, [0]));\n    }\n    assert(xs.length <= xs[0].shape[0], () => `Gram-Schmidt: Number of vectors (${xs.length}) exceeds ` +\n        `number of dimensions (${xs[0].shape[0]}).`);\n    const ys = [];\n    const xs1d = xs;\n    for (let i = 0; i < xs.length; ++i) {\n        ys.push(ENGINE.tidy(() => {\n            let x = xs1d[i];\n            if (i > 0) {\n                for (let j = 0; j < i; ++j) {\n                    const proj = mul(sum(mul(ys[j], x)), ys[j]);\n                    x = sub(x, proj);\n                }\n            }\n            return div(x, norm(x, 'euclidean'));\n        }));\n    }\n    if (inputIsTensor2D) {\n        return stack(ys, 0);\n    }\n    else {\n        return ys;\n    }\n}\nexport const gramSchmidt = op({ gramSchmidt_ });\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}