{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ComplexAbs } from '@tensorflow/tfjs-core';\nimport { ComplexAbsProgram } from '../complex_abs_gpu'; // Returns a TensorInfo with the complex shape and the dataId of the\n// underlying part. We need to do this because a reshaped complex tensor is\n// not reflected in its parts.\n\nfunction makeComplexComponentTensorInfo(complexTensor, complexPart) {\n  return {\n    dataId: complexPart.dataId,\n    dtype: complexPart.dtype,\n    shape: complexTensor.shape\n  };\n}\n\nexport function complexAbs(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x\n  } = inputs;\n  const xData = backend.texData.get(x.dataId);\n  const program = new ComplexAbsProgram(x.shape);\n  const programInputs = [makeComplexComponentTensorInfo(x, xData.complexTensorInfos.real), makeComplexComponentTensorInfo(x, xData.complexTensorInfos.imag)];\n  return backend.runWebGLProgram(program, programInputs, programInputs[0].dtype);\n}\nexport const complexAbsConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'webgl',\n  kernelFunc: complexAbs\n};","map":{"version":3,"names":["ComplexAbs","ComplexAbsProgram","makeComplexComponentTensorInfo","complexTensor","complexPart","dataId","dtype","shape","complexAbs","args","inputs","backend","x","xData","texData","get","program","programInputs","complexTensorInfos","real","imag","runWebGLProgram","complexAbsConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ComplexAbs.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ComplexAbs } from '@tensorflow/tfjs-core';\nimport { ComplexAbsProgram } from '../complex_abs_gpu';\n// Returns a TensorInfo with the complex shape and the dataId of the\n// underlying part. We need to do this because a reshaped complex tensor is\n// not reflected in its parts.\nfunction makeComplexComponentTensorInfo(complexTensor, complexPart) {\n    return {\n        dataId: complexPart.dataId,\n        dtype: complexPart.dtype,\n        shape: complexTensor.shape\n    };\n}\nexport function complexAbs(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    const xData = backend.texData.get(x.dataId);\n    const program = new ComplexAbsProgram(x.shape);\n    const programInputs = [\n        makeComplexComponentTensorInfo(x, xData.complexTensorInfos.real),\n        makeComplexComponentTensorInfo(x, xData.complexTensorInfos.imag),\n    ];\n    return backend.runWebGLProgram(program, programInputs, programInputs[0].dtype);\n}\nexport const complexAbsConfig = {\n    kernelName: ComplexAbs,\n    backendName: 'webgl',\n    kernelFunc: complexAbs\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAT,QAA2B,uBAA3B;AACA,SAASC,iBAAT,QAAkC,oBAAlC,C,CACA;AACA;AACA;;AACA,SAASC,8BAAT,CAAwCC,aAAxC,EAAuDC,WAAvD,EAAoE;EAChE,OAAO;IACHC,MAAM,EAAED,WAAW,CAACC,MADjB;IAEHC,KAAK,EAAEF,WAAW,CAACE,KAFhB;IAGHC,KAAK,EAAEJ,aAAa,CAACI;EAHlB,CAAP;AAKH;;AACD,OAAO,SAASC,UAAT,CAAoBC,IAApB,EAA0B;EAC7B,MAAM;IAAEC,MAAF;IAAUC;EAAV,IAAsBF,IAA5B;EACA,MAAM;IAAEG;EAAF,IAAQF,MAAd;EACA,MAAMG,KAAK,GAAGF,OAAO,CAACG,OAAR,CAAgBC,GAAhB,CAAoBH,CAAC,CAACP,MAAtB,CAAd;EACA,MAAMW,OAAO,GAAG,IAAIf,iBAAJ,CAAsBW,CAAC,CAACL,KAAxB,CAAhB;EACA,MAAMU,aAAa,GAAG,CAClBf,8BAA8B,CAACU,CAAD,EAAIC,KAAK,CAACK,kBAAN,CAAyBC,IAA7B,CADZ,EAElBjB,8BAA8B,CAACU,CAAD,EAAIC,KAAK,CAACK,kBAAN,CAAyBE,IAA7B,CAFZ,CAAtB;EAIA,OAAOT,OAAO,CAACU,eAAR,CAAwBL,OAAxB,EAAiCC,aAAjC,EAAgDA,aAAa,CAAC,CAAD,CAAb,CAAiBX,KAAjE,CAAP;AACH;AACD,OAAO,MAAMgB,gBAAgB,GAAG;EAC5BC,UAAU,EAAEvB,UADgB;EAE5BwB,WAAW,EAAE,OAFe;EAG5BC,UAAU,EAAEjB;AAHgB,CAAzB"},"metadata":{},"sourceType":"module"}