{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPool, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { pool } from '../utils/pool_utils';\nimport { identity } from './Identity';\nexport function maxPool(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  const dilations = 1;\n  util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);\n  const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n  let res;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 && util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({\n      inputs: {\n        x\n      },\n      backend\n    });\n  } else {\n    const xValues = backend.data.get(x.dataId).values;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'max');\n    res = backend.makeTensorInfo(convInfo.outShape, x.dtype, buffer.values);\n  }\n\n  return res;\n}\nexport const maxPoolConfig = {\n  kernelName: MaxPool,\n  backendName: 'cpu',\n  kernelFunc: maxPool\n};","map":{"version":3,"names":["backend_util","MaxPool","util","assertNotComplex","pool","identity","maxPool","args","inputs","backend","attrs","x","filterSize","strides","pad","dimRoundingMode","dilations","assert","eitherStridesOrDilationsAreOne","convInfo","computePool2DInfo","shape","res","filterWidth","filterHeight","arraysEqual","inShape","outShape","xValues","data","get","dataId","values","computeStrides","buffer","dtype","makeTensorInfo","maxPoolConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/MaxPool.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPool, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { pool } from '../utils/pool_utils';\nimport { identity } from './Identity';\nexport function maxPool(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    assertNotComplex(x, 'maxPool');\n    const { filterSize, strides, pad, dimRoundingMode } = attrs;\n    const dilations = 1;\n    util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n        `Got strides ${strides} and dilations '${dilations}'`);\n    const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n    let res;\n    if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n        util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n        res = identity({ inputs: { x }, backend });\n    }\n    else {\n        const xValues = backend.data.get(x.dataId).values;\n        const strides = util.computeStrides(x.shape);\n        const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'max');\n        res = backend.makeTensorInfo(convInfo.outShape, x.dtype, buffer.values);\n    }\n    return res;\n}\nexport const maxPoolConfig = {\n    kernelName: MaxPool,\n    backendName: 'cpu',\n    kernelFunc: maxPool\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,EAAuBC,OAAvB,EAAgCC,IAAhC,QAA4C,uBAA5C;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,SAASC,IAAT,QAAqB,qBAArB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,OAAO,SAASC,OAAT,CAAiBC,IAAjB,EAAuB;EAC1B,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BH,IAAnC;EACA,MAAM;IAAEI;EAAF,IAAQH,MAAd;EACAL,gBAAgB,CAACQ,CAAD,EAAI,SAAJ,CAAhB;EACA,MAAM;IAAEC,UAAF;IAAcC,OAAd;IAAuBC,GAAvB;IAA4BC;EAA5B,IAAgDL,KAAtD;EACA,MAAMM,SAAS,GAAG,CAAlB;EACAd,IAAI,CAACe,MAAL,CAAYjB,YAAY,CAACkB,8BAAb,CAA4CL,OAA5C,EAAqDG,SAArD,CAAZ,EAA6E,MAAM,8DAC9E,eAAcH,OAAQ,mBAAkBG,SAAU,GADvD;EAEA,MAAMG,QAAQ,GAAGnB,YAAY,CAACoB,iBAAb,CAA+BT,CAAC,CAACU,KAAjC,EAAwCT,UAAxC,EAAoDC,OAApD,EAA6DG,SAA7D,EAAwEF,GAAxE,EAA6EC,eAA7E,CAAjB;EACA,IAAIO,GAAJ;;EACA,IAAIH,QAAQ,CAACI,WAAT,KAAyB,CAAzB,IAA8BJ,QAAQ,CAACK,YAAT,KAA0B,CAAxD,IACAtB,IAAI,CAACuB,WAAL,CAAiBN,QAAQ,CAACO,OAA1B,EAAmCP,QAAQ,CAACQ,QAA5C,CADJ,EAC2D;IACvDL,GAAG,GAAGjB,QAAQ,CAAC;MAAEG,MAAM,EAAE;QAAEG;MAAF,CAAV;MAAiBF;IAAjB,CAAD,CAAd;EACH,CAHD,MAIK;IACD,MAAMmB,OAAO,GAAGnB,OAAO,CAACoB,IAAR,CAAaC,GAAb,CAAiBnB,CAAC,CAACoB,MAAnB,EAA2BC,MAA3C;IACA,MAAMnB,OAAO,GAAGX,IAAI,CAAC+B,cAAL,CAAoBtB,CAAC,CAACU,KAAtB,CAAhB;IACA,MAAMa,MAAM,GAAG9B,IAAI,CAACwB,OAAD,EAAUjB,CAAC,CAACU,KAAZ,EAAmBV,CAAC,CAACwB,KAArB,EAA4BtB,OAA5B,EAAqCM,QAArC,EAA+C,KAA/C,CAAnB;IACAG,GAAG,GAAGb,OAAO,CAAC2B,cAAR,CAAuBjB,QAAQ,CAACQ,QAAhC,EAA0ChB,CAAC,CAACwB,KAA5C,EAAmDD,MAAM,CAACF,MAA1D,CAAN;EACH;;EACD,OAAOV,GAAP;AACH;AACD,OAAO,MAAMe,aAAa,GAAG;EACzBC,UAAU,EAAErC,OADa;EAEzBsC,WAAW,EAAE,KAFY;EAGzBC,UAAU,EAAElC;AAHa,CAAtB"},"metadata":{},"sourceType":"module"}