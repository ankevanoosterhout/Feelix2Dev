{"ast":null,"code":"import { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { conv2d } from './conv2d';\nimport { depthwiseConv2d } from './depthwise_conv2d';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * 2-D convolution with separable filters.\n *\n * Performs a depthwise convolution that acts separately on channels followed\n * by a pointwise convolution that mixes channels. Note that this is\n * separability between dimensions [1, 2] and 3, not spatial separability\n * between dimensions 1 and 2.\n *\n * See\n * [https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d](\n *     https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d)\n * for more details.\n *\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param depthwiseFilter The depthwise filter tensor, rank 4, of shape\n *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`. This is\n *     the filter used in the first step.\n * @param pointwiseFilter The pointwise filter tensor, rank 4, of shape\n *     `[1, 1, inChannels * channelMultiplier, outChannels]`. This is\n *     the filter used in the second step.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`. If strides is a single number, then `strideHeight ==\n * strideWidth`.\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels]. Only \"NHWC\" is currently supported.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\n\nfunction separableConv2d_(x, depthwiseFilter, pointwiseFilter, strides, pad, dilation = [1, 1], dataFormat = 'NHWC') {\n  const $x = convertToTensor(x, 'x', 'separableConv2d');\n  const $depthwiseFilter = convertToTensor(depthwiseFilter, 'depthwiseFilter', 'separableConv2d');\n  const $pointwiseFilter = convertToTensor(pointwiseFilter, 'pointwiseFilter', 'separableConv2d');\n  let x4D = $x;\n  let reshapedTo4D = false;\n\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n\n  if (dataFormat === 'NCHW') {\n    throw new Error('separableConv2d currently does not support dataFormat NCHW; only ' + 'NHWC is supported');\n  }\n\n  util.assert(x4D.rank === 4, () => `Error in separableConv2d: input must be rank 4, but got ` + `rank ${x4D.rank}.`);\n  util.assert($depthwiseFilter.rank === 4, () => `Error in separableConv2d: depthwise filter must be rank 4, but ` + `got rank ${$depthwiseFilter.rank}.`);\n  util.assert($pointwiseFilter.rank === 4, () => `Error in separableConv2d: pointwise filter must be rank 4, but ` + `got rank ${$depthwiseFilter.rank}.`);\n  util.assert($pointwiseFilter.shape[0] === 1, () => `Error in separableConv2d: the first dimension of pointwise filter ` + ` must be 1, but got ${$pointwiseFilter.shape[0]}.`);\n  util.assert($pointwiseFilter.shape[1] === 1, () => `Error in separableConv2d: the second dimension of pointwise ` + `filter must be 1, but got ${$pointwiseFilter.shape[1]}.`);\n  const inChannels = $depthwiseFilter.shape[2];\n  const channelMultiplier = $depthwiseFilter.shape[3];\n  util.assert($pointwiseFilter.shape[2] === inChannels * channelMultiplier, () => `Error in separableConv2d: the third dimension of pointwise filter ` + `must be ${inChannels * channelMultiplier}, ` + `but got ${$pointwiseFilter.shape[2]}.`);\n  const depthwise = depthwiseConv2d(x4D, $depthwiseFilter, strides, pad, dataFormat, dilation);\n  const pointwiseStride = 1;\n  const res = conv2d(depthwise, $pointwiseFilter, pointwiseStride, 'valid', dataFormat);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n\n  return res;\n}\n\nexport const separableConv2d = op({\n  separableConv2d_\n});","map":{"version":3,"names":["convertToTensor","util","conv2d","depthwiseConv2d","op","reshape","separableConv2d_","x","depthwiseFilter","pointwiseFilter","strides","pad","dilation","dataFormat","$x","$depthwiseFilter","$pointwiseFilter","x4D","reshapedTo4D","rank","shape","Error","assert","inChannels","channelMultiplier","depthwise","pointwiseStride","res","separableConv2d"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/separable_conv2d.js"],"sourcesContent":["import { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { conv2d } from './conv2d';\nimport { depthwiseConv2d } from './depthwise_conv2d';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * 2-D convolution with separable filters.\n *\n * Performs a depthwise convolution that acts separately on channels followed\n * by a pointwise convolution that mixes channels. Note that this is\n * separability between dimensions [1, 2] and 3, not spatial separability\n * between dimensions 1 and 2.\n *\n * See\n * [https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d](\n *     https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d)\n * for more details.\n *\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param depthwiseFilter The depthwise filter tensor, rank 4, of shape\n *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`. This is\n *     the filter used in the first step.\n * @param pointwiseFilter The pointwise filter tensor, rank 4, of shape\n *     `[1, 1, inChannels * channelMultiplier, outChannels]`. This is\n *     the filter used in the second step.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`. If strides is a single number, then `strideHeight ==\n * strideWidth`.\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels]. Only \"NHWC\" is currently supported.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction separableConv2d_(x, depthwiseFilter, pointwiseFilter, strides, pad, dilation = [1, 1], dataFormat = 'NHWC') {\n    const $x = convertToTensor(x, 'x', 'separableConv2d');\n    const $depthwiseFilter = convertToTensor(depthwiseFilter, 'depthwiseFilter', 'separableConv2d');\n    const $pointwiseFilter = convertToTensor(pointwiseFilter, 'pointwiseFilter', 'separableConv2d');\n    let x4D = $x;\n    let reshapedTo4D = false;\n    if ($x.rank === 3) {\n        reshapedTo4D = true;\n        x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n    }\n    if (dataFormat === 'NCHW') {\n        throw new Error('separableConv2d currently does not support dataFormat NCHW; only ' +\n            'NHWC is supported');\n    }\n    util.assert(x4D.rank === 4, () => `Error in separableConv2d: input must be rank 4, but got ` +\n        `rank ${x4D.rank}.`);\n    util.assert($depthwiseFilter.rank === 4, () => `Error in separableConv2d: depthwise filter must be rank 4, but ` +\n        `got rank ${$depthwiseFilter.rank}.`);\n    util.assert($pointwiseFilter.rank === 4, () => `Error in separableConv2d: pointwise filter must be rank 4, but ` +\n        `got rank ${$depthwiseFilter.rank}.`);\n    util.assert($pointwiseFilter.shape[0] === 1, () => `Error in separableConv2d: the first dimension of pointwise filter ` +\n        ` must be 1, but got ${$pointwiseFilter.shape[0]}.`);\n    util.assert($pointwiseFilter.shape[1] === 1, () => `Error in separableConv2d: the second dimension of pointwise ` +\n        `filter must be 1, but got ${$pointwiseFilter.shape[1]}.`);\n    const inChannels = $depthwiseFilter.shape[2];\n    const channelMultiplier = $depthwiseFilter.shape[3];\n    util.assert($pointwiseFilter.shape[2] === inChannels * channelMultiplier, () => `Error in separableConv2d: the third dimension of pointwise filter ` +\n        `must be ${inChannels * channelMultiplier}, ` +\n        `but got ${$pointwiseFilter.shape[2]}.`);\n    const depthwise = depthwiseConv2d(x4D, $depthwiseFilter, strides, pad, dataFormat, dilation);\n    const pointwiseStride = 1;\n    const res = conv2d(depthwise, $pointwiseFilter, pointwiseStride, 'valid', dataFormat);\n    if (reshapedTo4D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n    }\n    return res;\n}\nexport const separableConv2d = op({ separableConv2d_ });\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}