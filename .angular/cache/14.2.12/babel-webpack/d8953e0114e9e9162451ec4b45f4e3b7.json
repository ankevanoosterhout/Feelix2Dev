{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, FusedBatchNorm, util } from '@tensorflow/tfjs-core';\nimport { BatchNormProgram } from '../batchnorm_gpu';\nimport { BatchNormPackedProgram } from '../batchnorm_packed_gpu';\nexport const batchNorm = ({\n  inputs,\n  backend,\n  attrs\n}) => {\n  const {\n    x,\n    mean,\n    variance,\n    offset,\n    scale\n  } = inputs;\n  util.assert(mean.shape.length === variance.shape.length, () => 'Batch normalization gradient requires mean and variance to have ' + 'equal ranks.');\n  util.assert(offset == null || mean.shape.length === offset.shape.length, () => 'Batch normalization gradient requires mean and offset to have ' + 'equal ranks.');\n  util.assert(scale == null || mean.shape.length === scale.shape.length, () => 'Batch normalization gradient requires mean and scale to have ' + 'equal ranks.');\n  let {\n    varianceEpsilon\n  } = attrs;\n\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const finalInputs = [x, mean, variance];\n  let offsetShape = null;\n\n  if (offset != null) {\n    offsetShape = offset.shape;\n    finalInputs.push(offset);\n  }\n\n  let scaleShape = null;\n\n  if (scale != null) {\n    scaleShape = scale.shape;\n    finalInputs.push(scale);\n  }\n\n  const program = env().getBool('WEBGL_PACK_NORMALIZATION') ? new BatchNormPackedProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon) : new BatchNormProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);\n  const output = backend.runWebGLProgram(program, finalInputs, finalInputs[0].dtype);\n  return output;\n};\nexport const batchNormConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'webgl',\n  kernelFunc: batchNorm\n};","map":{"version":3,"names":["env","FusedBatchNorm","util","BatchNormProgram","BatchNormPackedProgram","batchNorm","inputs","backend","attrs","x","mean","variance","offset","scale","assert","shape","length","varianceEpsilon","finalInputs","offsetShape","push","scaleShape","program","getBool","output","runWebGLProgram","dtype","batchNormConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchNorm.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, FusedBatchNorm, util } from '@tensorflow/tfjs-core';\nimport { BatchNormProgram } from '../batchnorm_gpu';\nimport { BatchNormPackedProgram } from '../batchnorm_packed_gpu';\nexport const batchNorm = ({ inputs, backend, attrs }) => {\n    const { x, mean, variance, offset, scale } = inputs;\n    util.assert(mean.shape.length === variance.shape.length, () => 'Batch normalization gradient requires mean and variance to have ' +\n        'equal ranks.');\n    util.assert(offset == null || mean.shape.length === offset.shape.length, () => 'Batch normalization gradient requires mean and offset to have ' +\n        'equal ranks.');\n    util.assert(scale == null || mean.shape.length === scale.shape.length, () => 'Batch normalization gradient requires mean and scale to have ' +\n        'equal ranks.');\n    let { varianceEpsilon } = attrs;\n    if (varianceEpsilon == null) {\n        varianceEpsilon = 0.001;\n    }\n    const finalInputs = [x, mean, variance];\n    let offsetShape = null;\n    if (offset != null) {\n        offsetShape = offset.shape;\n        finalInputs.push(offset);\n    }\n    let scaleShape = null;\n    if (scale != null) {\n        scaleShape = scale.shape;\n        finalInputs.push(scale);\n    }\n    const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n        new BatchNormPackedProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon) :\n        new BatchNormProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);\n    const output = backend.runWebGLProgram(program, finalInputs, finalInputs[0].dtype);\n    return output;\n};\nexport const batchNormConfig = {\n    kernelName: FusedBatchNorm,\n    backendName: 'webgl',\n    kernelFunc: batchNorm,\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,GAAT,EAAcC,cAAd,EAA8BC,IAA9B,QAA0C,uBAA1C;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,SAASC,sBAAT,QAAuC,yBAAvC;AACA,OAAO,MAAMC,SAAS,GAAG,CAAC;EAAEC,MAAF;EAAUC,OAAV;EAAmBC;AAAnB,CAAD,KAAgC;EACrD,MAAM;IAAEC,CAAF;IAAKC,IAAL;IAAWC,QAAX;IAAqBC,MAArB;IAA6BC;EAA7B,IAAuCP,MAA7C;EACAJ,IAAI,CAACY,MAAL,CAAYJ,IAAI,CAACK,KAAL,CAAWC,MAAX,KAAsBL,QAAQ,CAACI,KAAT,CAAeC,MAAjD,EAAyD,MAAM,qEAC3D,cADJ;EAEAd,IAAI,CAACY,MAAL,CAAYF,MAAM,IAAI,IAAV,IAAkBF,IAAI,CAACK,KAAL,CAAWC,MAAX,KAAsBJ,MAAM,CAACG,KAAP,CAAaC,MAAjE,EAAyE,MAAM,mEAC3E,cADJ;EAEAd,IAAI,CAACY,MAAL,CAAYD,KAAK,IAAI,IAAT,IAAiBH,IAAI,CAACK,KAAL,CAAWC,MAAX,KAAsBH,KAAK,CAACE,KAAN,CAAYC,MAA/D,EAAuE,MAAM,kEACzE,cADJ;EAEA,IAAI;IAAEC;EAAF,IAAsBT,KAA1B;;EACA,IAAIS,eAAe,IAAI,IAAvB,EAA6B;IACzBA,eAAe,GAAG,KAAlB;EACH;;EACD,MAAMC,WAAW,GAAG,CAACT,CAAD,EAAIC,IAAJ,EAAUC,QAAV,CAApB;EACA,IAAIQ,WAAW,GAAG,IAAlB;;EACA,IAAIP,MAAM,IAAI,IAAd,EAAoB;IAChBO,WAAW,GAAGP,MAAM,CAACG,KAArB;IACAG,WAAW,CAACE,IAAZ,CAAiBR,MAAjB;EACH;;EACD,IAAIS,UAAU,GAAG,IAAjB;;EACA,IAAIR,KAAK,IAAI,IAAb,EAAmB;IACfQ,UAAU,GAAGR,KAAK,CAACE,KAAnB;IACAG,WAAW,CAACE,IAAZ,CAAiBP,KAAjB;EACH;;EACD,MAAMS,OAAO,GAAGtB,GAAG,GAAGuB,OAAN,CAAc,0BAAd,IACZ,IAAInB,sBAAJ,CAA2BK,CAAC,CAACM,KAA7B,EAAoCL,IAAI,CAACK,KAAzC,EAAgDJ,QAAQ,CAACI,KAAzD,EAAgEI,WAAhE,EAA6EE,UAA7E,EAAyFJ,eAAzF,CADY,GAEZ,IAAId,gBAAJ,CAAqBM,CAAC,CAACM,KAAvB,EAA8BL,IAAI,CAACK,KAAnC,EAA0CJ,QAAQ,CAACI,KAAnD,EAA0DI,WAA1D,EAAuEE,UAAvE,EAAmFJ,eAAnF,CAFJ;EAGA,MAAMO,MAAM,GAAGjB,OAAO,CAACkB,eAAR,CAAwBH,OAAxB,EAAiCJ,WAAjC,EAA8CA,WAAW,CAAC,CAAD,CAAX,CAAeQ,KAA7D,CAAf;EACA,OAAOF,MAAP;AACH,CA5BM;AA6BP,OAAO,MAAMG,eAAe,GAAG;EAC3BC,UAAU,EAAE3B,cADe;EAE3B4B,WAAW,EAAE,OAFc;EAG3BC,UAAU,EAAEzB;AAHe,CAAxB"},"metadata":{},"sourceType":"module"}