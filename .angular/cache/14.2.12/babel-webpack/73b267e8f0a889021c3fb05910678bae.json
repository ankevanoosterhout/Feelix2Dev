{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { elu } from '../kernels/Elu';\nimport { identity } from '../kernels/Identity';\nimport { leakyRelu } from '../kernels/LeakyRelu';\nimport { prelu } from '../kernels/Prelu';\nimport { relu } from '../kernels/Relu';\nimport { relu6 } from '../kernels/Relu6';\nimport { sigmoid } from '../kernels/Sigmoid';\nexport function applyActivation(backend, x, activation, preluActivationWeights, leakyreluAlpha) {\n  if (activation === 'linear') {\n    return identity({\n      inputs: {\n        x\n      },\n      backend\n    });\n  } else if (activation === 'relu') {\n    return relu({\n      inputs: {\n        x\n      },\n      backend\n    });\n  } else if (activation === 'elu') {\n    return elu({\n      inputs: {\n        x\n      },\n      backend\n    });\n  } else if (activation === 'relu6') {\n    return relu6({\n      inputs: {\n        x\n      },\n      backend\n    });\n  } else if (activation === 'prelu') {\n    return prelu({\n      inputs: {\n        x,\n        alpha: preluActivationWeights\n      },\n      backend\n    });\n  } else if (activation === 'leakyrelu') {\n    return leakyRelu({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        alpha: leakyreluAlpha\n      }\n    });\n  } else if (activation === 'sigmoid') {\n    return sigmoid({\n      inputs: {\n        x\n      },\n      backend\n    });\n  }\n\n  throw new Error(`Activation ${activation} has not been implemented for the CPU backend.`);\n}","map":{"version":3,"names":["elu","identity","leakyRelu","prelu","relu","relu6","sigmoid","applyActivation","backend","x","activation","preluActivationWeights","leakyreluAlpha","inputs","alpha","attrs","Error"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/fused_utils.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { elu } from '../kernels/Elu';\nimport { identity } from '../kernels/Identity';\nimport { leakyRelu } from '../kernels/LeakyRelu';\nimport { prelu } from '../kernels/Prelu';\nimport { relu } from '../kernels/Relu';\nimport { relu6 } from '../kernels/Relu6';\nimport { sigmoid } from '../kernels/Sigmoid';\nexport function applyActivation(backend, x, activation, preluActivationWeights, leakyreluAlpha) {\n    if (activation === 'linear') {\n        return identity({ inputs: { x }, backend });\n    }\n    else if (activation === 'relu') {\n        return relu({ inputs: { x }, backend });\n    }\n    else if (activation === 'elu') {\n        return elu({ inputs: { x }, backend });\n    }\n    else if (activation === 'relu6') {\n        return relu6({ inputs: { x }, backend });\n    }\n    else if (activation === 'prelu') {\n        return prelu({ inputs: { x, alpha: preluActivationWeights }, backend });\n    }\n    else if (activation === 'leakyrelu') {\n        return leakyRelu({ inputs: { x }, backend, attrs: { alpha: leakyreluAlpha } });\n    }\n    else if (activation === 'sigmoid') {\n        return sigmoid({ inputs: { x }, backend });\n    }\n    throw new Error(`Activation ${activation} has not been implemented for the CPU backend.`);\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,GAAT,QAAoB,gBAApB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,OAAO,SAASC,eAAT,CAAyBC,OAAzB,EAAkCC,CAAlC,EAAqCC,UAArC,EAAiDC,sBAAjD,EAAyEC,cAAzE,EAAyF;EAC5F,IAAIF,UAAU,KAAK,QAAnB,EAA6B;IACzB,OAAOT,QAAQ,CAAC;MAAEY,MAAM,EAAE;QAAEJ;MAAF,CAAV;MAAiBD;IAAjB,CAAD,CAAf;EACH,CAFD,MAGK,IAAIE,UAAU,KAAK,MAAnB,EAA2B;IAC5B,OAAON,IAAI,CAAC;MAAES,MAAM,EAAE;QAAEJ;MAAF,CAAV;MAAiBD;IAAjB,CAAD,CAAX;EACH,CAFI,MAGA,IAAIE,UAAU,KAAK,KAAnB,EAA0B;IAC3B,OAAOV,GAAG,CAAC;MAAEa,MAAM,EAAE;QAAEJ;MAAF,CAAV;MAAiBD;IAAjB,CAAD,CAAV;EACH,CAFI,MAGA,IAAIE,UAAU,KAAK,OAAnB,EAA4B;IAC7B,OAAOL,KAAK,CAAC;MAAEQ,MAAM,EAAE;QAAEJ;MAAF,CAAV;MAAiBD;IAAjB,CAAD,CAAZ;EACH,CAFI,MAGA,IAAIE,UAAU,KAAK,OAAnB,EAA4B;IAC7B,OAAOP,KAAK,CAAC;MAAEU,MAAM,EAAE;QAAEJ,CAAF;QAAKK,KAAK,EAAEH;MAAZ,CAAV;MAAgDH;IAAhD,CAAD,CAAZ;EACH,CAFI,MAGA,IAAIE,UAAU,KAAK,WAAnB,EAAgC;IACjC,OAAOR,SAAS,CAAC;MAAEW,MAAM,EAAE;QAAEJ;MAAF,CAAV;MAAiBD,OAAjB;MAA0BO,KAAK,EAAE;QAAED,KAAK,EAAEF;MAAT;IAAjC,CAAD,CAAhB;EACH,CAFI,MAGA,IAAIF,UAAU,KAAK,SAAnB,EAA8B;IAC/B,OAAOJ,OAAO,CAAC;MAAEO,MAAM,EAAE;QAAEJ;MAAF,CAAV;MAAiBD;IAAjB,CAAD,CAAd;EACH;;EACD,MAAM,IAAIQ,KAAJ,CAAW,cAAaN,UAAW,gDAAnC,CAAN;AACH"},"metadata":{},"sourceType":"module"}