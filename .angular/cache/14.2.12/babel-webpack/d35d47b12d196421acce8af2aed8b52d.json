{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, ScatterNd } from '@tensorflow/tfjs-core';\nimport { ScatterProgram } from '../scatter_gpu';\nimport { reshape } from './Reshape';\nexport function scatterNd(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    indices,\n    updates\n  } = inputs;\n  const {\n    shape\n  } = attrs;\n  const {\n    sliceRank,\n    numUpdates,\n    sliceSize,\n    strides,\n    outputSize\n  } = backend_util.calculateShapes(updates, indices, shape);\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  if (outputSize === 0) {\n    return backend.makeTensorInfo(shape, indices.dtype);\n  }\n\n  const flattenIndices = reshape({\n    inputs: {\n      x: indices\n    },\n    backend,\n    attrs: {\n      shape: [numUpdates, sliceRank]\n    }\n  });\n  const flattenX = reshape({\n    inputs: {\n      x: updates\n    },\n    backend,\n    attrs: {\n      shape: [numUpdates, sliceSize]\n    }\n  });\n  const defaultValue = backend.makeTensorInfo([], 'float32', new Float32Array([0])); // scalar(0)\n\n  const program = new ScatterProgram(numUpdates, sliceRank, flattenIndices.shape.length, flattenX.shape.length, strides, flattenShape);\n  const res = backend.runWebGLProgram(program, [flattenX, flattenIndices, defaultValue], flattenX.dtype);\n  const reshaped = reshape({\n    inputs: {\n      x: res\n    },\n    backend,\n    attrs: {\n      shape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n  backend.disposeIntermediateTensorInfo(defaultValue);\n  return reshaped;\n}\nexport const scatterNdConfig = {\n  kernelName: ScatterNd,\n  backendName: 'webgl',\n  kernelFunc: scatterNd\n};","map":{"version":3,"names":["backend_util","ScatterNd","ScatterProgram","reshape","scatterNd","args","inputs","backend","attrs","indices","updates","shape","sliceRank","numUpdates","sliceSize","strides","outputSize","calculateShapes","flattenShape","makeTensorInfo","dtype","flattenIndices","x","flattenX","defaultValue","Float32Array","program","length","res","runWebGLProgram","reshaped","disposeIntermediateTensorInfo","scatterNdConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ScatterNd.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, ScatterNd } from '@tensorflow/tfjs-core';\nimport { ScatterProgram } from '../scatter_gpu';\nimport { reshape } from './Reshape';\nexport function scatterNd(args) {\n    const { inputs, backend, attrs } = args;\n    const { indices, updates } = inputs;\n    const { shape } = attrs;\n    const { sliceRank, numUpdates, sliceSize, strides, outputSize } = backend_util.calculateShapes(updates, indices, shape);\n    const flattenShape = [outputSize / sliceSize, sliceSize];\n    if (outputSize === 0) {\n        return backend.makeTensorInfo(shape, indices.dtype);\n    }\n    const flattenIndices = reshape({ inputs: { x: indices }, backend, attrs: { shape: [numUpdates, sliceRank] } });\n    const flattenX = reshape({ inputs: { x: updates }, backend, attrs: { shape: [numUpdates, sliceSize] } });\n    const defaultValue = backend.makeTensorInfo([], 'float32', new Float32Array([0])); // scalar(0)\n    const program = new ScatterProgram(numUpdates, sliceRank, flattenIndices.shape.length, flattenX.shape.length, strides, flattenShape);\n    const res = backend.runWebGLProgram(program, [flattenX, flattenIndices, defaultValue], flattenX.dtype);\n    const reshaped = reshape({ inputs: { x: res }, backend, attrs: { shape } });\n    backend.disposeIntermediateTensorInfo(flattenIndices);\n    backend.disposeIntermediateTensorInfo(flattenX);\n    backend.disposeIntermediateTensorInfo(res);\n    backend.disposeIntermediateTensorInfo(defaultValue);\n    return reshaped;\n}\nexport const scatterNdConfig = {\n    kernelName: ScatterNd,\n    backendName: 'webgl',\n    kernelFunc: scatterNd\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,EAAuBC,SAAvB,QAAwC,uBAAxC;AACA,SAASC,cAAT,QAA+B,gBAA/B;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAO,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;EAC5B,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BH,IAAnC;EACA,MAAM;IAAEI,OAAF;IAAWC;EAAX,IAAuBJ,MAA7B;EACA,MAAM;IAAEK;EAAF,IAAYH,KAAlB;EACA,MAAM;IAAEI,SAAF;IAAaC,UAAb;IAAyBC,SAAzB;IAAoCC,OAApC;IAA6CC;EAA7C,IAA4DhB,YAAY,CAACiB,eAAb,CAA6BP,OAA7B,EAAsCD,OAAtC,EAA+CE,KAA/C,CAAlE;EACA,MAAMO,YAAY,GAAG,CAACF,UAAU,GAAGF,SAAd,EAAyBA,SAAzB,CAArB;;EACA,IAAIE,UAAU,KAAK,CAAnB,EAAsB;IAClB,OAAOT,OAAO,CAACY,cAAR,CAAuBR,KAAvB,EAA8BF,OAAO,CAACW,KAAtC,CAAP;EACH;;EACD,MAAMC,cAAc,GAAGlB,OAAO,CAAC;IAAEG,MAAM,EAAE;MAAEgB,CAAC,EAAEb;IAAL,CAAV;IAA0BF,OAA1B;IAAmCC,KAAK,EAAE;MAAEG,KAAK,EAAE,CAACE,UAAD,EAAaD,SAAb;IAAT;EAA1C,CAAD,CAA9B;EACA,MAAMW,QAAQ,GAAGpB,OAAO,CAAC;IAAEG,MAAM,EAAE;MAAEgB,CAAC,EAAEZ;IAAL,CAAV;IAA0BH,OAA1B;IAAmCC,KAAK,EAAE;MAAEG,KAAK,EAAE,CAACE,UAAD,EAAaC,SAAb;IAAT;EAA1C,CAAD,CAAxB;EACA,MAAMU,YAAY,GAAGjB,OAAO,CAACY,cAAR,CAAuB,EAAvB,EAA2B,SAA3B,EAAsC,IAAIM,YAAJ,CAAiB,CAAC,CAAD,CAAjB,CAAtC,CAArB,CAX4B,CAWuD;;EACnF,MAAMC,OAAO,GAAG,IAAIxB,cAAJ,CAAmBW,UAAnB,EAA+BD,SAA/B,EAA0CS,cAAc,CAACV,KAAf,CAAqBgB,MAA/D,EAAuEJ,QAAQ,CAACZ,KAAT,CAAegB,MAAtF,EAA8FZ,OAA9F,EAAuGG,YAAvG,CAAhB;EACA,MAAMU,GAAG,GAAGrB,OAAO,CAACsB,eAAR,CAAwBH,OAAxB,EAAiC,CAACH,QAAD,EAAWF,cAAX,EAA2BG,YAA3B,CAAjC,EAA2ED,QAAQ,CAACH,KAApF,CAAZ;EACA,MAAMU,QAAQ,GAAG3B,OAAO,CAAC;IAAEG,MAAM,EAAE;MAAEgB,CAAC,EAAEM;IAAL,CAAV;IAAsBrB,OAAtB;IAA+BC,KAAK,EAAE;MAAEG;IAAF;EAAtC,CAAD,CAAxB;EACAJ,OAAO,CAACwB,6BAAR,CAAsCV,cAAtC;EACAd,OAAO,CAACwB,6BAAR,CAAsCR,QAAtC;EACAhB,OAAO,CAACwB,6BAAR,CAAsCH,GAAtC;EACArB,OAAO,CAACwB,6BAAR,CAAsCP,YAAtC;EACA,OAAOM,QAAP;AACH;AACD,OAAO,MAAME,eAAe,GAAG;EAC3BC,UAAU,EAAEhC,SADe;EAE3BiC,WAAW,EAAE,OAFc;EAG3BC,UAAU,EAAE/B;AAHe,CAAxB"},"metadata":{},"sourceType":"module"}