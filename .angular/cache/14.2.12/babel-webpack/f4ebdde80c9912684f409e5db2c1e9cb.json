{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from './buffer';\nimport { expandDims } from './expand_dims';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { tile } from './tile';\n/**\n * Create an identity matrix.\n *\n * @param numRows Number of rows.\n * @param numColumns Number of columns. Defaults to `numRows`.\n * @param batchShape If provided, will add the batch shape to the beginning\n *   of the shape of the returned `tf.Tensor` by repeating the identity\n *   matrix.\n * @param dtype Data type.\n * @returns Identity matrix of the specified size and data type, possibly\n *   with batch repetition if `batchShape` is specified.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\n\nfunction eye_(numRows, numColumns, batchShape, dtype = 'float32') {\n  if (numColumns == null) {\n    numColumns = numRows;\n  }\n\n  const buff = buffer([numRows, numColumns], dtype);\n  const n = numRows <= numColumns ? numRows : numColumns;\n\n  for (let i = 0; i < n; ++i) {\n    buff.set(1, i, i);\n  }\n\n  const out = reshape(buff.toTensor(), [numRows, numColumns]);\n\n  if (batchShape == null) {\n    return out;\n  } else {\n    if (batchShape.length === 1) {\n      return tile(expandDims(out, 0), [batchShape[0], 1, 1]);\n    } else if (batchShape.length === 2) {\n      // tslint:disable-next-line:no-unnecessary-type-assertion\n      return tile(expandDims(expandDims(out, 0), 0), [batchShape[0], batchShape[1], 1, 1]);\n    } else if (batchShape.length === 3) {\n      // tslint:disable-next-line:no-unnecessary-type-assertion\n      return tile(expandDims(expandDims(expandDims(out, 0), 0), 0), [batchShape[0], batchShape[1], batchShape[2], 1, 1]);\n    } else {\n      throw new Error(`eye() currently supports only 1D and 2D ` + // tslint:disable-next-line:no-any\n      `batchShapes, but received ${batchShape.length}D.`);\n    }\n  }\n}\n\nexport const eye = op({\n  eye_\n});","map":{"version":3,"names":["buffer","expandDims","op","reshape","tile","eye_","numRows","numColumns","batchShape","dtype","buff","n","i","set","out","toTensor","length","Error","eye"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/eye.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from './buffer';\nimport { expandDims } from './expand_dims';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { tile } from './tile';\n/**\n * Create an identity matrix.\n *\n * @param numRows Number of rows.\n * @param numColumns Number of columns. Defaults to `numRows`.\n * @param batchShape If provided, will add the batch shape to the beginning\n *   of the shape of the returned `tf.Tensor` by repeating the identity\n *   matrix.\n * @param dtype Data type.\n * @returns Identity matrix of the specified size and data type, possibly\n *   with batch repetition if `batchShape` is specified.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction eye_(numRows, numColumns, batchShape, dtype = 'float32') {\n    if (numColumns == null) {\n        numColumns = numRows;\n    }\n    const buff = buffer([numRows, numColumns], dtype);\n    const n = numRows <= numColumns ? numRows : numColumns;\n    for (let i = 0; i < n; ++i) {\n        buff.set(1, i, i);\n    }\n    const out = reshape(buff.toTensor(), [numRows, numColumns]);\n    if (batchShape == null) {\n        return out;\n    }\n    else {\n        if (batchShape.length === 1) {\n            return tile(expandDims(out, 0), [batchShape[0], 1, 1]);\n        }\n        else if (batchShape.length === 2) {\n            // tslint:disable-next-line:no-unnecessary-type-assertion\n            return tile(expandDims(expandDims(out, 0), 0), [batchShape[0], batchShape[1], 1, 1]);\n        }\n        else if (batchShape.length === 3) {\n            // tslint:disable-next-line:no-unnecessary-type-assertion\n            return tile(expandDims(expandDims(expandDims(out, 0), 0), 0), [\n                batchShape[0], batchShape[1], batchShape[2], 1, 1\n            ]);\n        }\n        else {\n            throw new Error(`eye() currently supports only 1D and 2D ` +\n                // tslint:disable-next-line:no-any\n                `batchShapes, but received ${batchShape.length}D.`);\n        }\n    }\n}\nexport const eye = op({ eye_ });\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,UAAvB;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,EAAT,QAAmB,aAAnB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,IAAT,QAAqB,QAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,IAAT,CAAcC,OAAd,EAAuBC,UAAvB,EAAmCC,UAAnC,EAA+CC,KAAK,GAAG,SAAvD,EAAkE;EAC9D,IAAIF,UAAU,IAAI,IAAlB,EAAwB;IACpBA,UAAU,GAAGD,OAAb;EACH;;EACD,MAAMI,IAAI,GAAGV,MAAM,CAAC,CAACM,OAAD,EAAUC,UAAV,CAAD,EAAwBE,KAAxB,CAAnB;EACA,MAAME,CAAC,GAAGL,OAAO,IAAIC,UAAX,GAAwBD,OAAxB,GAAkCC,UAA5C;;EACA,KAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,CAApB,EAAuB,EAAEC,CAAzB,EAA4B;IACxBF,IAAI,CAACG,GAAL,CAAS,CAAT,EAAYD,CAAZ,EAAeA,CAAf;EACH;;EACD,MAAME,GAAG,GAAGX,OAAO,CAACO,IAAI,CAACK,QAAL,EAAD,EAAkB,CAACT,OAAD,EAAUC,UAAV,CAAlB,CAAnB;;EACA,IAAIC,UAAU,IAAI,IAAlB,EAAwB;IACpB,OAAOM,GAAP;EACH,CAFD,MAGK;IACD,IAAIN,UAAU,CAACQ,MAAX,KAAsB,CAA1B,EAA6B;MACzB,OAAOZ,IAAI,CAACH,UAAU,CAACa,GAAD,EAAM,CAAN,CAAX,EAAqB,CAACN,UAAU,CAAC,CAAD,CAAX,EAAgB,CAAhB,EAAmB,CAAnB,CAArB,CAAX;IACH,CAFD,MAGK,IAAIA,UAAU,CAACQ,MAAX,KAAsB,CAA1B,EAA6B;MAC9B;MACA,OAAOZ,IAAI,CAACH,UAAU,CAACA,UAAU,CAACa,GAAD,EAAM,CAAN,CAAX,EAAqB,CAArB,CAAX,EAAoC,CAACN,UAAU,CAAC,CAAD,CAAX,EAAgBA,UAAU,CAAC,CAAD,CAA1B,EAA+B,CAA/B,EAAkC,CAAlC,CAApC,CAAX;IACH,CAHI,MAIA,IAAIA,UAAU,CAACQ,MAAX,KAAsB,CAA1B,EAA6B;MAC9B;MACA,OAAOZ,IAAI,CAACH,UAAU,CAACA,UAAU,CAACA,UAAU,CAACa,GAAD,EAAM,CAAN,CAAX,EAAqB,CAArB,CAAX,EAAoC,CAApC,CAAX,EAAmD,CAC1DN,UAAU,CAAC,CAAD,CADgD,EAC3CA,UAAU,CAAC,CAAD,CADiC,EAC5BA,UAAU,CAAC,CAAD,CADkB,EACb,CADa,EACV,CADU,CAAnD,CAAX;IAGH,CALI,MAMA;MACD,MAAM,IAAIS,KAAJ,CAAW,0CAAD,GACZ;MACC,6BAA4BT,UAAU,CAACQ,MAAO,IAF7C,CAAN;IAGH;EACJ;AACJ;;AACD,OAAO,MAAME,GAAG,GAAGhB,EAAE,CAAC;EAAEG;AAAF,CAAD,CAAd"},"metadata":{},"sourceType":"module"}