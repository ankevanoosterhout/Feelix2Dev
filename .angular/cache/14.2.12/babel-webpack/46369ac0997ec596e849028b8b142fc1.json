{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getPadding, getParamValue } from './utils';\n\nfunction fusedConvAndDepthWiseParams(node, tensorMap, context) {\n  const [extraOp, activationFunc] = getParamValue('fusedOps', node, tensorMap, context);\n  const isBiasAdd = extraOp === 'biasadd';\n  const noBiasAdd = !isBiasAdd;\n  const isPrelu = activationFunc === 'prelu';\n  const isBatchNorm = extraOp === 'fusedbatchnorm';\n  const numArgs = getParamValue('numArgs', node, tensorMap, context);\n\n  if (isBiasAdd) {\n    if (isPrelu && numArgs !== 2) {\n      throw new Error('FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu ' + 'must have two extra arguments: bias and alpha.');\n    }\n\n    if (!isPrelu && isBiasAdd && numArgs !== 1) {\n      throw new Error('FusedConv2d and DepthwiseConv2d with BiasAdd must have ' + 'one extra argument: bias.');\n    }\n  }\n\n  if (isBatchNorm) {\n    throw new Error('FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported');\n  }\n\n  const stride = getParamValue('strides', node, tensorMap, context);\n  const pad = getPadding(node, tensorMap, context);\n  const dataFormat = getParamValue('dataFormat', node, tensorMap, context).toUpperCase();\n  const dilations = getParamValue('dilations', node, tensorMap, context);\n  let [biasArg, preluArg] = getParamValue('args', node, tensorMap, context);\n\n  if (noBiasAdd) {\n    preluArg = biasArg;\n    biasArg = undefined;\n  }\n\n  const leakyreluAlpha = getParamValue('leakyreluAlpha', node, tensorMap, context);\n  return {\n    stride,\n    pad,\n    dataFormat,\n    dilations,\n    biasArg,\n    preluArg,\n    activationFunc,\n    leakyreluAlpha\n  };\n}\n\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n  switch (node.op) {\n    case 'Conv1D':\n      {\n        const stride = getParamValue('stride', node, tensorMap, context);\n        const pad = getParamValue('pad', node, tensorMap, context);\n        const dataFormat = getParamValue('dataFormat', node, tensorMap, context).toUpperCase();\n        const dilation = getParamValue('dilation', node, tensorMap, context);\n        return [ops.conv1d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), stride, pad, dataFormat, dilation)];\n      }\n\n    case 'Conv2D':\n      {\n        const stride = getParamValue('strides', node, tensorMap, context);\n        const pad = getPadding(node, tensorMap, context);\n        const dataFormat = getParamValue('dataFormat', node, tensorMap, context).toUpperCase();\n        const dilations = getParamValue('dilations', node, tensorMap, context);\n        return [ops.conv2d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [stride[1], stride[2]], pad, dataFormat, [dilations[1], dilations[2]])];\n      }\n\n    case '_FusedConv2D':\n      {\n        const {\n          stride,\n          pad,\n          dataFormat,\n          dilations,\n          biasArg,\n          preluArg,\n          activationFunc,\n          leakyreluAlpha\n        } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n        return [ops.fused.conv2d({\n          x: getParamValue('x', node, tensorMap, context),\n          filter: getParamValue('filter', node, tensorMap, context),\n          strides: [stride[1], stride[2]],\n          pad: pad,\n          dataFormat: dataFormat,\n          dilations: [dilations[1], dilations[2]],\n          bias: biasArg,\n          activation: activationFunc,\n          preluActivationWeights: preluArg,\n          leakyreluAlpha\n        })];\n      }\n\n    case 'FusedDepthwiseConv2dNative':\n      {\n        const {\n          stride,\n          pad,\n          dataFormat,\n          dilations,\n          biasArg,\n          preluArg,\n          activationFunc,\n          leakyreluAlpha\n        } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n        return [ops.fused.depthwiseConv2d({\n          x: getParamValue('x', node, tensorMap, context),\n          filter: getParamValue('filter', node, tensorMap, context),\n          strides: [stride[1], stride[2]],\n          pad: pad,\n          dataFormat: dataFormat,\n          dilations: [dilations[1], dilations[2]],\n          bias: biasArg,\n          activation: activationFunc,\n          preluActivationWeights: preluArg,\n          leakyreluAlpha\n        })];\n      }\n\n    case 'Conv2DBackpropInput':\n    case 'Conv2dTranspose':\n      {\n        const shape = getParamValue('outputShape', node, tensorMap, context);\n        const stride = getParamValue('strides', node, tensorMap, context);\n        const pad = getPadding(node, tensorMap, context);\n        return [ops.conv2dTranspose(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), shape, [stride[1], stride[2]], pad)];\n      }\n\n    case 'DepthwiseConv2dNative':\n    case 'DepthwiseConv2d':\n      {\n        const stride = getParamValue('strides', node, tensorMap, context);\n        const pad = getPadding(node, tensorMap, context);\n        const dilations = getParamValue('dilations', node, tensorMap, context);\n        const dataFormat = getParamValue('dataFormat', node, tensorMap, context).toUpperCase();\n        return [ops.depthwiseConv2d(getParamValue('input', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [stride[1], stride[2]], pad, dataFormat, [dilations[1], dilations[2]])];\n      }\n\n    case 'Conv3D':\n      {\n        const stride = getParamValue('strides', node, tensorMap, context);\n        const pad = getParamValue('pad', node, tensorMap, context);\n        const dataFormat = getParamValue('dataFormat', node, tensorMap, context).toUpperCase();\n        const dilations = getParamValue('dilations', node, tensorMap, context);\n        return [ops.conv3d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [stride[1], stride[2], stride[3]], pad, dataFormat, [dilations[1], dilations[2], dilations[3]])];\n      }\n\n    case 'AvgPool':\n      {\n        const stride = getParamValue('strides', node, tensorMap, context);\n        const pad = getParamValue('pad', node, tensorMap, context);\n        const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n        return [ops.avgPool(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];\n      }\n\n    case 'MaxPool':\n      {\n        const stride = getParamValue('strides', node, tensorMap, context);\n        const pad = getParamValue('pad', node, tensorMap, context);\n        const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n        return [ops.maxPool(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];\n      }\n\n    case 'MaxPoolWithArgmax':\n      {\n        const stride = getParamValue('strides', node, tensorMap, context);\n        const pad = getParamValue('pad', node, tensorMap, context);\n        const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n        const includeBatchInIndex = getParamValue('includeBatchInIndex', node, tensorMap, context);\n        const {\n          result,\n          indexes\n        } = ops.maxPoolWithArgmax(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad, includeBatchInIndex);\n        return [result, indexes];\n      }\n\n    case 'AvgPool3D':\n      {\n        const stride = getParamValue('strides', node, tensorMap, context);\n        const pad = getParamValue('pad', node, tensorMap, context);\n        const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n        return [ops.avgPool3d(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2], kernelSize[3]], [stride[1], stride[2], stride[3]], pad)];\n      }\n\n    case 'MaxPool3D':\n      {\n        const stride = getParamValue('strides', node, tensorMap, context);\n        const pad = getParamValue('pad', node, tensorMap, context);\n        const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n        return [ops.maxPool3d(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2], kernelSize[3]], [stride[1], stride[2], stride[3]], pad)];\n      }\n\n    case 'Dilation2D':\n      {\n        const strides = getParamValue('strides', node, tensorMap, context);\n        const pad = getParamValue('pad', node, tensorMap, context);\n        const dilations = getParamValue('dilations', node, tensorMap, context); // strides: [1, stride_height, stride_width, 1].\n\n        const strideHeight = strides[1];\n        const strideWidth = strides[2]; // dilations: [1, dilation_height, dilation_width, 1].\n\n        const dilationHeight = dilations[1];\n        const dilationWidth = dilations[2];\n        return [ops.dilation2d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [strideHeight, strideWidth], pad, [dilationHeight, dilationWidth], 'NHWC'\n        /* dataFormat */\n        )];\n      }\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'convolution';","map":{"version":3,"names":["tfOps","getPadding","getParamValue","fusedConvAndDepthWiseParams","node","tensorMap","context","extraOp","activationFunc","isBiasAdd","noBiasAdd","isPrelu","isBatchNorm","numArgs","Error","stride","pad","dataFormat","toUpperCase","dilations","biasArg","preluArg","undefined","leakyreluAlpha","executeOp","ops","op","dilation","conv1d","conv2d","fused","x","filter","strides","bias","activation","preluActivationWeights","depthwiseConv2d","shape","conv2dTranspose","conv3d","kernelSize","avgPool","maxPool","includeBatchInIndex","result","indexes","maxPoolWithArgmax","avgPool3d","maxPool3d","strideHeight","strideWidth","dilationHeight","dilationWidth","dilation2d","TypeError","CATEGORY"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getPadding, getParamValue } from './utils';\nfunction fusedConvAndDepthWiseParams(node, tensorMap, context) {\n    const [extraOp, activationFunc] = getParamValue('fusedOps', node, tensorMap, context);\n    const isBiasAdd = extraOp === 'biasadd';\n    const noBiasAdd = !isBiasAdd;\n    const isPrelu = activationFunc === 'prelu';\n    const isBatchNorm = extraOp === 'fusedbatchnorm';\n    const numArgs = getParamValue('numArgs', node, tensorMap, context);\n    if (isBiasAdd) {\n        if (isPrelu && numArgs !== 2) {\n            throw new Error('FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu ' +\n                'must have two extra arguments: bias and alpha.');\n        }\n        if (!isPrelu && isBiasAdd && numArgs !== 1) {\n            throw new Error('FusedConv2d and DepthwiseConv2d with BiasAdd must have ' +\n                'one extra argument: bias.');\n        }\n    }\n    if (isBatchNorm) {\n        throw new Error('FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported');\n    }\n    const stride = getParamValue('strides', node, tensorMap, context);\n    const pad = getPadding(node, tensorMap, context);\n    const dataFormat = getParamValue('dataFormat', node, tensorMap, context)\n        .toUpperCase();\n    const dilations = getParamValue('dilations', node, tensorMap, context);\n    let [biasArg, preluArg] = getParamValue('args', node, tensorMap, context);\n    if (noBiasAdd) {\n        preluArg = biasArg;\n        biasArg = undefined;\n    }\n    const leakyreluAlpha = getParamValue('leakyreluAlpha', node, tensorMap, context);\n    return {\n        stride,\n        pad,\n        dataFormat,\n        dilations,\n        biasArg,\n        preluArg,\n        activationFunc,\n        leakyreluAlpha\n    };\n}\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'Conv1D': {\n            const stride = getParamValue('stride', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const dataFormat = getParamValue('dataFormat', node, tensorMap, context)\n                .toUpperCase();\n            const dilation = getParamValue('dilation', node, tensorMap, context);\n            return [ops.conv1d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), stride, pad, dataFormat, dilation)];\n        }\n        case 'Conv2D': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getPadding(node, tensorMap, context);\n            const dataFormat = getParamValue('dataFormat', node, tensorMap, context)\n                .toUpperCase();\n            const dilations = getParamValue('dilations', node, tensorMap, context);\n            return [ops.conv2d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [stride[1], stride[2]], pad, dataFormat, [dilations[1], dilations[2]])];\n        }\n        case '_FusedConv2D': {\n            const { stride, pad, dataFormat, dilations, biasArg, preluArg, activationFunc, leakyreluAlpha } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n            return [ops.fused.conv2d({\n                    x: getParamValue('x', node, tensorMap, context),\n                    filter: getParamValue('filter', node, tensorMap, context),\n                    strides: [stride[1], stride[2]],\n                    pad: pad,\n                    dataFormat: dataFormat,\n                    dilations: [dilations[1], dilations[2]],\n                    bias: biasArg,\n                    activation: activationFunc,\n                    preluActivationWeights: preluArg,\n                    leakyreluAlpha\n                })];\n        }\n        case 'FusedDepthwiseConv2dNative': {\n            const { stride, pad, dataFormat, dilations, biasArg, preluArg, activationFunc, leakyreluAlpha, } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n            return [ops.fused.depthwiseConv2d({\n                    x: getParamValue('x', node, tensorMap, context),\n                    filter: getParamValue('filter', node, tensorMap, context),\n                    strides: [stride[1], stride[2]],\n                    pad: pad,\n                    dataFormat: dataFormat,\n                    dilations: [dilations[1], dilations[2]],\n                    bias: biasArg,\n                    activation: activationFunc,\n                    preluActivationWeights: preluArg,\n                    leakyreluAlpha\n                })];\n        }\n        case 'Conv2DBackpropInput':\n        case 'Conv2dTranspose': {\n            const shape = getParamValue('outputShape', node, tensorMap, context);\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getPadding(node, tensorMap, context);\n            return [ops.conv2dTranspose(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), shape, [stride[1], stride[2]], pad)];\n        }\n        case 'DepthwiseConv2dNative':\n        case 'DepthwiseConv2d': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getPadding(node, tensorMap, context);\n            const dilations = getParamValue('dilations', node, tensorMap, context);\n            const dataFormat = getParamValue('dataFormat', node, tensorMap, context)\n                .toUpperCase();\n            return [ops.depthwiseConv2d(getParamValue('input', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [stride[1], stride[2]], pad, dataFormat, [dilations[1], dilations[2]])];\n        }\n        case 'Conv3D': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const dataFormat = getParamValue('dataFormat', node, tensorMap, context)\n                .toUpperCase();\n            const dilations = getParamValue('dilations', node, tensorMap, context);\n            return [ops.conv3d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [stride[1], stride[2], stride[3]], pad, dataFormat, [dilations[1], dilations[2], dilations[3]])];\n        }\n        case 'AvgPool': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n            return [ops.avgPool(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];\n        }\n        case 'MaxPool': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n            return [ops.maxPool(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];\n        }\n        case 'MaxPoolWithArgmax': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n            const includeBatchInIndex = getParamValue('includeBatchInIndex', node, tensorMap, context);\n            const { result, indexes } = ops.maxPoolWithArgmax(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad, includeBatchInIndex);\n            return [result, indexes];\n        }\n        case 'AvgPool3D': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n            return [ops.avgPool3d(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2], kernelSize[3]], [stride[1], stride[2], stride[3]], pad)];\n        }\n        case 'MaxPool3D': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n            return [ops.maxPool3d(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2], kernelSize[3]], [stride[1], stride[2], stride[3]], pad)];\n        }\n        case 'Dilation2D': {\n            const strides = getParamValue('strides', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const dilations = getParamValue('dilations', node, tensorMap, context);\n            // strides: [1, stride_height, stride_width, 1].\n            const strideHeight = strides[1];\n            const strideWidth = strides[2];\n            // dilations: [1, dilation_height, dilation_width, 1].\n            const dilationHeight = dilations[1];\n            const dilationWidth = dilations[2];\n            return [ops.dilation2d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [strideHeight, strideWidth], pad, [dilationHeight, dilationWidth], 'NHWC' /* dataFormat */)];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'convolution';\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}