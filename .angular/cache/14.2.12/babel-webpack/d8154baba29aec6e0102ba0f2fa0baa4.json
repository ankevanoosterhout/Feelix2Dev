{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class ArgMinMaxPackedProgram {\n  constructor(shape, windowSize, op, firstPass) {\n    this.variableNames = ['A'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    util.assert(shape.length > 2, () => `Packed arg${op.charAt(0).toUpperCase() + op.slice(1)} supports only inputs with rank above 2.`);\n    const inSize = shape[shape.length - 1];\n    const outSize = Math.ceil(inSize / windowSize);\n    this.outputShape = shape.slice(0, -1);\n\n    if (outSize > 1) {\n      this.outputShape.push(outSize);\n    }\n\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n\n    const outShape = this.outputShape;\n    const rank = outShape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n    let sourceLocSetup;\n    let sourceRank;\n\n    if (outSize === 1) {\n      sourceRank = rank + 1;\n      const sourceLocDType = getCoordsDataType(sourceRank);\n      sourceLocSetup = `\n        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 1]};\n        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 2]};\n        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 1]};\n        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 2]};`;\n    } else {\n      sourceRank = rank;\n      sourceLocSetup = `\n        ${dtype} sourceLocR = coords;\n        ++${coords[rank - 1]};\n        ${dtype} sourceLocG = coords;\n        ++${coords[rank - 2]};\n        ${dtype} sourceLocA = coords;\n        --${coords[rank - 1]};\n        ${dtype} sourceLocB = coords;\n        --${coords[rank - 2]};`;\n    }\n\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\n    const inChannel = '.' + channels[sourceRank - 1]; // e.g. \".b\" for rank 3.\n\n    const intChannels = channels.map(x => 'int ' + x);\n    const srcRCoords = getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');\n    const srcGCoords = getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');\n    const srcBCoords = getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');\n    const srcACoords = getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');\n    const compOp = op === 'max' ? 'greaterThan' : 'lessThan';\n    const fetchCandidateIdx = firstPass ? '' : `\n          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),\n                             getBestIndicesAChannel(${srcGCoords.join()}),\n                             getBestIndicesAChannel(${srcBCoords.join()}),\n                             getBestIndicesAChannel(${srcACoords.join()})));`;\n    const fetchValue = `vec4(\n            getAChannel(${srcRCoords.join()}),\n            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,\n            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;\n    const getBestIndicesAChannelSnippet = firstPass ? '' : `\n      float getBestIndicesAChannel(${intChannels.join()}) {\n        return getChannel(getBestIndicesA(${channels.join()}),\n                                          vec2(${channels.slice(-2).join()}));\n      }`;\n    this.userCode = `\n      float getAChannel(${intChannels.join()}) {\n        return getChannel(getA(${channels.join()}),\n                               vec2(${channels.slice(-2).join()}));\n      }\n      ${getBestIndicesAChannelSnippet}\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};\n        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};\n        ${sourceLocSetup}\n        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},\n          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${fetchValue};\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          inIdx = srcIdx;\n          ${fetchCandidateIdx}\n          vec4 candidate = ${fetchValue};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `;\n  }\n\n}","map":{"version":3,"names":["util","getChannels","getCoordsDataType","ArgMinMaxPackedProgram","constructor","shape","windowSize","op","firstPass","variableNames","packedInputs","packedOutput","assert","length","charAt","toUpperCase","slice","inSize","outSize","Math","ceil","outputShape","push","outShape","rank","dtype","coords","sourceLocSetup","sourceRank","sourceLocDType","join","channels","inChannel","intChannels","map","x","srcRCoords","concat","srcGCoords","srcBCoords","srcACoords","compOp","fetchCandidateIdx","fetchValue","getBestIndicesAChannelSnippet","userCode"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/argminmax_packed_gpu.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class ArgMinMaxPackedProgram {\n    constructor(shape, windowSize, op, firstPass) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        util.assert(shape.length > 2, () => `Packed arg${op.charAt(0).toUpperCase() +\n            op.slice(1)} supports only inputs with rank above 2.`);\n        const inSize = shape[shape.length - 1];\n        const outSize = Math.ceil(inSize / windowSize);\n        this.outputShape = shape.slice(0, -1);\n        if (outSize > 1) {\n            this.outputShape.push(outSize);\n        }\n        if (!firstPass) {\n            this.variableNames.push('bestIndicesA');\n        }\n        const outShape = this.outputShape;\n        const rank = outShape.length;\n        const dtype = getCoordsDataType(rank);\n        const coords = getChannels('coords', rank);\n        let sourceLocSetup;\n        let sourceRank;\n        if (outSize === 1) {\n            sourceRank = rank + 1;\n            const sourceLocDType = getCoordsDataType(sourceRank);\n            sourceLocSetup = `\n        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 1]};\n        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 2]};\n        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 1]};\n        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 2]};`;\n        }\n        else {\n            sourceRank = rank;\n            sourceLocSetup = `\n        ${dtype} sourceLocR = coords;\n        ++${coords[rank - 1]};\n        ${dtype} sourceLocG = coords;\n        ++${coords[rank - 2]};\n        ${dtype} sourceLocA = coords;\n        --${coords[rank - 1]};\n        ${dtype} sourceLocB = coords;\n        --${coords[rank - 2]};`;\n        }\n        const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\n        const inChannel = '.' + channels[sourceRank - 1]; // e.g. \".b\" for rank 3.\n        const intChannels = channels.map(x => 'int ' + x);\n        const srcRCoords = getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');\n        const srcGCoords = getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');\n        const srcBCoords = getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');\n        const srcACoords = getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');\n        const compOp = (op === 'max') ? 'greaterThan' : 'lessThan';\n        const fetchCandidateIdx = firstPass ? '' : `\n          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),\n                             getBestIndicesAChannel(${srcGCoords.join()}),\n                             getBestIndicesAChannel(${srcBCoords.join()}),\n                             getBestIndicesAChannel(${srcACoords.join()})));`;\n        const fetchValue = `vec4(\n            getAChannel(${srcRCoords.join()}),\n            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,\n            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;\n        const getBestIndicesAChannelSnippet = firstPass ? '' : `\n      float getBestIndicesAChannel(${intChannels.join()}) {\n        return getChannel(getBestIndicesA(${channels.join()}),\n                                          vec2(${channels.slice(-2).join()}));\n      }`;\n        this.userCode = `\n      float getAChannel(${intChannels.join()}) {\n        return getChannel(getA(${channels.join()}),\n                               vec2(${channels.slice(-2).join()}));\n      }\n      ${getBestIndicesAChannelSnippet}\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};\n        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};\n        ${sourceLocSetup}\n        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},\n          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${fetchValue};\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          inIdx = srcIdx;\n          ${fetchCandidateIdx}\n          vec4 candidate = ${fetchValue};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,IAAT,QAAqB,uBAArB;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,OAAO,MAAMC,sBAAN,CAA6B;EAChCC,WAAW,CAACC,KAAD,EAAQC,UAAR,EAAoBC,EAApB,EAAwBC,SAAxB,EAAmC;IAC1C,KAAKC,aAAL,GAAqB,CAAC,GAAD,CAArB;IACA,KAAKC,YAAL,GAAoB,IAApB;IACA,KAAKC,YAAL,GAAoB,IAApB;IACAX,IAAI,CAACY,MAAL,CAAYP,KAAK,CAACQ,MAAN,GAAe,CAA3B,EAA8B,MAAO,aAAYN,EAAE,CAACO,MAAH,CAAU,CAAV,EAAaC,WAAb,KAC7CR,EAAE,CAACS,KAAH,CAAS,CAAT,CAAY,0CADhB;IAEA,MAAMC,MAAM,GAAGZ,KAAK,CAACA,KAAK,CAACQ,MAAN,GAAe,CAAhB,CAApB;IACA,MAAMK,OAAO,GAAGC,IAAI,CAACC,IAAL,CAAUH,MAAM,GAAGX,UAAnB,CAAhB;IACA,KAAKe,WAAL,GAAmBhB,KAAK,CAACW,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAAnB;;IACA,IAAIE,OAAO,GAAG,CAAd,EAAiB;MACb,KAAKG,WAAL,CAAiBC,IAAjB,CAAsBJ,OAAtB;IACH;;IACD,IAAI,CAACV,SAAL,EAAgB;MACZ,KAAKC,aAAL,CAAmBa,IAAnB,CAAwB,cAAxB;IACH;;IACD,MAAMC,QAAQ,GAAG,KAAKF,WAAtB;IACA,MAAMG,IAAI,GAAGD,QAAQ,CAACV,MAAtB;IACA,MAAMY,KAAK,GAAGvB,iBAAiB,CAACsB,IAAD,CAA/B;IACA,MAAME,MAAM,GAAGzB,WAAW,CAAC,QAAD,EAAWuB,IAAX,CAA1B;IACA,IAAIG,cAAJ;IACA,IAAIC,UAAJ;;IACA,IAAIV,OAAO,KAAK,CAAhB,EAAmB;MACfU,UAAU,GAAGJ,IAAI,GAAG,CAApB;MACA,MAAMK,cAAc,GAAG3B,iBAAiB,CAAC0B,UAAD,CAAxC;MACAD,cAAc,GAAI;AAC9B,UAAUE,cAAe,iBAAgBA,cAAe,IAAGH,MAAM,CAACI,IAAP,EAAc;AACzE,YAAYJ,MAAM,CAACF,IAAI,GAAG,CAAR,CAAW;AAC7B,UAAUK,cAAe,iBAAgBA,cAAe,IAAGH,MAAM,CAACI,IAAP,EAAc;AACzE,YAAYJ,MAAM,CAACF,IAAI,GAAG,CAAR,CAAW;AAC7B,UAAUK,cAAe,iBAAgBA,cAAe,IAAGH,MAAM,CAACI,IAAP,EAAc;AACzE,YAAYJ,MAAM,CAACF,IAAI,GAAG,CAAR,CAAW;AAC7B,UAAUK,cAAe,iBAAgBA,cAAe,IAAGH,MAAM,CAACI,IAAP,EAAc;AACzE,YAAYJ,MAAM,CAACF,IAAI,GAAG,CAAR,CAAW,GARjB;IASH,CAZD,MAaK;MACDI,UAAU,GAAGJ,IAAb;MACAG,cAAc,GAAI;AAC9B,UAAUF,KAAM;AAChB,YAAYC,MAAM,CAACF,IAAI,GAAG,CAAR,CAAW;AAC7B,UAAUC,KAAM;AAChB,YAAYC,MAAM,CAACF,IAAI,GAAG,CAAR,CAAW;AAC7B,UAAUC,KAAM;AAChB,YAAYC,MAAM,CAACF,IAAI,GAAG,CAAR,CAAW;AAC7B,UAAUC,KAAM;AAChB,YAAYC,MAAM,CAACF,IAAI,GAAG,CAAR,CAAW,GARjB;IASH;;IACD,MAAMO,QAAQ,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+Bf,KAA/B,CAAqC,CAArC,EAAwCY,UAAxC,CAAjB;IACA,MAAMI,SAAS,GAAG,MAAMD,QAAQ,CAACH,UAAU,GAAG,CAAd,CAAhC,CA/C0C,CA+CQ;;IAClD,MAAMK,WAAW,GAAGF,QAAQ,CAACG,GAAT,CAAaC,CAAC,IAAI,SAASA,CAA3B,CAApB;IACA,MAAMC,UAAU,GAAGnC,WAAW,CAAC,YAAD,EAAe2B,UAAU,GAAG,CAA5B,CAAX,CAA0CS,MAA1C,CAAiD,SAAjD,CAAnB;IACA,MAAMC,UAAU,GAAGrC,WAAW,CAAC,YAAD,EAAe2B,UAAU,GAAG,CAA5B,CAAX,CAA0CS,MAA1C,CAAiD,SAAjD,CAAnB;IACA,MAAME,UAAU,GAAGtC,WAAW,CAAC,YAAD,EAAe2B,UAAU,GAAG,CAA5B,CAAX,CAA0CS,MAA1C,CAAiD,SAAjD,CAAnB;IACA,MAAMG,UAAU,GAAGvC,WAAW,CAAC,YAAD,EAAe2B,UAAU,GAAG,CAA5B,CAAX,CAA0CS,MAA1C,CAAiD,SAAjD,CAAnB;IACA,MAAMI,MAAM,GAAIlC,EAAE,KAAK,KAAR,GAAiB,aAAjB,GAAiC,UAAhD;IACA,MAAMmC,iBAAiB,GAAGlC,SAAS,GAAG,EAAH,GAAS;AACpD,sDAAsD4B,UAAU,CAACN,IAAX,EAAkB;AACxE,sDAAsDQ,UAAU,CAACR,IAAX,EAAkB;AACxE,sDAAsDS,UAAU,CAACT,IAAX,EAAkB;AACxE,sDAAsDU,UAAU,CAACV,IAAX,EAAkB,MAJhE;IAKA,MAAMa,UAAU,GAAI;AAC5B,0BAA0BP,UAAU,CAACN,IAAX,EAAkB;AAC5C,uCAAuCQ,UAAU,CAACR,IAAX,EAAkB;AACzD,uCAAuCS,UAAU,CAACT,IAAX,EAAkB;AACzD,qDAAqDU,UAAU,CAACV,IAAX,EAAkB,SAJ/D;IAKA,MAAMc,6BAA6B,GAAGpC,SAAS,GAAG,EAAH,GAAS;AAChE,qCAAqCyB,WAAW,CAACH,IAAZ,EAAmB;AACxD,4CAA4CC,QAAQ,CAACD,IAAT,EAAgB;AAC5D,iDAAiDC,QAAQ,CAACf,KAAT,CAAe,CAAC,CAAhB,EAAmBc,IAAnB,EAA0B;AAC3E,QAJQ;IAKA,KAAKe,QAAL,GAAiB;AACzB,0BAA0BZ,WAAW,CAACH,IAAZ,EAAmB;AAC7C,iCAAiCC,QAAQ,CAACD,IAAT,EAAgB;AACjD,sCAAsCC,QAAQ,CAACf,KAAT,CAAe,CAAC,CAAhB,EAAmBc,IAAnB,EAA0B;AAChE;AACA,QAAQc,6BAA8B;AACtC;AACA,UAAUnB,KAAM;AAChB,4BAA4BC,MAAM,CAACF,IAAI,GAAG,CAAR,CAAW,MAAKD,QAAQ,CAACC,IAAI,GAAG,CAAR,CAAR,GAAqB,CAAE;AACzE,4BAA4BE,MAAM,CAACF,IAAI,GAAG,CAAR,CAAW,MAAKD,QAAQ,CAACC,IAAI,GAAG,CAAR,CAAR,GAAqB,CAAE;AACzE,UAAUG,cAAe;AACzB,yCAAyCK,SAAU,eAAcA,SAAU;AAC3E,sBAAsBA,SAAU,eAAcA,SAAU,OAAM1B,UAAW;AACzE;AACA;AACA,2BAA2BqC,UAAW;AACtC;AACA,8BAA8BrC,UAAW;AACzC;AACA,YAAYoC,iBAAkB;AAC9B,6BAA6BC,UAAW;AACxC;AACA;AACA,mBAAmBF,MAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAlCQ;EAmCH;;AAzG+B"},"metadata":{},"sourceType":"module"}