{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Mean, util } from '@tensorflow/tfjs-core';\nimport { cast } from './Cast';\nimport { div } from './RealDiv';\nimport { sum } from './Sum';\nexport function mean(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis,\n    keepDims\n  } = attrs;\n  const axes = util.parseAxisParam(axis, x.shape);\n  const shapes = backend_util.computeOutAndReduceShapes(x.shape, axes);\n  const reduceShape = shapes[1];\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const toDispose = [];\n  const reduceSizeScalar = backend.makeTensorInfo([], 'float32', new Float32Array([reduceSize]));\n  toDispose.push(reduceSizeScalar);\n  const $x = cast({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      dtype: 'float32'\n    }\n  });\n  toDispose.push($x);\n  const res = div({\n    inputs: {\n      a: $x,\n      b: reduceSizeScalar\n    },\n    backend\n  });\n  toDispose.push(res);\n  const result = sum({\n    inputs: {\n      x: res\n    },\n    backend,\n    attrs: {\n      axis,\n      keepDims\n    }\n  });\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return result;\n}\nexport const meanConfig = {\n  kernelName: Mean,\n  backendName: 'cpu',\n  kernelFunc: mean\n};","map":{"version":3,"names":["backend_util","Mean","util","cast","div","sum","mean","args","inputs","backend","attrs","x","axis","keepDims","axes","parseAxisParam","shape","shapes","computeOutAndReduceShapes","reduceShape","reduceSize","sizeFromShape","toDispose","reduceSizeScalar","makeTensorInfo","Float32Array","push","$x","dtype","res","a","b","result","forEach","t","disposeIntermediateTensorInfo","meanConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Mean.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Mean, util } from '@tensorflow/tfjs-core';\nimport { cast } from './Cast';\nimport { div } from './RealDiv';\nimport { sum } from './Sum';\nexport function mean(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    const axes = util.parseAxisParam(axis, x.shape);\n    const shapes = backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const reduceShape = shapes[1];\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const toDispose = [];\n    const reduceSizeScalar = backend.makeTensorInfo([], 'float32', new Float32Array([reduceSize]));\n    toDispose.push(reduceSizeScalar);\n    const $x = cast({ inputs: { x }, backend, attrs: { dtype: 'float32' } });\n    toDispose.push($x);\n    const res = div({ inputs: { a: $x, b: reduceSizeScalar }, backend });\n    toDispose.push(res);\n    const result = sum({ inputs: { x: res }, backend, attrs: { axis, keepDims } });\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return result;\n}\nexport const meanConfig = {\n    kernelName: Mean,\n    backendName: 'cpu',\n    kernelFunc: mean\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,EAAuBC,IAAvB,EAA6BC,IAA7B,QAAyC,uBAAzC;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,GAAT,QAAoB,WAApB;AACA,SAASC,GAAT,QAAoB,OAApB;AACA,OAAO,SAASC,IAAT,CAAcC,IAAd,EAAoB;EACvB,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BH,IAAnC;EACA,MAAM;IAAEI;EAAF,IAAQH,MAAd;EACA,MAAM;IAAEI,IAAF;IAAQC;EAAR,IAAqBH,KAA3B;EACA,MAAMI,IAAI,GAAGZ,IAAI,CAACa,cAAL,CAAoBH,IAApB,EAA0BD,CAAC,CAACK,KAA5B,CAAb;EACA,MAAMC,MAAM,GAAGjB,YAAY,CAACkB,yBAAb,CAAuCP,CAAC,CAACK,KAAzC,EAAgDF,IAAhD,CAAf;EACA,MAAMK,WAAW,GAAGF,MAAM,CAAC,CAAD,CAA1B;EACA,MAAMG,UAAU,GAAGlB,IAAI,CAACmB,aAAL,CAAmBF,WAAnB,CAAnB;EACA,MAAMG,SAAS,GAAG,EAAlB;EACA,MAAMC,gBAAgB,GAAGd,OAAO,CAACe,cAAR,CAAuB,EAAvB,EAA2B,SAA3B,EAAsC,IAAIC,YAAJ,CAAiB,CAACL,UAAD,CAAjB,CAAtC,CAAzB;EACAE,SAAS,CAACI,IAAV,CAAeH,gBAAf;EACA,MAAMI,EAAE,GAAGxB,IAAI,CAAC;IAAEK,MAAM,EAAE;MAAEG;IAAF,CAAV;IAAiBF,OAAjB;IAA0BC,KAAK,EAAE;MAAEkB,KAAK,EAAE;IAAT;EAAjC,CAAD,CAAf;EACAN,SAAS,CAACI,IAAV,CAAeC,EAAf;EACA,MAAME,GAAG,GAAGzB,GAAG,CAAC;IAAEI,MAAM,EAAE;MAAEsB,CAAC,EAAEH,EAAL;MAASI,CAAC,EAAER;IAAZ,CAAV;IAA0Cd;EAA1C,CAAD,CAAf;EACAa,SAAS,CAACI,IAAV,CAAeG,GAAf;EACA,MAAMG,MAAM,GAAG3B,GAAG,CAAC;IAAEG,MAAM,EAAE;MAAEG,CAAC,EAAEkB;IAAL,CAAV;IAAsBpB,OAAtB;IAA+BC,KAAK,EAAE;MAAEE,IAAF;MAAQC;IAAR;EAAtC,CAAD,CAAlB;EACAS,SAAS,CAACW,OAAV,CAAkBC,CAAC,IAAIzB,OAAO,CAAC0B,6BAAR,CAAsCD,CAAtC,CAAvB;EACA,OAAOF,MAAP;AACH;AACD,OAAO,MAAMI,UAAU,GAAG;EACtBC,UAAU,EAAEpC,IADU;EAEtBqC,WAAW,EAAE,KAFS;EAGtBC,UAAU,EAAEjC;AAHU,CAAnB"},"metadata":{},"sourceType":"module"}