{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { device_util, env } from '@tensorflow/tfjs-core';\nimport { getMaxTexturesInShader, getWebGLDisjointQueryTimerVersion, getWebGLMaxTextureSize, isCapableOfRenderingToFloatTexture, isDownloadFloatTextureEnabled, isWebGLFenceEnabled, isWebGLVersionEnabled } from './webgl_util';\nconst ENV = env();\n/**\n * This file contains WebGL-specific flag registrations.\n */\n\n/**\n * True if WebGL is supported.\n */\n\nENV.registerFlag('HAS_WEBGL', () => ENV.getNumber('WEBGL_VERSION') > 0);\n/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */\n\nENV.registerFlag('WEBGL_VERSION', () => {\n  if (isWebGLVersionEnabled(2)) {\n    return 2;\n  } else if (isWebGLVersionEnabled(1)) {\n    return 1;\n  }\n\n  return 0;\n});\n/** Whether to check for numerical representation problems. */\n\nENV.registerFlag('WEBGL_CHECK_NUMERICAL_PROBLEMS', () => false);\nENV.registerFlag('WEBGL_BUFFER_SUPPORTED', () => ENV.get('WEBGL_VERSION') === 2);\n/** Whether the WebGL backend will sometimes forward ops to the CPU. */\n\nENV.registerFlag('WEBGL_CPU_FORWARD', () => true);\n/** Whether the WebGL backend will always use f16 textures for rendering. */\n\nENV.registerFlag('WEBGL_FORCE_F16_TEXTURES', () => false);\n/** Whether to turn all packing related flags on. */\n\nENV.registerFlag('WEBGL_PACK', () => ENV.getBool('HAS_WEBGL'));\n/** Whether we will pack the batchnormalization op. */\n\nENV.registerFlag('WEBGL_PACK_NORMALIZATION', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack the clip op. */\n\nENV.registerFlag('WEBGL_PACK_CLIP', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack the depthwise conv op. */\n\nENV.registerFlag('WEBGL_PACK_DEPTHWISECONV', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack binary ops. */\n\nENV.registerFlag('WEBGL_PACK_BINARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack unary ops. */\n\nENV.registerFlag('WEBGL_PACK_UNARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack array ops. */\n\nENV.registerFlag('WEBGL_PACK_ARRAY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack image ops. */\n\nENV.registerFlag('WEBGL_PACK_IMAGE_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack reduce ops. */\n\nENV.registerFlag('WEBGL_PACK_REDUCE', () => ENV.getBool('WEBGL_PACK'));\n/** Whether packed WebGL kernels lazily unpack their outputs. */\n\nENV.registerFlag('WEBGL_LAZILY_UNPACK', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will use the im2col algorithm to speed up convolutions. */\n\nENV.registerFlag('WEBGL_CONV_IM2COL', () => ENV.getBool('WEBGL_PACK'));\n/** The maximum texture dimension. */\n\nENV.registerFlag('WEBGL_MAX_TEXTURE_SIZE', () => getWebGLMaxTextureSize(ENV.getNumber('WEBGL_VERSION')));\n/** The maximum texture dimension. */\n\nENV.registerFlag('WEBGL_MAX_TEXTURES_IN_SHADER', () => getMaxTexturesInShader(ENV.getNumber('WEBGL_VERSION')));\n/**\n * The disjoint_query_timer extension version.\n * 0: disabled, 1: EXT_disjoint_timer_query, 2:\n * EXT_disjoint_timer_query_webgl2.\n * In Firefox with WebGL 2.0,\n * EXT_disjoint_timer_query_webgl2 is not available, so we must use the\n * WebGL 1.0 extension.\n */\n\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', () => {\n  const webGLVersion = ENV.getNumber('WEBGL_VERSION');\n\n  if (webGLVersion === 0) {\n    return 0;\n  }\n\n  return getWebGLDisjointQueryTimerVersion(webGLVersion);\n});\n/**\n * Whether the timer object from the disjoint_query_timer extension gives\n * timing information that is reliable.\n */\n\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE', () => ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 && !device_util.isMobile());\n/**\n * Whether the device is physically capable of rendering to float32 textures.\n */\n\nENV.registerFlag('WEBGL_RENDER_FLOAT32_CAPABLE', () => isCapableOfRenderingToFloatTexture(ENV.getNumber('WEBGL_VERSION')));\n/**\n * Whether rendering to float32 textures is enabled. If disabled, renders to\n * float16 textures.\n */\n\nENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', () => {\n  return ENV.getBool('WEBGL_FORCE_F16_TEXTURES') ? false : ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');\n});\n/**\n * Whether downloading float textures is enabled (16 or 32 bit). If disabled,\n * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.\n */\n\nENV.registerFlag('WEBGL_DOWNLOAD_FLOAT_ENABLED', () => isDownloadFloatTextureEnabled(ENV.getNumber('WEBGL_VERSION')));\n/** Whether the fence API is available. */\n\nENV.registerFlag('WEBGL_FENCE_API_ENABLED', () => isWebGLFenceEnabled(ENV.getNumber('WEBGL_VERSION')));\n/**\n * Tensors with size <= than this will be uploaded as uniforms, not textures.\n */\n\nENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', () => {\n  // Use uniform uploads only when 32bit floats are supported. In\n  // 16bit\n  // environments there are problems with comparing a 16bit texture value\n  // with a 32bit uniform value.\n  const useUniforms = ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');\n  return useUniforms ? 4 : 0;\n});\n/**\n * If the total number of bytes allocated on the GPU is greater than this\n * number, we will aggressively delete textures upon disposal with\n * gl.deleteMatrixTexture, rather than making them available for reuse.\n *\n * Default value -1 indicates that we will never aggressively delete textures.\n */\n\nENV.registerFlag('WEBGL_DELETE_TEXTURE_THRESHOLD', () => {\n  return -1;\n}, threshold => {\n  if (threshold < 0 && threshold !== -1) {\n    throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never ` + `delete) or at least 0, but got ${threshold}.`);\n  }\n});\n/**\n * Trigger a manual GL command flush if the threshold of time has passed since\n * previous Kernel execution. This can be useful for Andorid device where GL\n * command flush are delayed un til the end of javascript task. This value is\n * measured in millisecond. Typically you want to set this value to close to 1.\n *\n * Default value 1 for mobile chrome, and -1 for rest cases. -1 indicates that\n * we will not enforce manual flush and depend on system default flush schedule.\n */\n\nENV.registerFlag('WEBGL_FLUSH_THRESHOLD', () => {\n  return device_util.isMobile() ? 1 : -1;\n}, threshold => {\n  if (threshold < 0 && threshold !== -1) {\n    throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never ` + `manual flush) or at least 0, but got ${threshold}.`);\n  }\n});\n/**\n * Threshold for input tensor size that determines whether WebGL backend will\n * delegate computation to CPU.\n *\n * Default value is 128.\n */\n\nENV.registerFlag('CPU_HANDOFF_SIZE_THRESHOLD', () => 128);\n/** Whether we will use shapes uniforms. */\n\nENV.registerFlag('WEBGL_USE_SHAPES_UNIFORMS', () => false);\n/**\n * Threshold for last dimension of input tensor that determines whether\n * WebGL backend for the Top K op will delegate computation to CPU. If input\n * is smaller than threshold then CPU will be used\n *\n * Default value is 100000.\n */\n\nENV.registerFlag('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD', () => 100000);\n/**\n * Threshold for K that determines whether\n * WebGL backend for the Top K op will delegate computation to CPU. If k\n * is larger than threshold then CPU will be used\n *\n * Default value is 128.\n */\n\nENV.registerFlag('TOPK_K_CPU_HANDOFF_THRESHOLD', () => 128);\n/** Whether we will use the experimental conv op. */\n\nENV.registerFlag('WEBGL_EXP_CONV', () => false);\n/**\n * If the device performance is low or if no hardware GPU is available, whether\n * software WebGL will be used.\n */\n\nENV.registerFlag('SOFTWARE_WEBGL_ENABLED', () => ENV.getBool('IS_TEST'));\n/**\n * For narrow texture (physical height or physical width is 1), if the length of\n * any texture edges exceed the threshold, the texture will be reshaped to be\n * more squarish.\n *\n * This flag is used to help some GPUs that could not provide correct\n * interpolations for long skinny triangles. We found Mali GPU probably has this\n * problem: https://github.com/tensorflow/tfjs/issues/6775.\n */\n\nENV.registerFlag('WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE', () => Infinity);\n/**\n * If the flag is set to true, the max size of the narrow texture will be auto\n * computed and it will be considerred as a threshold to reshape the narrow\n * texture to be more squarish.\n *\n * This flag is used to help some GPUs that could not provide correct\n * interpolations for long skinny triangles. We found Mali GPU probably has this\n * problem: https://github.com/tensorflow/tfjs/issues/6775.\n */\n\nENV.registerFlag('WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE', () => false);\n/**\n * Whether to use the customized isnan. It's only useful for webgl2 since webgl1\n * doesn't have the builtin isnan.\n */\n\nENV.registerFlag('WEBGL2_ISNAN_CUSTOM', () => false);","map":{"version":3,"names":["device_util","env","getMaxTexturesInShader","getWebGLDisjointQueryTimerVersion","getWebGLMaxTextureSize","isCapableOfRenderingToFloatTexture","isDownloadFloatTextureEnabled","isWebGLFenceEnabled","isWebGLVersionEnabled","ENV","registerFlag","getNumber","get","getBool","webGLVersion","isMobile","useUniforms","threshold","Error","Infinity"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/flags_webgl.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { device_util, env } from '@tensorflow/tfjs-core';\nimport { getMaxTexturesInShader, getWebGLDisjointQueryTimerVersion, getWebGLMaxTextureSize, isCapableOfRenderingToFloatTexture, isDownloadFloatTextureEnabled, isWebGLFenceEnabled, isWebGLVersionEnabled } from './webgl_util';\nconst ENV = env();\n/**\n * This file contains WebGL-specific flag registrations.\n */\n/**\n * True if WebGL is supported.\n */\nENV.registerFlag('HAS_WEBGL', () => ENV.getNumber('WEBGL_VERSION') > 0);\n/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */\nENV.registerFlag('WEBGL_VERSION', () => {\n    if (isWebGLVersionEnabled(2)) {\n        return 2;\n    }\n    else if (isWebGLVersionEnabled(1)) {\n        return 1;\n    }\n    return 0;\n});\n/** Whether to check for numerical representation problems. */\nENV.registerFlag('WEBGL_CHECK_NUMERICAL_PROBLEMS', () => false);\nENV.registerFlag('WEBGL_BUFFER_SUPPORTED', () => ENV.get('WEBGL_VERSION') === 2);\n/** Whether the WebGL backend will sometimes forward ops to the CPU. */\nENV.registerFlag('WEBGL_CPU_FORWARD', () => true);\n/** Whether the WebGL backend will always use f16 textures for rendering. */\nENV.registerFlag('WEBGL_FORCE_F16_TEXTURES', () => false);\n/** Whether to turn all packing related flags on. */\nENV.registerFlag('WEBGL_PACK', () => ENV.getBool('HAS_WEBGL'));\n/** Whether we will pack the batchnormalization op. */\nENV.registerFlag('WEBGL_PACK_NORMALIZATION', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack the clip op. */\nENV.registerFlag('WEBGL_PACK_CLIP', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack the depthwise conv op. */\nENV.registerFlag('WEBGL_PACK_DEPTHWISECONV', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack binary ops. */\nENV.registerFlag('WEBGL_PACK_BINARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack unary ops. */\nENV.registerFlag('WEBGL_PACK_UNARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack array ops. */\nENV.registerFlag('WEBGL_PACK_ARRAY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack image ops. */\nENV.registerFlag('WEBGL_PACK_IMAGE_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack reduce ops. */\nENV.registerFlag('WEBGL_PACK_REDUCE', () => ENV.getBool('WEBGL_PACK'));\n/** Whether packed WebGL kernels lazily unpack their outputs. */\nENV.registerFlag('WEBGL_LAZILY_UNPACK', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will use the im2col algorithm to speed up convolutions. */\nENV.registerFlag('WEBGL_CONV_IM2COL', () => ENV.getBool('WEBGL_PACK'));\n/** The maximum texture dimension. */\nENV.registerFlag('WEBGL_MAX_TEXTURE_SIZE', () => getWebGLMaxTextureSize(ENV.getNumber('WEBGL_VERSION')));\n/** The maximum texture dimension. */\nENV.registerFlag('WEBGL_MAX_TEXTURES_IN_SHADER', () => getMaxTexturesInShader(ENV.getNumber('WEBGL_VERSION')));\n/**\n * The disjoint_query_timer extension version.\n * 0: disabled, 1: EXT_disjoint_timer_query, 2:\n * EXT_disjoint_timer_query_webgl2.\n * In Firefox with WebGL 2.0,\n * EXT_disjoint_timer_query_webgl2 is not available, so we must use the\n * WebGL 1.0 extension.\n */\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', () => {\n    const webGLVersion = ENV.getNumber('WEBGL_VERSION');\n    if (webGLVersion === 0) {\n        return 0;\n    }\n    return getWebGLDisjointQueryTimerVersion(webGLVersion);\n});\n/**\n * Whether the timer object from the disjoint_query_timer extension gives\n * timing information that is reliable.\n */\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE', () => ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 &&\n    !device_util.isMobile());\n/**\n * Whether the device is physically capable of rendering to float32 textures.\n */\nENV.registerFlag('WEBGL_RENDER_FLOAT32_CAPABLE', () => isCapableOfRenderingToFloatTexture(ENV.getNumber('WEBGL_VERSION')));\n/**\n * Whether rendering to float32 textures is enabled. If disabled, renders to\n * float16 textures.\n */\nENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', () => {\n    return ENV.getBool('WEBGL_FORCE_F16_TEXTURES') ?\n        false :\n        ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');\n});\n/**\n * Whether downloading float textures is enabled (16 or 32 bit). If disabled,\n * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.\n */\nENV.registerFlag('WEBGL_DOWNLOAD_FLOAT_ENABLED', () => isDownloadFloatTextureEnabled(ENV.getNumber('WEBGL_VERSION')));\n/** Whether the fence API is available. */\nENV.registerFlag('WEBGL_FENCE_API_ENABLED', () => isWebGLFenceEnabled(ENV.getNumber('WEBGL_VERSION')));\n/**\n * Tensors with size <= than this will be uploaded as uniforms, not textures.\n */\nENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', () => {\n    // Use uniform uploads only when 32bit floats are supported. In\n    // 16bit\n    // environments there are problems with comparing a 16bit texture value\n    // with a 32bit uniform value.\n    const useUniforms = ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');\n    return useUniforms ? 4 : 0;\n});\n/**\n * If the total number of bytes allocated on the GPU is greater than this\n * number, we will aggressively delete textures upon disposal with\n * gl.deleteMatrixTexture, rather than making them available for reuse.\n *\n * Default value -1 indicates that we will never aggressively delete textures.\n */\nENV.registerFlag('WEBGL_DELETE_TEXTURE_THRESHOLD', () => {\n    return -1;\n}, threshold => {\n    if (threshold < 0 && threshold !== -1) {\n        throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never ` +\n            `delete) or at least 0, but got ${threshold}.`);\n    }\n});\n/**\n * Trigger a manual GL command flush if the threshold of time has passed since\n * previous Kernel execution. This can be useful for Andorid device where GL\n * command flush are delayed un til the end of javascript task. This value is\n * measured in millisecond. Typically you want to set this value to close to 1.\n *\n * Default value 1 for mobile chrome, and -1 for rest cases. -1 indicates that\n * we will not enforce manual flush and depend on system default flush schedule.\n */\nENV.registerFlag('WEBGL_FLUSH_THRESHOLD', () => {\n    return device_util.isMobile() ? 1 : -1;\n}, threshold => {\n    if (threshold < 0 && threshold !== -1) {\n        throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never ` +\n            `manual flush) or at least 0, but got ${threshold}.`);\n    }\n});\n/**\n * Threshold for input tensor size that determines whether WebGL backend will\n * delegate computation to CPU.\n *\n * Default value is 128.\n */\nENV.registerFlag('CPU_HANDOFF_SIZE_THRESHOLD', () => 128);\n/** Whether we will use shapes uniforms. */\nENV.registerFlag('WEBGL_USE_SHAPES_UNIFORMS', () => false);\n/**\n * Threshold for last dimension of input tensor that determines whether\n * WebGL backend for the Top K op will delegate computation to CPU. If input\n * is smaller than threshold then CPU will be used\n *\n * Default value is 100000.\n */\nENV.registerFlag('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD', () => 100000);\n/**\n * Threshold for K that determines whether\n * WebGL backend for the Top K op will delegate computation to CPU. If k\n * is larger than threshold then CPU will be used\n *\n * Default value is 128.\n */\nENV.registerFlag('TOPK_K_CPU_HANDOFF_THRESHOLD', () => 128);\n/** Whether we will use the experimental conv op. */\nENV.registerFlag('WEBGL_EXP_CONV', () => false);\n/**\n * If the device performance is low or if no hardware GPU is available, whether\n * software WebGL will be used.\n */\nENV.registerFlag('SOFTWARE_WEBGL_ENABLED', () => ENV.getBool('IS_TEST'));\n/**\n * For narrow texture (physical height or physical width is 1), if the length of\n * any texture edges exceed the threshold, the texture will be reshaped to be\n * more squarish.\n *\n * This flag is used to help some GPUs that could not provide correct\n * interpolations for long skinny triangles. We found Mali GPU probably has this\n * problem: https://github.com/tensorflow/tfjs/issues/6775.\n */\nENV.registerFlag('WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE', () => Infinity);\n/**\n * If the flag is set to true, the max size of the narrow texture will be auto\n * computed and it will be considerred as a threshold to reshape the narrow\n * texture to be more squarish.\n *\n * This flag is used to help some GPUs that could not provide correct\n * interpolations for long skinny triangles. We found Mali GPU probably has this\n * problem: https://github.com/tensorflow/tfjs/issues/6775.\n */\nENV.registerFlag('WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE', () => false);\n/**\n * Whether to use the customized isnan. It's only useful for webgl2 since webgl1\n * doesn't have the builtin isnan.\n */\nENV.registerFlag('WEBGL2_ISNAN_CUSTOM', () => false);\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,WAAT,EAAsBC,GAAtB,QAAiC,uBAAjC;AACA,SAASC,sBAAT,EAAiCC,iCAAjC,EAAoEC,sBAApE,EAA4FC,kCAA5F,EAAgIC,6BAAhI,EAA+JC,mBAA/J,EAAoLC,qBAApL,QAAiN,cAAjN;AACA,MAAMC,GAAG,GAAGR,GAAG,EAAf;AACA;AACA;AACA;;AACA;AACA;AACA;;AACAQ,GAAG,CAACC,YAAJ,CAAiB,WAAjB,EAA8B,MAAMD,GAAG,CAACE,SAAJ,CAAc,eAAd,IAAiC,CAArE;AACA;;AACAF,GAAG,CAACC,YAAJ,CAAiB,eAAjB,EAAkC,MAAM;EACpC,IAAIF,qBAAqB,CAAC,CAAD,CAAzB,EAA8B;IAC1B,OAAO,CAAP;EACH,CAFD,MAGK,IAAIA,qBAAqB,CAAC,CAAD,CAAzB,EAA8B;IAC/B,OAAO,CAAP;EACH;;EACD,OAAO,CAAP;AACH,CARD;AASA;;AACAC,GAAG,CAACC,YAAJ,CAAiB,gCAAjB,EAAmD,MAAM,KAAzD;AACAD,GAAG,CAACC,YAAJ,CAAiB,wBAAjB,EAA2C,MAAMD,GAAG,CAACG,GAAJ,CAAQ,eAAR,MAA6B,CAA9E;AACA;;AACAH,GAAG,CAACC,YAAJ,CAAiB,mBAAjB,EAAsC,MAAM,IAA5C;AACA;;AACAD,GAAG,CAACC,YAAJ,CAAiB,0BAAjB,EAA6C,MAAM,KAAnD;AACA;;AACAD,GAAG,CAACC,YAAJ,CAAiB,YAAjB,EAA+B,MAAMD,GAAG,CAACI,OAAJ,CAAY,WAAZ,CAArC;AACA;;AACAJ,GAAG,CAACC,YAAJ,CAAiB,0BAAjB,EAA6C,MAAMD,GAAG,CAACI,OAAJ,CAAY,YAAZ,CAAnD;AACA;;AACAJ,GAAG,CAACC,YAAJ,CAAiB,iBAAjB,EAAoC,MAAMD,GAAG,CAACI,OAAJ,CAAY,YAAZ,CAA1C;AACA;;AACAJ,GAAG,CAACC,YAAJ,CAAiB,0BAAjB,EAA6C,MAAMD,GAAG,CAACI,OAAJ,CAAY,YAAZ,CAAnD;AACA;;AACAJ,GAAG,CAACC,YAAJ,CAAiB,8BAAjB,EAAiD,MAAMD,GAAG,CAACI,OAAJ,CAAY,YAAZ,CAAvD;AACA;;AACAJ,GAAG,CAACC,YAAJ,CAAiB,6BAAjB,EAAgD,MAAMD,GAAG,CAACI,OAAJ,CAAY,YAAZ,CAAtD;AACA;;AACAJ,GAAG,CAACC,YAAJ,CAAiB,6BAAjB,EAAgD,MAAMD,GAAG,CAACI,OAAJ,CAAY,YAAZ,CAAtD;AACA;;AACAJ,GAAG,CAACC,YAAJ,CAAiB,6BAAjB,EAAgD,MAAMD,GAAG,CAACI,OAAJ,CAAY,YAAZ,CAAtD;AACA;;AACAJ,GAAG,CAACC,YAAJ,CAAiB,mBAAjB,EAAsC,MAAMD,GAAG,CAACI,OAAJ,CAAY,YAAZ,CAA5C;AACA;;AACAJ,GAAG,CAACC,YAAJ,CAAiB,qBAAjB,EAAwC,MAAMD,GAAG,CAACI,OAAJ,CAAY,YAAZ,CAA9C;AACA;;AACAJ,GAAG,CAACC,YAAJ,CAAiB,mBAAjB,EAAsC,MAAMD,GAAG,CAACI,OAAJ,CAAY,YAAZ,CAA5C;AACA;;AACAJ,GAAG,CAACC,YAAJ,CAAiB,wBAAjB,EAA2C,MAAMN,sBAAsB,CAACK,GAAG,CAACE,SAAJ,CAAc,eAAd,CAAD,CAAvE;AACA;;AACAF,GAAG,CAACC,YAAJ,CAAiB,8BAAjB,EAAiD,MAAMR,sBAAsB,CAACO,GAAG,CAACE,SAAJ,CAAc,eAAd,CAAD,CAA7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAF,GAAG,CAACC,YAAJ,CAAiB,8CAAjB,EAAiE,MAAM;EACnE,MAAMI,YAAY,GAAGL,GAAG,CAACE,SAAJ,CAAc,eAAd,CAArB;;EACA,IAAIG,YAAY,KAAK,CAArB,EAAwB;IACpB,OAAO,CAAP;EACH;;EACD,OAAOX,iCAAiC,CAACW,YAAD,CAAxC;AACH,CAND;AAOA;AACA;AACA;AACA;;AACAL,GAAG,CAACC,YAAJ,CAAiB,+CAAjB,EAAkE,MAAMD,GAAG,CAACE,SAAJ,CAAc,8CAAd,IAAgE,CAAhE,IACpE,CAACX,WAAW,CAACe,QAAZ,EADL;AAEA;AACA;AACA;;AACAN,GAAG,CAACC,YAAJ,CAAiB,8BAAjB,EAAiD,MAAML,kCAAkC,CAACI,GAAG,CAACE,SAAJ,CAAc,eAAd,CAAD,CAAzF;AACA;AACA;AACA;AACA;;AACAF,GAAG,CAACC,YAAJ,CAAiB,8BAAjB,EAAiD,MAAM;EACnD,OAAOD,GAAG,CAACI,OAAJ,CAAY,0BAAZ,IACH,KADG,GAEHJ,GAAG,CAACI,OAAJ,CAAY,8BAAZ,CAFJ;AAGH,CAJD;AAKA;AACA;AACA;AACA;;AACAJ,GAAG,CAACC,YAAJ,CAAiB,8BAAjB,EAAiD,MAAMJ,6BAA6B,CAACG,GAAG,CAACE,SAAJ,CAAc,eAAd,CAAD,CAApF;AACA;;AACAF,GAAG,CAACC,YAAJ,CAAiB,yBAAjB,EAA4C,MAAMH,mBAAmB,CAACE,GAAG,CAACE,SAAJ,CAAc,eAAd,CAAD,CAArE;AACA;AACA;AACA;;AACAF,GAAG,CAACC,YAAJ,CAAiB,2BAAjB,EAA8C,MAAM;EAChD;EACA;EACA;EACA;EACA,MAAMM,WAAW,GAAGP,GAAG,CAACI,OAAJ,CAAY,8BAAZ,CAApB;EACA,OAAOG,WAAW,GAAG,CAAH,GAAO,CAAzB;AACH,CAPD;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAP,GAAG,CAACC,YAAJ,CAAiB,gCAAjB,EAAmD,MAAM;EACrD,OAAO,CAAC,CAAR;AACH,CAFD,EAEGO,SAAS,IAAI;EACZ,IAAIA,SAAS,GAAG,CAAZ,IAAiBA,SAAS,KAAK,CAAC,CAApC,EAAuC;IACnC,MAAM,IAAIC,KAAJ,CAAW,8DAAD,GACX,kCAAiCD,SAAU,GAD1C,CAAN;EAEH;AACJ,CAPD;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAR,GAAG,CAACC,YAAJ,CAAiB,uBAAjB,EAA0C,MAAM;EAC5C,OAAOV,WAAW,CAACe,QAAZ,KAAyB,CAAzB,GAA6B,CAAC,CAArC;AACH,CAFD,EAEGE,SAAS,IAAI;EACZ,IAAIA,SAAS,GAAG,CAAZ,IAAiBA,SAAS,KAAK,CAAC,CAApC,EAAuC;IACnC,MAAM,IAAIC,KAAJ,CAAW,qDAAD,GACX,wCAAuCD,SAAU,GADhD,CAAN;EAEH;AACJ,CAPD;AAQA;AACA;AACA;AACA;AACA;AACA;;AACAR,GAAG,CAACC,YAAJ,CAAiB,4BAAjB,EAA+C,MAAM,GAArD;AACA;;AACAD,GAAG,CAACC,YAAJ,CAAiB,2BAAjB,EAA8C,MAAM,KAApD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAD,GAAG,CAACC,YAAJ,CAAiB,0CAAjB,EAA6D,MAAM,MAAnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAD,GAAG,CAACC,YAAJ,CAAiB,8BAAjB,EAAiD,MAAM,GAAvD;AACA;;AACAD,GAAG,CAACC,YAAJ,CAAiB,gBAAjB,EAAmC,MAAM,KAAzC;AACA;AACA;AACA;AACA;;AACAD,GAAG,CAACC,YAAJ,CAAiB,wBAAjB,EAA2C,MAAMD,GAAG,CAACI,OAAJ,CAAY,SAAZ,CAAjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAJ,GAAG,CAACC,YAAJ,CAAiB,mCAAjB,EAAsD,MAAMS,QAA5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAV,GAAG,CAACC,YAAJ,CAAiB,0CAAjB,EAA6D,MAAM,KAAnE;AACA;AACA;AACA;AACA;;AACAD,GAAG,CAACC,YAAJ,CAAiB,qBAAjB,EAAwC,MAAM,KAA9C"},"metadata":{},"sourceType":"module"}