{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Returns the dimensions in the input shape that are broadcasted to\n * produce the provided output shape.\n *\n * The returned dimensions are 0-indexed and sorted. An example:\n * inShape = [4, 1, 3]\n * outShape = [5, 4, 3, 3]\n * result = [1]. Dimension 1 (2nd dimension of input) gets broadcasted 1 => 3.\n */\nexport function getBroadcastDims(inShape, outShape) {\n  const inRank = inShape.length;\n  const dims = [];\n\n  for (let i = 0; i < inRank; i++) {\n    const dim = inRank - 1 - i;\n    const a = inShape[dim] || 1;\n    const b = outShape[outShape.length - 1 - i] || 1;\n\n    if (b > 1 && a === 1) {\n      dims.unshift(dim);\n    }\n  }\n\n  return dims;\n}\n/**\n * Returns the axes in the output space that should be reduced to produce\n * the input space.\n */\n\nexport function getReductionAxes(inShape, outShape) {\n  const result = [];\n\n  for (let i = 0; i < outShape.length; i++) {\n    const inDim = inShape[inShape.length - i - 1];\n    const outAxis = outShape.length - i - 1;\n    const outDim = outShape[outAxis];\n\n    if (inDim == null || inDim === 1 && outDim > 1) {\n      result.unshift(outAxis);\n    }\n  }\n\n  return result;\n}\nexport function assertAndGetBroadcastShape(shapeA, shapeB) {\n  const result = [];\n  const l = Math.max(shapeA.length, shapeB.length);\n\n  for (let i = 0; i < l; i++) {\n    let a = shapeA[shapeA.length - i - 1];\n\n    if (a == null) {\n      a = 1;\n    }\n\n    let b = shapeB[shapeB.length - i - 1];\n\n    if (b == null) {\n      b = 1;\n    }\n\n    if (a === 1) {\n      result.unshift(b);\n    } else if (b === 1) {\n      result.unshift(a);\n    } else if (a !== b) {\n      const errMsg = `Operands could not be broadcast together with shapes ` + `${shapeA} and ${shapeB}.`;\n      throw Error(errMsg);\n    } else {\n      result.unshift(a);\n    }\n  }\n\n  return result;\n}","map":{"version":3,"names":["getBroadcastDims","inShape","outShape","inRank","length","dims","i","dim","a","b","unshift","getReductionAxes","result","inDim","outAxis","outDim","assertAndGetBroadcastShape","shapeA","shapeB","l","Math","max","errMsg","Error"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Returns the dimensions in the input shape that are broadcasted to\n * produce the provided output shape.\n *\n * The returned dimensions are 0-indexed and sorted. An example:\n * inShape = [4, 1, 3]\n * outShape = [5, 4, 3, 3]\n * result = [1]. Dimension 1 (2nd dimension of input) gets broadcasted 1 => 3.\n */\nexport function getBroadcastDims(inShape, outShape) {\n    const inRank = inShape.length;\n    const dims = [];\n    for (let i = 0; i < inRank; i++) {\n        const dim = inRank - 1 - i;\n        const a = inShape[dim] || 1;\n        const b = outShape[outShape.length - 1 - i] || 1;\n        if (b > 1 && a === 1) {\n            dims.unshift(dim);\n        }\n    }\n    return dims;\n}\n/**\n * Returns the axes in the output space that should be reduced to produce\n * the input space.\n */\nexport function getReductionAxes(inShape, outShape) {\n    const result = [];\n    for (let i = 0; i < outShape.length; i++) {\n        const inDim = inShape[inShape.length - i - 1];\n        const outAxis = outShape.length - i - 1;\n        const outDim = outShape[outAxis];\n        if (inDim == null || (inDim === 1 && outDim > 1)) {\n            result.unshift(outAxis);\n        }\n    }\n    return result;\n}\nexport function assertAndGetBroadcastShape(shapeA, shapeB) {\n    const result = [];\n    const l = Math.max(shapeA.length, shapeB.length);\n    for (let i = 0; i < l; i++) {\n        let a = shapeA[shapeA.length - i - 1];\n        if (a == null) {\n            a = 1;\n        }\n        let b = shapeB[shapeB.length - i - 1];\n        if (b == null) {\n            b = 1;\n        }\n        if (a === 1) {\n            result.unshift(b);\n        }\n        else if (b === 1) {\n            result.unshift(a);\n        }\n        else if (a !== b) {\n            const errMsg = `Operands could not be broadcast together with shapes ` +\n                `${shapeA} and ${shapeB}.`;\n            throw Error(errMsg);\n        }\n        else {\n            result.unshift(a);\n        }\n    }\n    return result;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}