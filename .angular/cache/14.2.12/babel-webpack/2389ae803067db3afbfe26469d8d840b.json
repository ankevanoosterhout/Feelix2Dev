{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * IOHandler implementations based on HTTP requests in the web browser.\n *\n * Uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n */\nimport { env } from '../environment';\nimport { assert } from '../util';\nimport { concatenateArrayBuffers, getModelArtifactsForJSON, getModelArtifactsInfoForJSON, getModelJSONForModelArtifacts, getWeightSpecs } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nimport { loadWeightsAsArrayBuffer } from './weights_loader';\nconst OCTET_STREAM_MIME_TYPE = 'application/octet-stream';\nconst JSON_TYPE = 'application/json';\nexport class HTTPRequest {\n  constructor(path, loadOptions) {\n    this.DEFAULT_METHOD = 'POST';\n\n    if (loadOptions == null) {\n      loadOptions = {};\n    }\n\n    this.weightPathPrefix = loadOptions.weightPathPrefix;\n    this.onProgress = loadOptions.onProgress;\n    this.weightUrlConverter = loadOptions.weightUrlConverter;\n\n    if (loadOptions.fetchFunc != null) {\n      assert(typeof loadOptions.fetchFunc === 'function', () => 'Must pass a function that matches the signature of ' + '`fetch` (see ' + 'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)');\n      this.fetch = loadOptions.fetchFunc;\n    } else {\n      this.fetch = env().platform.fetch;\n    }\n\n    assert(path != null && path.length > 0, () => 'URL path for http must not be null, undefined or ' + 'empty.');\n\n    if (Array.isArray(path)) {\n      assert(path.length === 2, () => 'URL paths for http must have a length of 2, ' + `(actual length is ${path.length}).`);\n    }\n\n    this.path = path;\n\n    if (loadOptions.requestInit != null && loadOptions.requestInit.body != null) {\n      throw new Error('requestInit is expected to have no pre-existing body, but has one.');\n    }\n\n    this.requestInit = loadOptions.requestInit || {};\n  }\n\n  save(modelArtifacts) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n        throw new Error('BrowserHTTPRequest.save() does not support saving model topology ' + 'in binary formats yet.');\n      }\n\n      const init = Object.assign({\n        method: _this.DEFAULT_METHOD\n      }, _this.requestInit);\n      init.body = new FormData();\n      const weightsManifest = [{\n        paths: ['./model.weights.bin'],\n        weights: modelArtifacts.weightSpecs\n      }];\n      const modelTopologyAndWeightManifest = getModelJSONForModelArtifacts(modelArtifacts, weightsManifest);\n      init.body.append('model.json', new Blob([JSON.stringify(modelTopologyAndWeightManifest)], {\n        type: JSON_TYPE\n      }), 'model.json');\n\n      if (modelArtifacts.weightData != null) {\n        init.body.append('model.weights.bin', new Blob([modelArtifacts.weightData], {\n          type: OCTET_STREAM_MIME_TYPE\n        }), 'model.weights.bin');\n      }\n\n      const response = yield _this.fetch(_this.path, init);\n\n      if (response.ok) {\n        return {\n          modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts),\n          responses: [response]\n        };\n      } else {\n        throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ` + `${response.status}.`);\n      }\n    })();\n  }\n  /**\n   * Load model artifacts via HTTP request(s).\n   *\n   * See the documentation to `tf.io.http` for details on the saved\n   * artifacts.\n   *\n   * @returns The loaded model artifacts (if loading succeeds).\n   */\n\n\n  load() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const modelConfigRequest = yield _this2.fetch(_this2.path, _this2.requestInit);\n\n      if (!modelConfigRequest.ok) {\n        throw new Error(`Request to ${_this2.path} failed with status code ` + `${modelConfigRequest.status}. Please verify this URL points to ` + `the model JSON of the model to load.`);\n      }\n\n      let modelJSON;\n\n      try {\n        modelJSON = yield modelConfigRequest.json();\n      } catch (e) {\n        let message = `Failed to parse model JSON of response from ${_this2.path}.`; // TODO(nsthorat): Remove this after some time when we're comfortable that\n        // .pb files are mostly gone.\n\n        if (_this2.path.endsWith('.pb')) {\n          message += ' Your path contains a .pb file extension. ' + 'Support for .pb models have been removed in TensorFlow.js 1.0 ' + 'in favor of .json models. You can re-convert your Python ' + 'TensorFlow model using the TensorFlow.js 1.0 conversion scripts ' + 'or you can convert your.pb models with the \\'pb2json\\'' + 'NPM script in the tensorflow/tfjs-converter repository.';\n        } else {\n          message += ' Please make sure the server is serving valid ' + 'JSON for this request.';\n        }\n\n        throw new Error(message);\n      } // We do not allow both modelTopology and weightsManifest to be missing.\n\n\n      const modelTopology = modelJSON.modelTopology;\n      const weightsManifest = modelJSON.weightsManifest;\n\n      if (modelTopology == null && weightsManifest == null) {\n        throw new Error(`The JSON from HTTP path ${_this2.path} contains neither model ` + `topology or manifest for weights.`);\n      }\n\n      return getModelArtifactsForJSON(modelJSON, weightsManifest => _this2.loadWeights(weightsManifest));\n    })();\n  }\n\n  loadWeights(weightsManifest) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const weightPath = Array.isArray(_this3.path) ? _this3.path[1] : _this3.path;\n      const [prefix, suffix] = parseUrl(weightPath);\n      const pathPrefix = _this3.weightPathPrefix || prefix;\n      const weightSpecs = getWeightSpecs(weightsManifest);\n      const fetchURLs = [];\n      const urlPromises = [];\n\n      for (const weightsGroup of weightsManifest) {\n        for (const path of weightsGroup.paths) {\n          if (_this3.weightUrlConverter != null) {\n            urlPromises.push(_this3.weightUrlConverter(path));\n          } else {\n            fetchURLs.push(pathPrefix + path + suffix);\n          }\n        }\n      }\n\n      if (_this3.weightUrlConverter) {\n        fetchURLs.push(...(yield Promise.all(urlPromises)));\n      }\n\n      const buffers = yield loadWeightsAsArrayBuffer(fetchURLs, {\n        requestInit: _this3.requestInit,\n        fetchFunc: _this3.fetch,\n        onProgress: _this3.onProgress\n      });\n      return [weightSpecs, concatenateArrayBuffers(buffers)];\n    })();\n  }\n\n}\nHTTPRequest.URL_SCHEME_REGEX = /^https?:\\/\\//;\n/**\n * Extract the prefix and suffix of the url, where the prefix is the path before\n * the last file, and suffix is the search params after the last file.\n * ```\n * const url = 'http://tfhub.dev/model/1/tensorflowjs_model.pb?tfjs-format=file'\n * [prefix, suffix] = parseUrl(url)\n * // prefix = 'http://tfhub.dev/model/1/'\n * // suffix = '?tfjs-format=file'\n * ```\n * @param url the model url to be parsed.\n */\n\nexport function parseUrl(url) {\n  const lastSlash = url.lastIndexOf('/');\n  const lastSearchParam = url.lastIndexOf('?');\n  const prefix = url.substring(0, lastSlash);\n  const suffix = lastSearchParam > lastSlash ? url.substring(lastSearchParam) : '';\n  return [prefix + '/', suffix];\n}\nexport function isHTTPScheme(url) {\n  return url.match(HTTPRequest.URL_SCHEME_REGEX) != null;\n}\nexport const httpRouter = (url, loadOptions) => {\n  if (typeof fetch === 'undefined' && (loadOptions == null || loadOptions.fetchFunc == null)) {\n    // `http` uses `fetch` or `node-fetch`, if one wants to use it in\n    // an environment that is not the browser or node they have to setup a\n    // global fetch polyfill.\n    return null;\n  } else {\n    let isHTTP = true;\n\n    if (Array.isArray(url)) {\n      isHTTP = url.every(urlItem => isHTTPScheme(urlItem));\n    } else {\n      isHTTP = isHTTPScheme(url);\n    }\n\n    if (isHTTP) {\n      return http(url, loadOptions);\n    }\n  }\n\n  return null;\n};\nIORouterRegistry.registerSaveRouter(httpRouter);\nIORouterRegistry.registerLoadRouter(httpRouter);\n/**\n * Creates an IOHandler subtype that sends model artifacts to HTTP server.\n *\n * An HTTP request of the `multipart/form-data` mime type will be sent to the\n * `path` URL. The form data includes artifacts that represent the topology\n * and/or weights of the model. In the case of Keras-style `tf.Model`, two\n * blobs (files) exist in form-data:\n *   - A JSON file consisting of `modelTopology` and `weightsManifest`.\n *   - A binary weights file consisting of the concatenated weight values.\n * These files are in the same format as the one generated by\n * [tfjs_converter](https://js.tensorflow.org/tutorials/import-keras.html).\n *\n * The following code snippet exemplifies the client-side code that uses this\n * function:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save(tf.io.http(\n *     'http://model-server:5000/upload', {requestInit: {method: 'PUT'}}));\n * console.log(saveResult);\n * ```\n *\n * If the default `POST` method is to be used, without any custom parameters\n * such as headers, you can simply pass an HTTP or HTTPS URL to `model.save`:\n *\n * ```js\n * const saveResult = await model.save('http://model-server:5000/upload');\n * ```\n *\n * The following GitHub Gist\n * https://gist.github.com/dsmilkov/1b6046fd6132d7408d5257b0976f7864\n * implements a server based on [flask](https://github.com/pallets/flask) that\n * can receive the request. Upon receiving the model artifacts via the requst,\n * this particular server reconstitutes instances of [Keras\n * Models](https://keras.io/models/model/) in memory.\n *\n *\n * @param path A URL path to the model.\n *   Can be an absolute HTTP path (e.g.,\n *   'http://localhost:8000/model-upload)') or a relative path (e.g.,\n *   './model-upload').\n * @param requestInit Request configurations to be used when sending\n *    HTTP request to server using `fetch`. It can contain fields such as\n *    `method`, `credentials`, `headers`, `mode`, etc. See\n *    https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\n *    for more information. `requestInit` must not have a body, because the\n * body will be set by TensorFlow.js. File blobs representing the model\n * topology (filename: 'model.json') and the weights of the model (filename:\n * 'model.weights.bin') will be appended to the body. If `requestInit` has a\n * `body`, an Error will be thrown.\n * @param loadOptions Optional configuration for the loading. It includes the\n *   following fields:\n *   - weightPathPrefix Optional, this specifies the path prefix for weight\n *     files, by default this is calculated from the path param.\n *   - fetchFunc Optional, custom `fetch` function. E.g., in Node.js,\n *     the `fetch` from node-fetch can be used here.\n *   - onProgress Optional, progress callback function, fired periodically\n *     before the load is completed.\n * @returns An instance of `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\n\nexport function http(path, loadOptions) {\n  return new HTTPRequest(path, loadOptions);\n}\n/**\n * Deprecated. Use `tf.io.http`.\n * @param path\n * @param loadOptions\n */\n\nexport function browserHTTPRequest(path, loadOptions) {\n  return http(path, loadOptions);\n}","map":{"version":3,"names":["env","assert","concatenateArrayBuffers","getModelArtifactsForJSON","getModelArtifactsInfoForJSON","getModelJSONForModelArtifacts","getWeightSpecs","IORouterRegistry","loadWeightsAsArrayBuffer","OCTET_STREAM_MIME_TYPE","JSON_TYPE","HTTPRequest","constructor","path","loadOptions","DEFAULT_METHOD","weightPathPrefix","onProgress","weightUrlConverter","fetchFunc","fetch","platform","length","Array","isArray","requestInit","body","Error","save","modelArtifacts","modelTopology","ArrayBuffer","init","Object","assign","method","FormData","weightsManifest","paths","weights","weightSpecs","modelTopologyAndWeightManifest","append","Blob","JSON","stringify","type","weightData","response","ok","modelArtifactsInfo","responses","status","load","modelConfigRequest","modelJSON","json","e","message","endsWith","loadWeights","weightPath","prefix","suffix","parseUrl","pathPrefix","fetchURLs","urlPromises","weightsGroup","push","Promise","all","buffers","URL_SCHEME_REGEX","url","lastSlash","lastIndexOf","lastSearchParam","substring","isHTTPScheme","match","httpRouter","isHTTP","every","urlItem","http","registerSaveRouter","registerLoadRouter","browserHTTPRequest"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/io/http.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * IOHandler implementations based on HTTP requests in the web browser.\n *\n * Uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n */\nimport { env } from '../environment';\nimport { assert } from '../util';\nimport { concatenateArrayBuffers, getModelArtifactsForJSON, getModelArtifactsInfoForJSON, getModelJSONForModelArtifacts, getWeightSpecs } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nimport { loadWeightsAsArrayBuffer } from './weights_loader';\nconst OCTET_STREAM_MIME_TYPE = 'application/octet-stream';\nconst JSON_TYPE = 'application/json';\nexport class HTTPRequest {\n    constructor(path, loadOptions) {\n        this.DEFAULT_METHOD = 'POST';\n        if (loadOptions == null) {\n            loadOptions = {};\n        }\n        this.weightPathPrefix = loadOptions.weightPathPrefix;\n        this.onProgress = loadOptions.onProgress;\n        this.weightUrlConverter = loadOptions.weightUrlConverter;\n        if (loadOptions.fetchFunc != null) {\n            assert(typeof loadOptions.fetchFunc === 'function', () => 'Must pass a function that matches the signature of ' +\n                '`fetch` (see ' +\n                'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)');\n            this.fetch = loadOptions.fetchFunc;\n        }\n        else {\n            this.fetch = env().platform.fetch;\n        }\n        assert(path != null && path.length > 0, () => 'URL path for http must not be null, undefined or ' +\n            'empty.');\n        if (Array.isArray(path)) {\n            assert(path.length === 2, () => 'URL paths for http must have a length of 2, ' +\n                `(actual length is ${path.length}).`);\n        }\n        this.path = path;\n        if (loadOptions.requestInit != null &&\n            loadOptions.requestInit.body != null) {\n            throw new Error('requestInit is expected to have no pre-existing body, but has one.');\n        }\n        this.requestInit = loadOptions.requestInit || {};\n    }\n    async save(modelArtifacts) {\n        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n            throw new Error('BrowserHTTPRequest.save() does not support saving model topology ' +\n                'in binary formats yet.');\n        }\n        const init = Object.assign({ method: this.DEFAULT_METHOD }, this.requestInit);\n        init.body = new FormData();\n        const weightsManifest = [{\n                paths: ['./model.weights.bin'],\n                weights: modelArtifacts.weightSpecs,\n            }];\n        const modelTopologyAndWeightManifest = getModelJSONForModelArtifacts(modelArtifacts, weightsManifest);\n        init.body.append('model.json', new Blob([JSON.stringify(modelTopologyAndWeightManifest)], { type: JSON_TYPE }), 'model.json');\n        if (modelArtifacts.weightData != null) {\n            init.body.append('model.weights.bin', new Blob([modelArtifacts.weightData], { type: OCTET_STREAM_MIME_TYPE }), 'model.weights.bin');\n        }\n        const response = await this.fetch(this.path, init);\n        if (response.ok) {\n            return {\n                modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts),\n                responses: [response],\n            };\n        }\n        else {\n            throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ` +\n                `${response.status}.`);\n        }\n    }\n    /**\n     * Load model artifacts via HTTP request(s).\n     *\n     * See the documentation to `tf.io.http` for details on the saved\n     * artifacts.\n     *\n     * @returns The loaded model artifacts (if loading succeeds).\n     */\n    async load() {\n        const modelConfigRequest = await this.fetch(this.path, this.requestInit);\n        if (!modelConfigRequest.ok) {\n            throw new Error(`Request to ${this.path} failed with status code ` +\n                `${modelConfigRequest.status}. Please verify this URL points to ` +\n                `the model JSON of the model to load.`);\n        }\n        let modelJSON;\n        try {\n            modelJSON = await modelConfigRequest.json();\n        }\n        catch (e) {\n            let message = `Failed to parse model JSON of response from ${this.path}.`;\n            // TODO(nsthorat): Remove this after some time when we're comfortable that\n            // .pb files are mostly gone.\n            if (this.path.endsWith('.pb')) {\n                message += ' Your path contains a .pb file extension. ' +\n                    'Support for .pb models have been removed in TensorFlow.js 1.0 ' +\n                    'in favor of .json models. You can re-convert your Python ' +\n                    'TensorFlow model using the TensorFlow.js 1.0 conversion scripts ' +\n                    'or you can convert your.pb models with the \\'pb2json\\'' +\n                    'NPM script in the tensorflow/tfjs-converter repository.';\n            }\n            else {\n                message += ' Please make sure the server is serving valid ' +\n                    'JSON for this request.';\n            }\n            throw new Error(message);\n        }\n        // We do not allow both modelTopology and weightsManifest to be missing.\n        const modelTopology = modelJSON.modelTopology;\n        const weightsManifest = modelJSON.weightsManifest;\n        if (modelTopology == null && weightsManifest == null) {\n            throw new Error(`The JSON from HTTP path ${this.path} contains neither model ` +\n                `topology or manifest for weights.`);\n        }\n        return getModelArtifactsForJSON(modelJSON, (weightsManifest) => this.loadWeights(weightsManifest));\n    }\n    async loadWeights(weightsManifest) {\n        const weightPath = Array.isArray(this.path) ? this.path[1] : this.path;\n        const [prefix, suffix] = parseUrl(weightPath);\n        const pathPrefix = this.weightPathPrefix || prefix;\n        const weightSpecs = getWeightSpecs(weightsManifest);\n        const fetchURLs = [];\n        const urlPromises = [];\n        for (const weightsGroup of weightsManifest) {\n            for (const path of weightsGroup.paths) {\n                if (this.weightUrlConverter != null) {\n                    urlPromises.push(this.weightUrlConverter(path));\n                }\n                else {\n                    fetchURLs.push(pathPrefix + path + suffix);\n                }\n            }\n        }\n        if (this.weightUrlConverter) {\n            fetchURLs.push(...await Promise.all(urlPromises));\n        }\n        const buffers = await loadWeightsAsArrayBuffer(fetchURLs, {\n            requestInit: this.requestInit,\n            fetchFunc: this.fetch,\n            onProgress: this.onProgress\n        });\n        return [weightSpecs, concatenateArrayBuffers(buffers)];\n    }\n}\nHTTPRequest.URL_SCHEME_REGEX = /^https?:\\/\\//;\n/**\n * Extract the prefix and suffix of the url, where the prefix is the path before\n * the last file, and suffix is the search params after the last file.\n * ```\n * const url = 'http://tfhub.dev/model/1/tensorflowjs_model.pb?tfjs-format=file'\n * [prefix, suffix] = parseUrl(url)\n * // prefix = 'http://tfhub.dev/model/1/'\n * // suffix = '?tfjs-format=file'\n * ```\n * @param url the model url to be parsed.\n */\nexport function parseUrl(url) {\n    const lastSlash = url.lastIndexOf('/');\n    const lastSearchParam = url.lastIndexOf('?');\n    const prefix = url.substring(0, lastSlash);\n    const suffix = lastSearchParam > lastSlash ? url.substring(lastSearchParam) : '';\n    return [prefix + '/', suffix];\n}\nexport function isHTTPScheme(url) {\n    return url.match(HTTPRequest.URL_SCHEME_REGEX) != null;\n}\nexport const httpRouter = (url, loadOptions) => {\n    if (typeof fetch === 'undefined' &&\n        (loadOptions == null || loadOptions.fetchFunc == null)) {\n        // `http` uses `fetch` or `node-fetch`, if one wants to use it in\n        // an environment that is not the browser or node they have to setup a\n        // global fetch polyfill.\n        return null;\n    }\n    else {\n        let isHTTP = true;\n        if (Array.isArray(url)) {\n            isHTTP = url.every(urlItem => isHTTPScheme(urlItem));\n        }\n        else {\n            isHTTP = isHTTPScheme(url);\n        }\n        if (isHTTP) {\n            return http(url, loadOptions);\n        }\n    }\n    return null;\n};\nIORouterRegistry.registerSaveRouter(httpRouter);\nIORouterRegistry.registerLoadRouter(httpRouter);\n/**\n * Creates an IOHandler subtype that sends model artifacts to HTTP server.\n *\n * An HTTP request of the `multipart/form-data` mime type will be sent to the\n * `path` URL. The form data includes artifacts that represent the topology\n * and/or weights of the model. In the case of Keras-style `tf.Model`, two\n * blobs (files) exist in form-data:\n *   - A JSON file consisting of `modelTopology` and `weightsManifest`.\n *   - A binary weights file consisting of the concatenated weight values.\n * These files are in the same format as the one generated by\n * [tfjs_converter](https://js.tensorflow.org/tutorials/import-keras.html).\n *\n * The following code snippet exemplifies the client-side code that uses this\n * function:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save(tf.io.http(\n *     'http://model-server:5000/upload', {requestInit: {method: 'PUT'}}));\n * console.log(saveResult);\n * ```\n *\n * If the default `POST` method is to be used, without any custom parameters\n * such as headers, you can simply pass an HTTP or HTTPS URL to `model.save`:\n *\n * ```js\n * const saveResult = await model.save('http://model-server:5000/upload');\n * ```\n *\n * The following GitHub Gist\n * https://gist.github.com/dsmilkov/1b6046fd6132d7408d5257b0976f7864\n * implements a server based on [flask](https://github.com/pallets/flask) that\n * can receive the request. Upon receiving the model artifacts via the requst,\n * this particular server reconstitutes instances of [Keras\n * Models](https://keras.io/models/model/) in memory.\n *\n *\n * @param path A URL path to the model.\n *   Can be an absolute HTTP path (e.g.,\n *   'http://localhost:8000/model-upload)') or a relative path (e.g.,\n *   './model-upload').\n * @param requestInit Request configurations to be used when sending\n *    HTTP request to server using `fetch`. It can contain fields such as\n *    `method`, `credentials`, `headers`, `mode`, etc. See\n *    https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\n *    for more information. `requestInit` must not have a body, because the\n * body will be set by TensorFlow.js. File blobs representing the model\n * topology (filename: 'model.json') and the weights of the model (filename:\n * 'model.weights.bin') will be appended to the body. If `requestInit` has a\n * `body`, an Error will be thrown.\n * @param loadOptions Optional configuration for the loading. It includes the\n *   following fields:\n *   - weightPathPrefix Optional, this specifies the path prefix for weight\n *     files, by default this is calculated from the path param.\n *   - fetchFunc Optional, custom `fetch` function. E.g., in Node.js,\n *     the `fetch` from node-fetch can be used here.\n *   - onProgress Optional, progress callback function, fired periodically\n *     before the load is completed.\n * @returns An instance of `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function http(path, loadOptions) {\n    return new HTTPRequest(path, loadOptions);\n}\n/**\n * Deprecated. Use `tf.io.http`.\n * @param path\n * @param loadOptions\n */\nexport function browserHTTPRequest(path, loadOptions) {\n    return http(path, loadOptions);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}