{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reverse, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { identity } from './Identity';\nexport function reverse(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    dims\n  } = attrs;\n  assertNotComplex(x, 'reverse');\n  const xRank = x.shape.length;\n  const $dims = util.parseAxisParam(dims, x.shape);\n\n  if (xRank === 0) {\n    return identity({\n      inputs: {\n        x\n      },\n      backend\n    });\n  }\n\n  const outBuf = new TensorBuffer(x.shape, x.dtype);\n  const xBuf = backend.bufferSync(x);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.slice();\n    $dims.forEach(d => inLoc[d] = x.shape[d] - 1 - inLoc[d]);\n    outBuf.set(xBuf.get(...inLoc), ...outLoc);\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\nexport const reverseConfig = {\n  kernelName: Reverse,\n  backendName: 'cpu',\n  kernelFunc: reverse\n};","map":{"version":3,"names":["Reverse","TensorBuffer","util","assertNotComplex","identity","reverse","args","inputs","backend","attrs","x","dims","xRank","shape","length","$dims","parseAxisParam","outBuf","dtype","xBuf","bufferSync","i","size","outLoc","indexToLoc","inLoc","slice","forEach","d","set","get","makeTensorInfo","values","reverseConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Reverse.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reverse, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { identity } from './Identity';\nexport function reverse(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { dims } = attrs;\n    assertNotComplex(x, 'reverse');\n    const xRank = x.shape.length;\n    const $dims = util.parseAxisParam(dims, x.shape);\n    if (xRank === 0) {\n        return identity({ inputs: { x }, backend });\n    }\n    const outBuf = new TensorBuffer(x.shape, x.dtype);\n    const xBuf = backend.bufferSync(x);\n    for (let i = 0; i < outBuf.size; i++) {\n        const outLoc = outBuf.indexToLoc(i);\n        const inLoc = outLoc.slice();\n        $dims.forEach(d => inLoc[d] = x.shape[d] - 1 - inLoc[d]);\n        outBuf.set(xBuf.get(...inLoc), ...outLoc);\n    }\n    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\nexport const reverseConfig = {\n    kernelName: Reverse,\n    backendName: 'cpu',\n    kernelFunc: reverse\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAT,EAAkBC,YAAlB,EAAgCC,IAAhC,QAA4C,uBAA5C;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,OAAO,SAASC,OAAT,CAAiBC,IAAjB,EAAuB;EAC1B,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BH,IAAnC;EACA,MAAM;IAAEI;EAAF,IAAQH,MAAd;EACA,MAAM;IAAEI;EAAF,IAAWF,KAAjB;EACAN,gBAAgB,CAACO,CAAD,EAAI,SAAJ,CAAhB;EACA,MAAME,KAAK,GAAGF,CAAC,CAACG,KAAF,CAAQC,MAAtB;EACA,MAAMC,KAAK,GAAGb,IAAI,CAACc,cAAL,CAAoBL,IAApB,EAA0BD,CAAC,CAACG,KAA5B,CAAd;;EACA,IAAID,KAAK,KAAK,CAAd,EAAiB;IACb,OAAOR,QAAQ,CAAC;MAAEG,MAAM,EAAE;QAAEG;MAAF,CAAV;MAAiBF;IAAjB,CAAD,CAAf;EACH;;EACD,MAAMS,MAAM,GAAG,IAAIhB,YAAJ,CAAiBS,CAAC,CAACG,KAAnB,EAA0BH,CAAC,CAACQ,KAA5B,CAAf;EACA,MAAMC,IAAI,GAAGX,OAAO,CAACY,UAAR,CAAmBV,CAAnB,CAAb;;EACA,KAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACK,IAA3B,EAAiCD,CAAC,EAAlC,EAAsC;IAClC,MAAME,MAAM,GAAGN,MAAM,CAACO,UAAP,CAAkBH,CAAlB,CAAf;IACA,MAAMI,KAAK,GAAGF,MAAM,CAACG,KAAP,EAAd;IACAX,KAAK,CAACY,OAAN,CAAcC,CAAC,IAAIH,KAAK,CAACG,CAAD,CAAL,GAAWlB,CAAC,CAACG,KAAF,CAAQe,CAAR,IAAa,CAAb,GAAiBH,KAAK,CAACG,CAAD,CAApD;IACAX,MAAM,CAACY,GAAP,CAAWV,IAAI,CAACW,GAAL,CAAS,GAAGL,KAAZ,CAAX,EAA+B,GAAGF,MAAlC;EACH;;EACD,OAAOf,OAAO,CAACuB,cAAR,CAAuBd,MAAM,CAACJ,KAA9B,EAAqCI,MAAM,CAACC,KAA5C,EAAmDD,MAAM,CAACe,MAA1D,CAAP;AACH;AACD,OAAO,MAAMC,aAAa,GAAG;EACzBC,UAAU,EAAElC,OADa;EAEzBmC,WAAW,EAAE,KAFY;EAGzBC,UAAU,EAAE/B;AAHa,CAAtB"},"metadata":{},"sourceType":"module"}