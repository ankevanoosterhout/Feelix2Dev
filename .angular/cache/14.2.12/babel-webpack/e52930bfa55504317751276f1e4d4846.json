{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPool, util } from '@tensorflow/tfjs-core';\nimport { Pool2DProgram } from '../pool_gpu';\nimport { assertNotComplex } from '../webgl_util';\nimport { identity } from './Identity';\nexport function maxPool(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  const dilations = 1;\n  util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);\n  const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 && util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({\n      inputs: {\n        x\n      },\n      backend\n    });\n  }\n\n  const maxPoolProgram = new Pool2DProgram(convInfo, 'max', false);\n  return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\nexport const maxPoolConfig = {\n  kernelName: MaxPool,\n  backendName: 'webgl',\n  kernelFunc: maxPool\n};","map":{"version":3,"names":["backend_util","MaxPool","util","Pool2DProgram","assertNotComplex","identity","maxPool","args","inputs","backend","attrs","x","filterSize","strides","pad","dimRoundingMode","dilations","assert","eitherStridesOrDilationsAreOne","convInfo","computePool2DInfo","shape","filterWidth","filterHeight","arraysEqual","inShape","outShape","maxPoolProgram","runWebGLProgram","dtype","maxPoolConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPool.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPool, util } from '@tensorflow/tfjs-core';\nimport { Pool2DProgram } from '../pool_gpu';\nimport { assertNotComplex } from '../webgl_util';\nimport { identity } from './Identity';\nexport function maxPool(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    assertNotComplex(x, 'maxPool');\n    const { filterSize, strides, pad, dimRoundingMode } = attrs;\n    const dilations = 1;\n    util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n        `Got strides ${strides} and dilations '${dilations}'`);\n    const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n    if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n        util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n        return identity({ inputs: { x }, backend });\n    }\n    const maxPoolProgram = new Pool2DProgram(convInfo, 'max', false);\n    return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\nexport const maxPoolConfig = {\n    kernelName: MaxPool,\n    backendName: 'webgl',\n    kernelFunc: maxPool\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,EAAuBC,OAAvB,EAAgCC,IAAhC,QAA4C,uBAA5C;AACA,SAASC,aAAT,QAA8B,aAA9B;AACA,SAASC,gBAAT,QAAiC,eAAjC;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,OAAO,SAASC,OAAT,CAAiBC,IAAjB,EAAuB;EAC1B,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BH,IAAnC;EACA,MAAM;IAAEI;EAAF,IAAQH,MAAd;EACAJ,gBAAgB,CAACO,CAAD,EAAI,SAAJ,CAAhB;EACA,MAAM;IAAEC,UAAF;IAAcC,OAAd;IAAuBC,GAAvB;IAA4BC;EAA5B,IAAgDL,KAAtD;EACA,MAAMM,SAAS,GAAG,CAAlB;EACAd,IAAI,CAACe,MAAL,CAAYjB,YAAY,CAACkB,8BAAb,CAA4CL,OAA5C,EAAqDG,SAArD,CAAZ,EAA6E,MAAM,8DAC9E,eAAcH,OAAQ,mBAAkBG,SAAU,GADvD;EAEA,MAAMG,QAAQ,GAAGnB,YAAY,CAACoB,iBAAb,CAA+BT,CAAC,CAACU,KAAjC,EAAwCT,UAAxC,EAAoDC,OAApD,EAA6DG,SAA7D,EAAwEF,GAAxE,EAA6EC,eAA7E,CAAjB;;EACA,IAAII,QAAQ,CAACG,WAAT,KAAyB,CAAzB,IAA8BH,QAAQ,CAACI,YAAT,KAA0B,CAAxD,IACArB,IAAI,CAACsB,WAAL,CAAiBL,QAAQ,CAACM,OAA1B,EAAmCN,QAAQ,CAACO,QAA5C,CADJ,EAC2D;IACvD,OAAOrB,QAAQ,CAAC;MAAEG,MAAM,EAAE;QAAEG;MAAF,CAAV;MAAiBF;IAAjB,CAAD,CAAf;EACH;;EACD,MAAMkB,cAAc,GAAG,IAAIxB,aAAJ,CAAkBgB,QAAlB,EAA4B,KAA5B,EAAmC,KAAnC,CAAvB;EACA,OAAOV,OAAO,CAACmB,eAAR,CAAwBD,cAAxB,EAAwC,CAAChB,CAAD,CAAxC,EAA6CA,CAAC,CAACkB,KAA/C,CAAP;AACH;AACD,OAAO,MAAMC,aAAa,GAAG;EACzBC,UAAU,EAAE9B,OADa;EAEzB+B,WAAW,EAAE,OAFY;EAGzBC,UAAU,EAAE3B;AAHa,CAAtB"},"metadata":{},"sourceType":"module"}