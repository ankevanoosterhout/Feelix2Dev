{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, RotateWithOffset, util } from '@tensorflow/tfjs-core';\nexport const rotateWithOffsetConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'cpu',\n  kernelFunc: ({\n    inputs,\n    attrs,\n    backend\n  }) => {\n    const {\n      image\n    } = inputs;\n    const {\n      radians,\n      fillValue,\n      center\n    } = attrs;\n    const cpuBackend = backend;\n    const output = util.getTypedArrayFromDType(image.dtype, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n    const [centerX, centerY] = backend_util.getImageCenter(center, imageHeight, imageWidth);\n    const fullOpacityValue = 255;\n    const sinFactor = Math.sin(radians);\n    const cosFactor = Math.cos(radians);\n    const imageVals = cpuBackend.data.get(image.dataId).values;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n            const x = coords[2];\n            const y = coords[1]; // coordX/coordY are the result of rotating and translating x/y.\n\n            let coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;\n            let coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;\n            coordX = Math.round(coordX + centerX);\n            coordY = Math.round(coordY + centerY);\n            let outputValue = fillValue;\n\n            if (typeof fillValue !== 'number') {\n              if (channel === 3) {\n                outputValue = fullOpacityValue;\n              } else {\n                outputValue = fillValue[channel];\n              }\n            } // If the coordinate position falls within the image boundaries...\n\n\n            if (coordX >= 0 && coordX < imageWidth && coordY >= 0 && coordY < imageHeight) {\n              // set the output to the image value at the coordinate position.\n              const rotatedRowOffset = coordY * (imageWidth * numChannels);\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx = batchOffset + rotatedRowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n            output[outIdx] = outputValue;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {\n      dataId,\n      shape: image.shape,\n      dtype: image.dtype\n    };\n  }\n};","map":{"version":3,"names":["backend_util","RotateWithOffset","util","rotateWithOffsetConfig","kernelName","backendName","kernelFunc","inputs","attrs","backend","image","radians","fillValue","center","cpuBackend","output","getTypedArrayFromDType","dtype","sizeFromShape","shape","batch","imageHeight","imageWidth","numChannels","centerX","centerY","getImageCenter","fullOpacityValue","sinFactor","Math","sin","cosFactor","cos","imageVals","data","get","dataId","values","batchIdx","batchOffset","row","rowOffset","col","colOffset","channel","coords","x","y","coordX","coordY","round","outputValue","rotatedRowOffset","rotatedColOffset","imageIdx","outIdx","write"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/RotateWithOffset.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, RotateWithOffset, util } from '@tensorflow/tfjs-core';\nexport const rotateWithOffsetConfig = {\n    kernelName: RotateWithOffset,\n    backendName: 'cpu',\n    kernelFunc: ({ inputs, attrs, backend }) => {\n        const { image } = inputs;\n        const { radians, fillValue, center } = attrs;\n        const cpuBackend = backend;\n        const output = util.getTypedArrayFromDType(image.dtype, util.sizeFromShape(image.shape));\n        const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n        const [centerX, centerY] = backend_util.getImageCenter(center, imageHeight, imageWidth);\n        const fullOpacityValue = 255;\n        const sinFactor = Math.sin(radians);\n        const cosFactor = Math.cos(radians);\n        const imageVals = cpuBackend.data.get(image.dataId).values;\n        for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n            const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n            for (let row = 0; row < imageHeight; row++) {\n                const rowOffset = row * (imageWidth * numChannels);\n                for (let col = 0; col < imageWidth; col++) {\n                    const colOffset = col * numChannels;\n                    for (let channel = 0; channel < numChannels; channel++) {\n                        const coords = [batch, row, col, channel];\n                        const x = coords[2];\n                        const y = coords[1];\n                        // coordX/coordY are the result of rotating and translating x/y.\n                        let coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;\n                        let coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;\n                        coordX = Math.round(coordX + centerX);\n                        coordY = Math.round(coordY + centerY);\n                        let outputValue = fillValue;\n                        if (typeof fillValue !== 'number') {\n                            if (channel === 3) {\n                                outputValue = fullOpacityValue;\n                            }\n                            else {\n                                outputValue = fillValue[channel];\n                            }\n                        }\n                        // If the coordinate position falls within the image boundaries...\n                        if (coordX >= 0 && coordX < imageWidth && coordY >= 0 &&\n                            coordY < imageHeight) {\n                            // set the output to the image value at the coordinate position.\n                            const rotatedRowOffset = coordY * (imageWidth * numChannels);\n                            const rotatedColOffset = coordX * numChannels;\n                            const imageIdx = batchOffset + rotatedRowOffset + rotatedColOffset + channel;\n                            outputValue = imageVals[imageIdx];\n                        }\n                        const outIdx = batchOffset + rowOffset + colOffset + channel;\n                        output[outIdx] = outputValue;\n                    }\n                }\n            }\n        }\n        const dataId = cpuBackend.write(output, image.shape, image.dtype);\n        return { dataId, shape: image.shape, dtype: image.dtype };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}