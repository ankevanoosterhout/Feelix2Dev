{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { MaxPoolGrad } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\n/**\n * Computes the backprop of a 2D max pool.\n *\n * @param dy The dy error, of rank 4 or rank 3 of shape\n *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\n * assumed.\n * @param input The original input image, of rank 4, of shape\n *     [batchSize, height, width, channels].\n * @param output The original output image, of rank 4, of shape\n *     [batchSize, outHeight, outWidth, channels].\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param pad The type of padding algorithm used in the forward prop of the op.\n *     'same', 'valid', for more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\n\nfunction maxPoolGrad_(dy, input, output, filterSize, strides, pad, dimRoundingMode) {\n  const $dy = convertToTensor(dy, 'dy', 'maxPoolGrad');\n  const $input = convertToTensor(input, 'input', 'maxPoolGrad');\n  const $output = convertToTensor(output, 'output', 'maxPoolGrad');\n  util.assert($input.rank === $dy.rank, () => `Rank of input (${$input.rank}) does not match rank of dy ` + `(${$dy.rank})`);\n  util.assert($dy.rank === 4, () => `Error in maxPoolGrad: dy must be rank 4 but got rank ` + `${$dy.rank}.`);\n  util.assert($input.rank === 4, () => `Error in maxPoolGrad: input must be rank 4 but got rank ` + `${$input.rank}.`);\n  conv_util.checkPadOnDimRoundingMode('maxPoolGrad', pad, dimRoundingMode);\n  const inputs = {\n    dy: $dy,\n    input: $input,\n    output: $output\n  };\n  const attrs = {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode\n  }; // tslint:disable-next-line: no-unnecessary-type-assertion\n\n  return ENGINE.runKernel(MaxPoolGrad, inputs, attrs);\n}\n\nexport const maxPoolGrad = op({\n  maxPoolGrad_\n});","map":{"version":3,"names":["ENGINE","MaxPoolGrad","convertToTensor","util","conv_util","op","maxPoolGrad_","dy","input","output","filterSize","strides","pad","dimRoundingMode","$dy","$input","$output","assert","rank","checkPadOnDimRoundingMode","inputs","attrs","runKernel","maxPoolGrad"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_grad.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { MaxPoolGrad } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\n/**\n * Computes the backprop of a 2D max pool.\n *\n * @param dy The dy error, of rank 4 or rank 3 of shape\n *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\n * assumed.\n * @param input The original input image, of rank 4, of shape\n *     [batchSize, height, width, channels].\n * @param output The original output image, of rank 4, of shape\n *     [batchSize, outHeight, outWidth, channels].\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param pad The type of padding algorithm used in the forward prop of the op.\n *     'same', 'valid', for more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\nfunction maxPoolGrad_(dy, input, output, filterSize, strides, pad, dimRoundingMode) {\n    const $dy = convertToTensor(dy, 'dy', 'maxPoolGrad');\n    const $input = convertToTensor(input, 'input', 'maxPoolGrad');\n    const $output = convertToTensor(output, 'output', 'maxPoolGrad');\n    util.assert($input.rank === $dy.rank, () => `Rank of input (${$input.rank}) does not match rank of dy ` +\n        `(${$dy.rank})`);\n    util.assert($dy.rank === 4, () => `Error in maxPoolGrad: dy must be rank 4 but got rank ` +\n        `${$dy.rank}.`);\n    util.assert($input.rank === 4, () => `Error in maxPoolGrad: input must be rank 4 but got rank ` +\n        `${$input.rank}.`);\n    conv_util.checkPadOnDimRoundingMode('maxPoolGrad', pad, dimRoundingMode);\n    const inputs = { dy: $dy, input: $input, output: $output };\n    const attrs = { filterSize, strides, pad, dimRoundingMode };\n    // tslint:disable-next-line: no-unnecessary-type-assertion\n    return ENGINE.runKernel(MaxPoolGrad, inputs, attrs);\n}\nexport const maxPoolGrad = op({ maxPoolGrad_ });\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,WAAvB;AACA,SAASC,WAAT,QAA4B,iBAA5B;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AACA,OAAO,KAAKC,SAAZ,MAA2B,aAA3B;AACA,SAASC,EAAT,QAAmB,aAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,YAAT,CAAsBC,EAAtB,EAA0BC,KAA1B,EAAiCC,MAAjC,EAAyCC,UAAzC,EAAqDC,OAArD,EAA8DC,GAA9D,EAAmEC,eAAnE,EAAoF;EAChF,MAAMC,GAAG,GAAGZ,eAAe,CAACK,EAAD,EAAK,IAAL,EAAW,aAAX,CAA3B;EACA,MAAMQ,MAAM,GAAGb,eAAe,CAACM,KAAD,EAAQ,OAAR,EAAiB,aAAjB,CAA9B;EACA,MAAMQ,OAAO,GAAGd,eAAe,CAACO,MAAD,EAAS,QAAT,EAAmB,aAAnB,CAA/B;EACAN,IAAI,CAACc,MAAL,CAAYF,MAAM,CAACG,IAAP,KAAgBJ,GAAG,CAACI,IAAhC,EAAsC,MAAO,kBAAiBH,MAAM,CAACG,IAAK,8BAA9B,GACvC,IAAGJ,GAAG,CAACI,IAAK,GADjB;EAEAf,IAAI,CAACc,MAAL,CAAYH,GAAG,CAACI,IAAJ,KAAa,CAAzB,EAA4B,MAAO,uDAAD,GAC7B,GAAEJ,GAAG,CAACI,IAAK,GADhB;EAEAf,IAAI,CAACc,MAAL,CAAYF,MAAM,CAACG,IAAP,KAAgB,CAA5B,EAA+B,MAAO,0DAAD,GAChC,GAAEH,MAAM,CAACG,IAAK,GADnB;EAEAd,SAAS,CAACe,yBAAV,CAAoC,aAApC,EAAmDP,GAAnD,EAAwDC,eAAxD;EACA,MAAMO,MAAM,GAAG;IAAEb,EAAE,EAAEO,GAAN;IAAWN,KAAK,EAAEO,MAAlB;IAA0BN,MAAM,EAAEO;EAAlC,CAAf;EACA,MAAMK,KAAK,GAAG;IAAEX,UAAF;IAAcC,OAAd;IAAuBC,GAAvB;IAA4BC;EAA5B,CAAd,CAZgF,CAahF;;EACA,OAAOb,MAAM,CAACsB,SAAP,CAAiBrB,WAAjB,EAA8BmB,MAA9B,EAAsCC,KAAtC,CAAP;AACH;;AACD,OAAO,MAAME,WAAW,GAAGlB,EAAE,CAAC;EAAEC;AAAF,CAAD,CAAtB"},"metadata":{},"sourceType":"module"}