{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nexport function concatImpl(inputs, outShape, dtype, simplyConcat) {\n  const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n\n  if (simplyConcat && dtype !== 'string') {\n    // Use built-in TypedArray.set() method for speed.\n    let offset = 0;\n    inputs.forEach(input => {\n      const size = util.sizeFromShape(input.shape);\n      outVals.set(input.vals, offset);\n      offset += size;\n    });\n  } else {\n    let colOffset = 0;\n    inputs.forEach(input => {\n      const decodedData = dtype === 'string' ? backend_util.fromUint8ToStringArray(input.vals) : input.vals;\n      let tIdx = 0;\n\n      for (let row = 0; row < input.shape[0]; ++row) {\n        const resIdx = row * outShape[1] + colOffset;\n\n        for (let col = 0; col < input.shape[1]; ++col) {\n          outVals[resIdx + col] = decodedData[tIdx++];\n        }\n      }\n\n      colOffset += input.shape[1];\n    });\n  }\n\n  return outVals;\n}","map":{"version":3,"names":["backend_util","util","concatImpl","inputs","outShape","dtype","simplyConcat","outVals","getArrayFromDType","sizeFromShape","offset","forEach","input","size","shape","set","vals","colOffset","decodedData","fromUint8ToStringArray","tIdx","row","resIdx","col"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Concat_impl.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nexport function concatImpl(inputs, outShape, dtype, simplyConcat) {\n    const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n    if (simplyConcat && dtype !== 'string') {\n        // Use built-in TypedArray.set() method for speed.\n        let offset = 0;\n        inputs.forEach(input => {\n            const size = util.sizeFromShape(input.shape);\n            outVals.set(input.vals, offset);\n            offset += size;\n        });\n    }\n    else {\n        let colOffset = 0;\n        inputs.forEach(input => {\n            const decodedData = dtype === 'string' ?\n                backend_util.fromUint8ToStringArray(input.vals) :\n                input.vals;\n            let tIdx = 0;\n            for (let row = 0; row < input.shape[0]; ++row) {\n                const resIdx = row * outShape[1] + colOffset;\n                for (let col = 0; col < input.shape[1]; ++col) {\n                    outVals[resIdx + col] = decodedData[tIdx++];\n                }\n            }\n            colOffset += input.shape[1];\n        });\n    }\n    return outVals;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,EAAuBC,IAAvB,QAAmC,uBAAnC;AACA,OAAO,SAASC,UAAT,CAAoBC,MAApB,EAA4BC,QAA5B,EAAsCC,KAAtC,EAA6CC,YAA7C,EAA2D;EAC9D,MAAMC,OAAO,GAAGN,IAAI,CAACO,iBAAL,CAAuBH,KAAvB,EAA8BJ,IAAI,CAACQ,aAAL,CAAmBL,QAAnB,CAA9B,CAAhB;;EACA,IAAIE,YAAY,IAAID,KAAK,KAAK,QAA9B,EAAwC;IACpC;IACA,IAAIK,MAAM,GAAG,CAAb;IACAP,MAAM,CAACQ,OAAP,CAAeC,KAAK,IAAI;MACpB,MAAMC,IAAI,GAAGZ,IAAI,CAACQ,aAAL,CAAmBG,KAAK,CAACE,KAAzB,CAAb;MACAP,OAAO,CAACQ,GAAR,CAAYH,KAAK,CAACI,IAAlB,EAAwBN,MAAxB;MACAA,MAAM,IAAIG,IAAV;IACH,CAJD;EAKH,CARD,MASK;IACD,IAAII,SAAS,GAAG,CAAhB;IACAd,MAAM,CAACQ,OAAP,CAAeC,KAAK,IAAI;MACpB,MAAMM,WAAW,GAAGb,KAAK,KAAK,QAAV,GAChBL,YAAY,CAACmB,sBAAb,CAAoCP,KAAK,CAACI,IAA1C,CADgB,GAEhBJ,KAAK,CAACI,IAFV;MAGA,IAAII,IAAI,GAAG,CAAX;;MACA,KAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGT,KAAK,CAACE,KAAN,CAAY,CAAZ,CAAxB,EAAwC,EAAEO,GAA1C,EAA+C;QAC3C,MAAMC,MAAM,GAAGD,GAAG,GAAGjB,QAAQ,CAAC,CAAD,CAAd,GAAoBa,SAAnC;;QACA,KAAK,IAAIM,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGX,KAAK,CAACE,KAAN,CAAY,CAAZ,CAAxB,EAAwC,EAAES,GAA1C,EAA+C;UAC3ChB,OAAO,CAACe,MAAM,GAAGC,GAAV,CAAP,GAAwBL,WAAW,CAACE,IAAI,EAAL,CAAnC;QACH;MACJ;;MACDH,SAAS,IAAIL,KAAK,CAACE,KAAN,CAAY,CAAZ,CAAb;IACH,CAZD;EAaH;;EACD,OAAOP,OAAP;AACH"},"metadata":{},"sourceType":"module"}