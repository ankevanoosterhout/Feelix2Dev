{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { eye, linalg, mul, ones, randomUniform, scalar, serialization, tidy, transpose, truncatedNormal, zeros } from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport { checkDataFormat } from './common';\nimport { NotImplementedError, ValueError } from './errors';\nimport { VALID_DISTRIBUTION_VALUES, VALID_FAN_MODE_VALUES } from './keras_format/initializer_config';\nimport { checkStringTypeUnionValue, deserializeKerasObject, serializeKerasObject } from './utils/generic_utils';\nimport { arrayProd } from './utils/math_utils';\nexport function checkFanMode(value) {\n  checkStringTypeUnionValue(VALID_FAN_MODE_VALUES, 'FanMode', value);\n}\nexport function checkDistribution(value) {\n  checkStringTypeUnionValue(VALID_DISTRIBUTION_VALUES, 'Distribution', value);\n}\n/**\n * Initializer base class.\n *\n * @doc {\n *   heading: 'Initializers', subheading: 'Classes', namespace: 'initializers'}\n */\n\nexport class Initializer extends serialization.Serializable {\n  fromConfigUsesCustomObjects() {\n    return false;\n  }\n\n  getConfig() {\n    return {};\n  }\n\n}\nexport class Zeros extends Initializer {\n  apply(shape, dtype) {\n    return zeros(shape, dtype);\n  }\n\n}\n/** @nocollapse */\n\nZeros.className = 'Zeros';\nserialization.registerClass(Zeros);\nexport class Ones extends Initializer {\n  apply(shape, dtype) {\n    return ones(shape, dtype);\n  }\n\n}\n/** @nocollapse */\n\nOnes.className = 'Ones';\nserialization.registerClass(Ones);\nexport class Constant extends Initializer {\n  constructor(args) {\n    super();\n\n    if (typeof args !== 'object') {\n      throw new ValueError(`Expected argument of type ConstantConfig but got ${args}`);\n    }\n\n    if (args.value === undefined) {\n      throw new ValueError(`config must have value set but got ${args}`);\n    }\n\n    this.value = args.value;\n  }\n\n  apply(shape, dtype) {\n    return tidy(() => mul(scalar(this.value), ones(shape, dtype)));\n  }\n\n  getConfig() {\n    return {\n      value: this.value\n    };\n  }\n\n}\n/** @nocollapse */\n\nConstant.className = 'Constant';\nserialization.registerClass(Constant);\nexport class RandomUniform extends Initializer {\n  constructor(args) {\n    super();\n    this.DEFAULT_MINVAL = -0.05;\n    this.DEFAULT_MAXVAL = 0.05;\n    this.minval = args.minval || this.DEFAULT_MINVAL;\n    this.maxval = args.maxval || this.DEFAULT_MAXVAL;\n    this.seed = args.seed;\n  }\n\n  apply(shape, dtype) {\n    return randomUniform(shape, this.minval, this.maxval, dtype);\n  }\n\n  getConfig() {\n    return {\n      minval: this.minval,\n      maxval: this.maxval,\n      seed: this.seed\n    };\n  }\n\n}\n/** @nocollapse */\n\nRandomUniform.className = 'RandomUniform';\nserialization.registerClass(RandomUniform);\nexport class RandomNormal extends Initializer {\n  constructor(args) {\n    super();\n    this.DEFAULT_MEAN = 0.;\n    this.DEFAULT_STDDEV = 0.05;\n    this.mean = args.mean || this.DEFAULT_MEAN;\n    this.stddev = args.stddev || this.DEFAULT_STDDEV;\n    this.seed = args.seed;\n  }\n\n  apply(shape, dtype) {\n    dtype = dtype || 'float32';\n\n    if (dtype !== 'float32' && dtype !== 'int32') {\n      throw new NotImplementedError(`randomNormal does not support dType ${dtype}.`);\n    }\n\n    return K.randomNormal(shape, this.mean, this.stddev, dtype, this.seed);\n  }\n\n  getConfig() {\n    return {\n      mean: this.mean,\n      stddev: this.stddev,\n      seed: this.seed\n    };\n  }\n\n}\n/** @nocollapse */\n\nRandomNormal.className = 'RandomNormal';\nserialization.registerClass(RandomNormal);\nexport class TruncatedNormal extends Initializer {\n  constructor(args) {\n    super();\n    this.DEFAULT_MEAN = 0.;\n    this.DEFAULT_STDDEV = 0.05;\n    this.mean = args.mean || this.DEFAULT_MEAN;\n    this.stddev = args.stddev || this.DEFAULT_STDDEV;\n    this.seed = args.seed;\n  }\n\n  apply(shape, dtype) {\n    dtype = dtype || 'float32';\n\n    if (dtype !== 'float32' && dtype !== 'int32') {\n      throw new NotImplementedError(`truncatedNormal does not support dType ${dtype}.`);\n    }\n\n    return truncatedNormal(shape, this.mean, this.stddev, dtype, this.seed);\n  }\n\n  getConfig() {\n    return {\n      mean: this.mean,\n      stddev: this.stddev,\n      seed: this.seed\n    };\n  }\n\n}\n/** @nocollapse */\n\nTruncatedNormal.className = 'TruncatedNormal';\nserialization.registerClass(TruncatedNormal);\nexport class Identity extends Initializer {\n  constructor(args) {\n    super();\n    this.gain = args.gain != null ? args.gain : 1.0;\n  }\n\n  apply(shape, dtype) {\n    return tidy(() => {\n      if (shape.length !== 2 || shape[0] !== shape[1]) {\n        throw new ValueError('Identity matrix initializer can only be used for' + ' 2D square matrices.');\n      } else {\n        return mul(this.gain, eye(shape[0]));\n      }\n    });\n  }\n\n  getConfig() {\n    return {\n      gain: this.gain\n    };\n  }\n\n}\n/** @nocollapse */\n\nIdentity.className = 'Identity';\nserialization.registerClass(Identity);\n/**\n * Computes the number of input and output units for a weight shape.\n * @param shape Shape of weight.\n * @param dataFormat data format to use for convolution kernels.\n *   Note that all kernels in Keras are standardized on the\n *   CHANNEL_LAST ordering (even when inputs are set to CHANNEL_FIRST).\n * @return An length-2 array: fanIn, fanOut.\n */\n\nfunction computeFans(shape, dataFormat = 'channelsLast') {\n  let fanIn;\n  let fanOut;\n  checkDataFormat(dataFormat);\n\n  if (shape.length === 2) {\n    fanIn = shape[0];\n    fanOut = shape[1];\n  } else if ([3, 4, 5].indexOf(shape.length) !== -1) {\n    if (dataFormat === 'channelsFirst') {\n      const receptiveFieldSize = arrayProd(shape, 2);\n      fanIn = shape[1] * receptiveFieldSize;\n      fanOut = shape[0] * receptiveFieldSize;\n    } else if (dataFormat === 'channelsLast') {\n      const receptiveFieldSize = arrayProd(shape, 0, shape.length - 2);\n      fanIn = shape[shape.length - 2] * receptiveFieldSize;\n      fanOut = shape[shape.length - 1] * receptiveFieldSize;\n    }\n  } else {\n    const shapeProd = arrayProd(shape);\n    fanIn = Math.sqrt(shapeProd);\n    fanOut = Math.sqrt(shapeProd);\n  }\n\n  return [fanIn, fanOut];\n}\n\nexport class VarianceScaling extends Initializer {\n  /**\n   * Constructor of VarianceScaling.\n   * @throws ValueError for invalid value in scale.\n   */\n  constructor(args) {\n    super();\n\n    if (args.scale < 0.0) {\n      throw new ValueError(`scale must be a positive float. Got: ${args.scale}`);\n    }\n\n    this.scale = args.scale == null ? 1.0 : args.scale;\n    this.mode = args.mode == null ? 'fanIn' : args.mode;\n    checkFanMode(this.mode);\n    this.distribution = args.distribution == null ? 'normal' : args.distribution;\n    checkDistribution(this.distribution);\n    this.seed = args.seed;\n  }\n\n  apply(shape, dtype) {\n    const fans = computeFans(shape);\n    const fanIn = fans[0];\n    const fanOut = fans[1];\n    let scale = this.scale;\n\n    if (this.mode === 'fanIn') {\n      scale /= Math.max(1, fanIn);\n    } else if (this.mode === 'fanOut') {\n      scale /= Math.max(1, fanOut);\n    } else {\n      scale /= Math.max(1, (fanIn + fanOut) / 2);\n    }\n\n    if (this.distribution === 'normal') {\n      const stddev = Math.sqrt(scale);\n      dtype = dtype || 'float32';\n\n      if (dtype !== 'float32' && dtype !== 'int32') {\n        throw new NotImplementedError(`${this.getClassName()} does not support dType ${dtype}.`);\n      }\n\n      return truncatedNormal(shape, 0, stddev, dtype, this.seed);\n    } else {\n      const limit = Math.sqrt(3 * scale);\n      return randomUniform(shape, -limit, limit, dtype);\n    }\n  }\n\n  getConfig() {\n    return {\n      scale: this.scale,\n      mode: this.mode,\n      distribution: this.distribution,\n      seed: this.seed\n    };\n  }\n\n}\n/** @nocollapse */\n\nVarianceScaling.className = 'VarianceScaling';\nserialization.registerClass(VarianceScaling);\nexport class GlorotUniform extends VarianceScaling {\n  /**\n   * Constructor of GlorotUniform\n   * @param scale\n   * @param mode\n   * @param distribution\n   * @param seed\n   */\n  constructor(args) {\n    super({\n      scale: 1.0,\n      mode: 'fanAvg',\n      distribution: 'uniform',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  getClassName() {\n    // In Python Keras, GlorotUniform is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n\n}\n/** @nocollapse */\n\nGlorotUniform.className = 'GlorotUniform';\nserialization.registerClass(GlorotUniform);\nexport class GlorotNormal extends VarianceScaling {\n  /**\n   * Constructor of GlorotNormal.\n   * @param scale\n   * @param mode\n   * @param distribution\n   * @param seed\n   */\n  constructor(args) {\n    super({\n      scale: 1.0,\n      mode: 'fanAvg',\n      distribution: 'normal',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  getClassName() {\n    // In Python Keras, GlorotNormal is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n\n}\n/** @nocollapse */\n\nGlorotNormal.className = 'GlorotNormal';\nserialization.registerClass(GlorotNormal);\nexport class HeNormal extends VarianceScaling {\n  constructor(args) {\n    super({\n      scale: 2.0,\n      mode: 'fanIn',\n      distribution: 'normal',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  getClassName() {\n    // In Python Keras, HeNormal is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n\n}\n/** @nocollapse */\n\nHeNormal.className = 'HeNormal';\nserialization.registerClass(HeNormal);\nexport class HeUniform extends VarianceScaling {\n  constructor(args) {\n    super({\n      scale: 2.0,\n      mode: 'fanIn',\n      distribution: 'uniform',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  getClassName() {\n    // In Python Keras, HeUniform is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n\n}\n/** @nocollapse */\n\nHeUniform.className = 'HeUniform';\nserialization.registerClass(HeUniform);\nexport class LeCunNormal extends VarianceScaling {\n  constructor(args) {\n    super({\n      scale: 1.0,\n      mode: 'fanIn',\n      distribution: 'normal',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  getClassName() {\n    // In Python Keras, LeCunNormal is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n\n}\n/** @nocollapse */\n\nLeCunNormal.className = 'LeCunNormal';\nserialization.registerClass(LeCunNormal);\nexport class LeCunUniform extends VarianceScaling {\n  constructor(args) {\n    super({\n      scale: 1.0,\n      mode: 'fanIn',\n      distribution: 'uniform',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  getClassName() {\n    // In Python Keras, LeCunUniform is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n\n}\n/** @nocollapse */\n\nLeCunUniform.className = 'LeCunNormal';\nserialization.registerClass(LeCunUniform);\nexport class Orthogonal extends Initializer {\n  constructor(args) {\n    super();\n    this.DEFAULT_GAIN = 1;\n    this.gain = args.gain == null ? this.DEFAULT_GAIN : args.gain;\n    this.seed = args.seed;\n\n    if (this.seed != null) {\n      throw new NotImplementedError('Random seed is not implemented for Orthogonal Initializer yet.');\n    }\n  }\n\n  apply(shape, dtype) {\n    return tidy(() => {\n      if (shape.length < 2) {\n        throw new NotImplementedError('Shape must be at least 2D.');\n      }\n\n      if (shape[0] * shape[1] > 2000) {\n        console.warn(`Orthogonal initializer is being called on a matrix with more ` + `than 2000 (${shape[0] * shape[1]}) elements: ` + `Slowness may result.`);\n      } // TODO(cais): Add seed support.\n\n\n      const normalizedShape = shape[0] > shape[1] ? [shape[1], shape[0]] : shape;\n      const a = K.randomNormal(normalizedShape, 0, 1, 'float32');\n      let q = linalg.gramSchmidt(a);\n\n      if (shape[0] > shape[1]) {\n        q = transpose(q);\n      }\n\n      return mul(this.gain, q);\n    });\n  }\n\n  getConfig() {\n    return {\n      gain: this.gain,\n      seed: this.seed\n    };\n  }\n\n}\n/** @nocollapse */\n\nOrthogonal.className = 'Orthogonal';\nserialization.registerClass(Orthogonal); // Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\n\nexport const INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n  'constant': 'Constant',\n  'glorotNormal': 'GlorotNormal',\n  'glorotUniform': 'GlorotUniform',\n  'heNormal': 'HeNormal',\n  'heUniform': 'HeUniform',\n  'identity': 'Identity',\n  'leCunNormal': 'LeCunNormal',\n  'leCunUniform': 'LeCunUniform',\n  'ones': 'Ones',\n  'orthogonal': 'Orthogonal',\n  'randomNormal': 'RandomNormal',\n  'randomUniform': 'RandomUniform',\n  'truncatedNormal': 'TruncatedNormal',\n  'varianceScaling': 'VarianceScaling',\n  'zeros': 'Zeros'\n};\n\nfunction deserializeInitializer(config, customObjects = {}) {\n  return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'initializer');\n}\n\nexport function serializeInitializer(initializer) {\n  return serializeKerasObject(initializer);\n}\nexport function getInitializer(identifier) {\n  if (typeof identifier === 'string') {\n    const className = identifier in INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ? INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] : identifier;\n    /* We have four 'helper' classes for common initializers that\n    all get serialized as 'VarianceScaling' and shouldn't go through\n    the deserializeInitializer pathway. */\n\n    if (className === 'GlorotNormal') {\n      return new GlorotNormal();\n    } else if (className === 'GlorotUniform') {\n      return new GlorotUniform();\n    } else if (className === 'HeNormal') {\n      return new HeNormal();\n    } else if (className === 'HeUniform') {\n      return new HeUniform();\n    } else if (className === 'LeCunNormal') {\n      return new LeCunNormal();\n    } else if (className === 'LeCunUniform') {\n      return new LeCunUniform();\n    } else {\n      const config = {};\n      config['className'] = className;\n      config['config'] = {};\n      return deserializeInitializer(config);\n    }\n  } else if (identifier instanceof Initializer) {\n    return identifier;\n  } else {\n    return deserializeInitializer(identifier);\n  }\n}","map":{"version":3,"names":["eye","linalg","mul","ones","randomUniform","scalar","serialization","tidy","transpose","truncatedNormal","zeros","K","checkDataFormat","NotImplementedError","ValueError","VALID_DISTRIBUTION_VALUES","VALID_FAN_MODE_VALUES","checkStringTypeUnionValue","deserializeKerasObject","serializeKerasObject","arrayProd","checkFanMode","value","checkDistribution","Initializer","Serializable","fromConfigUsesCustomObjects","getConfig","Zeros","apply","shape","dtype","className","registerClass","Ones","Constant","constructor","args","undefined","RandomUniform","DEFAULT_MINVAL","DEFAULT_MAXVAL","minval","maxval","seed","RandomNormal","DEFAULT_MEAN","DEFAULT_STDDEV","mean","stddev","randomNormal","TruncatedNormal","Identity","gain","length","computeFans","dataFormat","fanIn","fanOut","indexOf","receptiveFieldSize","shapeProd","Math","sqrt","VarianceScaling","scale","mode","distribution","fans","max","getClassName","limit","GlorotUniform","GlorotNormal","HeNormal","HeUniform","LeCunNormal","LeCunUniform","Orthogonal","DEFAULT_GAIN","console","warn","normalizedShape","a","q","gramSchmidt","INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP","deserializeInitializer","config","customObjects","SerializationMap","getMap","classNameMap","serializeInitializer","initializer","getInitializer","identifier"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-layers/dist/initializers.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { eye, linalg, mul, ones, randomUniform, scalar, serialization, tidy, transpose, truncatedNormal, zeros } from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport { checkDataFormat } from './common';\nimport { NotImplementedError, ValueError } from './errors';\nimport { VALID_DISTRIBUTION_VALUES, VALID_FAN_MODE_VALUES } from './keras_format/initializer_config';\nimport { checkStringTypeUnionValue, deserializeKerasObject, serializeKerasObject } from './utils/generic_utils';\nimport { arrayProd } from './utils/math_utils';\nexport function checkFanMode(value) {\n    checkStringTypeUnionValue(VALID_FAN_MODE_VALUES, 'FanMode', value);\n}\nexport function checkDistribution(value) {\n    checkStringTypeUnionValue(VALID_DISTRIBUTION_VALUES, 'Distribution', value);\n}\n/**\n * Initializer base class.\n *\n * @doc {\n *   heading: 'Initializers', subheading: 'Classes', namespace: 'initializers'}\n */\nexport class Initializer extends serialization.Serializable {\n    fromConfigUsesCustomObjects() {\n        return false;\n    }\n    getConfig() {\n        return {};\n    }\n}\nexport class Zeros extends Initializer {\n    apply(shape, dtype) {\n        return zeros(shape, dtype);\n    }\n}\n/** @nocollapse */\nZeros.className = 'Zeros';\nserialization.registerClass(Zeros);\nexport class Ones extends Initializer {\n    apply(shape, dtype) {\n        return ones(shape, dtype);\n    }\n}\n/** @nocollapse */\nOnes.className = 'Ones';\nserialization.registerClass(Ones);\nexport class Constant extends Initializer {\n    constructor(args) {\n        super();\n        if (typeof args !== 'object') {\n            throw new ValueError(`Expected argument of type ConstantConfig but got ${args}`);\n        }\n        if (args.value === undefined) {\n            throw new ValueError(`config must have value set but got ${args}`);\n        }\n        this.value = args.value;\n    }\n    apply(shape, dtype) {\n        return tidy(() => mul(scalar(this.value), ones(shape, dtype)));\n    }\n    getConfig() {\n        return {\n            value: this.value,\n        };\n    }\n}\n/** @nocollapse */\nConstant.className = 'Constant';\nserialization.registerClass(Constant);\nexport class RandomUniform extends Initializer {\n    constructor(args) {\n        super();\n        this.DEFAULT_MINVAL = -0.05;\n        this.DEFAULT_MAXVAL = 0.05;\n        this.minval = args.minval || this.DEFAULT_MINVAL;\n        this.maxval = args.maxval || this.DEFAULT_MAXVAL;\n        this.seed = args.seed;\n    }\n    apply(shape, dtype) {\n        return randomUniform(shape, this.minval, this.maxval, dtype);\n    }\n    getConfig() {\n        return { minval: this.minval, maxval: this.maxval, seed: this.seed };\n    }\n}\n/** @nocollapse */\nRandomUniform.className = 'RandomUniform';\nserialization.registerClass(RandomUniform);\nexport class RandomNormal extends Initializer {\n    constructor(args) {\n        super();\n        this.DEFAULT_MEAN = 0.;\n        this.DEFAULT_STDDEV = 0.05;\n        this.mean = args.mean || this.DEFAULT_MEAN;\n        this.stddev = args.stddev || this.DEFAULT_STDDEV;\n        this.seed = args.seed;\n    }\n    apply(shape, dtype) {\n        dtype = dtype || 'float32';\n        if (dtype !== 'float32' && dtype !== 'int32') {\n            throw new NotImplementedError(`randomNormal does not support dType ${dtype}.`);\n        }\n        return K.randomNormal(shape, this.mean, this.stddev, dtype, this.seed);\n    }\n    getConfig() {\n        return { mean: this.mean, stddev: this.stddev, seed: this.seed };\n    }\n}\n/** @nocollapse */\nRandomNormal.className = 'RandomNormal';\nserialization.registerClass(RandomNormal);\nexport class TruncatedNormal extends Initializer {\n    constructor(args) {\n        super();\n        this.DEFAULT_MEAN = 0.;\n        this.DEFAULT_STDDEV = 0.05;\n        this.mean = args.mean || this.DEFAULT_MEAN;\n        this.stddev = args.stddev || this.DEFAULT_STDDEV;\n        this.seed = args.seed;\n    }\n    apply(shape, dtype) {\n        dtype = dtype || 'float32';\n        if (dtype !== 'float32' && dtype !== 'int32') {\n            throw new NotImplementedError(`truncatedNormal does not support dType ${dtype}.`);\n        }\n        return truncatedNormal(shape, this.mean, this.stddev, dtype, this.seed);\n    }\n    getConfig() {\n        return { mean: this.mean, stddev: this.stddev, seed: this.seed };\n    }\n}\n/** @nocollapse */\nTruncatedNormal.className = 'TruncatedNormal';\nserialization.registerClass(TruncatedNormal);\nexport class Identity extends Initializer {\n    constructor(args) {\n        super();\n        this.gain = args.gain != null ? args.gain : 1.0;\n    }\n    apply(shape, dtype) {\n        return tidy(() => {\n            if (shape.length !== 2 || shape[0] !== shape[1]) {\n                throw new ValueError('Identity matrix initializer can only be used for' +\n                    ' 2D square matrices.');\n            }\n            else {\n                return mul(this.gain, eye(shape[0]));\n            }\n        });\n    }\n    getConfig() {\n        return { gain: this.gain };\n    }\n}\n/** @nocollapse */\nIdentity.className = 'Identity';\nserialization.registerClass(Identity);\n/**\n * Computes the number of input and output units for a weight shape.\n * @param shape Shape of weight.\n * @param dataFormat data format to use for convolution kernels.\n *   Note that all kernels in Keras are standardized on the\n *   CHANNEL_LAST ordering (even when inputs are set to CHANNEL_FIRST).\n * @return An length-2 array: fanIn, fanOut.\n */\nfunction computeFans(shape, dataFormat = 'channelsLast') {\n    let fanIn;\n    let fanOut;\n    checkDataFormat(dataFormat);\n    if (shape.length === 2) {\n        fanIn = shape[0];\n        fanOut = shape[1];\n    }\n    else if ([3, 4, 5].indexOf(shape.length) !== -1) {\n        if (dataFormat === 'channelsFirst') {\n            const receptiveFieldSize = arrayProd(shape, 2);\n            fanIn = shape[1] * receptiveFieldSize;\n            fanOut = shape[0] * receptiveFieldSize;\n        }\n        else if (dataFormat === 'channelsLast') {\n            const receptiveFieldSize = arrayProd(shape, 0, shape.length - 2);\n            fanIn = shape[shape.length - 2] * receptiveFieldSize;\n            fanOut = shape[shape.length - 1] * receptiveFieldSize;\n        }\n    }\n    else {\n        const shapeProd = arrayProd(shape);\n        fanIn = Math.sqrt(shapeProd);\n        fanOut = Math.sqrt(shapeProd);\n    }\n    return [fanIn, fanOut];\n}\nexport class VarianceScaling extends Initializer {\n    /**\n     * Constructor of VarianceScaling.\n     * @throws ValueError for invalid value in scale.\n     */\n    constructor(args) {\n        super();\n        if (args.scale < 0.0) {\n            throw new ValueError(`scale must be a positive float. Got: ${args.scale}`);\n        }\n        this.scale = args.scale == null ? 1.0 : args.scale;\n        this.mode = args.mode == null ? 'fanIn' : args.mode;\n        checkFanMode(this.mode);\n        this.distribution =\n            args.distribution == null ? 'normal' : args.distribution;\n        checkDistribution(this.distribution);\n        this.seed = args.seed;\n    }\n    apply(shape, dtype) {\n        const fans = computeFans(shape);\n        const fanIn = fans[0];\n        const fanOut = fans[1];\n        let scale = this.scale;\n        if (this.mode === 'fanIn') {\n            scale /= Math.max(1, fanIn);\n        }\n        else if (this.mode === 'fanOut') {\n            scale /= Math.max(1, fanOut);\n        }\n        else {\n            scale /= Math.max(1, (fanIn + fanOut) / 2);\n        }\n        if (this.distribution === 'normal') {\n            const stddev = Math.sqrt(scale);\n            dtype = dtype || 'float32';\n            if (dtype !== 'float32' && dtype !== 'int32') {\n                throw new NotImplementedError(`${this.getClassName()} does not support dType ${dtype}.`);\n            }\n            return truncatedNormal(shape, 0, stddev, dtype, this.seed);\n        }\n        else {\n            const limit = Math.sqrt(3 * scale);\n            return randomUniform(shape, -limit, limit, dtype);\n        }\n    }\n    getConfig() {\n        return {\n            scale: this.scale,\n            mode: this.mode,\n            distribution: this.distribution,\n            seed: this.seed\n        };\n    }\n}\n/** @nocollapse */\nVarianceScaling.className = 'VarianceScaling';\nserialization.registerClass(VarianceScaling);\nexport class GlorotUniform extends VarianceScaling {\n    /**\n     * Constructor of GlorotUniform\n     * @param scale\n     * @param mode\n     * @param distribution\n     * @param seed\n     */\n    constructor(args) {\n        super({\n            scale: 1.0,\n            mode: 'fanAvg',\n            distribution: 'uniform',\n            seed: args == null ? null : args.seed\n        });\n    }\n    getClassName() {\n        // In Python Keras, GlorotUniform is not a class, but a helper method\n        // that creates a VarianceScaling object. Use 'VarianceScaling' as\n        // class name to be compatible with that.\n        return VarianceScaling.className;\n    }\n}\n/** @nocollapse */\nGlorotUniform.className = 'GlorotUniform';\nserialization.registerClass(GlorotUniform);\nexport class GlorotNormal extends VarianceScaling {\n    /**\n     * Constructor of GlorotNormal.\n     * @param scale\n     * @param mode\n     * @param distribution\n     * @param seed\n     */\n    constructor(args) {\n        super({\n            scale: 1.0,\n            mode: 'fanAvg',\n            distribution: 'normal',\n            seed: args == null ? null : args.seed\n        });\n    }\n    getClassName() {\n        // In Python Keras, GlorotNormal is not a class, but a helper method\n        // that creates a VarianceScaling object. Use 'VarianceScaling' as\n        // class name to be compatible with that.\n        return VarianceScaling.className;\n    }\n}\n/** @nocollapse */\nGlorotNormal.className = 'GlorotNormal';\nserialization.registerClass(GlorotNormal);\nexport class HeNormal extends VarianceScaling {\n    constructor(args) {\n        super({\n            scale: 2.0,\n            mode: 'fanIn',\n            distribution: 'normal',\n            seed: args == null ? null : args.seed\n        });\n    }\n    getClassName() {\n        // In Python Keras, HeNormal is not a class, but a helper method\n        // that creates a VarianceScaling object. Use 'VarianceScaling' as\n        // class name to be compatible with that.\n        return VarianceScaling.className;\n    }\n}\n/** @nocollapse */\nHeNormal.className = 'HeNormal';\nserialization.registerClass(HeNormal);\nexport class HeUniform extends VarianceScaling {\n    constructor(args) {\n        super({\n            scale: 2.0,\n            mode: 'fanIn',\n            distribution: 'uniform',\n            seed: args == null ? null : args.seed\n        });\n    }\n    getClassName() {\n        // In Python Keras, HeUniform is not a class, but a helper method\n        // that creates a VarianceScaling object. Use 'VarianceScaling' as\n        // class name to be compatible with that.\n        return VarianceScaling.className;\n    }\n}\n/** @nocollapse */\nHeUniform.className = 'HeUniform';\nserialization.registerClass(HeUniform);\nexport class LeCunNormal extends VarianceScaling {\n    constructor(args) {\n        super({\n            scale: 1.0,\n            mode: 'fanIn',\n            distribution: 'normal',\n            seed: args == null ? null : args.seed\n        });\n    }\n    getClassName() {\n        // In Python Keras, LeCunNormal is not a class, but a helper method\n        // that creates a VarianceScaling object. Use 'VarianceScaling' as\n        // class name to be compatible with that.\n        return VarianceScaling.className;\n    }\n}\n/** @nocollapse */\nLeCunNormal.className = 'LeCunNormal';\nserialization.registerClass(LeCunNormal);\nexport class LeCunUniform extends VarianceScaling {\n    constructor(args) {\n        super({\n            scale: 1.0,\n            mode: 'fanIn',\n            distribution: 'uniform',\n            seed: args == null ? null : args.seed\n        });\n    }\n    getClassName() {\n        // In Python Keras, LeCunUniform is not a class, but a helper method\n        // that creates a VarianceScaling object. Use 'VarianceScaling' as\n        // class name to be compatible with that.\n        return VarianceScaling.className;\n    }\n}\n/** @nocollapse */\nLeCunUniform.className = 'LeCunNormal';\nserialization.registerClass(LeCunUniform);\nexport class Orthogonal extends Initializer {\n    constructor(args) {\n        super();\n        this.DEFAULT_GAIN = 1;\n        this.gain = args.gain == null ? this.DEFAULT_GAIN : args.gain;\n        this.seed = args.seed;\n        if (this.seed != null) {\n            throw new NotImplementedError('Random seed is not implemented for Orthogonal Initializer yet.');\n        }\n    }\n    apply(shape, dtype) {\n        return tidy(() => {\n            if (shape.length < 2) {\n                throw new NotImplementedError('Shape must be at least 2D.');\n            }\n            if (shape[0] * shape[1] > 2000) {\n                console.warn(`Orthogonal initializer is being called on a matrix with more ` +\n                    `than 2000 (${shape[0] * shape[1]}) elements: ` +\n                    `Slowness may result.`);\n            }\n            // TODO(cais): Add seed support.\n            const normalizedShape = shape[0] > shape[1] ? [shape[1], shape[0]] : shape;\n            const a = K.randomNormal(normalizedShape, 0, 1, 'float32');\n            let q = linalg.gramSchmidt(a);\n            if (shape[0] > shape[1]) {\n                q = transpose(q);\n            }\n            return mul(this.gain, q);\n        });\n    }\n    getConfig() {\n        return {\n            gain: this.gain,\n            seed: this.seed,\n        };\n    }\n}\n/** @nocollapse */\nOrthogonal.className = 'Orthogonal';\nserialization.registerClass(Orthogonal);\n// Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\nexport const INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n    'constant': 'Constant',\n    'glorotNormal': 'GlorotNormal',\n    'glorotUniform': 'GlorotUniform',\n    'heNormal': 'HeNormal',\n    'heUniform': 'HeUniform',\n    'identity': 'Identity',\n    'leCunNormal': 'LeCunNormal',\n    'leCunUniform': 'LeCunUniform',\n    'ones': 'Ones',\n    'orthogonal': 'Orthogonal',\n    'randomNormal': 'RandomNormal',\n    'randomUniform': 'RandomUniform',\n    'truncatedNormal': 'TruncatedNormal',\n    'varianceScaling': 'VarianceScaling',\n    'zeros': 'Zeros'\n};\nfunction deserializeInitializer(config, customObjects = {}) {\n    return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'initializer');\n}\nexport function serializeInitializer(initializer) {\n    return serializeKerasObject(initializer);\n}\nexport function getInitializer(identifier) {\n    if (typeof identifier === 'string') {\n        const className = identifier in INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ?\n            INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :\n            identifier;\n        /* We have four 'helper' classes for common initializers that\n        all get serialized as 'VarianceScaling' and shouldn't go through\n        the deserializeInitializer pathway. */\n        if (className === 'GlorotNormal') {\n            return new GlorotNormal();\n        }\n        else if (className === 'GlorotUniform') {\n            return new GlorotUniform();\n        }\n        else if (className === 'HeNormal') {\n            return new HeNormal();\n        }\n        else if (className === 'HeUniform') {\n            return new HeUniform();\n        }\n        else if (className === 'LeCunNormal') {\n            return new LeCunNormal();\n        }\n        else if (className === 'LeCunUniform') {\n            return new LeCunUniform();\n        }\n        else {\n            const config = {};\n            config['className'] = className;\n            config['config'] = {};\n            return deserializeInitializer(config);\n        }\n    }\n    else if (identifier instanceof Initializer) {\n        return identifier;\n    }\n    else {\n        return deserializeInitializer(identifier);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}