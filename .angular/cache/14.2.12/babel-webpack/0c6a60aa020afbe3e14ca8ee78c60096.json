{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { ClipByValue } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { fill } from './fill';\nimport { op } from './operation';\n/**\n * Clips values element-wise. `max(min(x, clipValueMax), clipValueMin)`\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n *\n * x.clipByValue(-2, 3).print();  // or tf.clipByValue(x, -2, 3)\n * ```\n * @param x The input tensor.\n * @param clipValueMin Lower bound of range to be clipped to.\n * @param clipValueMax Upper bound of range to be clipped to.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\n\nfunction clipByValue_(x, clipValueMin, clipValueMax) {\n  const $x = convertToTensor(x, 'x', 'clipByValue');\n  util.assert(clipValueMin <= clipValueMax, () => `Error in clip: min (${clipValueMin}) must be ` + `less than or equal to max (${clipValueMax}).`);\n\n  if (clipValueMin === clipValueMax) {\n    return fill($x.shape, clipValueMin, $x.dtype);\n  }\n\n  const inputs = {\n    x: $x\n  };\n  const attrs = {\n    clipValueMin,\n    clipValueMax\n  };\n  return ENGINE.runKernel(ClipByValue, inputs, attrs);\n}\n\nexport const clipByValue = op({\n  clipByValue_\n});","map":{"version":3,"names":["ENGINE","ClipByValue","convertToTensor","util","fill","op","clipByValue_","x","clipValueMin","clipValueMax","$x","assert","shape","dtype","inputs","attrs","runKernel","clipByValue"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/clip_by_value.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { ClipByValue } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { fill } from './fill';\nimport { op } from './operation';\n/**\n * Clips values element-wise. `max(min(x, clipValueMax), clipValueMin)`\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n *\n * x.clipByValue(-2, 3).print();  // or tf.clipByValue(x, -2, 3)\n * ```\n * @param x The input tensor.\n * @param clipValueMin Lower bound of range to be clipped to.\n * @param clipValueMax Upper bound of range to be clipped to.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction clipByValue_(x, clipValueMin, clipValueMax) {\n    const $x = convertToTensor(x, 'x', 'clipByValue');\n    util.assert((clipValueMin <= clipValueMax), () => `Error in clip: min (${clipValueMin}) must be ` +\n        `less than or equal to max (${clipValueMax}).`);\n    if (clipValueMin === clipValueMax) {\n        return fill($x.shape, clipValueMin, $x.dtype);\n    }\n    const inputs = { x: $x };\n    const attrs = { clipValueMin, clipValueMax };\n    return ENGINE.runKernel(ClipByValue, inputs, attrs);\n}\nexport const clipByValue = op({ clipByValue_ });\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,WAAvB;AACA,SAASC,WAAT,QAA4B,iBAA5B;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,EAAT,QAAmB,aAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,YAAT,CAAsBC,CAAtB,EAAyBC,YAAzB,EAAuCC,YAAvC,EAAqD;EACjD,MAAMC,EAAE,GAAGR,eAAe,CAACK,CAAD,EAAI,GAAJ,EAAS,aAAT,CAA1B;EACAJ,IAAI,CAACQ,MAAL,CAAaH,YAAY,IAAIC,YAA7B,EAA4C,MAAO,uBAAsBD,YAAa,YAApC,GAC7C,8BAA6BC,YAAa,IAD/C;;EAEA,IAAID,YAAY,KAAKC,YAArB,EAAmC;IAC/B,OAAOL,IAAI,CAACM,EAAE,CAACE,KAAJ,EAAWJ,YAAX,EAAyBE,EAAE,CAACG,KAA5B,CAAX;EACH;;EACD,MAAMC,MAAM,GAAG;IAAEP,CAAC,EAAEG;EAAL,CAAf;EACA,MAAMK,KAAK,GAAG;IAAEP,YAAF;IAAgBC;EAAhB,CAAd;EACA,OAAOT,MAAM,CAACgB,SAAP,CAAiBf,WAAjB,EAA8Ba,MAA9B,EAAsCC,KAAtC,CAAP;AACH;;AACD,OAAO,MAAME,WAAW,GAAGZ,EAAE,CAAC;EAAEC;AAAF,CAAD,CAAtB"},"metadata":{},"sourceType":"module"}