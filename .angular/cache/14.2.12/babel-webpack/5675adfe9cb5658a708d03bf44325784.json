{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { LazyIterator, OneToManyIterator } from './lazy_iterator';\nexport class StringIterator extends LazyIterator {\n  /**\n   * Splits a string stream on a given separator.\n   *\n   * It is assumed that the incoming chunk boundaries have no semantic meaning,\n   * so conceptually the incoming stream is treated simply as the concatenation\n   * of its elements.\n   *\n   * The outgoing stream provides chunks corresponding to the results of the\n   * standard string split() operation (even if such a chunk spanned incoming\n   * chunks).  The separators are not included.\n   *\n   * A typical usage is to split a text file (represented as a stream with\n   * arbitrary chunk boundaries) into lines.\n   *\n   * @param upstream A readable stream of strings that can be treated as\n   *   concatenated.\n   * @param separator A character to split on.\n   */\n  split(separator) {\n    return new SplitIterator(this, separator);\n  }\n\n} // ============================================================================\n// The following private classes serve to implement the chainable methods\n// on StringIterator.  Unfortunately they can't be placed in separate files, due\n// to resulting trouble with circular imports.\n// ============================================================================\n// We wanted multiple inheritance, e.g.\n//   class SplitIterator extends QueueIterator<string>, StringIterator\n// but the TypeScript mixin approach is a bit hacky, so we take this adapter\n// approach instead.\n\nclass SplitIterator extends StringIterator {\n  constructor(upstream, separator) {\n    super();\n    this.upstream = upstream;\n    this.impl = new SplitIteratorImpl(upstream, separator);\n  }\n\n  summary() {\n    return this.impl.summary();\n  }\n\n  next() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return _this.impl.next();\n    })();\n  }\n\n}\n\nclass SplitIteratorImpl extends OneToManyIterator {\n  constructor(upstream, separator) {\n    super();\n    this.upstream = upstream;\n    this.separator = separator; // A partial string at the end of an upstream chunk\n\n    this.carryover = '';\n  }\n\n  summary() {\n    return `${this.upstream.summary()} -> Split('${this.separator}')`;\n  }\n\n  pump() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const chunkResult = yield _this2.upstream.next();\n\n      if (chunkResult.done) {\n        if (_this2.carryover === '') {\n          return false;\n        } // Pretend that the pump succeeded in order to emit the small last batch.\n        // The next pump() call will actually fail.\n\n\n        _this2.outputQueue.push(_this2.carryover);\n\n        _this2.carryover = '';\n        return true;\n      }\n\n      const lines = chunkResult.value.split(_this2.separator); // Note the behavior: \" ab \".split(' ') === ['', 'ab', '']\n      // Thus the carryover may be '' if the separator falls on a chunk\n      // boundary; this produces the correct result.\n\n      lines[0] = _this2.carryover + lines[0];\n\n      for (const line of lines.slice(0, -1)) {\n        _this2.outputQueue.push(line);\n      }\n\n      _this2.carryover = lines[lines.length - 1];\n      return true;\n    })();\n  }\n\n}","map":{"version":3,"names":["LazyIterator","OneToManyIterator","StringIterator","split","separator","SplitIterator","constructor","upstream","impl","SplitIteratorImpl","summary","next","carryover","pump","chunkResult","done","outputQueue","push","lines","value","line","slice","length"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-data/dist/iterators/string_iterator.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { LazyIterator, OneToManyIterator } from './lazy_iterator';\nexport class StringIterator extends LazyIterator {\n    /**\n     * Splits a string stream on a given separator.\n     *\n     * It is assumed that the incoming chunk boundaries have no semantic meaning,\n     * so conceptually the incoming stream is treated simply as the concatenation\n     * of its elements.\n     *\n     * The outgoing stream provides chunks corresponding to the results of the\n     * standard string split() operation (even if such a chunk spanned incoming\n     * chunks).  The separators are not included.\n     *\n     * A typical usage is to split a text file (represented as a stream with\n     * arbitrary chunk boundaries) into lines.\n     *\n     * @param upstream A readable stream of strings that can be treated as\n     *   concatenated.\n     * @param separator A character to split on.\n     */\n    split(separator) {\n        return new SplitIterator(this, separator);\n    }\n}\n// ============================================================================\n// The following private classes serve to implement the chainable methods\n// on StringIterator.  Unfortunately they can't be placed in separate files, due\n// to resulting trouble with circular imports.\n// ============================================================================\n// We wanted multiple inheritance, e.g.\n//   class SplitIterator extends QueueIterator<string>, StringIterator\n// but the TypeScript mixin approach is a bit hacky, so we take this adapter\n// approach instead.\nclass SplitIterator extends StringIterator {\n    constructor(upstream, separator) {\n        super();\n        this.upstream = upstream;\n        this.impl = new SplitIteratorImpl(upstream, separator);\n    }\n    summary() {\n        return this.impl.summary();\n    }\n    async next() {\n        return this.impl.next();\n    }\n}\nclass SplitIteratorImpl extends OneToManyIterator {\n    constructor(upstream, separator) {\n        super();\n        this.upstream = upstream;\n        this.separator = separator;\n        // A partial string at the end of an upstream chunk\n        this.carryover = '';\n    }\n    summary() {\n        return `${this.upstream.summary()} -> Split('${this.separator}')`;\n    }\n    async pump() {\n        const chunkResult = await this.upstream.next();\n        if (chunkResult.done) {\n            if (this.carryover === '') {\n                return false;\n            }\n            // Pretend that the pump succeeded in order to emit the small last batch.\n            // The next pump() call will actually fail.\n            this.outputQueue.push(this.carryover);\n            this.carryover = '';\n            return true;\n        }\n        const lines = chunkResult.value.split(this.separator);\n        // Note the behavior: \" ab \".split(' ') === ['', 'ab', '']\n        // Thus the carryover may be '' if the separator falls on a chunk\n        // boundary; this produces the correct result.\n        lines[0] = this.carryover + lines[0];\n        for (const line of lines.slice(0, -1)) {\n            this.outputQueue.push(line);\n        }\n        this.carryover = lines[lines.length - 1];\n        return true;\n    }\n}\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,EAAuBC,iBAAvB,QAAgD,iBAAhD;AACA,OAAO,MAAMC,cAAN,SAA6BF,YAA7B,CAA0C;EAC7C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIG,KAAK,CAACC,SAAD,EAAY;IACb,OAAO,IAAIC,aAAJ,CAAkB,IAAlB,EAAwBD,SAAxB,CAAP;EACH;;AArB4C,C,CAuBjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,aAAN,SAA4BH,cAA5B,CAA2C;EACvCI,WAAW,CAACC,QAAD,EAAWH,SAAX,EAAsB;IAC7B;IACA,KAAKG,QAAL,GAAgBA,QAAhB;IACA,KAAKC,IAAL,GAAY,IAAIC,iBAAJ,CAAsBF,QAAtB,EAAgCH,SAAhC,CAAZ;EACH;;EACDM,OAAO,GAAG;IACN,OAAO,KAAKF,IAAL,CAAUE,OAAV,EAAP;EACH;;EACKC,IAAI,GAAG;IAAA;;IAAA;MACT,OAAO,KAAI,CAACH,IAAL,CAAUG,IAAV,EAAP;IADS;EAEZ;;AAXsC;;AAa3C,MAAMF,iBAAN,SAAgCR,iBAAhC,CAAkD;EAC9CK,WAAW,CAACC,QAAD,EAAWH,SAAX,EAAsB;IAC7B;IACA,KAAKG,QAAL,GAAgBA,QAAhB;IACA,KAAKH,SAAL,GAAiBA,SAAjB,CAH6B,CAI7B;;IACA,KAAKQ,SAAL,GAAiB,EAAjB;EACH;;EACDF,OAAO,GAAG;IACN,OAAQ,GAAE,KAAKH,QAAL,CAAcG,OAAd,EAAwB,cAAa,KAAKN,SAAU,IAA9D;EACH;;EACKS,IAAI,GAAG;IAAA;;IAAA;MACT,MAAMC,WAAW,SAAS,MAAI,CAACP,QAAL,CAAcI,IAAd,EAA1B;;MACA,IAAIG,WAAW,CAACC,IAAhB,EAAsB;QAClB,IAAI,MAAI,CAACH,SAAL,KAAmB,EAAvB,EAA2B;UACvB,OAAO,KAAP;QACH,CAHiB,CAIlB;QACA;;;QACA,MAAI,CAACI,WAAL,CAAiBC,IAAjB,CAAsB,MAAI,CAACL,SAA3B;;QACA,MAAI,CAACA,SAAL,GAAiB,EAAjB;QACA,OAAO,IAAP;MACH;;MACD,MAAMM,KAAK,GAAGJ,WAAW,CAACK,KAAZ,CAAkBhB,KAAlB,CAAwB,MAAI,CAACC,SAA7B,CAAd,CAZS,CAaT;MACA;MACA;;MACAc,KAAK,CAAC,CAAD,CAAL,GAAW,MAAI,CAACN,SAAL,GAAiBM,KAAK,CAAC,CAAD,CAAjC;;MACA,KAAK,MAAME,IAAX,IAAmBF,KAAK,CAACG,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAAnB,EAAuC;QACnC,MAAI,CAACL,WAAL,CAAiBC,IAAjB,CAAsBG,IAAtB;MACH;;MACD,MAAI,CAACR,SAAL,GAAiBM,KAAK,CAACA,KAAK,CAACI,MAAN,GAAe,CAAhB,CAAtB;MACA,OAAO,IAAP;IArBS;EAsBZ;;AAjC6C"},"metadata":{},"sourceType":"module"}