{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { customGrad } from '../gradients';\nimport { convertToTensor } from '../tensor_util_env';\nimport { cast } from './cast';\nimport { exp } from './exp';\nimport { log } from './log';\nimport { max } from './max';\nimport { mul } from './mul';\nimport { op } from './operation';\nimport { sub } from './sub';\nimport { sum } from './sum';\n/**\n * Computes the log softmax.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n *\n * a.logSoftmax().print();  // or tf.logSoftmax(a)\n * ```\n *\n * ```js\n * const a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);\n *\n * a.logSoftmax().print();  // or tf.logSoftmax(a)\n * ```\n *\n * @param logits The logits array.\n * @param axis The dimension softmax would be performed on. Defaults to `-1`\n *     which indicates the last dimension.\n *\n * @doc {heading: 'Operations', subheading: 'Normalization'}\n */\n\nfunction logSoftmax_(logits, axis = -1) {\n  const $logits = convertToTensor(logits, 'logits', 'logSoftmax');\n\n  if (axis === -1) {\n    axis = $logits.rank - 1;\n  }\n\n  if (axis !== $logits.rank - 1) {\n    throw Error('Log Softmax along a non-last dimension is not yet supported. ' + `Logits was rank ${$logits.rank} and axis was ${axis}`);\n  } // const forward: ForwardFunc<Tensor> = (backend, save) => {\n  //   const keepDims = true;\n  //   const xMax = max(logits, axis, true);\n  //   const shifted = sub(logits, xMax);\n  //   const value =\n  //       sub(cast(shifted, 'float32'), log(sum(exp(shifted), axis,\n  //       keepDims)));\n  //   save([value]);\n  //   return value;\n  // };\n  // Use a custom gradient for numerical stability.\n\n\n  const customOp = customGrad((logits, save) => {\n    const keepDims = true;\n    const xMax = max(logits, axis, true);\n    const shifted = sub(logits, xMax);\n    const value = sub(cast(shifted, 'float32'), log(sum(exp(shifted), axis, keepDims)));\n    save([value]);\n\n    const gradFunc = (dy, saved) => {\n      const [value] = saved;\n      const keepDims = true;\n      const softmax = exp(value);\n      return sub(dy, mul(sum(dy, axis, keepDims), softmax));\n    };\n\n    return {\n      value,\n      gradFunc\n    };\n  });\n  return customOp($logits); // TODO Use Engine.runKernel when CPU/WebGL/WASM backends implement this.\n  // const inputs: LogSoftmaxInputs = {logits: $logits};\n  // const attrs: LogSoftmaxAttrs = {axis};\n  // return ENGINE.runKernel(\n  //            LogSoftmax, inputs as {} as NamedTensorMap,\n  //            attrs as {} as NamedAttrMap);\n}\n\nexport const logSoftmax = op({\n  logSoftmax_\n});","map":{"version":3,"names":["customGrad","convertToTensor","cast","exp","log","max","mul","op","sub","sum","logSoftmax_","logits","axis","$logits","rank","Error","customOp","save","keepDims","xMax","shifted","value","gradFunc","dy","saved","softmax","logSoftmax"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/log_softmax.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { customGrad } from '../gradients';\nimport { convertToTensor } from '../tensor_util_env';\nimport { cast } from './cast';\nimport { exp } from './exp';\nimport { log } from './log';\nimport { max } from './max';\nimport { mul } from './mul';\nimport { op } from './operation';\nimport { sub } from './sub';\nimport { sum } from './sum';\n/**\n * Computes the log softmax.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n *\n * a.logSoftmax().print();  // or tf.logSoftmax(a)\n * ```\n *\n * ```js\n * const a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);\n *\n * a.logSoftmax().print();  // or tf.logSoftmax(a)\n * ```\n *\n * @param logits The logits array.\n * @param axis The dimension softmax would be performed on. Defaults to `-1`\n *     which indicates the last dimension.\n *\n * @doc {heading: 'Operations', subheading: 'Normalization'}\n */\nfunction logSoftmax_(logits, axis = -1) {\n    const $logits = convertToTensor(logits, 'logits', 'logSoftmax');\n    if (axis === -1) {\n        axis = $logits.rank - 1;\n    }\n    if (axis !== $logits.rank - 1) {\n        throw Error('Log Softmax along a non-last dimension is not yet supported. ' +\n            `Logits was rank ${$logits.rank} and axis was ${axis}`);\n    }\n    // const forward: ForwardFunc<Tensor> = (backend, save) => {\n    //   const keepDims = true;\n    //   const xMax = max(logits, axis, true);\n    //   const shifted = sub(logits, xMax);\n    //   const value =\n    //       sub(cast(shifted, 'float32'), log(sum(exp(shifted), axis,\n    //       keepDims)));\n    //   save([value]);\n    //   return value;\n    // };\n    // Use a custom gradient for numerical stability.\n    const customOp = customGrad((logits, save) => {\n        const keepDims = true;\n        const xMax = max(logits, axis, true);\n        const shifted = sub(logits, xMax);\n        const value = sub(cast(shifted, 'float32'), log(sum(exp(shifted), axis, keepDims)));\n        save([value]);\n        const gradFunc = (dy, saved) => {\n            const [value] = saved;\n            const keepDims = true;\n            const softmax = exp(value);\n            return sub(dy, mul(sum(dy, axis, keepDims), softmax));\n        };\n        return { value, gradFunc };\n    });\n    return customOp($logits);\n    // TODO Use Engine.runKernel when CPU/WebGL/WASM backends implement this.\n    // const inputs: LogSoftmaxInputs = {logits: $logits};\n    // const attrs: LogSoftmaxAttrs = {axis};\n    // return ENGINE.runKernel(\n    //            LogSoftmax, inputs as {} as NamedTensorMap,\n    //            attrs as {} as NamedAttrMap);\n}\nexport const logSoftmax = op({ logSoftmax_ });\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAT,QAA2B,cAA3B;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,GAAT,QAAoB,OAApB;AACA,SAASC,GAAT,QAAoB,OAApB;AACA,SAASC,GAAT,QAAoB,OAApB;AACA,SAASC,GAAT,QAAoB,OAApB;AACA,SAASC,EAAT,QAAmB,aAAnB;AACA,SAASC,GAAT,QAAoB,OAApB;AACA,SAASC,GAAT,QAAoB,OAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,WAAT,CAAqBC,MAArB,EAA6BC,IAAI,GAAG,CAAC,CAArC,EAAwC;EACpC,MAAMC,OAAO,GAAGZ,eAAe,CAACU,MAAD,EAAS,QAAT,EAAmB,YAAnB,CAA/B;;EACA,IAAIC,IAAI,KAAK,CAAC,CAAd,EAAiB;IACbA,IAAI,GAAGC,OAAO,CAACC,IAAR,GAAe,CAAtB;EACH;;EACD,IAAIF,IAAI,KAAKC,OAAO,CAACC,IAAR,GAAe,CAA5B,EAA+B;IAC3B,MAAMC,KAAK,CAAC,kEACP,mBAAkBF,OAAO,CAACC,IAAK,iBAAgBF,IAAK,EAD9C,CAAX;EAEH,CARmC,CASpC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EACA,MAAMI,QAAQ,GAAGhB,UAAU,CAAC,CAACW,MAAD,EAASM,IAAT,KAAkB;IAC1C,MAAMC,QAAQ,GAAG,IAAjB;IACA,MAAMC,IAAI,GAAGd,GAAG,CAACM,MAAD,EAASC,IAAT,EAAe,IAAf,CAAhB;IACA,MAAMQ,OAAO,GAAGZ,GAAG,CAACG,MAAD,EAASQ,IAAT,CAAnB;IACA,MAAME,KAAK,GAAGb,GAAG,CAACN,IAAI,CAACkB,OAAD,EAAU,SAAV,CAAL,EAA2BhB,GAAG,CAACK,GAAG,CAACN,GAAG,CAACiB,OAAD,CAAJ,EAAeR,IAAf,EAAqBM,QAArB,CAAJ,CAA9B,CAAjB;IACAD,IAAI,CAAC,CAACI,KAAD,CAAD,CAAJ;;IACA,MAAMC,QAAQ,GAAG,CAACC,EAAD,EAAKC,KAAL,KAAe;MAC5B,MAAM,CAACH,KAAD,IAAUG,KAAhB;MACA,MAAMN,QAAQ,GAAG,IAAjB;MACA,MAAMO,OAAO,GAAGtB,GAAG,CAACkB,KAAD,CAAnB;MACA,OAAOb,GAAG,CAACe,EAAD,EAAKjB,GAAG,CAACG,GAAG,CAACc,EAAD,EAAKX,IAAL,EAAWM,QAAX,CAAJ,EAA0BO,OAA1B,CAAR,CAAV;IACH,CALD;;IAMA,OAAO;MAAEJ,KAAF;MAASC;IAAT,CAAP;EACH,CAb0B,CAA3B;EAcA,OAAON,QAAQ,CAACH,OAAD,CAAf,CAlCoC,CAmCpC;EACA;EACA;EACA;EACA;EACA;AACH;;AACD,OAAO,MAAMa,UAAU,GAAGnB,EAAE,CAAC;EAAEG;AAAF,CAAD,CAArB"},"metadata":{},"sourceType":"module"}