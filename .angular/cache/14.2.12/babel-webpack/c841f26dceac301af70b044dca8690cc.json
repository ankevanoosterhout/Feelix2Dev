{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { slice_util, StridedSlice, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nimport { stridedSliceImpl } from './StridedSlice_impl';\nexport function stridedSlice(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n  assertNotComplex(x, 'stridedSlice');\n  const {\n    finalShapeSparse,\n    finalShape,\n    isIdentity,\n    sliceDim0,\n    isSimpleSlice,\n    begin: $begin,\n    end: $end,\n    strides: $strides\n  } = slice_util.sliceInfo(x.shape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);\n  let result; // ref:\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/strided_slice_op.cc\n\n  if (isIdentity) {\n    // Optimization #1, slice is a no-op plus reshape\n    result = reshape({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        shape: finalShape\n      }\n    });\n  } else if (sliceDim0 || isSimpleSlice) {\n    // Optimization #2, slice is memory contiguous (only occurs in dim 0)\n    util.assert(x.shape.length >= 1, () => `Input must have rank at least 1, got: ${x.shape.length}`);\n    const size = slice_util.computeOutShape($begin, $end, $strides); // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).\n\n    const sliced = slice({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        begin: $begin,\n        size\n      }\n    });\n    result = reshape({\n      inputs: {\n        x: sliced\n      },\n      backend,\n      attrs: {\n        shape: finalShape\n      }\n    });\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else {\n    const xBuf = backend.bufferSync(x);\n    const outBuf = stridedSliceImpl(finalShapeSparse, xBuf, $strides, $begin);\n    result = backend.makeTensorInfo(finalShape, outBuf.dtype, outBuf.values);\n  }\n\n  return result;\n}\nexport const stridedSliceConfig = {\n  kernelName: StridedSlice,\n  backendName: 'cpu',\n  kernelFunc: stridedSlice\n};","map":{"version":3,"names":["slice_util","StridedSlice","util","assertNotComplex","reshape","slice","stridedSliceImpl","stridedSlice","args","inputs","backend","attrs","x","begin","end","strides","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","finalShapeSparse","finalShape","isIdentity","sliceDim0","isSimpleSlice","$begin","$end","$strides","sliceInfo","shape","result","assert","length","size","computeOutShape","sliced","disposeIntermediateTensorInfo","xBuf","bufferSync","outBuf","makeTensorInfo","dtype","values","stridedSliceConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StridedSlice.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { slice_util, StridedSlice, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nimport { stridedSliceImpl } from './StridedSlice_impl';\nexport function stridedSlice(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask } = attrs;\n    assertNotComplex(x, 'stridedSlice');\n    const { finalShapeSparse, finalShape, isIdentity, sliceDim0, isSimpleSlice, begin: $begin, end: $end, strides: $strides } = slice_util.sliceInfo(x.shape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);\n    let result;\n    // ref:\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/strided_slice_op.cc\n    if (isIdentity) {\n        // Optimization #1, slice is a no-op plus reshape\n        result = reshape({ inputs: { x }, backend, attrs: { shape: finalShape } });\n    }\n    else if (sliceDim0 || isSimpleSlice) {\n        // Optimization #2, slice is memory contiguous (only occurs in dim 0)\n        util.assert(x.shape.length >= 1, () => `Input must have rank at least 1, got: ${x.shape.length}`);\n        const size = slice_util.computeOutShape($begin, $end, $strides);\n        // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).\n        const sliced = slice({ inputs: { x }, backend, attrs: { begin: $begin, size } });\n        result =\n            reshape({ inputs: { x: sliced }, backend, attrs: { shape: finalShape } });\n        backend.disposeIntermediateTensorInfo(sliced);\n    }\n    else {\n        const xBuf = backend.bufferSync(x);\n        const outBuf = stridedSliceImpl(finalShapeSparse, xBuf, $strides, $begin);\n        result = backend.makeTensorInfo(finalShape, outBuf.dtype, outBuf.values);\n    }\n    return result;\n}\nexport const stridedSliceConfig = {\n    kernelName: StridedSlice,\n    backendName: 'cpu',\n    kernelFunc: stridedSlice\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}