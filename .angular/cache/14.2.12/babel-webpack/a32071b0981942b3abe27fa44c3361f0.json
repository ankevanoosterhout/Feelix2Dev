{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv3D, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv3D(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dilations\n  } = attrs;\n  assertNotComplex([x, filter], 'conv3d');\n  const convInfo = backend_util.computeConv3DInfo(x.shape, filter.shape, strides, dilations, pad);\n  const {\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    dilationDepth,\n    dilationHeight,\n    dilationWidth,\n    padInfo\n  } = convInfo;\n  const padFront = padInfo.front;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype);\n  const xVals = backend.data.get(x.dataId).values;\n  const wVals = backend.data.get(filter.dataId).values;\n  const yVals = y.values;\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n\n    for (let yF = 0; yF < convInfo.outDepth; ++yF) {\n      const yOffset2 = yOffset1 + yF * y.strides[1];\n      const xFCorner = yF * convInfo.strideDepth - padFront;\n\n      for (let wF = 0; wF < filterDepth; ++wF) {\n        const xF = xFCorner + wF * dilationDepth;\n\n        if (xF < 0 || xF >= convInfo.inDepth) {\n          continue;\n        }\n\n        const wOffset1 = wF * filterStrides[0];\n        const xOffset2 = xOffset1 + xF * xStrides[1];\n\n        for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n          const yOffset3 = yOffset2 + yR * y.strides[2];\n          const xRCorner = yR * convInfo.strideHeight - padTop;\n\n          for (let wR = 0; wR < filterHeight; ++wR) {\n            const xR = xRCorner + wR * dilationHeight;\n\n            if (xR < 0 || xR >= convInfo.inHeight) {\n              continue;\n            }\n\n            const wOffset2 = wOffset1 + wR * filterStrides[1];\n            const xOffset3 = xOffset2 + xR * xStrides[2];\n\n            for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n              const yOffset4 = yOffset3 + yC * convInfo.outChannels;\n              const xCCorner = yC * convInfo.strideWidth - padLeft;\n\n              for (let wC = 0; wC < filterWidth; ++wC) {\n                const xC = xCCorner + wC * dilationWidth;\n\n                if (xC < 0 || xC >= convInfo.inWidth) {\n                  continue;\n                }\n\n                const wOffset3 = wOffset2 + wC * filterStrides[2];\n                const xOffset4 = xOffset3 + xC * convInfo.inChannels;\n                let wOffset4 = wOffset3;\n\n                for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                  const xVal = xVals[xOffset4 + d1];\n\n                  for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                    yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];\n                  }\n\n                  wOffset4 += convInfo.outChannels;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\nexport const conv3DConfig = {\n  kernelName: Conv3D,\n  backendName: 'cpu',\n  kernelFunc: conv3D\n};","map":{"version":3,"names":["backend_util","Conv3D","TensorBuffer","util","assertNotComplex","conv3D","args","inputs","backend","attrs","x","filter","strides","pad","dilations","convInfo","computeConv3DInfo","shape","filterDepth","filterHeight","filterWidth","dilationDepth","dilationHeight","dilationWidth","padInfo","padFront","front","padLeft","left","padTop","top","y","outShape","dtype","xVals","data","get","dataId","values","wVals","yVals","xStrides","computeStrides","filterStrides","b","batchSize","xOffset1","yOffset1","yF","outDepth","yOffset2","xFCorner","strideDepth","wF","xF","inDepth","wOffset1","xOffset2","yR","outHeight","yOffset3","xRCorner","strideHeight","wR","xR","inHeight","wOffset2","xOffset3","yC","outWidth","yOffset4","outChannels","xCCorner","strideWidth","wC","xC","inWidth","wOffset3","xOffset4","inChannels","wOffset4","d1","xVal","d2","makeTensorInfo","conv3DConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Conv3D.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv3D, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv3D(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter } = inputs;\n    const { strides, pad, dilations } = attrs;\n    assertNotComplex([x, filter], 'conv3d');\n    const convInfo = backend_util.computeConv3DInfo(x.shape, filter.shape, strides, dilations, pad);\n    const { filterDepth, filterHeight, filterWidth, dilationDepth, dilationHeight, dilationWidth, padInfo } = convInfo;\n    const padFront = padInfo.front;\n    const padLeft = padInfo.left;\n    const padTop = padInfo.top;\n    const y = new TensorBuffer(convInfo.outShape, x.dtype);\n    const xVals = backend.data.get(x.dataId).values;\n    const wVals = backend.data.get(filter.dataId).values;\n    const yVals = y.values;\n    const xStrides = util.computeStrides(x.shape);\n    const filterStrides = util.computeStrides(filter.shape);\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n        const xOffset1 = b * xStrides[0];\n        const yOffset1 = b * y.strides[0];\n        for (let yF = 0; yF < convInfo.outDepth; ++yF) {\n            const yOffset2 = yOffset1 + yF * y.strides[1];\n            const xFCorner = yF * convInfo.strideDepth - padFront;\n            for (let wF = 0; wF < filterDepth; ++wF) {\n                const xF = xFCorner + wF * dilationDepth;\n                if (xF < 0 || xF >= convInfo.inDepth) {\n                    continue;\n                }\n                const wOffset1 = wF * filterStrides[0];\n                const xOffset2 = xOffset1 + xF * xStrides[1];\n                for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n                    const yOffset3 = yOffset2 + yR * y.strides[2];\n                    const xRCorner = yR * convInfo.strideHeight - padTop;\n                    for (let wR = 0; wR < filterHeight; ++wR) {\n                        const xR = xRCorner + wR * dilationHeight;\n                        if (xR < 0 || xR >= convInfo.inHeight) {\n                            continue;\n                        }\n                        const wOffset2 = wOffset1 + wR * filterStrides[1];\n                        const xOffset3 = xOffset2 + xR * xStrides[2];\n                        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n                            const yOffset4 = yOffset3 + yC * convInfo.outChannels;\n                            const xCCorner = yC * convInfo.strideWidth - padLeft;\n                            for (let wC = 0; wC < filterWidth; ++wC) {\n                                const xC = xCCorner + wC * dilationWidth;\n                                if (xC < 0 || xC >= convInfo.inWidth) {\n                                    continue;\n                                }\n                                const wOffset3 = wOffset2 + wC * filterStrides[2];\n                                const xOffset4 = xOffset3 + xC * convInfo.inChannels;\n                                let wOffset4 = wOffset3;\n                                for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                                    const xVal = xVals[xOffset4 + d1];\n                                    for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                                        yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];\n                                    }\n                                    wOffset4 += convInfo.outChannels;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\nexport const conv3DConfig = {\n    kernelName: Conv3D,\n    backendName: 'cpu',\n    kernelFunc: conv3D\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}