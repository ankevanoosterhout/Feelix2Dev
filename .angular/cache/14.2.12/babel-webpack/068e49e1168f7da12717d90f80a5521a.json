{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, util } from '@tensorflow/tfjs-core';\nimport { ConcatProgram } from '../concat_gpu';\nimport { ConcatPackedProgram } from '../concat_packed_gpu';\nimport { concatImplCPU } from '../kernel_utils/shared';\nimport { complex } from './Complex';\nimport { imag } from './Imag';\nimport { real } from './Real';\nimport { reshape } from './Reshape';\nexport function concatImpl(inputs, axis, backend) {\n  const dtype = inputs[0].dtype;\n\n  if (dtype === 'complex64') {\n    const reals = inputs.map(t => real({\n      inputs: {\n        input: t\n      },\n      backend\n    }));\n    const imags = inputs.map(t => imag({\n      inputs: {\n        input: t\n      },\n      backend\n    }));\n    const realConcated = concatImpl(reals, axis, backend);\n    const imagConcated = concatImpl(imags, axis, backend);\n    const result = complex({\n      inputs: {\n        real: realConcated,\n        imag: imagConcated\n      },\n      backend\n    });\n    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n    return result;\n  }\n\n  let runOnCpu = backend.shouldExecuteOnCPU(inputs); // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgl doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n\n  if (dtype === 'string') {\n    runOnCpu = true;\n  }\n\n  if (runOnCpu) {\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const tensors2D = inputs.map(t => {\n      const innerSize = util.sizeFromShape(t.shape.slice(axis));\n      const shape = [-1, innerSize];\n      return reshape({\n        inputs: {\n          x: t\n        },\n        backend,\n        attrs: {\n          shape\n        }\n      });\n    });\n    const inputsValShapes = tensors2D.map(t => {\n      return {\n        vals: backend.readSync(t.dataId),\n        shape: t.shape\n      };\n    }); // Concats 2d tensors along axis=1.\n\n    const outShape = backend_util.computeOutShape(tensors2D.map(t => t.shape), 1\n    /* axis */\n    );\n    const simplyConcat = tensors2D[0].shape[0] === 1;\n    const outVals = concatImplCPU(inputsValShapes, outShape, dtype, simplyConcat);\n    const finalOutShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n    const outInfo = backend.makeTensorInfo(finalOutShape, dtype, outVals);\n    tensors2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return outInfo;\n  }\n\n  const maxTexturesInShader = env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER');\n\n  if (inputs.length > maxTexturesInShader) {\n    const reducedInputs = [];\n\n    for (let i = 0; i < inputs.length; i += maxTexturesInShader) {\n      const subArray = inputs.slice(i, i + maxTexturesInShader);\n      reducedInputs.push(concatImpl(subArray, axis, backend));\n    }\n\n    const result = concatImpl(reducedInputs, axis, backend);\n\n    for (const i of reducedInputs) {\n      backend.disposeIntermediateTensorInfo(i);\n    }\n\n    return result;\n  }\n\n  if (env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') && inputs[0].shape.length > 1) {\n    const program = new ConcatPackedProgram(inputs.map(t => t.shape), axis);\n    return backend.runWebGLProgram(program, inputs, dtype);\n  }\n\n  const {\n    tensors2D,\n    outShape\n  } = computeTensors2D(inputs, axis, backend);\n  const program = new ConcatProgram(tensors2D.map(t => t.shape));\n  const result = backend.runWebGLProgram(program, tensors2D, dtype);\n  tensors2D.forEach(r => backend.disposeIntermediateTensorInfo(r));\n  const reshapedResult = reshape({\n    inputs: {\n      x: result\n    },\n    attrs: {\n      shape: outShape\n    },\n    backend\n  });\n  backend.disposeIntermediateTensorInfo(result);\n  return reshapedResult;\n}\n\nfunction computeTensors2D(inputs, axis, backend) {\n  // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n  const outShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n  const tensors2D = inputs.map(x => reshape({\n    inputs: {\n      x\n    },\n    attrs: {\n      shape: [-1, util.sizeFromShape(x.shape.slice(axis))]\n    },\n    backend\n  }));\n  return {\n    tensors2D,\n    outShape\n  };\n}","map":{"version":3,"names":["backend_util","env","util","ConcatProgram","ConcatPackedProgram","concatImplCPU","complex","imag","real","reshape","concatImpl","inputs","axis","backend","dtype","reals","map","t","input","imags","realConcated","imagConcated","result","forEach","r","disposeIntermediateTensorInfo","i","runOnCpu","shouldExecuteOnCPU","tensors2D","innerSize","sizeFromShape","shape","slice","x","attrs","inputsValShapes","vals","readSync","dataId","outShape","computeOutShape","simplyConcat","outVals","finalOutShape","outInfo","makeTensorInfo","maxTexturesInShader","getNumber","length","reducedInputs","subArray","push","getBool","program","runWebGLProgram","computeTensors2D","reshapedResult"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Concat_impl.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, util } from '@tensorflow/tfjs-core';\nimport { ConcatProgram } from '../concat_gpu';\nimport { ConcatPackedProgram } from '../concat_packed_gpu';\nimport { concatImplCPU } from '../kernel_utils/shared';\nimport { complex } from './Complex';\nimport { imag } from './Imag';\nimport { real } from './Real';\nimport { reshape } from './Reshape';\nexport function concatImpl(inputs, axis, backend) {\n    const dtype = inputs[0].dtype;\n    if (dtype === 'complex64') {\n        const reals = inputs.map((t) => real({ inputs: { input: t }, backend }));\n        const imags = inputs.map((t) => imag({ inputs: { input: t }, backend }));\n        const realConcated = concatImpl(reals, axis, backend);\n        const imagConcated = concatImpl(imags, axis, backend);\n        const result = complex({ inputs: { real: realConcated, imag: imagConcated }, backend });\n        reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n        imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n        backend.disposeIntermediateTensorInfo(realConcated);\n        backend.disposeIntermediateTensorInfo(imagConcated);\n        return result;\n    }\n    let runOnCpu = backend.shouldExecuteOnCPU(inputs);\n    // Run on cpu if dtype is string. For string, the backend represents it\n    // as Uint8Array[], where each Uint8Array is a character. Given that the\n    // computation is only on the outer array, uploading the whole data onto\n    // gpu is wasteful. Also, currently webgl doesn't have a design to\n    // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n    // just run the kernel on cpu if dtype is string.\n    if (dtype === 'string') {\n        runOnCpu = true;\n    }\n    if (runOnCpu) {\n        // Any concat of n-dimensional tensors across any axis can be reduced to\n        // a concatenation of two-dimensional tensors across the axis 1 by first\n        // partitioning the axes of the original tensors into those less than the\n        // axis to be concatenated and the rest. Then reshape the tensors\n        // into a two-dimensional tensor by collapsing these two sets of axes and\n        // concatenate the resulting matrices across the axis 1, finally reshaping\n        // the result to have the proper shape.\n        const tensors2D = inputs.map(t => {\n            const innerSize = util.sizeFromShape(t.shape.slice(axis));\n            const shape = [-1, innerSize];\n            return reshape({ inputs: { x: t }, backend, attrs: { shape } });\n        });\n        const inputsValShapes = tensors2D.map(t => {\n            return { vals: backend.readSync(t.dataId), shape: t.shape };\n        });\n        // Concats 2d tensors along axis=1.\n        const outShape = backend_util.computeOutShape(tensors2D.map(t => t.shape), 1 /* axis */);\n        const simplyConcat = tensors2D[0].shape[0] === 1;\n        const outVals = concatImplCPU(inputsValShapes, outShape, dtype, simplyConcat);\n        const finalOutShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n        const outInfo = backend.makeTensorInfo(finalOutShape, dtype, outVals);\n        tensors2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n        return outInfo;\n    }\n    const maxTexturesInShader = env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER');\n    if (inputs.length > maxTexturesInShader) {\n        const reducedInputs = [];\n        for (let i = 0; i < inputs.length; i += maxTexturesInShader) {\n            const subArray = inputs.slice(i, i + maxTexturesInShader);\n            reducedInputs.push(concatImpl(subArray, axis, backend));\n        }\n        const result = concatImpl(reducedInputs, axis, backend);\n        for (const i of reducedInputs) {\n            backend.disposeIntermediateTensorInfo(i);\n        }\n        return result;\n    }\n    if (env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') &&\n        inputs[0].shape.length > 1) {\n        const program = new ConcatPackedProgram(inputs.map(t => t.shape), axis);\n        return backend.runWebGLProgram(program, inputs, dtype);\n    }\n    const { tensors2D, outShape } = computeTensors2D(inputs, axis, backend);\n    const program = new ConcatProgram(tensors2D.map(t => t.shape));\n    const result = backend.runWebGLProgram(program, tensors2D, dtype);\n    tensors2D.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    const reshapedResult = reshape({ inputs: { x: result }, attrs: { shape: outShape }, backend });\n    backend.disposeIntermediateTensorInfo(result);\n    return reshapedResult;\n}\nfunction computeTensors2D(inputs, axis, backend) {\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const outShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n    const tensors2D = inputs.map(x => reshape({\n        inputs: { x },\n        attrs: { shape: [-1, util.sizeFromShape(x.shape.slice(axis))] },\n        backend\n    }));\n    return { tensors2D, outShape };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}