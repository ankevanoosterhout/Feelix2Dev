{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\n\nfunction split(str, delimiters, skipEmpty, result) {\n  if (!str.length) {\n    return;\n  } // When the delimiter is empty, the input is split into individual characters.\n\n\n  if (delimiters.length === 0) {\n    for (let i = 0; i < str.length; ++i) {\n      result.push(str.subarray(i, i + 1));\n    }\n\n    return;\n  } // When there is one delimiter, the input is split only at that delimiter.\n\n\n  if (delimiters.length === 1) {\n    const delimiter = delimiters[0];\n    let f = str.indexOf(delimiter);\n\n    while (f !== -1) {\n      const token = str.subarray(0, f);\n\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n\n      str = str.subarray(f + 1);\n      f = str.indexOf(delimiter);\n    }\n\n    if (!skipEmpty || str.length !== 0) {\n      result.push(str);\n    }\n\n    return;\n  } // When there are multiple delimiters, the input is split at every instance\n  // one of the delimiters appears.\n\n\n  let tokenStart = 0;\n\n  for (let i = 0; i < str.length + 1; i++) {\n    if (i === str.length || delimiters.indexOf(str[i]) !== -1) {\n      const token = str.subarray(tokenStart, i);\n\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n\n      tokenStart = i + 1;\n    }\n  }\n}\n\nexport function stringSplitImpl(input, delimiter, skipEmpty) {\n  const batchSize = input.length; // Empty delimiter means split the input character by character.\n\n  const tokens = [];\n  let outputSize = 0;\n  let maxNumEntries = 0;\n  const numIndices = new Array(batchSize);\n\n  for (let i = 0; i < batchSize; ++i) {\n    const prevTokensLength = tokens.length;\n    split(input[i], delimiter, skipEmpty, tokens);\n    const nEntries = tokens.length - prevTokensLength;\n    numIndices[i] = nEntries;\n    outputSize += nEntries;\n    maxNumEntries = Math.max(maxNumEntries, nEntries);\n  }\n\n  const indices = util.getArrayFromDType('int32', outputSize * 2);\n  const values = new Array(outputSize);\n  const shape = [batchSize, maxNumEntries];\n  let c = 0;\n\n  for (let i = 0; i < batchSize; ++i) {\n    for (let j = 0; j < numIndices[i]; ++j) {\n      // indices is a 2d tensor with shape of [outputSize, 2]\n      indices[c * 2] = i;\n      indices[c * 2 + 1] = j;\n      values[c] = tokens[c];\n      ++c;\n    }\n  }\n\n  return [indices, values, shape];\n}","map":{"version":3,"names":["util","split","str","delimiters","skipEmpty","result","length","i","push","subarray","delimiter","f","indexOf","token","tokenStart","stringSplitImpl","input","batchSize","tokens","outputSize","maxNumEntries","numIndices","Array","prevTokensLength","nEntries","Math","max","indices","getArrayFromDType","values","shape","c","j"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StringSplit_impl.js"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nfunction split(str, delimiters, skipEmpty, result) {\n    if (!str.length) {\n        return;\n    }\n    // When the delimiter is empty, the input is split into individual characters.\n    if (delimiters.length === 0) {\n        for (let i = 0; i < str.length; ++i) {\n            result.push(str.subarray(i, i + 1));\n        }\n        return;\n    }\n    // When there is one delimiter, the input is split only at that delimiter.\n    if (delimiters.length === 1) {\n        const delimiter = delimiters[0];\n        let f = str.indexOf(delimiter);\n        while (f !== -1) {\n            const token = str.subarray(0, f);\n            if (!skipEmpty || token.length !== 0) {\n                result.push(token);\n            }\n            str = str.subarray(f + 1);\n            f = str.indexOf(delimiter);\n        }\n        if (!skipEmpty || str.length !== 0) {\n            result.push(str);\n        }\n        return;\n    }\n    // When there are multiple delimiters, the input is split at every instance\n    // one of the delimiters appears.\n    let tokenStart = 0;\n    for (let i = 0; i < str.length + 1; i++) {\n        if ((i === str.length) || (delimiters.indexOf(str[i]) !== -1)) {\n            const token = str.subarray(tokenStart, i);\n            if (!skipEmpty || token.length !== 0) {\n                result.push(token);\n            }\n            tokenStart = i + 1;\n        }\n    }\n}\nexport function stringSplitImpl(input, delimiter, skipEmpty) {\n    const batchSize = input.length;\n    // Empty delimiter means split the input character by character.\n    const tokens = [];\n    let outputSize = 0;\n    let maxNumEntries = 0;\n    const numIndices = new Array(batchSize);\n    for (let i = 0; i < batchSize; ++i) {\n        const prevTokensLength = tokens.length;\n        split(input[i], delimiter, skipEmpty, tokens);\n        const nEntries = tokens.length - prevTokensLength;\n        numIndices[i] = nEntries;\n        outputSize += nEntries;\n        maxNumEntries = Math.max(maxNumEntries, nEntries);\n    }\n    const indices = util.getArrayFromDType('int32', outputSize * 2);\n    const values = new Array(outputSize);\n    const shape = [batchSize, maxNumEntries];\n    let c = 0;\n    for (let i = 0; i < batchSize; ++i) {\n        for (let j = 0; j < numIndices[i]; ++j) {\n            // indices is a 2d tensor with shape of [outputSize, 2]\n            indices[c * 2] = i;\n            indices[c * 2 + 1] = j;\n            values[c] = tokens[c];\n            ++c;\n        }\n    }\n    return [indices, values, shape];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}