{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from './buffer';\nimport { op } from './operation';\nimport { MPRandGauss } from './rand_util';\n/**\n * Creates a `tf.Tensor` with values sampled from a truncated normal\n * distribution.\n *\n * ```js\n * tf.truncatedNormal([2, 2]).print();\n * ```\n *\n * The generated values follow a normal distribution with specified mean and\n * standard deviation, except that values whose magnitude is more than 2\n * standard deviations from the mean are dropped and re-picked.\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param mean The mean of the normal distribution.\n * @param stdDev The standard deviation of the normal distribution.\n * @param dtype The data type of the output tensor.\n * @param seed The seed for the random number generator.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\n\nfunction truncatedNormal_(shape, mean = 0, stdDev = 1, dtype, seed) {\n  if (dtype != null && dtype === 'bool') {\n    throw new Error(`Unsupported data type $ { dtype }`);\n  }\n\n  const randGauss = new MPRandGauss(mean, stdDev, dtype, true\n  /* truncated */\n  , seed);\n  const res = buffer(shape, dtype);\n\n  for (let i = 0; i < res.values.length; i++) {\n    res.values[i] = randGauss.nextValue();\n  }\n\n  return res.toTensor();\n}\n\nexport const truncatedNormal = op({\n  truncatedNormal_\n});","map":{"version":3,"names":["buffer","op","MPRandGauss","truncatedNormal_","shape","mean","stdDev","dtype","seed","Error","randGauss","res","i","values","length","nextValue","toTensor","truncatedNormal"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/truncated_normal.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from './buffer';\nimport { op } from './operation';\nimport { MPRandGauss } from './rand_util';\n/**\n * Creates a `tf.Tensor` with values sampled from a truncated normal\n * distribution.\n *\n * ```js\n * tf.truncatedNormal([2, 2]).print();\n * ```\n *\n * The generated values follow a normal distribution with specified mean and\n * standard deviation, except that values whose magnitude is more than 2\n * standard deviations from the mean are dropped and re-picked.\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param mean The mean of the normal distribution.\n * @param stdDev The standard deviation of the normal distribution.\n * @param dtype The data type of the output tensor.\n * @param seed The seed for the random number generator.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction truncatedNormal_(shape, mean = 0, stdDev = 1, dtype, seed) {\n    if (dtype != null && dtype === 'bool') {\n        throw new Error(`Unsupported data type $ { dtype }`);\n    }\n    const randGauss = new MPRandGauss(mean, stdDev, dtype, true /* truncated */, seed);\n    const res = buffer(shape, dtype);\n    for (let i = 0; i < res.values.length; i++) {\n        res.values[i] = randGauss.nextValue();\n    }\n    return res.toTensor();\n}\nexport const truncatedNormal = op({ truncatedNormal_ });\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,UAAvB;AACA,SAASC,EAAT,QAAmB,aAAnB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,gBAAT,CAA0BC,KAA1B,EAAiCC,IAAI,GAAG,CAAxC,EAA2CC,MAAM,GAAG,CAApD,EAAuDC,KAAvD,EAA8DC,IAA9D,EAAoE;EAChE,IAAID,KAAK,IAAI,IAAT,IAAiBA,KAAK,KAAK,MAA/B,EAAuC;IACnC,MAAM,IAAIE,KAAJ,CAAW,mCAAX,CAAN;EACH;;EACD,MAAMC,SAAS,GAAG,IAAIR,WAAJ,CAAgBG,IAAhB,EAAsBC,MAAtB,EAA8BC,KAA9B,EAAqC;EAAK;EAA1C,EAA2DC,IAA3D,CAAlB;EACA,MAAMG,GAAG,GAAGX,MAAM,CAACI,KAAD,EAAQG,KAAR,CAAlB;;EACA,KAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAAG,CAACE,MAAJ,CAAWC,MAA/B,EAAuCF,CAAC,EAAxC,EAA4C;IACxCD,GAAG,CAACE,MAAJ,CAAWD,CAAX,IAAgBF,SAAS,CAACK,SAAV,EAAhB;EACH;;EACD,OAAOJ,GAAG,CAACK,QAAJ,EAAP;AACH;;AACD,OAAO,MAAMC,eAAe,GAAGhB,EAAE,CAAC;EAAEE;AAAF,CAAD,CAA1B"},"metadata":{},"sourceType":"module"}