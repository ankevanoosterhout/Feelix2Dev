{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { DataSource } from '../datasource';\nimport { FileChunkIterator } from '../iterators/file_chunk_iterator';\nimport { isLocalPath } from '../util/source_util';\n/**\n * Represents a file, blob, or Uint8Array readable as a stream of binary data\n * chunks.\n */\n\nexport class FileDataSource extends DataSource {\n  /**\n   * Create a `FileDataSource`.\n   *\n   * @param input Local file path, or `File`/`Blob`/`Uint8Array` object to\n   *     read. Local file only works in node environment.\n   * @param options Options passed to the underlying `FileChunkIterator`s,\n   *   such as {chunksize: 1024}.\n   */\n  constructor(input, options = {}) {\n    super();\n    this.input = input;\n    this.options = options;\n  }\n\n  iterator() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (isLocalPath(_this.input) && env().get('IS_NODE')) {\n        // tslint:disable-next-line:no-require-imports\n        const fs = require('fs');\n\n        _this.input = fs.readFileSync(_this.input.slice(7));\n      } // TODO(kangyizhang): Add LocalFileChunkIterator to split local streaming\n      // with file in browser.\n\n\n      return new FileChunkIterator(_this.input, _this.options);\n    })();\n  }\n\n}","map":{"version":3,"names":["env","DataSource","FileChunkIterator","isLocalPath","FileDataSource","constructor","input","options","iterator","get","fs","require","readFileSync","slice"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-data/dist/sources/file_data_source.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { DataSource } from '../datasource';\nimport { FileChunkIterator } from '../iterators/file_chunk_iterator';\nimport { isLocalPath } from '../util/source_util';\n/**\n * Represents a file, blob, or Uint8Array readable as a stream of binary data\n * chunks.\n */\nexport class FileDataSource extends DataSource {\n    /**\n     * Create a `FileDataSource`.\n     *\n     * @param input Local file path, or `File`/`Blob`/`Uint8Array` object to\n     *     read. Local file only works in node environment.\n     * @param options Options passed to the underlying `FileChunkIterator`s,\n     *   such as {chunksize: 1024}.\n     */\n    constructor(input, options = {}) {\n        super();\n        this.input = input;\n        this.options = options;\n    }\n    async iterator() {\n        if (isLocalPath(this.input) && env().get('IS_NODE')) {\n            // tslint:disable-next-line:no-require-imports\n            const fs = require('fs');\n            this.input = fs.readFileSync(this.input.slice(7));\n        }\n        // TODO(kangyizhang): Add LocalFileChunkIterator to split local streaming\n        // with file in browser.\n        return new FileChunkIterator(this.input, this.options);\n    }\n}\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,GAAT,QAAoB,uBAApB;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,iBAAT,QAAkC,kCAAlC;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,cAAN,SAA6BH,UAA7B,CAAwC;EAC3C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACII,WAAW,CAACC,KAAD,EAAQC,OAAO,GAAG,EAAlB,EAAsB;IAC7B;IACA,KAAKD,KAAL,GAAaA,KAAb;IACA,KAAKC,OAAL,GAAeA,OAAf;EACH;;EACKC,QAAQ,GAAG;IAAA;;IAAA;MACb,IAAIL,WAAW,CAAC,KAAI,CAACG,KAAN,CAAX,IAA2BN,GAAG,GAAGS,GAAN,CAAU,SAAV,CAA/B,EAAqD;QACjD;QACA,MAAMC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;QACA,KAAI,CAACL,KAAL,GAAaI,EAAE,CAACE,YAAH,CAAgB,KAAI,CAACN,KAAL,CAAWO,KAAX,CAAiB,CAAjB,CAAhB,CAAb;MACH,CALY,CAMb;MACA;;;MACA,OAAO,IAAIX,iBAAJ,CAAsB,KAAI,CAACI,KAA3B,EAAkC,KAAI,CAACC,OAAvC,CAAP;IARa;EAShB;;AAvB0C"},"metadata":{},"sourceType":"module"}