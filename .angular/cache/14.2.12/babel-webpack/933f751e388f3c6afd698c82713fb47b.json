{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Depthwise Convolutional Layers\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { imageDataFormat } from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport { checkDataFormat } from '../common';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { convOutputLength } from '../utils/conv_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nimport { BaseConv, preprocessConv2DInput } from './convolutional';\n/**\n * 2D convolution with separable filters.\n * @param x Input tensor.\n * @param depthwiseKernel Convolution kernel for depthwise convolution.\n * @param strides Strides (Array of two integers).\n * @param padding Padding model.\n * @param dataFormat Data format.\n * @param dilationRate Array of two integers, dilation rates for the separable\n *   convolution.\n * @returns Output tensor.\n * @throws ValueError If depthwiseKernel is not a 4D array.\n */\n\nexport function depthwiseConv2d(x, depthwiseKernel, strides = [1, 1], padding = 'valid', dataFormat, dilationRate) {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n\n    checkDataFormat(dataFormat);\n    let y = preprocessConv2DInput(x, dataFormat);\n\n    if (x.rank !== 4) {\n      throw new ValueError(`Input for depthwiseConv2d is required to be 4-D, but is instead ` + `${x.rank}-D`);\n    }\n\n    if (depthwiseKernel.rank !== 4) {\n      throw new ValueError(`depthwiseKernel is required to be 4-D, but is instead ` + `${depthwiseKernel.rank}-D`);\n    }\n\n    y = tfc.depthwiseConv2d(y, depthwiseKernel, strides, padding === 'same' ? 'same' : 'valid', 'NHWC', dilationRate);\n\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 3, 1, 2]);\n    }\n\n    return y;\n  });\n}\nexport class DepthwiseConv2D extends BaseConv {\n  constructor(args) {\n    super(2, args);\n    this.depthwiseKernel = null;\n    this.depthMultiplier = args.depthMultiplier == null ? 1 : args.depthMultiplier;\n    this.depthwiseInitializer = getInitializer(args.depthwiseInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.depthwiseConstraint = getConstraint(args.depthwiseConstraint);\n    this.depthwiseRegularizer = getRegularizer(args.depthwiseRegularizer);\n  }\n\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n\n    if (inputShape.length < 4) {\n      throw new ValueError(`Inputs to DepthwiseConv2D should have rank 4. ` + `Received input shape: ${JSON.stringify(inputShape)}.`);\n    }\n\n    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : 3;\n\n    if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n      throw new ValueError('The channel dimension of the inputs to DepthwiseConv2D should ' + `be defined, but is not (${inputShape[channelAxis]}).`);\n    }\n\n    const inputDim = inputShape[channelAxis];\n    const depthwiseKernelShape = [this.kernelSize[0], this.kernelSize[1], inputDim, this.depthMultiplier];\n    this.depthwiseKernel = this.addWeight('depthwise_kernel', depthwiseKernelShape, null, this.depthwiseInitializer, this.depthwiseRegularizer, true, this.depthwiseConstraint);\n\n    if (this.useBias) {\n      this.bias = this.addWeight('bias', [inputDim * this.depthMultiplier], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n\n    this.built = true;\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      let outputs = depthwiseConv2d(inputs, this.depthwiseKernel.read(), this.strides, this.padding, this.dataFormat, null); // TODO(cais): Add support for dilation.\n\n      if (this.useBias) {\n        outputs = K.biasAdd(outputs, this.bias.read(), this.dataFormat);\n      }\n\n      if (this.activation != null) {\n        outputs = this.activation.apply(outputs);\n      }\n\n      return outputs;\n    });\n  }\n\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const rows = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n    const cols = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n    const outFilters = this.dataFormat === 'channelsFirst' ? inputShape[1] * this.depthMultiplier : inputShape[3] * this.depthMultiplier;\n    const outRows = convOutputLength(rows, this.kernelSize[0], this.padding, this.strides[0]);\n    const outCols = convOutputLength(cols, this.kernelSize[1], this.padding, this.strides[1]);\n\n    if (this.dataFormat === 'channelsFirst') {\n      return [inputShape[0], outFilters, outRows, outCols];\n    } else {\n      // In this case, assume 'channelsLast'.\n      return [inputShape[0], outRows, outCols, outFilters];\n    }\n  }\n\n  getConfig() {\n    const config = super.getConfig();\n    config['depthMultiplier'] = this.depthMultiplier;\n    config['depthwiseInitializer'] = serializeInitializer(this.depthwiseInitializer);\n    config['depthwiseRegularizer'] = serializeRegularizer(this.depthwiseRegularizer);\n    config['depthwiseConstraint'] = serializeConstraint(this.depthwiseRegularizer);\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nDepthwiseConv2D.className = 'DepthwiseConv2D';\nserialization.registerClass(DepthwiseConv2D);","map":{"version":3,"names":["tfc","serialization","tidy","imageDataFormat","K","checkDataFormat","getConstraint","serializeConstraint","ValueError","getInitializer","serializeInitializer","getRegularizer","serializeRegularizer","convOutputLength","getExactlyOneShape","getExactlyOneTensor","BaseConv","preprocessConv2DInput","depthwiseConv2d","x","depthwiseKernel","strides","padding","dataFormat","dilationRate","y","rank","transpose","DepthwiseConv2D","constructor","args","depthMultiplier","depthwiseInitializer","DEFAULT_KERNEL_INITIALIZER","depthwiseConstraint","depthwiseRegularizer","build","inputShape","length","JSON","stringify","channelAxis","inputDim","depthwiseKernelShape","kernelSize","addWeight","useBias","bias","biasInitializer","biasRegularizer","biasConstraint","built","call","inputs","kwargs","outputs","read","biasAdd","activation","apply","computeOutputShape","rows","cols","outFilters","outRows","outCols","getConfig","config","className","registerClass"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional_depthwise.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Depthwise Convolutional Layers\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { imageDataFormat } from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport { checkDataFormat } from '../common';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { convOutputLength } from '../utils/conv_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nimport { BaseConv, preprocessConv2DInput } from './convolutional';\n/**\n * 2D convolution with separable filters.\n * @param x Input tensor.\n * @param depthwiseKernel Convolution kernel for depthwise convolution.\n * @param strides Strides (Array of two integers).\n * @param padding Padding model.\n * @param dataFormat Data format.\n * @param dilationRate Array of two integers, dilation rates for the separable\n *   convolution.\n * @returns Output tensor.\n * @throws ValueError If depthwiseKernel is not a 4D array.\n */\nexport function depthwiseConv2d(x, depthwiseKernel, strides = [1, 1], padding = 'valid', dataFormat, dilationRate) {\n    return tidy(() => {\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        checkDataFormat(dataFormat);\n        let y = preprocessConv2DInput(x, dataFormat);\n        if (x.rank !== 4) {\n            throw new ValueError(`Input for depthwiseConv2d is required to be 4-D, but is instead ` +\n                `${x.rank}-D`);\n        }\n        if (depthwiseKernel.rank !== 4) {\n            throw new ValueError(`depthwiseKernel is required to be 4-D, but is instead ` +\n                `${depthwiseKernel.rank}-D`);\n        }\n        y = tfc.depthwiseConv2d(y, depthwiseKernel, strides, padding === 'same' ? 'same' : 'valid', 'NHWC', dilationRate);\n        if (dataFormat === 'channelsFirst') {\n            y = tfc.transpose(y, [0, 3, 1, 2]);\n        }\n        return y;\n    });\n}\nexport class DepthwiseConv2D extends BaseConv {\n    constructor(args) {\n        super(2, args);\n        this.depthwiseKernel = null;\n        this.depthMultiplier =\n            args.depthMultiplier == null ? 1 : args.depthMultiplier;\n        this.depthwiseInitializer = getInitializer(args.depthwiseInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n        this.depthwiseConstraint = getConstraint(args.depthwiseConstraint);\n        this.depthwiseRegularizer = getRegularizer(args.depthwiseRegularizer);\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        if (inputShape.length < 4) {\n            throw new ValueError(`Inputs to DepthwiseConv2D should have rank 4. ` +\n                `Received input shape: ${JSON.stringify(inputShape)}.`);\n        }\n        const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : 3;\n        if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n            throw new ValueError('The channel dimension of the inputs to DepthwiseConv2D should ' +\n                `be defined, but is not (${inputShape[channelAxis]}).`);\n        }\n        const inputDim = inputShape[channelAxis];\n        const depthwiseKernelShape = [\n            this.kernelSize[0], this.kernelSize[1], inputDim, this.depthMultiplier\n        ];\n        this.depthwiseKernel = this.addWeight('depthwise_kernel', depthwiseKernelShape, null, this.depthwiseInitializer, this.depthwiseRegularizer, true, this.depthwiseConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [inputDim * this.depthMultiplier], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        else {\n            this.bias = null;\n        }\n        this.built = true;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = getExactlyOneTensor(inputs);\n            let outputs = depthwiseConv2d(inputs, this.depthwiseKernel.read(), this.strides, this.padding, this.dataFormat, null);\n            // TODO(cais): Add support for dilation.\n            if (this.useBias) {\n                outputs = K.biasAdd(outputs, this.bias.read(), this.dataFormat);\n            }\n            if (this.activation != null) {\n                outputs = this.activation.apply(outputs);\n            }\n            return outputs;\n        });\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const rows = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n        const cols = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n        const outFilters = this.dataFormat === 'channelsFirst' ?\n            inputShape[1] * this.depthMultiplier :\n            inputShape[3] * this.depthMultiplier;\n        const outRows = convOutputLength(rows, this.kernelSize[0], this.padding, this.strides[0]);\n        const outCols = convOutputLength(cols, this.kernelSize[1], this.padding, this.strides[1]);\n        if (this.dataFormat === 'channelsFirst') {\n            return [inputShape[0], outFilters, outRows, outCols];\n        }\n        else {\n            // In this case, assume 'channelsLast'.\n            return [inputShape[0], outRows, outCols, outFilters];\n        }\n    }\n    getConfig() {\n        const config = super.getConfig();\n        config['depthMultiplier'] = this.depthMultiplier;\n        config['depthwiseInitializer'] =\n            serializeInitializer(this.depthwiseInitializer);\n        config['depthwiseRegularizer'] =\n            serializeRegularizer(this.depthwiseRegularizer);\n        config['depthwiseConstraint'] =\n            serializeConstraint(this.depthwiseRegularizer);\n        return config;\n    }\n}\n/** @nocollapse */\nDepthwiseConv2D.className = 'DepthwiseConv2D';\nserialization.registerClass(DepthwiseConv2D);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}