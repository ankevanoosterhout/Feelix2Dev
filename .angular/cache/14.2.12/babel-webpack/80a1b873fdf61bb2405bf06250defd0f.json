{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ZerosLike } from '@tensorflow/tfjs-core';\nimport { complex } from './Complex';\nimport { fill } from './Fill';\nimport { imag } from './Imag';\nimport { real } from './Real';\nexport function zerosLike(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x\n  } = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('zerosLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({\n      inputs: {\n        input: x\n      },\n      backend\n    });\n    const r = zerosLike({\n      inputs: {\n        x: realPart\n      },\n      backend\n    });\n    const imagPart = imag({\n      inputs: {\n        input: x\n      },\n      backend\n    });\n    const i = zerosLike({\n      inputs: {\n        x: imagPart\n      },\n      backend\n    });\n    const result = complex({\n      inputs: {\n        real: r,\n        imag: i\n      },\n      backend\n    });\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n    return result;\n  } else {\n    return fill({\n      backend,\n      attrs: {\n        shape: x.shape,\n        value: 0,\n        dtype: x.dtype\n      }\n    });\n  }\n}\nexport const zerosLikeConfig = {\n  kernelName: ZerosLike,\n  backendName: 'cpu',\n  kernelFunc: zerosLike\n};","map":{"version":3,"names":["ZerosLike","complex","fill","imag","real","zerosLike","args","inputs","backend","x","dtype","Error","realPart","input","r","imagPart","i","result","disposeIntermediateTensorInfo","attrs","shape","value","zerosLikeConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/ZerosLike.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ZerosLike } from '@tensorflow/tfjs-core';\nimport { complex } from './Complex';\nimport { fill } from './Fill';\nimport { imag } from './Imag';\nimport { real } from './Real';\nexport function zerosLike(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    if (x.dtype === 'string') {\n        throw new Error('zerosLike is not supported for string tensors');\n    }\n    else if (x.dtype === 'complex64') {\n        const realPart = real({ inputs: { input: x }, backend });\n        const r = zerosLike({ inputs: { x: realPart }, backend });\n        const imagPart = imag({ inputs: { input: x }, backend });\n        const i = zerosLike({ inputs: { x: imagPart }, backend });\n        const result = complex({ inputs: { real: r, imag: i }, backend });\n        backend.disposeIntermediateTensorInfo(realPart);\n        backend.disposeIntermediateTensorInfo(r);\n        backend.disposeIntermediateTensorInfo(imagPart);\n        backend.disposeIntermediateTensorInfo(i);\n        return result;\n    }\n    else {\n        return fill({ backend, attrs: { shape: x.shape, value: 0, dtype: x.dtype } });\n    }\n}\nexport const zerosLikeConfig = {\n    kernelName: ZerosLike,\n    backendName: 'cpu',\n    kernelFunc: zerosLike\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAT,QAA0B,uBAA1B;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,OAAO,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;EAC5B,MAAM;IAAEC,MAAF;IAAUC;EAAV,IAAsBF,IAA5B;EACA,MAAM;IAAEG;EAAF,IAAQF,MAAd;;EACA,IAAIE,CAAC,CAACC,KAAF,KAAY,QAAhB,EAA0B;IACtB,MAAM,IAAIC,KAAJ,CAAU,+CAAV,CAAN;EACH,CAFD,MAGK,IAAIF,CAAC,CAACC,KAAF,KAAY,WAAhB,EAA6B;IAC9B,MAAME,QAAQ,GAAGR,IAAI,CAAC;MAAEG,MAAM,EAAE;QAAEM,KAAK,EAAEJ;MAAT,CAAV;MAAwBD;IAAxB,CAAD,CAArB;IACA,MAAMM,CAAC,GAAGT,SAAS,CAAC;MAAEE,MAAM,EAAE;QAAEE,CAAC,EAAEG;MAAL,CAAV;MAA2BJ;IAA3B,CAAD,CAAnB;IACA,MAAMO,QAAQ,GAAGZ,IAAI,CAAC;MAAEI,MAAM,EAAE;QAAEM,KAAK,EAAEJ;MAAT,CAAV;MAAwBD;IAAxB,CAAD,CAArB;IACA,MAAMQ,CAAC,GAAGX,SAAS,CAAC;MAAEE,MAAM,EAAE;QAAEE,CAAC,EAAEM;MAAL,CAAV;MAA2BP;IAA3B,CAAD,CAAnB;IACA,MAAMS,MAAM,GAAGhB,OAAO,CAAC;MAAEM,MAAM,EAAE;QAAEH,IAAI,EAAEU,CAAR;QAAWX,IAAI,EAAEa;MAAjB,CAAV;MAAgCR;IAAhC,CAAD,CAAtB;IACAA,OAAO,CAACU,6BAAR,CAAsCN,QAAtC;IACAJ,OAAO,CAACU,6BAAR,CAAsCJ,CAAtC;IACAN,OAAO,CAACU,6BAAR,CAAsCH,QAAtC;IACAP,OAAO,CAACU,6BAAR,CAAsCF,CAAtC;IACA,OAAOC,MAAP;EACH,CAXI,MAYA;IACD,OAAOf,IAAI,CAAC;MAAEM,OAAF;MAAWW,KAAK,EAAE;QAAEC,KAAK,EAAEX,CAAC,CAACW,KAAX;QAAkBC,KAAK,EAAE,CAAzB;QAA4BX,KAAK,EAAED,CAAC,CAACC;MAArC;IAAlB,CAAD,CAAX;EACH;AACJ;AACD,OAAO,MAAMY,eAAe,GAAG;EAC3BC,UAAU,EAAEvB,SADe;EAE3BwB,WAAW,EAAE,KAFc;EAG3BC,UAAU,EAAEpB;AAHe,CAAxB"},"metadata":{},"sourceType":"module"}