{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n// tslint:disable-next-line:max-line-length\nimport { MaxNorm, MinMaxNorm, NonNeg, UnitNorm } from './constraints';\n/**\n * MaxNorm weight constraint.\n *\n * Constrains the weights incident to each hidden unit\n * to have a norm less than or equal to a desired value.\n *\n * References\n *       - [Dropout: A Simple Way to Prevent Neural Networks from Overfitting\n * Srivastava, Hinton, et al.\n * 2014](http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf)\n *\n * @doc {heading: 'Constraints',namespace: 'constraints'}\n */\n\nexport function maxNorm(args) {\n  return new MaxNorm(args);\n}\n/**\n * Constrains the weights incident to each hidden unit to have unit norm.\n *\n * @doc {heading: 'Constraints', namespace: 'constraints'}\n */\n\nexport function unitNorm(args) {\n  return new UnitNorm(args);\n}\n/**\n * Constrains the weight to be non-negative.\n *\n * @doc {heading: 'Constraints', namespace: 'constraints'}\n */\n\nexport function nonNeg() {\n  return new NonNeg();\n}\n/** @doc {heading: 'Constraints', namespace: 'constraints'} */\n\nexport function minMaxNorm(config) {\n  return new MinMaxNorm(config);\n}","map":{"version":3,"names":["MaxNorm","MinMaxNorm","NonNeg","UnitNorm","maxNorm","args","unitNorm","nonNeg","minMaxNorm","config"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-layers/dist/exports_constraints.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n// tslint:disable-next-line:max-line-length\nimport { MaxNorm, MinMaxNorm, NonNeg, UnitNorm } from './constraints';\n/**\n * MaxNorm weight constraint.\n *\n * Constrains the weights incident to each hidden unit\n * to have a norm less than or equal to a desired value.\n *\n * References\n *       - [Dropout: A Simple Way to Prevent Neural Networks from Overfitting\n * Srivastava, Hinton, et al.\n * 2014](http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf)\n *\n * @doc {heading: 'Constraints',namespace: 'constraints'}\n */\nexport function maxNorm(args) {\n    return new MaxNorm(args);\n}\n/**\n * Constrains the weights incident to each hidden unit to have unit norm.\n *\n * @doc {heading: 'Constraints', namespace: 'constraints'}\n */\nexport function unitNorm(args) {\n    return new UnitNorm(args);\n}\n/**\n * Constrains the weight to be non-negative.\n *\n * @doc {heading: 'Constraints', namespace: 'constraints'}\n */\nexport function nonNeg() {\n    return new NonNeg();\n}\n/** @doc {heading: 'Constraints', namespace: 'constraints'} */\nexport function minMaxNorm(config) {\n    return new MinMaxNorm(config);\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAT,EAAkBC,UAAlB,EAA8BC,MAA9B,EAAsCC,QAAtC,QAAsD,eAAtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,OAAT,CAAiBC,IAAjB,EAAuB;EAC1B,OAAO,IAAIL,OAAJ,CAAYK,IAAZ,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,QAAT,CAAkBD,IAAlB,EAAwB;EAC3B,OAAO,IAAIF,QAAJ,CAAaE,IAAb,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,MAAT,GAAkB;EACrB,OAAO,IAAIL,MAAJ,EAAP;AACH;AACD;;AACA,OAAO,SAASM,UAAT,CAAoBC,MAApB,EAA4B;EAC/B,OAAO,IAAIR,UAAJ,CAAeQ,MAAf,CAAP;AACH"},"metadata":{},"sourceType":"module"}