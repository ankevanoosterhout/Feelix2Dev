{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, kernel_impls, NonMaxSuppressionV5 } from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nexport function nonMaxSuppressionV5(args) {\n  backend_util.warn('tf.nonMaxSuppression() in webgl locks the UI thread. ' + 'Call tf.nonMaxSuppressionAsync() instead');\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    boxes,\n    scores\n  } = inputs;\n  const {\n    maxOutputSize,\n    iouThreshold,\n    scoreThreshold,\n    softNmsSigma\n  } = attrs;\n  const boxesVals = backend.readSync(boxes.dataId);\n  const scoresVals = backend.readSync(scores.dataId);\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n  const {\n    selectedIndices,\n    selectedScores\n  } = nonMaxSuppressionV5Impl(boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal, scoreThresholdVal, softNmsSigmaVal);\n  return [backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices)), backend.makeTensorInfo([selectedScores.length], 'float32', new Float32Array(selectedScores))];\n}\nexport const nonMaxSuppressionV5Config = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV5\n};","map":{"version":3,"names":["backend_util","kernel_impls","NonMaxSuppressionV5","nonMaxSuppressionV5Impl","nonMaxSuppressionV5","args","warn","inputs","backend","attrs","boxes","scores","maxOutputSize","iouThreshold","scoreThreshold","softNmsSigma","boxesVals","readSync","dataId","scoresVals","maxOutputSizeVal","iouThresholdVal","scoreThresholdVal","softNmsSigmaVal","selectedIndices","selectedScores","makeTensorInfo","length","Int32Array","Float32Array","nonMaxSuppressionV5Config","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV5.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, kernel_impls, NonMaxSuppressionV5 } from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nexport function nonMaxSuppressionV5(args) {\n    backend_util.warn('tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n        'Call tf.nonMaxSuppressionAsync() instead');\n    const { inputs, backend, attrs } = args;\n    const { boxes, scores } = inputs;\n    const { maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma } = attrs;\n    const boxesVals = backend.readSync(boxes.dataId);\n    const scoresVals = backend.readSync(scores.dataId);\n    const maxOutputSizeVal = maxOutputSize;\n    const iouThresholdVal = iouThreshold;\n    const scoreThresholdVal = scoreThreshold;\n    const softNmsSigmaVal = softNmsSigma;\n    const { selectedIndices, selectedScores } = nonMaxSuppressionV5Impl(boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal, scoreThresholdVal, softNmsSigmaVal);\n    return [\n        backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n        backend.makeTensorInfo([selectedScores.length], 'float32', new Float32Array(selectedScores))\n    ];\n}\nexport const nonMaxSuppressionV5Config = {\n    kernelName: NonMaxSuppressionV5,\n    backendName: 'webgl',\n    kernelFunc: nonMaxSuppressionV5\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,EAAuBC,YAAvB,EAAqCC,mBAArC,QAAgE,uBAAhE;AACA,MAAMC,uBAAuB,GAAGF,YAAY,CAACE,uBAA7C;AACA,OAAO,SAASC,mBAAT,CAA6BC,IAA7B,EAAmC;EACtCL,YAAY,CAACM,IAAb,CAAkB,0DACd,0CADJ;EAEA,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BJ,IAAnC;EACA,MAAM;IAAEK,KAAF;IAASC;EAAT,IAAoBJ,MAA1B;EACA,MAAM;IAAEK,aAAF;IAAiBC,YAAjB;IAA+BC,cAA/B;IAA+CC;EAA/C,IAAgEN,KAAtE;EACA,MAAMO,SAAS,GAAGR,OAAO,CAACS,QAAR,CAAiBP,KAAK,CAACQ,MAAvB,CAAlB;EACA,MAAMC,UAAU,GAAGX,OAAO,CAACS,QAAR,CAAiBN,MAAM,CAACO,MAAxB,CAAnB;EACA,MAAME,gBAAgB,GAAGR,aAAzB;EACA,MAAMS,eAAe,GAAGR,YAAxB;EACA,MAAMS,iBAAiB,GAAGR,cAA1B;EACA,MAAMS,eAAe,GAAGR,YAAxB;EACA,MAAM;IAAES,eAAF;IAAmBC;EAAnB,IAAsCtB,uBAAuB,CAACa,SAAD,EAAYG,UAAZ,EAAwBC,gBAAxB,EAA0CC,eAA1C,EAA2DC,iBAA3D,EAA8EC,eAA9E,CAAnE;EACA,OAAO,CACHf,OAAO,CAACkB,cAAR,CAAuB,CAACF,eAAe,CAACG,MAAjB,CAAvB,EAAiD,OAAjD,EAA0D,IAAIC,UAAJ,CAAeJ,eAAf,CAA1D,CADG,EAEHhB,OAAO,CAACkB,cAAR,CAAuB,CAACD,cAAc,CAACE,MAAhB,CAAvB,EAAgD,SAAhD,EAA2D,IAAIE,YAAJ,CAAiBJ,cAAjB,CAA3D,CAFG,CAAP;AAIH;AACD,OAAO,MAAMK,yBAAyB,GAAG;EACrCC,UAAU,EAAE7B,mBADyB;EAErC8B,WAAW,EAAE,OAFwB;EAGrCC,UAAU,EAAE7B;AAHyB,CAAlC"},"metadata":{},"sourceType":"module"}