{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, FusedDepthwiseConv2D, util } from '@tensorflow/tfjs-core';\nimport { DepthwiseConv2DProgram } from '../conv_gpu_depthwise';\nimport { DepthwiseConvPacked2DProgram } from '../conv_packed_gpu_depthwise';\nimport { mapActivationToShaderProgram } from '../kernel_utils/kernel_funcs_utils';\nexport function fusedDepthwiseConv2D(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter,\n    bias,\n    preluActivationWeights\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n  const intermediates = [];\n  let $dilations = dilations;\n\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in depthwiseConv2d: Either strides or dilations must be ' + `1. Got strides ${strides} and dilations '${$dilations}'`);\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true\n  /* depthwise */\n  );\n  const shouldPackDepthwiseConv = env().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 && convInfo.outChannels / convInfo.inChannels === 1;\n  const fusedActivation = activation ? mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) : null;\n  const programInputs = [x, filter];\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n\n  if (hasBias) {\n    programInputs.push(bias);\n  }\n\n  if (hasPreluActivationWeights) {\n    programInputs.push(preluActivationWeights);\n  }\n\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(leakyreluAlpha, 'float32'));\n    programInputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n\n  let program;\n\n  if (shouldPackDepthwiseConv) {\n    program = new DepthwiseConvPacked2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n  }\n\n  const customValues = [[convInfo.padInfo.top, convInfo.padInfo.left], [convInfo.strideHeight, convInfo.strideWidth], [convInfo.dilationHeight, convInfo.dilationWidth], [convInfo.inHeight, convInfo.inWidth]];\n  const result = backend.runWebGLProgram(program, programInputs, 'float32', customValues);\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return result;\n}\nexport const fusedDepthwiseConv2DConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedDepthwiseConv2D\n};","map":{"version":3,"names":["backend_util","env","FusedDepthwiseConv2D","util","DepthwiseConv2DProgram","DepthwiseConvPacked2DProgram","mapActivationToShaderProgram","fusedDepthwiseConv2D","args","inputs","backend","attrs","x","filter","bias","preluActivationWeights","strides","pad","dilations","dimRoundingMode","activation","leakyreluAlpha","intermediates","$dilations","assert","eitherStridesOrDilationsAreOne","convInfo","computeConv2DInfo","shape","shouldPackDepthwiseConv","getBool","strideWidth","outChannels","inChannels","fusedActivation","programInputs","hasBias","hasPreluActivationWeights","hasLeakyreluAlpha","push","$leakyreluAlpha","makeTensorInfo","createScalarValue","program","customValues","padInfo","top","left","strideHeight","dilationHeight","dilationWidth","inHeight","inWidth","result","runWebGLProgram","forEach","t","disposeIntermediateTensorInfo","fusedDepthwiseConv2DConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FusedDepthwiseConv2D.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, FusedDepthwiseConv2D, util } from '@tensorflow/tfjs-core';\nimport { DepthwiseConv2DProgram } from '../conv_gpu_depthwise';\nimport { DepthwiseConvPacked2DProgram } from '../conv_packed_gpu_depthwise';\nimport { mapActivationToShaderProgram } from '../kernel_utils/kernel_funcs_utils';\nexport function fusedDepthwiseConv2D(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter, bias, preluActivationWeights } = inputs;\n    const { strides, pad, dilations, dimRoundingMode, activation, leakyreluAlpha } = attrs;\n    const intermediates = [];\n    let $dilations = dilations;\n    if ($dilations == null) {\n        $dilations = [1, 1];\n    }\n    util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n        `1. Got strides ${strides} and dilations '${$dilations}'`);\n    const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */);\n    const shouldPackDepthwiseConv = env().getBool('WEBGL_PACK_DEPTHWISECONV') &&\n        convInfo.strideWidth <= 2 &&\n        convInfo.outChannels / convInfo.inChannels === 1;\n    const fusedActivation = activation ?\n        mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) :\n        null;\n    const programInputs = [x, filter];\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const hasLeakyreluAlpha = activation === 'leakyrelu';\n    if (hasBias) {\n        programInputs.push(bias);\n    }\n    if (hasPreluActivationWeights) {\n        programInputs.push(preluActivationWeights);\n    }\n    if (hasLeakyreluAlpha) {\n        const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(leakyreluAlpha, 'float32'));\n        programInputs.push($leakyreluAlpha);\n        intermediates.push($leakyreluAlpha);\n    }\n    let program;\n    if (shouldPackDepthwiseConv) {\n        program = new DepthwiseConvPacked2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n    }\n    else {\n        program = new DepthwiseConv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n    }\n    const customValues = [\n        [convInfo.padInfo.top, convInfo.padInfo.left],\n        [convInfo.strideHeight, convInfo.strideWidth],\n        [convInfo.dilationHeight, convInfo.dilationWidth],\n        [convInfo.inHeight, convInfo.inWidth]\n    ];\n    const result = backend.runWebGLProgram(program, programInputs, 'float32', customValues);\n    intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return result;\n}\nexport const fusedDepthwiseConv2DConfig = {\n    kernelName: FusedDepthwiseConv2D,\n    backendName: 'webgl',\n    kernelFunc: fusedDepthwiseConv2D,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}