{"ast":null,"code":"export function findRoots(frames) {\n  const potentialRoots = frames.map(f => {\n    let lastParent = f;\n    f.traverseParents(p => {\n      lastParent = p;\n    });\n    return lastParent;\n  });\n  const roots = [];\n  const set = new Set();\n\n  for (let i = 0; i < potentialRoots.length; i++) {\n    const frame = potentialRoots[i]; // If this frame has already been traversed then we know it's in\n    // a root already.\n\n    if (set.has(frame)) {\n      continue;\n    }\n\n    roots.push(frame);\n    frame.traverse(c => {\n      if (set.has(c)) {\n        return true;\n      }\n\n      set.add(c); // If we come across a joint or link with closures traverse them\n      // as far as possible to add them to the roots if they haven't been\n      // added already.\n\n      let closureConnections;\n\n      if (c.isLink) {\n        closureConnections = c.closureJoints;\n      } else if (c.isJoint && c.isClosure) {\n        closureConnections = [c.child];\n      }\n\n      if (closureConnections) {\n        closureConnections.forEach(cl => {\n          let lastParent = cl;\n          cl.traverseParents(p => {\n            lastParent = p;\n          });\n\n          if (!set.has(lastParent)) {\n            potentialRoots.push(lastParent);\n          }\n        });\n      }\n    });\n  }\n\n  return roots;\n}","map":{"version":3,"names":["findRoots","frames","potentialRoots","map","f","lastParent","traverseParents","p","roots","set","Set","i","length","frame","has","push","traverse","c","add","closureConnections","isLink","closureJoints","isJoint","isClosure","child","forEach","cl"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/closed-chain-ik/src/core/utils/findRoots.js"],"sourcesContent":["export function findRoots( frames ) {\r\n\r\n\tconst potentialRoots = frames.map( f => {\r\n\r\n\t\tlet lastParent = f;\r\n\t\tf.traverseParents( p => {\r\n\r\n\t\t\tlastParent = p;\r\n\r\n\t\t} );\r\n\t\treturn lastParent;\r\n\r\n\t} );\r\n\tconst roots = [];\r\n\tconst set = new Set();\r\n\r\n\tfor ( let i = 0; i < potentialRoots.length; i ++ ) {\r\n\r\n\t\tconst frame = potentialRoots[ i ];\r\n\r\n\t\t// If this frame has already been traversed then we know it's in\r\n\t\t// a root already.\r\n\t\tif ( set.has( frame ) ) {\r\n\r\n\t\t\tcontinue;\r\n\r\n\t\t}\r\n\r\n\t\troots.push( frame );\r\n\t\tframe.traverse( c => {\r\n\r\n\t\t\tif ( set.has( c ) ) {\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tset.add( c );\r\n\r\n\t\t\t// If we come across a joint or link with closures traverse them\r\n\t\t\t// as far as possible to add them to the roots if they haven't been\r\n\t\t\t// added already.\r\n\t\t\tlet closureConnections;\r\n\t\t\tif ( c.isLink ) {\r\n\r\n\t\t\t\tclosureConnections = c.closureJoints;\r\n\r\n\t\t\t} else if ( c.isJoint && c.isClosure ) {\r\n\r\n\t\t\t\tclosureConnections = [ c.child ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( closureConnections ) {\r\n\r\n\t\t\t\tclosureConnections.forEach( cl => {\r\n\r\n\t\t\t\t\tlet lastParent = cl;\r\n\t\t\t\t\tcl.traverseParents( p => {\r\n\r\n\t\t\t\t\t\tlastParent = p;\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t\tif ( ! set.has( lastParent ) ) {\r\n\r\n\t\t\t\t\t\tpotentialRoots.push( lastParent );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\treturn roots;\r\n\r\n}\r\n"],"mappings":"AAAA,OAAO,SAASA,SAAT,CAAoBC,MAApB,EAA6B;EAEnC,MAAMC,cAAc,GAAGD,MAAM,CAACE,GAAP,CAAYC,CAAC,IAAI;IAEvC,IAAIC,UAAU,GAAGD,CAAjB;IACAA,CAAC,CAACE,eAAF,CAAmBC,CAAC,IAAI;MAEvBF,UAAU,GAAGE,CAAb;IAEA,CAJD;IAKA,OAAOF,UAAP;EAEA,CAVsB,CAAvB;EAWA,MAAMG,KAAK,GAAG,EAAd;EACA,MAAMC,GAAG,GAAG,IAAIC,GAAJ,EAAZ;;EAEA,KAAM,IAAIC,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGT,cAAc,CAACU,MAApC,EAA4CD,CAAC,EAA7C,EAAmD;IAElD,MAAME,KAAK,GAAGX,cAAc,CAAES,CAAF,CAA5B,CAFkD,CAIlD;IACA;;IACA,IAAKF,GAAG,CAACK,GAAJ,CAASD,KAAT,CAAL,EAAwB;MAEvB;IAEA;;IAEDL,KAAK,CAACO,IAAN,CAAYF,KAAZ;IACAA,KAAK,CAACG,QAAN,CAAgBC,CAAC,IAAI;MAEpB,IAAKR,GAAG,CAACK,GAAJ,CAASG,CAAT,CAAL,EAAoB;QAEnB,OAAO,IAAP;MAEA;;MAEDR,GAAG,CAACS,GAAJ,CAASD,CAAT,EARoB,CAUpB;MACA;MACA;;MACA,IAAIE,kBAAJ;;MACA,IAAKF,CAAC,CAACG,MAAP,EAAgB;QAEfD,kBAAkB,GAAGF,CAAC,CAACI,aAAvB;MAEA,CAJD,MAIO,IAAKJ,CAAC,CAACK,OAAF,IAAaL,CAAC,CAACM,SAApB,EAAgC;QAEtCJ,kBAAkB,GAAG,CAAEF,CAAC,CAACO,KAAJ,CAArB;MAEA;;MAED,IAAKL,kBAAL,EAA0B;QAEzBA,kBAAkB,CAACM,OAAnB,CAA4BC,EAAE,IAAI;UAEjC,IAAIrB,UAAU,GAAGqB,EAAjB;UACAA,EAAE,CAACpB,eAAH,CAAoBC,CAAC,IAAI;YAExBF,UAAU,GAAGE,CAAb;UAEA,CAJD;;UAMA,IAAK,CAAEE,GAAG,CAACK,GAAJ,CAAST,UAAT,CAAP,EAA+B;YAE9BH,cAAc,CAACa,IAAf,CAAqBV,UAArB;UAEA;QAED,CAfD;MAiBA;IAED,CA7CD;EA+CA;;EAED,OAAOG,KAAP;AAEA"},"metadata":{},"sourceType":"module"}