{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class TileProgram {\n  constructor(aShape, reps) {\n    this.variableNames = ['A'];\n    const outputShape = new Array(aShape.length);\n\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[i] * reps[i];\n    }\n\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape);\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n  }\n\n}\n\nfunction getSourceCoords(aShape) {\n  const rank = aShape.length;\n\n  if (rank > 5) {\n    throw Error(`Tile for rank ${rank} is not yet supported`);\n  }\n\n  if (rank === 1) {\n    return `imod(resRC, ${aShape[0]})`;\n  }\n\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];\n  const sourceCoords = [];\n\n  for (let i = 0; i < aShape.length; i++) {\n    sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);\n  }\n\n  return sourceCoords.join();\n}","map":{"version":3,"names":["getCoordsDataType","TileProgram","constructor","aShape","reps","variableNames","outputShape","Array","length","i","rank","dtype","sourceCoords","getSourceCoords","userCode","Error","currentCoords","push","join"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/tile_gpu.js"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class TileProgram {\n    constructor(aShape, reps) {\n        this.variableNames = ['A'];\n        const outputShape = new Array(aShape.length);\n        for (let i = 0; i < outputShape.length; i++) {\n            outputShape[i] = aShape[i] * reps[i];\n        }\n        this.outputShape = outputShape;\n        this.rank = outputShape.length;\n        const dtype = getCoordsDataType(this.rank);\n        const sourceCoords = getSourceCoords(aShape);\n        this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n    }\n}\nfunction getSourceCoords(aShape) {\n    const rank = aShape.length;\n    if (rank > 5) {\n        throw Error(`Tile for rank ${rank} is not yet supported`);\n    }\n    if (rank === 1) {\n        return `imod(resRC, ${aShape[0]})`;\n    }\n    const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];\n    const sourceCoords = [];\n    for (let i = 0; i < aShape.length; i++) {\n        sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);\n    }\n    return sourceCoords.join();\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,iBAAT,QAAkC,mBAAlC;AACA,OAAO,MAAMC,WAAN,CAAkB;EACrBC,WAAW,CAACC,MAAD,EAASC,IAAT,EAAe;IACtB,KAAKC,aAAL,GAAqB,CAAC,GAAD,CAArB;IACA,MAAMC,WAAW,GAAG,IAAIC,KAAJ,CAAUJ,MAAM,CAACK,MAAjB,CAApB;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,WAAW,CAACE,MAAhC,EAAwCC,CAAC,EAAzC,EAA6C;MACzCH,WAAW,CAACG,CAAD,CAAX,GAAiBN,MAAM,CAACM,CAAD,CAAN,GAAYL,IAAI,CAACK,CAAD,CAAjC;IACH;;IACD,KAAKH,WAAL,GAAmBA,WAAnB;IACA,KAAKI,IAAL,GAAYJ,WAAW,CAACE,MAAxB;IACA,MAAMG,KAAK,GAAGX,iBAAiB,CAAC,KAAKU,IAAN,CAA/B;IACA,MAAME,YAAY,GAAGC,eAAe,CAACV,MAAD,CAApC;IACA,KAAKW,QAAL,GAAiB;AACzB;AACA,UAAUH,KAAM;AAChB,yBAAyBC,YAAa;AACtC;AACA,KALQ;EAMH;;AAjBoB;;AAmBzB,SAASC,eAAT,CAAyBV,MAAzB,EAAiC;EAC7B,MAAMO,IAAI,GAAGP,MAAM,CAACK,MAApB;;EACA,IAAIE,IAAI,GAAG,CAAX,EAAc;IACV,MAAMK,KAAK,CAAE,iBAAgBL,IAAK,uBAAvB,CAAX;EACH;;EACD,IAAIA,IAAI,KAAK,CAAb,EAAgB;IACZ,OAAQ,eAAcP,MAAM,CAAC,CAAD,CAAI,GAAhC;EACH;;EACD,MAAMa,aAAa,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,EAA6C,SAA7C,CAAtB;EACA,MAAMJ,YAAY,GAAG,EAArB;;EACA,KAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,MAAM,CAACK,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;IACpCG,YAAY,CAACK,IAAb,CAAmB,QAAOD,aAAa,CAACP,CAAD,CAAI,KAAIN,MAAM,CAACM,CAAD,CAAI,GAAzD;EACH;;EACD,OAAOG,YAAY,CAACM,IAAb,EAAP;AACH"},"metadata":{},"sourceType":"module"}