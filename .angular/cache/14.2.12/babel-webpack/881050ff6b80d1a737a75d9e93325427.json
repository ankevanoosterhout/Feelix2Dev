{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, Tile, util } from '@tensorflow/tfjs-core';\nimport { tileImplCPU } from '../kernel_utils/shared';\nimport { TileProgram } from '../tile_gpu';\nexport function tile(params) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = params;\n  const {\n    x\n  } = inputs;\n  const {\n    reps\n  } = attrs; // tile gpu program cannot handle rank > 5 case.\n\n  if (x.dtype === 'string' || x.shape.length > 5) {\n    // Even thought string tensor is always on CPU, just to be consistent on how\n    // to access tensor data.\n    const data = backend.readSync(x.dataId);\n    const value = x.dtype === 'string' ? data.map(d => util.decodeString(d)) : data;\n    const buf = buffer(x.shape, x.dtype, value);\n    const outBuf = tileImplCPU(buf, reps);\n    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n  }\n\n  const program = new TileProgram(x.shape, reps);\n  const output = backend.runWebGLProgram(program, [x], x.dtype);\n  return output;\n}\nexport const tileConfig = {\n  kernelName: Tile,\n  backendName: 'webgl',\n  kernelFunc: tile\n};","map":{"version":3,"names":["buffer","Tile","util","tileImplCPU","TileProgram","tile","params","inputs","backend","attrs","x","reps","dtype","shape","length","data","readSync","dataId","value","map","d","decodeString","buf","outBuf","makeTensorInfo","values","program","output","runWebGLProgram","tileConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Tile.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, Tile, util } from '@tensorflow/tfjs-core';\nimport { tileImplCPU } from '../kernel_utils/shared';\nimport { TileProgram } from '../tile_gpu';\nexport function tile(params) {\n    const { inputs, backend, attrs } = params;\n    const { x } = inputs;\n    const { reps } = attrs;\n    // tile gpu program cannot handle rank > 5 case.\n    if (x.dtype === 'string' || x.shape.length > 5) {\n        // Even thought string tensor is always on CPU, just to be consistent on how\n        // to access tensor data.\n        const data = backend.readSync(x.dataId);\n        const value = x.dtype === 'string' ?\n            data.map(d => util.decodeString(d)) :\n            data;\n        const buf = buffer(x.shape, x.dtype, value);\n        const outBuf = tileImplCPU(buf, reps);\n        return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n    }\n    const program = new TileProgram(x.shape, reps);\n    const output = backend.runWebGLProgram(program, [x], x.dtype);\n    return output;\n}\nexport const tileConfig = {\n    kernelName: Tile,\n    backendName: 'webgl',\n    kernelFunc: tile,\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,EAAiBC,IAAjB,EAAuBC,IAAvB,QAAmC,uBAAnC;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAO,SAASC,IAAT,CAAcC,MAAd,EAAsB;EACzB,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BH,MAAnC;EACA,MAAM;IAAEI;EAAF,IAAQH,MAAd;EACA,MAAM;IAAEI;EAAF,IAAWF,KAAjB,CAHyB,CAIzB;;EACA,IAAIC,CAAC,CAACE,KAAF,KAAY,QAAZ,IAAwBF,CAAC,CAACG,KAAF,CAAQC,MAAR,GAAiB,CAA7C,EAAgD;IAC5C;IACA;IACA,MAAMC,IAAI,GAAGP,OAAO,CAACQ,QAAR,CAAiBN,CAAC,CAACO,MAAnB,CAAb;IACA,MAAMC,KAAK,GAAGR,CAAC,CAACE,KAAF,KAAY,QAAZ,GACVG,IAAI,CAACI,GAAL,CAASC,CAAC,IAAIlB,IAAI,CAACmB,YAAL,CAAkBD,CAAlB,CAAd,CADU,GAEVL,IAFJ;IAGA,MAAMO,GAAG,GAAGtB,MAAM,CAACU,CAAC,CAACG,KAAH,EAAUH,CAAC,CAACE,KAAZ,EAAmBM,KAAnB,CAAlB;IACA,MAAMK,MAAM,GAAGpB,WAAW,CAACmB,GAAD,EAAMX,IAAN,CAA1B;IACA,OAAOH,OAAO,CAACgB,cAAR,CAAuBD,MAAM,CAACV,KAA9B,EAAqCU,MAAM,CAACX,KAA5C,EAAmDW,MAAM,CAACE,MAA1D,CAAP;EACH;;EACD,MAAMC,OAAO,GAAG,IAAItB,WAAJ,CAAgBM,CAAC,CAACG,KAAlB,EAAyBF,IAAzB,CAAhB;EACA,MAAMgB,MAAM,GAAGnB,OAAO,CAACoB,eAAR,CAAwBF,OAAxB,EAAiC,CAAChB,CAAD,CAAjC,EAAsCA,CAAC,CAACE,KAAxC,CAAf;EACA,OAAOe,MAAP;AACH;AACD,OAAO,MAAME,UAAU,GAAG;EACtBC,UAAU,EAAE7B,IADU;EAEtB8B,WAAW,EAAE,OAFS;EAGtBC,UAAU,EAAE3B;AAHU,CAAnB"},"metadata":{},"sourceType":"module"}