{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Einsum, util } from '@tensorflow/tfjs-core';\nimport { multiply } from './Multiply';\nimport { reshape } from './Reshape';\nimport { sum } from './Sum';\nimport { transpose } from './Transpose';\nexport function einsum(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    equation\n  } = attrs;\n  const tensors = inputs;\n  const {\n    allDims,\n    summedDims,\n    idDims\n  } = backend_util.decodeEinsumEquation(equation, tensors.length);\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const {\n    path,\n    steps\n  } = backend_util.getEinsumComputePath(summedDims, idDims);\n  const nSteps = steps.length;\n  let out = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose = [];\n\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const {\n        permutationIndices: perm,\n        expandDims: dimsToExpand\n      } = backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x;\n\n      if (backend_util.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose({\n          inputs: {\n            x: tensors[idTerm]\n          },\n          backend,\n          attrs: {\n            perm\n          }\n        });\n        tensorsToDispose.push(x);\n      }\n\n      const targetShape = x.shape.slice();\n\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n\n      if (!util.arraysEqual(x.shape, targetShape)) {\n        x = reshape({\n          inputs: {\n            x\n          },\n          backend,\n          attrs: {\n            shape: targetShape\n          }\n        });\n        tensorsToDispose.push(x);\n      }\n\n      if (out === null) {\n        out = x;\n      } else {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        out = multiply({\n          inputs: {\n            a: x,\n            b: out\n          },\n          backend\n        });\n        tensorsToDispose.push(out);\n      }\n    }\n\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {\n            x: out\n          },\n          backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n\n      numDimsRemaining--;\n    }\n  } // Clean up intermediate tensors.\n\n\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n\n  return out;\n}\nexport const einsumConfig = {\n  kernelName: Einsum,\n  backendName: 'cpu',\n  kernelFunc: einsum\n};","map":{"version":3,"names":["backend_util","Einsum","util","multiply","reshape","sum","transpose","einsum","args","inputs","backend","attrs","equation","tensors","allDims","summedDims","idDims","decodeEinsumEquation","length","checkEinsumDimSizes","path","steps","getEinsumComputePath","nSteps","out","numDimsRemaining","tensorsToDispose","i","idTerm","permutationIndices","perm","expandDims","dimsToExpand","getEinsumPermutation","x","isIdentityPermutation","push","targetShape","shape","slice","k","splice","arraysEqual","a","b","axis","keepDims","tensorInfo","disposeIntermediateTensorInfo","einsumConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Einsum.js"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Einsum, util } from '@tensorflow/tfjs-core';\nimport { multiply } from './Multiply';\nimport { reshape } from './Reshape';\nimport { sum } from './Sum';\nimport { transpose } from './Transpose';\nexport function einsum(args) {\n    const { inputs, backend, attrs } = args;\n    const { equation } = attrs;\n    const tensors = inputs;\n    const { allDims, summedDims, idDims } = backend_util.decodeEinsumEquation(equation, tensors.length);\n    backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n    const { path, steps } = backend_util.getEinsumComputePath(summedDims, idDims);\n    const nSteps = steps.length;\n    let out = null;\n    let numDimsRemaining = allDims.length;\n    const tensorsToDispose = [];\n    for (let i = 0; i < nSteps; ++i) {\n        for (const idTerm of steps[i]) {\n            const { permutationIndices: perm, expandDims: dimsToExpand } = backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n            let x;\n            if (backend_util.isIdentityPermutation(perm)) {\n                x = tensors[idTerm];\n            }\n            else {\n                x = transpose({ inputs: { x: tensors[idTerm] }, backend, attrs: { perm } });\n                tensorsToDispose.push(x);\n            }\n            const targetShape = x.shape.slice();\n            for (let k = 0; k < dimsToExpand.length; ++k) {\n                targetShape.splice(dimsToExpand[k], 0, 1);\n            }\n            if (!util.arraysEqual(x.shape, targetShape)) {\n                x = reshape({ inputs: { x }, backend, attrs: { shape: targetShape } });\n                tensorsToDispose.push(x);\n            }\n            if (out === null) {\n                out = x;\n            }\n            else {\n                // tslint:disable-next-line: no-unnecessary-type-assertion\n                out = multiply({ inputs: { a: x, b: out }, backend });\n                tensorsToDispose.push(out);\n            }\n        }\n        if (i < nSteps - 1) {\n            if (path[i] >= 0) {\n                out = sum({\n                    inputs: { x: out },\n                    backend,\n                    attrs: {\n                        axis: path[i] - (allDims.length - numDimsRemaining),\n                        keepDims: false\n                    }\n                });\n                tensorsToDispose.push(out);\n            }\n            numDimsRemaining--;\n        }\n    }\n    // Clean up intermediate tensors.\n    for (const tensorInfo of tensorsToDispose) {\n        if (tensorInfo === out) {\n            continue;\n        }\n        backend.disposeIntermediateTensorInfo(tensorInfo);\n    }\n    return out;\n}\nexport const einsumConfig = {\n    kernelName: Einsum,\n    backendName: 'cpu',\n    kernelFunc: einsum\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}