{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { FromPixels } from '@tensorflow/tfjs-core';\nimport { TextureUsage } from '../tex_util';\nimport { FromPixelsProgram } from './FromPixels_utils/from_pixels_gpu';\nimport { FromPixelsPackedProgram } from './FromPixels_utils/from_pixels_packed_gpu';\nexport const fromPixelsConfig = {\n  kernelName: FromPixels,\n  backendName: 'webgl',\n  kernelFunc: fromPixels\n};\nlet fromPixels2DContext;\nlet willReadFrequently = env().getBool('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU');\n\nfunction fromPixels(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  let {\n    pixels\n  } = inputs;\n  const {\n    numChannels\n  } = attrs;\n  const isVideo = typeof HTMLVideoElement !== 'undefined' && pixels instanceof HTMLVideoElement;\n  const isImage = typeof HTMLImageElement !== 'undefined' && pixels instanceof HTMLImageElement;\n  const [width, height] = isVideo ? [pixels.videoWidth, pixels.videoHeight] : [pixels.width, pixels.height];\n  const texShape = [height, width];\n  const outShape = [height, width, numChannels];\n\n  if (isImage || isVideo) {\n    const newWillReadFrequently = env().getBool('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU');\n\n    if (fromPixels2DContext == null || newWillReadFrequently !== willReadFrequently) {\n      willReadFrequently = newWillReadFrequently;\n      fromPixels2DContext = document.createElement('canvas').getContext('2d', {\n        willReadFrequently\n      });\n    }\n\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(pixels, 0, 0, width, height);\n    pixels = fromPixels2DContext.canvas;\n  }\n\n  const tempPixelHandle = backend.makeTensorInfo(texShape, 'int32'); // This is a byte texture with pixels.\n\n  backend.texData.get(tempPixelHandle.dataId).usage = TextureUsage.PIXELS;\n  backend.gpgpu.uploadPixelDataToTexture(backend.getTexture(tempPixelHandle.dataId), pixels);\n  const program = env().getBool('WEBGL_PACK') ? new FromPixelsPackedProgram(outShape) : new FromPixelsProgram(outShape);\n  const res = backend.runWebGLProgram(program, [tempPixelHandle], 'int32');\n  backend.disposeData(tempPixelHandle.dataId);\n  return res;\n}","map":{"version":3,"names":["env","FromPixels","TextureUsage","FromPixelsProgram","FromPixelsPackedProgram","fromPixelsConfig","kernelName","backendName","kernelFunc","fromPixels","fromPixels2DContext","willReadFrequently","getBool","args","inputs","backend","attrs","pixels","numChannels","isVideo","HTMLVideoElement","isImage","HTMLImageElement","width","height","videoWidth","videoHeight","texShape","outShape","newWillReadFrequently","document","createElement","getContext","canvas","drawImage","tempPixelHandle","makeTensorInfo","texData","get","dataId","usage","PIXELS","gpgpu","uploadPixelDataToTexture","getTexture","program","res","runWebGLProgram","disposeData"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { FromPixels } from '@tensorflow/tfjs-core';\nimport { TextureUsage } from '../tex_util';\nimport { FromPixelsProgram } from './FromPixels_utils/from_pixels_gpu';\nimport { FromPixelsPackedProgram } from './FromPixels_utils/from_pixels_packed_gpu';\nexport const fromPixelsConfig = {\n    kernelName: FromPixels,\n    backendName: 'webgl',\n    kernelFunc: fromPixels,\n};\nlet fromPixels2DContext;\nlet willReadFrequently = env().getBool('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU');\nfunction fromPixels(args) {\n    const { inputs, backend, attrs } = args;\n    let { pixels } = inputs;\n    const { numChannels } = attrs;\n    const isVideo = typeof (HTMLVideoElement) !== 'undefined' &&\n        pixels instanceof HTMLVideoElement;\n    const isImage = typeof (HTMLImageElement) !== 'undefined' &&\n        pixels instanceof HTMLImageElement;\n    const [width, height] = isVideo ?\n        [\n            pixels.videoWidth,\n            pixels.videoHeight\n        ] :\n        [pixels.width, pixels.height];\n    const texShape = [height, width];\n    const outShape = [height, width, numChannels];\n    if (isImage || isVideo) {\n        const newWillReadFrequently = env().getBool('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU');\n        if (fromPixels2DContext == null ||\n            newWillReadFrequently !== willReadFrequently) {\n            willReadFrequently = newWillReadFrequently;\n            fromPixels2DContext =\n                document.createElement('canvas').getContext('2d', { willReadFrequently });\n        }\n        fromPixels2DContext.canvas.width = width;\n        fromPixels2DContext.canvas.height = height;\n        fromPixels2DContext.drawImage(pixels, 0, 0, width, height);\n        pixels = fromPixels2DContext.canvas;\n    }\n    const tempPixelHandle = backend.makeTensorInfo(texShape, 'int32');\n    // This is a byte texture with pixels.\n    backend.texData.get(tempPixelHandle.dataId).usage = TextureUsage.PIXELS;\n    backend.gpgpu.uploadPixelDataToTexture(backend.getTexture(tempPixelHandle.dataId), pixels);\n    const program = env().getBool('WEBGL_PACK') ?\n        new FromPixelsPackedProgram(outShape) :\n        new FromPixelsProgram(outShape);\n    const res = backend.runWebGLProgram(program, [tempPixelHandle], 'int32');\n    backend.disposeData(tempPixelHandle.dataId);\n    return res;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}