{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { KernelBackend } from './backends/backend';\nimport { Environment, setEnvironmentGlobal } from './environment';\nimport { getGlobalNamespace } from './global_util';\nimport { Add, Cast, Identity } from './kernel_names';\nimport { getGradient, getKernel, getKernelsForBackend } from './kernel_registry';\nimport * as log from './log';\nimport { Profiler } from './profiler';\nimport { backpropagateGradients, getFilteredNodesXToY } from './tape';\nimport { setTensorTracker, Tensor, Variable } from './tensor';\nimport { getTensorsInContainer } from './tensor_util';\nimport * as util from './util';\nimport { bytesFromStringArray, makeOnesTypedArray, now, sizeFromShape } from './util';\n\nfunction isRegisteredKernelInvocation(kernelInvocation) {\n  return kernelInvocation.kernelName != null;\n}\n\nclass EngineState {\n  constructor() {\n    // Public since optimizers will use it.\n    this.registeredVariables = {};\n    this.nextTapeNodeId = 0;\n    this.numBytes = 0;\n    this.numTensors = 0;\n    this.numStringTensors = 0;\n    this.numDataBuffers = 0; // Number of nested tf.grad() statements when computing higher-order\n    // gradients. E.g. `1` for first-order gradients and `2` for second-order\n    // gradients. Used to track if the tape should be removed after a backprop.\n\n    this.gradientDepth = 0; // Number of nested kernel calls. When kernel depth is greater than 1, we turn\n    // off the tape.\n\n    this.kernelDepth = 0;\n    this.scopeStack = [];\n    /**\n     * Keeps track of the number of data moves during a kernel execution. We\n     * maintain a stack since kernels can call other kernels, recursively.\n     */\n\n    this.numDataMovesStack = [];\n    this.nextScopeId = 0;\n    this.tensorInfo = new WeakMap();\n    this.profiling = false;\n    this.activeProfile = {\n      newBytes: 0,\n      newTensors: 0,\n      peakBytes: 0,\n      kernels: [],\n      result: null,\n\n      get kernelNames() {\n        return Array.from(new Set(this.kernels.map(k => k.name)));\n      }\n\n    };\n  }\n\n  dispose() {\n    for (const variableName in this.registeredVariables) {\n      this.registeredVariables[variableName].dispose();\n    }\n  }\n\n}\n\nexport class Engine {\n  constructor(ENV) {\n    this.ENV = ENV;\n    this.registry = {};\n    this.registryFactory = {};\n    this.pendingBackendInitId = 0;\n    this.state = new EngineState();\n  }\n\n  ready() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.pendingBackendInit != null) {\n        return _this.pendingBackendInit.then(() => {});\n      }\n\n      if (_this.backendInstance != null) {\n        return;\n      }\n\n      const sortedBackends = _this.getSortedBackends();\n\n      for (let i = 0; i < sortedBackends.length; i++) {\n        const backendName = sortedBackends[i];\n        const success = yield _this.initializeBackend(backendName).success;\n\n        if (success) {\n          yield _this.setBackend(backendName);\n          return;\n        }\n      }\n\n      throw new Error(`Could not initialize any backends, all backend initializations ` + `failed.`);\n    })();\n  }\n\n  get backend() {\n    if (this.pendingBackendInit != null) {\n      throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make ` + `sure to await tf.ready() or await tf.setBackend() before calling ` + `other methods`);\n    }\n\n    if (this.backendInstance == null) {\n      const {\n        name,\n        asyncInit\n      } = this.initializeBackendsAndReturnBest();\n\n      if (asyncInit) {\n        throw new Error(`The highest priority backend '${name}' has not yet been ` + `initialized. Make sure to await tf.ready() or ` + `await tf.setBackend() before calling other methods`);\n      }\n\n      this.setBackend(name);\n    }\n\n    return this.backendInstance;\n  }\n\n  backendNames() {\n    return Object.keys(this.registryFactory);\n  }\n\n  findBackend(backendName) {\n    if (!(backendName in this.registry)) {\n      // If the backend hasn't been initialized but we have a registry entry for\n      // it, initialize it and return it.\n      if (backendName in this.registryFactory) {\n        const {\n          asyncInit\n        } = this.initializeBackend(backendName);\n\n        if (asyncInit) {\n          // Backend is not ready yet.\n          return null;\n        }\n      } else {\n        return null;\n      }\n    }\n\n    return this.registry[backendName];\n  }\n\n  findBackendFactory(backendName) {\n    if (!(backendName in this.registryFactory)) {\n      return null;\n    }\n\n    return this.registryFactory[backendName].factory;\n  }\n\n  registerBackend(backendName, factory, priority = 1) {\n    if (backendName in this.registryFactory) {\n      log.warn(`${backendName} backend was already registered. ` + `Reusing existing backend factory.`);\n      return false;\n    }\n\n    this.registryFactory[backendName] = {\n      factory,\n      priority\n    };\n    return true;\n  }\n\n  setBackend(backendName) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this2.registryFactory[backendName] == null) {\n        throw new Error(`Backend name '${backendName}' not found in registry`);\n      }\n\n      _this2.backendName = backendName;\n\n      if (_this2.registry[backendName] == null) {\n        _this2.backendInstance = null;\n\n        const {\n          success,\n          asyncInit\n        } = _this2.initializeBackend(backendName);\n\n        const result = asyncInit ? yield success : success;\n\n        if (!result) {\n          return false;\n        }\n      }\n\n      _this2.backendInstance = _this2.registry[backendName];\n\n      _this2.setupRegisteredKernels(); // Reset the profiler.\n\n\n      _this2.profiler = new Profiler(_this2.backendInstance);\n      return true;\n    })();\n  }\n\n  setupRegisteredKernels() {\n    const kernels = getKernelsForBackend(this.backendName);\n    kernels.forEach(kernel => {\n      if (kernel.setupFunc != null) {\n        kernel.setupFunc(this.backendInstance);\n      }\n    });\n  }\n\n  disposeRegisteredKernels(backendName) {\n    const kernels = getKernelsForBackend(backendName);\n    kernels.forEach(kernel => {\n      if (kernel.disposeFunc != null) {\n        kernel.disposeFunc(this.registry[backendName]);\n      }\n    });\n  }\n  /**\n   * Initializes a backend by looking up the backend name in the factory\n   * registry and calling the factory method. Returns a boolean representing\n   * whether the initialization of the backend suceeded. Throws an error if\n   * there is no backend in the factory registry.\n   */\n\n\n  initializeBackend(backendName) {\n    const registryFactoryEntry = this.registryFactory[backendName];\n\n    if (registryFactoryEntry == null) {\n      throw new Error(`Cannot initialize backend ${backendName}, no registration found.`);\n    }\n\n    try {\n      const backend = registryFactoryEntry.factory();\n      /* Test if the factory returns a promise.\n      Done in a more liberal way than\n      previous 'Promise.resolve(backend)===backend'\n      as we needed to account for custom Promise\n      implementations (e.g. Angular) */\n\n      if (backend && !(backend instanceof KernelBackend) && typeof backend.then === 'function') {\n        const promiseId = ++this.pendingBackendInitId;\n        const success = backend.then(backendInstance => {\n          // Outdated promise. Another backend was set in the meantime.\n          if (promiseId < this.pendingBackendInitId) {\n            return false;\n          }\n\n          this.registry[backendName] = backendInstance;\n          this.pendingBackendInit = null;\n          return true;\n        }).catch(err => {\n          // Outdated promise. Another backend was set in the meantime.\n          if (promiseId < this.pendingBackendInitId) {\n            return false;\n          }\n\n          this.pendingBackendInit = null;\n          log.warn(`Initialization of backend ${backendName} failed`);\n          log.warn(err.stack || err.message);\n          return false;\n        });\n        this.pendingBackendInit = success;\n        return {\n          success,\n          asyncInit: true\n        };\n      } else {\n        this.registry[backendName] = backend;\n        return {\n          success: true,\n          asyncInit: false\n        };\n      }\n    } catch (err) {\n      log.warn(`Initialization of backend ${backendName} failed`);\n      log.warn(err.stack || err.message);\n      return {\n        success: false,\n        asyncInit: false\n      };\n    }\n  }\n\n  removeBackend(backendName) {\n    if (!(backendName in this.registryFactory)) {\n      throw new Error(`${backendName} backend not found in registry`);\n    }\n\n    if (this.backendName === backendName && this.pendingBackendInit != null) {\n      // There is a pending promise of the backend we want to remove. Make it\n      // obsolete.\n      this.pendingBackendInitId++;\n    }\n\n    if (backendName in this.registry) {\n      this.disposeRegisteredKernels(backendName);\n      this.registry[backendName].dispose();\n      delete this.registry[backendName];\n    }\n\n    delete this.registryFactory[backendName]; // Unset the backend if it is active.\n\n    if (this.backendName === backendName) {\n      this.pendingBackendInit = null;\n      this.backendName = null;\n      this.backendInstance = null;\n    }\n  }\n\n  getSortedBackends() {\n    if (Object.keys(this.registryFactory).length === 0) {\n      throw new Error('No backend found in registry.');\n    }\n\n    return Object.keys(this.registryFactory).sort((a, b) => {\n      // Highest priority comes first.\n      return this.registryFactory[b].priority - this.registryFactory[a].priority;\n    });\n  }\n\n  initializeBackendsAndReturnBest() {\n    const sortedBackends = this.getSortedBackends();\n\n    for (let i = 0; i < sortedBackends.length; i++) {\n      const backendName = sortedBackends[i];\n      const {\n        success,\n        asyncInit\n      } = this.initializeBackend(backendName);\n\n      if (asyncInit || success) {\n        return {\n          name: backendName,\n          asyncInit\n        };\n      }\n    }\n\n    throw new Error(`Could not initialize any backends, all backend initializations ` + `failed.`);\n  }\n\n  moveData(backend, dataId) {\n    const info = this.state.tensorInfo.get(dataId);\n    const srcBackend = info.backend;\n    const values = this.readSync(dataId);\n    const refCount = srcBackend.refCount(dataId); // Delete the tensor from the old backend and move it to the new\n    // backend.\n\n    srcBackend.disposeData(dataId, true);\n    info.backend = backend;\n    backend.move(dataId, values, info.shape, info.dtype, refCount);\n\n    if (this.shouldCheckForMemLeaks()) {\n      // Track the number of moves during a kernel execution to correctly\n      // detect memory leaks.\n      this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;\n    }\n  }\n\n  tidy(nameOrFn, fn) {\n    let name = null;\n\n    if (fn == null) {\n      // Called with only 1 argument.\n      if (typeof nameOrFn !== 'function') {\n        throw new Error('Please provide a function to tidy()');\n      }\n\n      fn = nameOrFn;\n    } else {\n      // Called with 2 arguments.\n      if (typeof nameOrFn !== 'string' && !(nameOrFn instanceof String)) {\n        throw new Error('When calling with two arguments, the first argument ' + 'to tidy() must be a string');\n      }\n\n      if (typeof fn !== 'function') {\n        throw new Error('When calling with two arguments, the 2nd argument ' + 'to tidy() must be a function');\n      }\n\n      name = nameOrFn; // TODO(nsthorat,smilkov): Do operation logging and performance\n      // profiling.\n    }\n\n    let result;\n    return this.scopedRun(() => this.startScope(name), () => this.endScope(result), () => {\n      result = fn();\n\n      if (result instanceof Promise) {\n        console.error('Cannot return a Promise inside of tidy.');\n      }\n\n      return result;\n    });\n  }\n\n  scopedRun(start, end, f) {\n    start();\n\n    try {\n      const res = f();\n      end();\n      return res;\n    } catch (ex) {\n      end();\n      throw ex;\n    }\n  }\n\n  nextTensorId() {\n    return Engine.nextTensorId++;\n  }\n\n  nextVariableId() {\n    return Engine.nextVariableId++;\n  }\n  /**\n   * This method is called instead of the public-facing tensor.clone() when\n   * saving a tensor for backwards pass. It makes sure to add the clone\n   * operation to the tape regardless of being called inside a kernel\n   * execution.\n   */\n\n\n  clone(x) {\n    const y = ENGINE.runKernel(Identity, {\n      x\n    });\n    const inputs = {\n      x\n    };\n\n    const grad = dy => ({\n      x: () => {\n        const dtype = 'float32';\n        const gradInputs = {\n          x: dy\n        };\n        const attrs = {\n          dtype\n        };\n        return ENGINE.runKernel(Cast, gradInputs, // tslint:disable-next-line: no-unnecessary-type-assertion\n        attrs);\n      }\n    });\n\n    const saved = [];\n    this.addTapeNode(this.state.activeScope.name, inputs, [y], grad, saved, {});\n    return y;\n  }\n  /**\n   * Execute a kernel with the given name and return the output tensor.\n   *\n   * @param kernelName The name of the kernel to execute.\n   * @param inputs A map of input names to tensors.\n   * @param attrs A map of attribute names to their values. An attribute is a\n   *     primitive (non-tensor) input to the kernel.\n   * @param inputsToSave A list of tensors, inputs to save for the backprop\n   *     computation.\n   * @param outputsToSave A list of booleans, specifying which output to save\n   *     for the backprop computation. These are booleans since the output\n   * tensors are not visible to the user.\n   */\n\n\n  runKernel(kernelName, inputs, attrs) {\n    if (this.backendName == null) {\n      // backend has not been initialized yet (backend initialization is lazy\n      // can be deferred until an op/ kernel is run).\n      // The below getter has side effects that will try to initialize the\n      // backend and set properties like this.backendName\n      // tslint:disable-next-line: no-unused-expression\n      this.backend;\n    }\n\n    const hasKernel = getKernel(kernelName, this.backendName) != null;\n\n    if (!hasKernel) {\n      throw new Error(`Kernel '${kernelName}' not registered for backend '${this.backendName}'`);\n    }\n\n    return this.runKernelFunc({\n      kernelName,\n      inputs,\n      attrs\n    });\n  }\n\n  shouldCheckForMemLeaks() {\n    return this.ENV.getBool('IS_TEST');\n  }\n\n  checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos) {\n    const numDataIdsAfter = this.backend.numDataIds(); // Count the number of data ids associated with the result of the kernel.\n\n    let numOutputDataIds = 0;\n    outInfos.forEach(info => {\n      // Complex numbers allocate 3 data ids, one for 'real', one for\n      // 'imaginary', and one for the container that holds the former two.\n      numOutputDataIds += info.dtype === 'complex64' ? 3 : 1;\n    }); // Account for the number of moves during kernel execution. A \"data move\"\n    // can happen in the middle of a kernel execution, placing a new (key,value)\n    // pair in the data storage. Since data moves have net zero effect (we\n    // always remove the data from the old backend), we have to cancel them out\n    // when detecting memory leaks.\n\n    const numMoves = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1];\n    const dataIdsLeaked = numDataIdsAfter - numDataIdsBefore - numOutputDataIds - numMoves;\n\n    if (dataIdsLeaked > 0) {\n      throw new Error(`Backend '${this.backendName}' has an internal memory leak ` + `(${dataIdsLeaked} data ids) after running '${kernelName}'`);\n    }\n  }\n  /**\n   * Internal helper method to execute a kernel Func\n   *\n   * Use `runKernel` to execute kernels from outside of engine.\n   */\n\n\n  runKernelFunc(kernelParams) {\n    let outputs;\n    let saved = [];\n    const isTapeOn = this.isTapeOn();\n    const startingBytecount = this.state.numBytes;\n    const startingNumTensors = this.state.numTensors;\n\n    if (this.shouldCheckForMemLeaks()) {\n      this.state.numDataMovesStack.push(0);\n    }\n\n    let kernelFunc;\n\n    if (this.backendName == null) {\n      // backend has not been initialized yet (backend initialization is lazy\n      // can be deferred until an op/ kernel is run).\n      // The below getter has side effects that will try to initialize the\n      // backend and set properties like this.backendName\n      // tslint:disable-next-line: no-unused-expression\n      this.backend;\n    }\n\n    let out;\n    const kernelOrScopeName = isRegisteredKernelInvocation(kernelParams) ? kernelParams.kernelName : this.state.activeScope != null ? this.state.activeScope.name : ''; // Create the kernelFunc from either a registered kernel OR passed in\n    // forward/backward functions (used by custom grad). In this context a\n    // kernelFunc wraps a kernel implementation with some bookkeeping.\n\n    if (isRegisteredKernelInvocation(kernelParams)) {\n      const {\n        kernelName,\n        inputs,\n        attrs\n      } = kernelParams;\n\n      if (this.backendName == null) {\n        // backend has not been initialized yet (backend initialization is lazy\n        // can be deferred until an op/ kernel is run).\n        // The below getter has side effects that will try to initialize the\n        // backend and set properties like this.backendName\n        // tslint:disable-next-line: no-unused-expression\n        this.backend;\n      }\n\n      const kernel = getKernel(kernelName, this.backendName);\n      util.assert(kernel != null, () => `Cannot find registered kernel '${kernelName}' for backend '${this.backendName}'`);\n\n      kernelFunc = () => {\n        const numDataIdsBefore = this.backend.numDataIds();\n        out = kernel.kernelFunc({\n          inputs,\n          attrs,\n          backend: this.backend\n        });\n        const outInfos = Array.isArray(out) ? out : [out];\n\n        if (this.shouldCheckForMemLeaks()) {\n          this.checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos);\n        }\n\n        const outTensors = outInfos.map(outInfo => {\n          // todo (yassogba) remove this option (Tensor) when node backend\n          // methods have been modularized and they all return tensorInfo.\n          // TensorInfos do not have a rank attribute.\n          if (outInfo.rank != null) {\n            return outInfo;\n          }\n\n          return this.makeTensorFromTensorInfo(outInfo);\n        }); // Save any required inputs and outputs.\n        // Do not save unless we are recording to the tape. Otherwise it would\n        // cause a mem leak since there would be no backprop for these tensors\n        // (which would otherwise dispose them).\n\n        if (isTapeOn) {\n          const tensorsToSave = this.getTensorsForGradient(kernelName, inputs, outTensors);\n          saved = this.saveTensorsForBackwardMode(tensorsToSave);\n        }\n\n        return outTensors;\n      };\n    } else {\n      const {\n        forwardFunc\n      } = kernelParams; // Running a customGrad op.\n\n      const saveFunc = tensors => {\n        // Do not save unless we are recording to the tape. Otherwise it would\n        // cause a mem leak since we would never run backprop, which disposes\n        // the kept tensors.\n        if (!isTapeOn) {\n          return;\n        }\n\n        saved = tensors.map(tensor => this.keep(this.clone(tensor)));\n      };\n\n      kernelFunc = () => {\n        const numDataIdsBefore = this.backend.numDataIds();\n        out = this.tidy(() => forwardFunc(this.backend, saveFunc));\n        const outs = Array.isArray(out) ? out : [out];\n\n        if (this.shouldCheckForMemLeaks()) {\n          // Scope name is used to print a more helpful error message if needed.\n          this.checkKernelForMemLeak(kernelOrScopeName, numDataIdsBefore, outs);\n        }\n\n        return outs;\n      };\n    } //\n    // Run the kernelFunc. Optionally profiling it.\n    //\n\n\n    const {\n      inputs,\n      attrs\n    } = kernelParams;\n    const backwardsFunc = isRegisteredKernelInvocation(kernelParams) ? null : kernelParams.backwardsFunc;\n    let kernelProfile;\n    this.scopedRun( // Stop recording to a tape when running a kernel.\n    () => this.state.kernelDepth++, () => this.state.kernelDepth--, () => {\n      if (!this.ENV.getBool('DEBUG') && !this.state.profiling) {\n        outputs = kernelFunc();\n      } else {\n        kernelProfile = this.profiler.profileKernel(kernelOrScopeName, inputs, () => kernelFunc());\n\n        if (this.ENV.getBool('DEBUG')) {\n          this.profiler.logKernelProfile(kernelProfile);\n        }\n\n        outputs = kernelProfile.outputs;\n      }\n    });\n\n    if (isTapeOn) {\n      this.addTapeNode(kernelOrScopeName, inputs, outputs, backwardsFunc, saved, attrs);\n    }\n\n    if (this.state.profiling) {\n      this.state.activeProfile.kernels.push({\n        name: kernelOrScopeName,\n        bytesAdded: this.state.numBytes - startingBytecount,\n        totalBytesSnapshot: this.state.numBytes,\n        tensorsAdded: this.state.numTensors - startingNumTensors,\n        totalTensorsSnapshot: this.state.numTensors,\n        inputShapes: Object.keys(inputs).map(key => inputs[key] != null ? inputs[key].shape : null),\n        outputShapes: outputs.map(item => item.shape),\n        kernelTimeMs: kernelProfile.timeMs,\n        extraInfo: kernelProfile.extraInfo\n      });\n    }\n\n    return Array.isArray(out) ? outputs : outputs[0];\n  }\n  /**\n   * Saves tensors used in forward mode for use in backward mode.\n   *\n   * @param tensors the list of tensors to save.\n   */\n\n\n  saveTensorsForBackwardMode(tensors) {\n    const saved = tensors.map(tensor => this.keep(this.clone(tensor)));\n    return saved;\n  }\n  /**\n   * Returns a list of tensors to save for a given gradient calculation.\n   *\n   * @param kernelName name of kernel to look up gradient for.\n   * @param inputs a map of input tensors.\n   * @param outputs an array of output tensors from forward mode of kernel.\n   */\n\n\n  getTensorsForGradient(kernelName, inputs, outputs) {\n    const gradConfig = getGradient(kernelName);\n\n    if (gradConfig != null) {\n      const inputsToSave = gradConfig.inputsToSave || [];\n      const outputsToSave = gradConfig.outputsToSave || []; // If saveAllInputs is true, all inputs will be saved. Otherwise, inputs\n      // specified in inputsToSave will be saved.\n\n      let inputTensorsToSave;\n\n      if (gradConfig.saveAllInputs) {\n        util.assert(Array.isArray(inputs), () => 'saveAllInputs is true, expected inputs to be an array.');\n        inputTensorsToSave = Object.keys(inputs).map(key => inputs[key]);\n      } else {\n        inputTensorsToSave = inputsToSave.map(inputName => inputs[inputName]);\n      }\n\n      const outputTensorsToSave = outputs.filter((_, i) => outputsToSave[i]);\n      return inputTensorsToSave.concat(outputTensorsToSave);\n    } // We return an empty list rather than throw an error because the kernel we\n    // are looking up may not actually be relevant to backproping through the\n    // overall function\n    //\n    // See 'does not error if irrelevant (pruned) ops are missing grads' test\n    // in gradients_test.ts for an example.\n\n\n    return [];\n  }\n  /**\n   * Internal method used by public APIs for tensor creation. Makes a new\n   * tensor with the provided shape, dtype and values. It always\n   * creates a new data id and writes the values to the underlying backend.\n   */\n\n\n  makeTensor(values, shape, dtype, backend) {\n    if (values == null) {\n      throw new Error('Values passed to engine.makeTensor() are null');\n    }\n\n    dtype = dtype || 'float32';\n    backend = backend || this.backend;\n    let backendVals = values;\n\n    if (dtype === 'string' && util.isString(values[0])) {\n      backendVals = values.map(d => util.encodeString(d));\n    }\n\n    const dataId = backend.write(backendVals, shape, dtype);\n    const t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n    this.trackTensor(t, backend); // Count bytes for string tensors.\n\n    if (dtype === 'string') {\n      const info = this.state.tensorInfo.get(dataId);\n      const newBytes = bytesFromStringArray(backendVals);\n      this.state.numBytes += newBytes - info.bytes;\n      info.bytes = newBytes;\n    }\n\n    return t;\n  }\n  /**\n   * Internal method used by backends. Makes a new tensor\n   * that is a wrapper around an existing data id. It doesn't create\n   * a new data id, only increments the ref count used in memory tracking.\n   * @deprecated\n   */\n\n\n  makeTensorFromDataId(dataId, shape, dtype, backend) {\n    dtype = dtype || 'float32';\n    const tensorInfo = {\n      dataId,\n      shape,\n      dtype\n    };\n    return this.makeTensorFromTensorInfo(tensorInfo, backend);\n  }\n  /**\n   * Internal method used by backends. Makes a new tensor that is a wrapper\n   * around an existing data id in TensorInfo. It doesn't create a new data id,\n   * only increments the ref count used in memory tracking.\n   */\n\n\n  makeTensorFromTensorInfo(tensorInfo, backend) {\n    const {\n      dataId,\n      shape,\n      dtype\n    } = tensorInfo;\n    const t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n    this.trackTensor(t, backend);\n    return t;\n  }\n\n  makeVariable(initialValue, trainable = true, name, dtype) {\n    name = name || this.nextVariableId().toString();\n\n    if (dtype != null && dtype !== initialValue.dtype) {\n      initialValue = initialValue.cast(dtype);\n    }\n\n    const v = new Variable(initialValue, trainable, name, this.nextTensorId());\n\n    if (this.state.registeredVariables[v.name] != null) {\n      throw new Error(`Variable with name ${v.name} was already registered`);\n    }\n\n    this.state.registeredVariables[v.name] = v;\n    this.incRef(v, this.backend);\n    return v;\n  }\n\n  trackTensor(a, backend) {\n    this.state.numTensors++;\n\n    if (a.dtype === 'string') {\n      this.state.numStringTensors++;\n    } // Bytes for complex numbers are counted by their components. Bytes for\n    // string tensors are counted when writing values.\n\n\n    let bytes = 0;\n\n    if (a.dtype !== 'complex64' && a.dtype !== 'string') {\n      bytes = a.size * util.bytesPerElement(a.dtype);\n    }\n\n    this.state.numBytes += bytes;\n\n    if (!this.state.tensorInfo.has(a.dataId)) {\n      this.state.numDataBuffers++;\n      this.state.tensorInfo.set(a.dataId, {\n        backend: backend || this.backend,\n        dtype: a.dtype,\n        shape: a.shape,\n        bytes\n      });\n    }\n\n    if (!(a instanceof Variable)) {\n      this.track(a);\n    }\n  } // Track the tensor by dataId and increase the refCount for the dataId in the\n  // backend.\n  // TODO(pyu10055): This is currently used by makeVariable method, to increase\n  // refCount on the backend for the dataId. It can potentially be replaced with\n  // Identity op indead of calling backend directly.\n\n\n  incRef(a, backend) {\n    this.trackTensor(a, backend);\n    this.backend.incRef(a.dataId);\n  }\n\n  removeDataId(dataId, backend) {\n    if (this.state.tensorInfo.has(dataId) && this.state.tensorInfo.get(dataId).backend === backend) {\n      this.state.tensorInfo.delete(dataId);\n      this.state.numDataBuffers--;\n    }\n  }\n\n  disposeTensor(a) {\n    if (!this.state.tensorInfo.has(a.dataId)) {\n      return;\n    }\n\n    const info = this.state.tensorInfo.get(a.dataId);\n    this.state.numTensors--;\n\n    if (a.dtype === 'string') {\n      this.state.numStringTensors--;\n      this.state.numBytes -= info.bytes;\n    } // Don't count bytes for complex numbers as they are counted by their\n    // components.\n\n\n    if (a.dtype !== 'complex64' && a.dtype !== 'string') {\n      const bytes = a.size * util.bytesPerElement(a.dtype);\n      this.state.numBytes -= bytes;\n    } // Remove the reference to dataId if backend dispose the data successfully\n\n\n    if (info.backend.disposeData(a.dataId)) {\n      this.removeDataId(a.dataId, info.backend);\n    } // TODO(nsthorat): Construct an error and save the stack trace for\n    // debugging when in debug mode. Creating a stack trace is too expensive\n    // to do unconditionally.\n\n  }\n\n  disposeVariables() {\n    for (const varName in this.state.registeredVariables) {\n      const v = this.state.registeredVariables[varName];\n      this.disposeVariable(v);\n    }\n  }\n\n  disposeVariable(v) {\n    this.disposeTensor(v);\n\n    if (this.state.registeredVariables[v.name] != null) {\n      delete this.state.registeredVariables[v.name];\n    }\n  }\n\n  memory() {\n    const info = this.backend.memory();\n    info.numTensors = this.state.numTensors;\n    info.numDataBuffers = this.state.numDataBuffers;\n    info.numBytes = this.state.numBytes;\n\n    if (this.state.numStringTensors > 0) {\n      info.unreliable = true;\n\n      if (info.reasons == null) {\n        info.reasons = [];\n      }\n\n      info.reasons.push('Memory usage by string tensors is approximate ' + '(2 bytes per character)');\n    }\n\n    return info;\n  }\n\n  profile(query) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      _this3.state.profiling = true;\n      const startBytes = _this3.state.numBytes;\n      const startNumTensors = _this3.state.numTensors;\n      _this3.state.activeProfile.kernels = [];\n      _this3.state.activeProfile.result = yield query();\n      _this3.state.profiling = false;\n      _this3.state.activeProfile.peakBytes = Math.max(..._this3.state.activeProfile.kernels.map(d => d.totalBytesSnapshot));\n      _this3.state.activeProfile.newBytes = _this3.state.numBytes - startBytes;\n      _this3.state.activeProfile.newTensors = _this3.state.numTensors - startNumTensors;\n\n      for (const kernel of _this3.state.activeProfile.kernels) {\n        kernel.kernelTimeMs = yield kernel.kernelTimeMs;\n        kernel.extraInfo = yield kernel.extraInfo;\n      }\n\n      return _this3.state.activeProfile;\n    })();\n  }\n\n  isTapeOn() {\n    return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;\n  }\n\n  addTapeNode(kernelName, inputs, outputs, gradientsFunc, saved, attrs) {\n    const tapeNode = {\n      id: this.state.nextTapeNodeId++,\n      kernelName,\n      inputs,\n      outputs,\n      saved\n    };\n    const gradConfig = getGradient(kernelName);\n\n    if (gradConfig != null) {\n      gradientsFunc = gradConfig.gradFunc;\n    }\n\n    if (gradientsFunc != null) {\n      tapeNode.gradient = dys => {\n        // TODO(smilkov): To optimize back-prop, pass dys that are not used in\n        // the backprop graph to the user as null instead of zeros\n        dys = dys.map((dy, i) => {\n          if (dy == null) {\n            const output = outputs[i];\n            const vals = util.makeZerosTypedArray(output.size, output.dtype);\n            return this.makeTensor(vals, output.shape, output.dtype);\n          }\n\n          return dy;\n        }); // Grad functions of ops with single outputs expect a dy, while ops\n        // with multiple outputs expect dys (array of dy).\n\n        return gradientsFunc(dys.length > 1 ? dys : dys[0], saved, attrs);\n      };\n    }\n\n    this.state.activeTape.push(tapeNode);\n  }\n\n  keep(result) {\n    result.kept = true;\n    return result;\n  }\n\n  startTape() {\n    if (this.state.gradientDepth === 0) {\n      this.state.activeTape = [];\n    }\n\n    this.state.gradientDepth++;\n  }\n\n  endTape() {\n    this.state.gradientDepth--;\n  }\n  /**\n   * Start a scope. Use this with endScope() to achieve the same functionality\n   * as scope() without the need for a function closure.\n   */\n\n\n  startScope(name) {\n    const scopeInfo = {\n      track: [],\n      name: 'unnamed scope',\n      id: this.state.nextScopeId++\n    };\n\n    if (name) {\n      scopeInfo.name = name;\n    }\n\n    this.state.scopeStack.push(scopeInfo);\n    this.state.activeScope = scopeInfo;\n  }\n  /**\n   * End a scope. Use this with startScope() to achieve the same functionality\n   * as scope() without the need for a function closure.\n   */\n\n\n  endScope(result) {\n    const tensorsToTrackInParent = getTensorsInContainer(result);\n    const tensorsToTrackInParentSet = new Set(tensorsToTrackInParent.map(t => t.id)); // Dispose the arrays tracked in this scope.\n\n    for (let i = 0; i < this.state.activeScope.track.length; i++) {\n      const tensor = this.state.activeScope.track[i];\n\n      if (!tensor.kept && !tensorsToTrackInParentSet.has(tensor.id)) {\n        tensor.dispose();\n      }\n    }\n\n    const oldScope = this.state.scopeStack.pop();\n    this.state.activeScope = this.state.scopeStack.length === 0 ? null : this.state.scopeStack[this.state.scopeStack.length - 1]; // Track the current result in the parent scope.\n\n    tensorsToTrackInParent.forEach(tensor => {\n      // Only track the tensor if was allocated in the inner scope and is not\n      // globally kept.\n      if (!tensor.kept && tensor.scopeId === oldScope.id) {\n        this.track(tensor);\n      }\n    });\n  }\n  /**\n   * Returns gradients of `f` with respect to each of the `xs`. The gradients\n   * returned are of the same length as `xs`, but some might be null if `f`\n   * was not a function of that `x`. It also takes optional dy to multiply the\n   * gradient, which defaults to `1`.\n   */\n\n\n  gradients(f, xs, dy, allowNoGradients = false) {\n    util.assert(xs.length > 0, () => 'gradients() received an empty list of xs.');\n\n    if (dy != null && dy.dtype !== 'float32') {\n      throw new Error(`dy must have 'float32' dtype, but has '${dy.dtype}'`);\n    }\n\n    const y = this.scopedRun(() => this.startTape(), () => this.endTape(), () => this.tidy('forward', f));\n    util.assert(y instanceof Tensor, () => 'The result y returned by f() must be a tensor.'); // Filter out the nodes that don't connect x => y.\n\n    const filteredTape = getFilteredNodesXToY(this.state.activeTape, xs, y);\n\n    if (!allowNoGradients && filteredTape.length === 0 && xs.length > 0) {\n      throw new Error('Cannot compute gradient of y=f(x) with respect to x. Make sure ' + 'that the f you passed encloses all operations that lead from x ' + 'to y.');\n    }\n\n    return this.tidy('backward', () => {\n      const accumulatedGradientMap = {};\n      accumulatedGradientMap[y.id] = dy == null ? ones(y.shape) : dy; // Backprop gradients through the filtered nodes.\n\n      backpropagateGradients(accumulatedGradientMap, filteredTape, // Pass the tidy function to avoid circular dep with `tape.ts`.\n      f => this.tidy(f), // Pass an add function to avoide a circular dep with `tape.ts`.\n      add);\n      const grads = xs.map(x => accumulatedGradientMap[x.id]);\n\n      if (this.state.gradientDepth === 0) {\n        // This means that we are not computing higher-order gradients\n        // and can clean up the tape.\n        this.state.activeTape.forEach(node => {\n          for (const tensor of node.saved) {\n            tensor.dispose();\n          }\n        });\n        this.state.activeTape = null;\n      }\n\n      return {\n        value: y,\n        grads\n      };\n    });\n  }\n\n  customGrad(f) {\n    util.assert(util.isFunction(f), () => 'The f passed in customGrad(f) must be a function.');\n    return (...inputs) => {\n      util.assert(inputs.every(t => t instanceof Tensor), () => 'The args passed in customGrad(f)(x1, x2,...) must all be ' + 'tensors');\n      let res;\n      const inputMap = {};\n      inputs.forEach((input, i) => {\n        inputMap[i] = input;\n      });\n\n      const forwardFunc = (_, save) => {\n        res = f(...[...inputs, save]);\n        util.assert(res.value instanceof Tensor, () => 'The function f passed in customGrad(f) must return an ' + 'object where `obj.value` is a tensor');\n        util.assert(util.isFunction(res.gradFunc), () => 'The function f passed in customGrad(f) must return an ' + 'object where `obj.gradFunc` is a function.');\n        return res.value;\n      };\n\n      const backwardsFunc = (dy, saved) => {\n        const gradRes = res.gradFunc(dy, saved);\n        const grads = Array.isArray(gradRes) ? gradRes : [gradRes];\n        util.assert(grads.length === inputs.length, () => 'The function f passed in customGrad(f) must return an ' + 'object where `obj.gradFunc` is a function that returns ' + 'the same number of tensors as inputs passed to f(...).');\n        util.assert(grads.every(t => t instanceof Tensor), () => 'The function f passed in customGrad(f) must return an ' + 'object where `obj.gradFunc` is a function that returns ' + 'a list of only tensors.');\n        const gradMap = {};\n        grads.forEach((grad, i) => {\n          gradMap[i] = () => grad;\n        });\n        return gradMap;\n      };\n\n      return this.runKernelFunc({\n        forwardFunc,\n        backwardsFunc,\n        inputs: inputMap\n      });\n    };\n  }\n\n  readSync(dataId) {\n    // Route the read to the correct backend.\n    const info = this.state.tensorInfo.get(dataId);\n    return info.backend.readSync(dataId);\n  }\n\n  read(dataId) {\n    // Route the read to the correct backend.\n    const info = this.state.tensorInfo.get(dataId);\n    return info.backend.read(dataId);\n  }\n\n  readToGPU(dataId, options) {\n    // Route the read to the correct backend.\n    const info = this.state.tensorInfo.get(dataId);\n    return info.backend.readToGPU(dataId, options);\n  }\n\n  time(query) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const start = now();\n      const timingInfo = yield _this4.backend.time(query);\n      timingInfo.wallMs = now() - start;\n      return timingInfo;\n    })();\n  }\n  /**\n   * Tracks a Tensor in the current scope to be automatically cleaned up\n   * when the current scope ends, and returns the value.\n   *\n   * @param result The Tensor to track in the current scope.\n   */\n\n\n  track(result) {\n    if (this.state.activeScope != null) {\n      result.scopeId = this.state.activeScope.id;\n      this.state.activeScope.track.push(result);\n    }\n\n    return result;\n  }\n\n  get registeredVariables() {\n    return this.state.registeredVariables;\n  }\n  /**\n   * Resets the engine state. Removes all backends but does not remove\n   * registered backend factories.\n   */\n\n\n  reset() {\n    // Make any pending promise obsolete.\n    this.pendingBackendInitId++;\n    this.state.dispose();\n    this.ENV.reset();\n    this.state = new EngineState();\n\n    for (const backendName in this.registry) {\n      this.disposeRegisteredKernels(backendName);\n      this.registry[backendName].dispose();\n      delete this.registry[backendName];\n    }\n\n    this.backendName = null;\n    this.backendInstance = null;\n    this.pendingBackendInit = null;\n  }\n\n}\nEngine.nextTensorId = 0;\nEngine.nextVariableId = 0;\n\nfunction ones(shape) {\n  const values = makeOnesTypedArray(sizeFromShape(shape), 'float32');\n  return ENGINE.makeTensor(values, shape, 'float32');\n}\n\nexport function getOrMakeEngine() {\n  const ns = getGlobalNamespace();\n\n  if (ns._tfengine == null) {\n    const environment = new Environment(ns);\n    ns._tfengine = new Engine(environment);\n  }\n\n  setEnvironmentGlobal(ns._tfengine.ENV); // Tell the current tensor interface that the global engine is responsible\n  // for tracking.\n\n  setTensorTracker(() => ns._tfengine);\n  return ns._tfengine;\n}\nexport const ENGINE = getOrMakeEngine();\n/**\n * A implementation of the add op for use within engine and tape.\n *\n * This allows us to avoid a circular dependency between add.ts and engine.\n * It is exported to be available in tape tests.\n */\n\nexport function add(a, b) {\n  // We duplicate Add here to avoid a circular dependency with add.ts.\n  const inputs = {\n    a,\n    b\n  };\n  return ENGINE.runKernel(Add, inputs);\n}","map":{"version":3,"names":["KernelBackend","Environment","setEnvironmentGlobal","getGlobalNamespace","Add","Cast","Identity","getGradient","getKernel","getKernelsForBackend","log","Profiler","backpropagateGradients","getFilteredNodesXToY","setTensorTracker","Tensor","Variable","getTensorsInContainer","util","bytesFromStringArray","makeOnesTypedArray","now","sizeFromShape","isRegisteredKernelInvocation","kernelInvocation","kernelName","EngineState","constructor","registeredVariables","nextTapeNodeId","numBytes","numTensors","numStringTensors","numDataBuffers","gradientDepth","kernelDepth","scopeStack","numDataMovesStack","nextScopeId","tensorInfo","WeakMap","profiling","activeProfile","newBytes","newTensors","peakBytes","kernels","result","kernelNames","Array","from","Set","map","k","name","dispose","variableName","Engine","ENV","registry","registryFactory","pendingBackendInitId","state","ready","pendingBackendInit","then","backendInstance","sortedBackends","getSortedBackends","i","length","backendName","success","initializeBackend","setBackend","Error","backend","asyncInit","initializeBackendsAndReturnBest","backendNames","Object","keys","findBackend","findBackendFactory","factory","registerBackend","priority","warn","setupRegisteredKernels","profiler","forEach","kernel","setupFunc","disposeRegisteredKernels","disposeFunc","registryFactoryEntry","promiseId","catch","err","stack","message","removeBackend","sort","a","b","moveData","dataId","info","get","srcBackend","values","readSync","refCount","disposeData","move","shape","dtype","shouldCheckForMemLeaks","tidy","nameOrFn","fn","String","scopedRun","startScope","endScope","Promise","console","error","start","end","f","res","ex","nextTensorId","nextVariableId","clone","x","y","ENGINE","runKernel","inputs","grad","dy","gradInputs","attrs","saved","addTapeNode","activeScope","hasKernel","runKernelFunc","getBool","checkKernelForMemLeak","numDataIdsBefore","outInfos","numDataIdsAfter","numDataIds","numOutputDataIds","numMoves","dataIdsLeaked","kernelParams","outputs","isTapeOn","startingBytecount","startingNumTensors","push","kernelFunc","out","kernelOrScopeName","assert","isArray","outTensors","outInfo","rank","makeTensorFromTensorInfo","tensorsToSave","getTensorsForGradient","saveTensorsForBackwardMode","forwardFunc","saveFunc","tensors","tensor","keep","outs","backwardsFunc","kernelProfile","profileKernel","logKernelProfile","bytesAdded","totalBytesSnapshot","tensorsAdded","totalTensorsSnapshot","inputShapes","key","outputShapes","item","kernelTimeMs","timeMs","extraInfo","gradConfig","inputsToSave","outputsToSave","inputTensorsToSave","saveAllInputs","inputName","outputTensorsToSave","filter","_","concat","makeTensor","backendVals","isString","d","encodeString","write","t","trackTensor","bytes","makeTensorFromDataId","makeVariable","initialValue","trainable","toString","cast","v","incRef","size","bytesPerElement","has","set","track","removeDataId","delete","disposeTensor","disposeVariables","varName","disposeVariable","memory","unreliable","reasons","profile","query","startBytes","startNumTensors","Math","max","gradientsFunc","tapeNode","id","gradFunc","gradient","dys","output","vals","makeZerosTypedArray","activeTape","kept","startTape","endTape","scopeInfo","tensorsToTrackInParent","tensorsToTrackInParentSet","oldScope","pop","scopeId","gradients","xs","allowNoGradients","filteredTape","accumulatedGradientMap","ones","add","grads","node","value","customGrad","isFunction","every","inputMap","input","save","gradRes","gradMap","read","readToGPU","options","time","timingInfo","wallMs","reset","getOrMakeEngine","ns","_tfengine","environment"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/engine.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { KernelBackend } from './backends/backend';\nimport { Environment, setEnvironmentGlobal } from './environment';\nimport { getGlobalNamespace } from './global_util';\nimport { Add, Cast, Identity } from './kernel_names';\nimport { getGradient, getKernel, getKernelsForBackend } from './kernel_registry';\nimport * as log from './log';\nimport { Profiler } from './profiler';\nimport { backpropagateGradients, getFilteredNodesXToY } from './tape';\nimport { setTensorTracker, Tensor, Variable } from './tensor';\nimport { getTensorsInContainer } from './tensor_util';\nimport * as util from './util';\nimport { bytesFromStringArray, makeOnesTypedArray, now, sizeFromShape } from './util';\nfunction isRegisteredKernelInvocation(kernelInvocation) {\n    return kernelInvocation.kernelName != null;\n}\nclass EngineState {\n    constructor() {\n        // Public since optimizers will use it.\n        this.registeredVariables = {};\n        this.nextTapeNodeId = 0;\n        this.numBytes = 0;\n        this.numTensors = 0;\n        this.numStringTensors = 0;\n        this.numDataBuffers = 0;\n        // Number of nested tf.grad() statements when computing higher-order\n        // gradients. E.g. `1` for first-order gradients and `2` for second-order\n        // gradients. Used to track if the tape should be removed after a backprop.\n        this.gradientDepth = 0;\n        // Number of nested kernel calls. When kernel depth is greater than 1, we turn\n        // off the tape.\n        this.kernelDepth = 0;\n        this.scopeStack = [];\n        /**\n         * Keeps track of the number of data moves during a kernel execution. We\n         * maintain a stack since kernels can call other kernels, recursively.\n         */\n        this.numDataMovesStack = [];\n        this.nextScopeId = 0;\n        this.tensorInfo = new WeakMap();\n        this.profiling = false;\n        this.activeProfile = {\n            newBytes: 0,\n            newTensors: 0,\n            peakBytes: 0,\n            kernels: [],\n            result: null,\n            get kernelNames() {\n                return Array.from(new Set(this.kernels.map(k => k.name)));\n            }\n        };\n    }\n    dispose() {\n        for (const variableName in this.registeredVariables) {\n            this.registeredVariables[variableName].dispose();\n        }\n    }\n}\nexport class Engine {\n    constructor(ENV) {\n        this.ENV = ENV;\n        this.registry = {};\n        this.registryFactory = {};\n        this.pendingBackendInitId = 0;\n        this.state = new EngineState();\n    }\n    async ready() {\n        if (this.pendingBackendInit != null) {\n            return this.pendingBackendInit.then(() => { });\n        }\n        if (this.backendInstance != null) {\n            return;\n        }\n        const sortedBackends = this.getSortedBackends();\n        for (let i = 0; i < sortedBackends.length; i++) {\n            const backendName = sortedBackends[i];\n            const success = await this.initializeBackend(backendName).success;\n            if (success) {\n                await this.setBackend(backendName);\n                return;\n            }\n        }\n        throw new Error(`Could not initialize any backends, all backend initializations ` +\n            `failed.`);\n    }\n    get backend() {\n        if (this.pendingBackendInit != null) {\n            throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make ` +\n                `sure to await tf.ready() or await tf.setBackend() before calling ` +\n                `other methods`);\n        }\n        if (this.backendInstance == null) {\n            const { name, asyncInit } = this.initializeBackendsAndReturnBest();\n            if (asyncInit) {\n                throw new Error(`The highest priority backend '${name}' has not yet been ` +\n                    `initialized. Make sure to await tf.ready() or ` +\n                    `await tf.setBackend() before calling other methods`);\n            }\n            this.setBackend(name);\n        }\n        return this.backendInstance;\n    }\n    backendNames() {\n        return Object.keys(this.registryFactory);\n    }\n    findBackend(backendName) {\n        if (!(backendName in this.registry)) {\n            // If the backend hasn't been initialized but we have a registry entry for\n            // it, initialize it and return it.\n            if (backendName in this.registryFactory) {\n                const { asyncInit } = this.initializeBackend(backendName);\n                if (asyncInit) {\n                    // Backend is not ready yet.\n                    return null;\n                }\n            }\n            else {\n                return null;\n            }\n        }\n        return this.registry[backendName];\n    }\n    findBackendFactory(backendName) {\n        if (!(backendName in this.registryFactory)) {\n            return null;\n        }\n        return this.registryFactory[backendName].factory;\n    }\n    registerBackend(backendName, factory, priority = 1) {\n        if (backendName in this.registryFactory) {\n            log.warn(`${backendName} backend was already registered. ` +\n                `Reusing existing backend factory.`);\n            return false;\n        }\n        this.registryFactory[backendName] = { factory, priority };\n        return true;\n    }\n    async setBackend(backendName) {\n        if (this.registryFactory[backendName] == null) {\n            throw new Error(`Backend name '${backendName}' not found in registry`);\n        }\n        this.backendName = backendName;\n        if (this.registry[backendName] == null) {\n            this.backendInstance = null;\n            const { success, asyncInit } = this.initializeBackend(backendName);\n            const result = asyncInit ? await success : success;\n            if (!result) {\n                return false;\n            }\n        }\n        this.backendInstance = this.registry[backendName];\n        this.setupRegisteredKernels();\n        // Reset the profiler.\n        this.profiler = new Profiler(this.backendInstance);\n        return true;\n    }\n    setupRegisteredKernels() {\n        const kernels = getKernelsForBackend(this.backendName);\n        kernels.forEach(kernel => {\n            if (kernel.setupFunc != null) {\n                kernel.setupFunc(this.backendInstance);\n            }\n        });\n    }\n    disposeRegisteredKernels(backendName) {\n        const kernels = getKernelsForBackend(backendName);\n        kernels.forEach(kernel => {\n            if (kernel.disposeFunc != null) {\n                kernel.disposeFunc(this.registry[backendName]);\n            }\n        });\n    }\n    /**\n     * Initializes a backend by looking up the backend name in the factory\n     * registry and calling the factory method. Returns a boolean representing\n     * whether the initialization of the backend suceeded. Throws an error if\n     * there is no backend in the factory registry.\n     */\n    initializeBackend(backendName) {\n        const registryFactoryEntry = this.registryFactory[backendName];\n        if (registryFactoryEntry == null) {\n            throw new Error(`Cannot initialize backend ${backendName}, no registration found.`);\n        }\n        try {\n            const backend = registryFactoryEntry.factory();\n            /* Test if the factory returns a promise.\n            Done in a more liberal way than\n            previous 'Promise.resolve(backend)===backend'\n            as we needed to account for custom Promise\n            implementations (e.g. Angular) */\n            if (backend && !(backend instanceof KernelBackend) &&\n                typeof backend.then === 'function') {\n                const promiseId = ++this.pendingBackendInitId;\n                const success = backend\n                    .then(backendInstance => {\n                    // Outdated promise. Another backend was set in the meantime.\n                    if (promiseId < this.pendingBackendInitId) {\n                        return false;\n                    }\n                    this.registry[backendName] = backendInstance;\n                    this.pendingBackendInit = null;\n                    return true;\n                })\n                    .catch(err => {\n                    // Outdated promise. Another backend was set in the meantime.\n                    if (promiseId < this.pendingBackendInitId) {\n                        return false;\n                    }\n                    this.pendingBackendInit = null;\n                    log.warn(`Initialization of backend ${backendName} failed`);\n                    log.warn(err.stack || err.message);\n                    return false;\n                });\n                this.pendingBackendInit = success;\n                return { success, asyncInit: true };\n            }\n            else {\n                this.registry[backendName] = backend;\n                return { success: true, asyncInit: false };\n            }\n        }\n        catch (err) {\n            log.warn(`Initialization of backend ${backendName} failed`);\n            log.warn(err.stack || err.message);\n            return { success: false, asyncInit: false };\n        }\n    }\n    removeBackend(backendName) {\n        if (!(backendName in this.registryFactory)) {\n            throw new Error(`${backendName} backend not found in registry`);\n        }\n        if (this.backendName === backendName && this.pendingBackendInit != null) {\n            // There is a pending promise of the backend we want to remove. Make it\n            // obsolete.\n            this.pendingBackendInitId++;\n        }\n        if (backendName in this.registry) {\n            this.disposeRegisteredKernels(backendName);\n            this.registry[backendName].dispose();\n            delete this.registry[backendName];\n        }\n        delete this.registryFactory[backendName];\n        // Unset the backend if it is active.\n        if (this.backendName === backendName) {\n            this.pendingBackendInit = null;\n            this.backendName = null;\n            this.backendInstance = null;\n        }\n    }\n    getSortedBackends() {\n        if (Object.keys(this.registryFactory).length === 0) {\n            throw new Error('No backend found in registry.');\n        }\n        return Object.keys(this.registryFactory).sort((a, b) => {\n            // Highest priority comes first.\n            return this.registryFactory[b].priority -\n                this.registryFactory[a].priority;\n        });\n    }\n    initializeBackendsAndReturnBest() {\n        const sortedBackends = this.getSortedBackends();\n        for (let i = 0; i < sortedBackends.length; i++) {\n            const backendName = sortedBackends[i];\n            const { success, asyncInit } = this.initializeBackend(backendName);\n            if (asyncInit || success) {\n                return { name: backendName, asyncInit };\n            }\n        }\n        throw new Error(`Could not initialize any backends, all backend initializations ` +\n            `failed.`);\n    }\n    moveData(backend, dataId) {\n        const info = this.state.tensorInfo.get(dataId);\n        const srcBackend = info.backend;\n        const values = this.readSync(dataId);\n        const refCount = srcBackend.refCount(dataId);\n        // Delete the tensor from the old backend and move it to the new\n        // backend.\n        srcBackend.disposeData(dataId, true);\n        info.backend = backend;\n        backend.move(dataId, values, info.shape, info.dtype, refCount);\n        if (this.shouldCheckForMemLeaks()) {\n            // Track the number of moves during a kernel execution to correctly\n            // detect memory leaks.\n            this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;\n        }\n    }\n    tidy(nameOrFn, fn) {\n        let name = null;\n        if (fn == null) {\n            // Called with only 1 argument.\n            if (typeof nameOrFn !== 'function') {\n                throw new Error('Please provide a function to tidy()');\n            }\n            fn = nameOrFn;\n        }\n        else {\n            // Called with 2 arguments.\n            if (typeof nameOrFn !== 'string' && !(nameOrFn instanceof String)) {\n                throw new Error('When calling with two arguments, the first argument ' +\n                    'to tidy() must be a string');\n            }\n            if (typeof fn !== 'function') {\n                throw new Error('When calling with two arguments, the 2nd argument ' +\n                    'to tidy() must be a function');\n            }\n            name = nameOrFn;\n            // TODO(nsthorat,smilkov): Do operation logging and performance\n            // profiling.\n        }\n        let result;\n        return this.scopedRun(() => this.startScope(name), () => this.endScope(result), () => {\n            result = fn();\n            if (result instanceof Promise) {\n                console.error('Cannot return a Promise inside of tidy.');\n            }\n            return result;\n        });\n    }\n    scopedRun(start, end, f) {\n        start();\n        try {\n            const res = f();\n            end();\n            return res;\n        }\n        catch (ex) {\n            end();\n            throw ex;\n        }\n    }\n    nextTensorId() {\n        return Engine.nextTensorId++;\n    }\n    nextVariableId() {\n        return Engine.nextVariableId++;\n    }\n    /**\n     * This method is called instead of the public-facing tensor.clone() when\n     * saving a tensor for backwards pass. It makes sure to add the clone\n     * operation to the tape regardless of being called inside a kernel\n     * execution.\n     */\n    clone(x) {\n        const y = ENGINE.runKernel(Identity, { x });\n        const inputs = { x };\n        const grad = (dy) => ({\n            x: () => {\n                const dtype = 'float32';\n                const gradInputs = { x: dy };\n                const attrs = { dtype };\n                return ENGINE.runKernel(Cast, gradInputs, \n                // tslint:disable-next-line: no-unnecessary-type-assertion\n                attrs);\n            }\n        });\n        const saved = [];\n        this.addTapeNode(this.state.activeScope.name, inputs, [y], grad, saved, {});\n        return y;\n    }\n    /**\n     * Execute a kernel with the given name and return the output tensor.\n     *\n     * @param kernelName The name of the kernel to execute.\n     * @param inputs A map of input names to tensors.\n     * @param attrs A map of attribute names to their values. An attribute is a\n     *     primitive (non-tensor) input to the kernel.\n     * @param inputsToSave A list of tensors, inputs to save for the backprop\n     *     computation.\n     * @param outputsToSave A list of booleans, specifying which output to save\n     *     for the backprop computation. These are booleans since the output\n     * tensors are not visible to the user.\n     */\n    runKernel(kernelName, inputs, attrs) {\n        if (this.backendName == null) {\n            // backend has not been initialized yet (backend initialization is lazy\n            // can be deferred until an op/ kernel is run).\n            // The below getter has side effects that will try to initialize the\n            // backend and set properties like this.backendName\n            // tslint:disable-next-line: no-unused-expression\n            this.backend;\n        }\n        const hasKernel = getKernel(kernelName, this.backendName) != null;\n        if (!hasKernel) {\n            throw new Error(`Kernel '${kernelName}' not registered for backend '${this.backendName}'`);\n        }\n        return this.runKernelFunc({ kernelName, inputs, attrs });\n    }\n    shouldCheckForMemLeaks() {\n        return this.ENV.getBool('IS_TEST');\n    }\n    checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos) {\n        const numDataIdsAfter = this.backend.numDataIds();\n        // Count the number of data ids associated with the result of the kernel.\n        let numOutputDataIds = 0;\n        outInfos.forEach(info => {\n            // Complex numbers allocate 3 data ids, one for 'real', one for\n            // 'imaginary', and one for the container that holds the former two.\n            numOutputDataIds += (info.dtype === 'complex64' ? 3 : 1);\n        });\n        // Account for the number of moves during kernel execution. A \"data move\"\n        // can happen in the middle of a kernel execution, placing a new (key,value)\n        // pair in the data storage. Since data moves have net zero effect (we\n        // always remove the data from the old backend), we have to cancel them out\n        // when detecting memory leaks.\n        const numMoves = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1];\n        const dataIdsLeaked = numDataIdsAfter - numDataIdsBefore - numOutputDataIds - numMoves;\n        if (dataIdsLeaked > 0) {\n            throw new Error(`Backend '${this.backendName}' has an internal memory leak ` +\n                `(${dataIdsLeaked} data ids) after running '${kernelName}'`);\n        }\n    }\n    /**\n     * Internal helper method to execute a kernel Func\n     *\n     * Use `runKernel` to execute kernels from outside of engine.\n     */\n    runKernelFunc(kernelParams) {\n        let outputs;\n        let saved = [];\n        const isTapeOn = this.isTapeOn();\n        const startingBytecount = this.state.numBytes;\n        const startingNumTensors = this.state.numTensors;\n        if (this.shouldCheckForMemLeaks()) {\n            this.state.numDataMovesStack.push(0);\n        }\n        let kernelFunc;\n        if (this.backendName == null) {\n            // backend has not been initialized yet (backend initialization is lazy\n            // can be deferred until an op/ kernel is run).\n            // The below getter has side effects that will try to initialize the\n            // backend and set properties like this.backendName\n            // tslint:disable-next-line: no-unused-expression\n            this.backend;\n        }\n        let out;\n        const kernelOrScopeName = isRegisteredKernelInvocation(kernelParams) ?\n            kernelParams.kernelName :\n            this.state.activeScope != null ? this.state.activeScope.name : '';\n        // Create the kernelFunc from either a registered kernel OR passed in\n        // forward/backward functions (used by custom grad). In this context a\n        // kernelFunc wraps a kernel implementation with some bookkeeping.\n        if (isRegisteredKernelInvocation(kernelParams)) {\n            const { kernelName, inputs, attrs } = kernelParams;\n            if (this.backendName == null) {\n                // backend has not been initialized yet (backend initialization is lazy\n                // can be deferred until an op/ kernel is run).\n                // The below getter has side effects that will try to initialize the\n                // backend and set properties like this.backendName\n                // tslint:disable-next-line: no-unused-expression\n                this.backend;\n            }\n            const kernel = getKernel(kernelName, this.backendName);\n            util.assert(kernel != null, () => `Cannot find registered kernel '${kernelName}' for backend '${this.backendName}'`);\n            kernelFunc = () => {\n                const numDataIdsBefore = this.backend.numDataIds();\n                out = kernel.kernelFunc({ inputs, attrs, backend: this.backend });\n                const outInfos = Array.isArray(out) ? out : [out];\n                if (this.shouldCheckForMemLeaks()) {\n                    this.checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos);\n                }\n                const outTensors = outInfos.map((outInfo) => {\n                    // todo (yassogba) remove this option (Tensor) when node backend\n                    // methods have been modularized and they all return tensorInfo.\n                    // TensorInfos do not have a rank attribute.\n                    if (outInfo.rank != null) {\n                        return outInfo;\n                    }\n                    return this.makeTensorFromTensorInfo(outInfo);\n                });\n                // Save any required inputs and outputs.\n                // Do not save unless we are recording to the tape. Otherwise it would\n                // cause a mem leak since there would be no backprop for these tensors\n                // (which would otherwise dispose them).\n                if (isTapeOn) {\n                    const tensorsToSave = this.getTensorsForGradient(kernelName, inputs, outTensors);\n                    saved = this.saveTensorsForBackwardMode(tensorsToSave);\n                }\n                return outTensors;\n            };\n        }\n        else {\n            const { forwardFunc } = kernelParams;\n            // Running a customGrad op.\n            const saveFunc = (tensors) => {\n                // Do not save unless we are recording to the tape. Otherwise it would\n                // cause a mem leak since we would never run backprop, which disposes\n                // the kept tensors.\n                if (!isTapeOn) {\n                    return;\n                }\n                saved = tensors.map(tensor => this.keep(this.clone(tensor)));\n            };\n            kernelFunc = () => {\n                const numDataIdsBefore = this.backend.numDataIds();\n                out = this.tidy(() => forwardFunc(this.backend, saveFunc));\n                const outs = (Array.isArray(out) ? out : [out]);\n                if (this.shouldCheckForMemLeaks()) {\n                    // Scope name is used to print a more helpful error message if needed.\n                    this.checkKernelForMemLeak(kernelOrScopeName, numDataIdsBefore, outs);\n                }\n                return outs;\n            };\n        }\n        //\n        // Run the kernelFunc. Optionally profiling it.\n        //\n        const { inputs, attrs } = kernelParams;\n        const backwardsFunc = isRegisteredKernelInvocation(kernelParams) ?\n            null :\n            kernelParams.backwardsFunc;\n        let kernelProfile;\n        this.scopedRun(\n        // Stop recording to a tape when running a kernel.\n        () => this.state.kernelDepth++, () => this.state.kernelDepth--, () => {\n            if (!this.ENV.getBool('DEBUG') && !this.state.profiling) {\n                outputs = kernelFunc();\n            }\n            else {\n                kernelProfile = this.profiler.profileKernel(kernelOrScopeName, inputs, () => kernelFunc());\n                if (this.ENV.getBool('DEBUG')) {\n                    this.profiler.logKernelProfile(kernelProfile);\n                }\n                outputs = kernelProfile.outputs;\n            }\n        });\n        if (isTapeOn) {\n            this.addTapeNode(kernelOrScopeName, inputs, outputs, backwardsFunc, saved, attrs);\n        }\n        if (this.state.profiling) {\n            this.state.activeProfile.kernels.push({\n                name: kernelOrScopeName,\n                bytesAdded: this.state.numBytes - startingBytecount,\n                totalBytesSnapshot: this.state.numBytes,\n                tensorsAdded: this.state.numTensors - startingNumTensors,\n                totalTensorsSnapshot: this.state.numTensors,\n                inputShapes: Object.keys(inputs).map(key => inputs[key] != null ? inputs[key].shape : null),\n                outputShapes: outputs.map(item => item.shape),\n                kernelTimeMs: kernelProfile.timeMs,\n                extraInfo: kernelProfile.extraInfo\n            });\n        }\n        return (Array.isArray(out) ? outputs : outputs[0]);\n    }\n    /**\n     * Saves tensors used in forward mode for use in backward mode.\n     *\n     * @param tensors the list of tensors to save.\n     */\n    saveTensorsForBackwardMode(tensors) {\n        const saved = tensors.map(tensor => this.keep(this.clone(tensor)));\n        return saved;\n    }\n    /**\n     * Returns a list of tensors to save for a given gradient calculation.\n     *\n     * @param kernelName name of kernel to look up gradient for.\n     * @param inputs a map of input tensors.\n     * @param outputs an array of output tensors from forward mode of kernel.\n     */\n    getTensorsForGradient(kernelName, inputs, outputs) {\n        const gradConfig = getGradient(kernelName);\n        if (gradConfig != null) {\n            const inputsToSave = gradConfig.inputsToSave || [];\n            const outputsToSave = gradConfig.outputsToSave || [];\n            // If saveAllInputs is true, all inputs will be saved. Otherwise, inputs\n            // specified in inputsToSave will be saved.\n            let inputTensorsToSave;\n            if (gradConfig.saveAllInputs) {\n                util.assert(Array.isArray(inputs), () => 'saveAllInputs is true, expected inputs to be an array.');\n                inputTensorsToSave = Object.keys(inputs).map((key) => inputs[key]);\n            }\n            else {\n                inputTensorsToSave = inputsToSave.map((inputName) => inputs[inputName]);\n            }\n            const outputTensorsToSave = outputs.filter((_, i) => outputsToSave[i]);\n            return inputTensorsToSave.concat(outputTensorsToSave);\n        }\n        // We return an empty list rather than throw an error because the kernel we\n        // are looking up may not actually be relevant to backproping through the\n        // overall function\n        //\n        // See 'does not error if irrelevant (pruned) ops are missing grads' test\n        // in gradients_test.ts for an example.\n        return [];\n    }\n    /**\n     * Internal method used by public APIs for tensor creation. Makes a new\n     * tensor with the provided shape, dtype and values. It always\n     * creates a new data id and writes the values to the underlying backend.\n     */\n    makeTensor(values, shape, dtype, backend) {\n        if (values == null) {\n            throw new Error('Values passed to engine.makeTensor() are null');\n        }\n        dtype = dtype || 'float32';\n        backend = backend || this.backend;\n        let backendVals = values;\n        if (dtype === 'string' && util.isString(values[0])) {\n            backendVals = values.map(d => util.encodeString(d));\n        }\n        const dataId = backend.write(backendVals, shape, dtype);\n        const t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n        this.trackTensor(t, backend);\n        // Count bytes for string tensors.\n        if (dtype === 'string') {\n            const info = this.state.tensorInfo.get(dataId);\n            const newBytes = bytesFromStringArray(backendVals);\n            this.state.numBytes += newBytes - info.bytes;\n            info.bytes = newBytes;\n        }\n        return t;\n    }\n    /**\n     * Internal method used by backends. Makes a new tensor\n     * that is a wrapper around an existing data id. It doesn't create\n     * a new data id, only increments the ref count used in memory tracking.\n     * @deprecated\n     */\n    makeTensorFromDataId(dataId, shape, dtype, backend) {\n        dtype = dtype || 'float32';\n        const tensorInfo = { dataId, shape, dtype };\n        return this.makeTensorFromTensorInfo(tensorInfo, backend);\n    }\n    /**\n     * Internal method used by backends. Makes a new tensor that is a wrapper\n     * around an existing data id in TensorInfo. It doesn't create a new data id,\n     * only increments the ref count used in memory tracking.\n     */\n    makeTensorFromTensorInfo(tensorInfo, backend) {\n        const { dataId, shape, dtype } = tensorInfo;\n        const t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n        this.trackTensor(t, backend);\n        return t;\n    }\n    makeVariable(initialValue, trainable = true, name, dtype) {\n        name = name || this.nextVariableId().toString();\n        if (dtype != null && dtype !== initialValue.dtype) {\n            initialValue = initialValue.cast(dtype);\n        }\n        const v = new Variable(initialValue, trainable, name, this.nextTensorId());\n        if (this.state.registeredVariables[v.name] != null) {\n            throw new Error(`Variable with name ${v.name} was already registered`);\n        }\n        this.state.registeredVariables[v.name] = v;\n        this.incRef(v, this.backend);\n        return v;\n    }\n    trackTensor(a, backend) {\n        this.state.numTensors++;\n        if (a.dtype === 'string') {\n            this.state.numStringTensors++;\n        }\n        // Bytes for complex numbers are counted by their components. Bytes for\n        // string tensors are counted when writing values.\n        let bytes = 0;\n        if (a.dtype !== 'complex64' && a.dtype !== 'string') {\n            bytes = a.size * util.bytesPerElement(a.dtype);\n        }\n        this.state.numBytes += bytes;\n        if (!this.state.tensorInfo.has(a.dataId)) {\n            this.state.numDataBuffers++;\n            this.state.tensorInfo.set(a.dataId, {\n                backend: backend || this.backend,\n                dtype: a.dtype,\n                shape: a.shape,\n                bytes\n            });\n        }\n        if (!(a instanceof Variable)) {\n            this.track(a);\n        }\n    }\n    // Track the tensor by dataId and increase the refCount for the dataId in the\n    // backend.\n    // TODO(pyu10055): This is currently used by makeVariable method, to increase\n    // refCount on the backend for the dataId. It can potentially be replaced with\n    // Identity op indead of calling backend directly.\n    incRef(a, backend) {\n        this.trackTensor(a, backend);\n        this.backend.incRef(a.dataId);\n    }\n    removeDataId(dataId, backend) {\n        if (this.state.tensorInfo.has(dataId) &&\n            this.state.tensorInfo.get(dataId).backend === backend) {\n            this.state.tensorInfo.delete(dataId);\n            this.state.numDataBuffers--;\n        }\n    }\n    disposeTensor(a) {\n        if (!this.state.tensorInfo.has(a.dataId)) {\n            return;\n        }\n        const info = this.state.tensorInfo.get(a.dataId);\n        this.state.numTensors--;\n        if (a.dtype === 'string') {\n            this.state.numStringTensors--;\n            this.state.numBytes -= info.bytes;\n        }\n        // Don't count bytes for complex numbers as they are counted by their\n        // components.\n        if (a.dtype !== 'complex64' && a.dtype !== 'string') {\n            const bytes = a.size * util.bytesPerElement(a.dtype);\n            this.state.numBytes -= bytes;\n        }\n        // Remove the reference to dataId if backend dispose the data successfully\n        if (info.backend.disposeData(a.dataId)) {\n            this.removeDataId(a.dataId, info.backend);\n        }\n        // TODO(nsthorat): Construct an error and save the stack trace for\n        // debugging when in debug mode. Creating a stack trace is too expensive\n        // to do unconditionally.\n    }\n    disposeVariables() {\n        for (const varName in this.state.registeredVariables) {\n            const v = this.state.registeredVariables[varName];\n            this.disposeVariable(v);\n        }\n    }\n    disposeVariable(v) {\n        this.disposeTensor(v);\n        if (this.state.registeredVariables[v.name] != null) {\n            delete this.state.registeredVariables[v.name];\n        }\n    }\n    memory() {\n        const info = this.backend.memory();\n        info.numTensors = this.state.numTensors;\n        info.numDataBuffers = this.state.numDataBuffers;\n        info.numBytes = this.state.numBytes;\n        if (this.state.numStringTensors > 0) {\n            info.unreliable = true;\n            if (info.reasons == null) {\n                info.reasons = [];\n            }\n            info.reasons.push('Memory usage by string tensors is approximate ' +\n                '(2 bytes per character)');\n        }\n        return info;\n    }\n    async profile(query) {\n        this.state.profiling = true;\n        const startBytes = this.state.numBytes;\n        const startNumTensors = this.state.numTensors;\n        this.state.activeProfile.kernels = [];\n        this.state.activeProfile.result = await query();\n        this.state.profiling = false;\n        this.state.activeProfile.peakBytes = Math.max(...this.state.activeProfile.kernels.map(d => d.totalBytesSnapshot));\n        this.state.activeProfile.newBytes = this.state.numBytes - startBytes;\n        this.state.activeProfile.newTensors =\n            this.state.numTensors - startNumTensors;\n        for (const kernel of this.state.activeProfile.kernels) {\n            kernel.kernelTimeMs = await kernel.kernelTimeMs;\n            kernel.extraInfo = await kernel.extraInfo;\n        }\n        return this.state.activeProfile;\n    }\n    isTapeOn() {\n        return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;\n    }\n    addTapeNode(kernelName, inputs, outputs, gradientsFunc, saved, attrs) {\n        const tapeNode = { id: this.state.nextTapeNodeId++, kernelName, inputs, outputs, saved };\n        const gradConfig = getGradient(kernelName);\n        if (gradConfig != null) {\n            gradientsFunc = gradConfig.gradFunc;\n        }\n        if (gradientsFunc != null) {\n            tapeNode.gradient = (dys) => {\n                // TODO(smilkov): To optimize back-prop, pass dys that are not used in\n                // the backprop graph to the user as null instead of zeros\n                dys = dys.map((dy, i) => {\n                    if (dy == null) {\n                        const output = outputs[i];\n                        const vals = util.makeZerosTypedArray(output.size, output.dtype);\n                        return this.makeTensor(vals, output.shape, output.dtype);\n                    }\n                    return dy;\n                });\n                // Grad functions of ops with single outputs expect a dy, while ops\n                // with multiple outputs expect dys (array of dy).\n                return gradientsFunc(dys.length > 1 ? dys : dys[0], saved, attrs);\n            };\n        }\n        this.state.activeTape.push(tapeNode);\n    }\n    keep(result) {\n        result.kept = true;\n        return result;\n    }\n    startTape() {\n        if (this.state.gradientDepth === 0) {\n            this.state.activeTape = [];\n        }\n        this.state.gradientDepth++;\n    }\n    endTape() {\n        this.state.gradientDepth--;\n    }\n    /**\n     * Start a scope. Use this with endScope() to achieve the same functionality\n     * as scope() without the need for a function closure.\n     */\n    startScope(name) {\n        const scopeInfo = {\n            track: [],\n            name: 'unnamed scope',\n            id: this.state.nextScopeId++\n        };\n        if (name) {\n            scopeInfo.name = name;\n        }\n        this.state.scopeStack.push(scopeInfo);\n        this.state.activeScope = scopeInfo;\n    }\n    /**\n     * End a scope. Use this with startScope() to achieve the same functionality\n     * as scope() without the need for a function closure.\n     */\n    endScope(result) {\n        const tensorsToTrackInParent = getTensorsInContainer(result);\n        const tensorsToTrackInParentSet = new Set(tensorsToTrackInParent.map(t => t.id));\n        // Dispose the arrays tracked in this scope.\n        for (let i = 0; i < this.state.activeScope.track.length; i++) {\n            const tensor = this.state.activeScope.track[i];\n            if (!tensor.kept && !tensorsToTrackInParentSet.has(tensor.id)) {\n                tensor.dispose();\n            }\n        }\n        const oldScope = this.state.scopeStack.pop();\n        this.state.activeScope = this.state.scopeStack.length === 0 ?\n            null :\n            this.state.scopeStack[this.state.scopeStack.length - 1];\n        // Track the current result in the parent scope.\n        tensorsToTrackInParent.forEach(tensor => {\n            // Only track the tensor if was allocated in the inner scope and is not\n            // globally kept.\n            if (!tensor.kept && tensor.scopeId === oldScope.id) {\n                this.track(tensor);\n            }\n        });\n    }\n    /**\n     * Returns gradients of `f` with respect to each of the `xs`. The gradients\n     * returned are of the same length as `xs`, but some might be null if `f`\n     * was not a function of that `x`. It also takes optional dy to multiply the\n     * gradient, which defaults to `1`.\n     */\n    gradients(f, xs, dy, allowNoGradients = false) {\n        util.assert(xs.length > 0, () => 'gradients() received an empty list of xs.');\n        if (dy != null && dy.dtype !== 'float32') {\n            throw new Error(`dy must have 'float32' dtype, but has '${dy.dtype}'`);\n        }\n        const y = this.scopedRun(() => this.startTape(), () => this.endTape(), () => this.tidy('forward', f));\n        util.assert(y instanceof Tensor, () => 'The result y returned by f() must be a tensor.');\n        // Filter out the nodes that don't connect x => y.\n        const filteredTape = getFilteredNodesXToY(this.state.activeTape, xs, y);\n        if (!allowNoGradients && filteredTape.length === 0 && xs.length > 0) {\n            throw new Error('Cannot compute gradient of y=f(x) with respect to x. Make sure ' +\n                'that the f you passed encloses all operations that lead from x ' +\n                'to y.');\n        }\n        return this.tidy('backward', () => {\n            const accumulatedGradientMap = {};\n            accumulatedGradientMap[y.id] = (dy == null) ? ones(y.shape) : dy;\n            // Backprop gradients through the filtered nodes.\n            backpropagateGradients(accumulatedGradientMap, filteredTape, \n            // Pass the tidy function to avoid circular dep with `tape.ts`.\n            f => this.tidy(f), \n            // Pass an add function to avoide a circular dep with `tape.ts`.\n            add);\n            const grads = xs.map(x => accumulatedGradientMap[x.id]);\n            if (this.state.gradientDepth === 0) {\n                // This means that we are not computing higher-order gradients\n                // and can clean up the tape.\n                this.state.activeTape.forEach(node => {\n                    for (const tensor of node.saved) {\n                        tensor.dispose();\n                    }\n                });\n                this.state.activeTape = null;\n            }\n            return { value: y, grads };\n        });\n    }\n    customGrad(f) {\n        util.assert(util.isFunction(f), () => 'The f passed in customGrad(f) must be a function.');\n        return (...inputs) => {\n            util.assert(inputs.every(t => t instanceof Tensor), () => 'The args passed in customGrad(f)(x1, x2,...) must all be ' +\n                'tensors');\n            let res;\n            const inputMap = {};\n            inputs.forEach((input, i) => {\n                inputMap[i] = input;\n            });\n            const forwardFunc = (_, save) => {\n                res = f(...[...inputs, save]);\n                util.assert(res.value instanceof Tensor, () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.value` is a tensor');\n                util.assert(util.isFunction(res.gradFunc), () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.gradFunc` is a function.');\n                return res.value;\n            };\n            const backwardsFunc = (dy, saved) => {\n                const gradRes = res.gradFunc(dy, saved);\n                const grads = Array.isArray(gradRes) ? gradRes : [gradRes];\n                util.assert(grads.length === inputs.length, () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.gradFunc` is a function that returns ' +\n                    'the same number of tensors as inputs passed to f(...).');\n                util.assert(grads.every(t => t instanceof Tensor), () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.gradFunc` is a function that returns ' +\n                    'a list of only tensors.');\n                const gradMap = {};\n                grads.forEach((grad, i) => {\n                    gradMap[i] = () => grad;\n                });\n                return gradMap;\n            };\n            return this.runKernelFunc({\n                forwardFunc,\n                backwardsFunc,\n                inputs: inputMap,\n            });\n        };\n    }\n    readSync(dataId) {\n        // Route the read to the correct backend.\n        const info = this.state.tensorInfo.get(dataId);\n        return info.backend.readSync(dataId);\n    }\n    read(dataId) {\n        // Route the read to the correct backend.\n        const info = this.state.tensorInfo.get(dataId);\n        return info.backend.read(dataId);\n    }\n    readToGPU(dataId, options) {\n        // Route the read to the correct backend.\n        const info = this.state.tensorInfo.get(dataId);\n        return info.backend.readToGPU(dataId, options);\n    }\n    async time(query) {\n        const start = now();\n        const timingInfo = await this.backend.time(query);\n        timingInfo.wallMs = now() - start;\n        return timingInfo;\n    }\n    /**\n     * Tracks a Tensor in the current scope to be automatically cleaned up\n     * when the current scope ends, and returns the value.\n     *\n     * @param result The Tensor to track in the current scope.\n     */\n    track(result) {\n        if (this.state.activeScope != null) {\n            result.scopeId = this.state.activeScope.id;\n            this.state.activeScope.track.push(result);\n        }\n        return result;\n    }\n    get registeredVariables() {\n        return this.state.registeredVariables;\n    }\n    /**\n     * Resets the engine state. Removes all backends but does not remove\n     * registered backend factories.\n     */\n    reset() {\n        // Make any pending promise obsolete.\n        this.pendingBackendInitId++;\n        this.state.dispose();\n        this.ENV.reset();\n        this.state = new EngineState();\n        for (const backendName in this.registry) {\n            this.disposeRegisteredKernels(backendName);\n            this.registry[backendName].dispose();\n            delete this.registry[backendName];\n        }\n        this.backendName = null;\n        this.backendInstance = null;\n        this.pendingBackendInit = null;\n    }\n}\nEngine.nextTensorId = 0;\nEngine.nextVariableId = 0;\nfunction ones(shape) {\n    const values = makeOnesTypedArray(sizeFromShape(shape), 'float32');\n    return ENGINE.makeTensor(values, shape, 'float32');\n}\nexport function getOrMakeEngine() {\n    const ns = getGlobalNamespace();\n    if (ns._tfengine == null) {\n        const environment = new Environment(ns);\n        ns._tfengine = new Engine(environment);\n    }\n    setEnvironmentGlobal(ns._tfengine.ENV);\n    // Tell the current tensor interface that the global engine is responsible\n    // for tracking.\n    setTensorTracker(() => ns._tfengine);\n    return ns._tfengine;\n}\nexport const ENGINE = getOrMakeEngine();\n/**\n * A implementation of the add op for use within engine and tape.\n *\n * This allows us to avoid a circular dependency between add.ts and engine.\n * It is exported to be available in tape tests.\n */\nexport function add(a, b) {\n    // We duplicate Add here to avoid a circular dependency with add.ts.\n    const inputs = { a, b };\n    return ENGINE.runKernel(Add, inputs);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}