{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\n\nclass StringNGramsOp {\n  constructor(separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {\n    this.separator = util.encodeString(separator);\n    this.nGramWidths = nGramWidths;\n    this.leftPad = util.encodeString(leftPad);\n    this.rightPad = util.encodeString(rightPad);\n    this.padWidth = padWidth;\n    this.preserveShort = preserveShortSequences;\n  }\n\n  getPadWidth(nGramWidth) {\n    // Ngrams can be padded with either a fixed pad width or a dynamic pad\n    // width depending on the 'padWidth' arg, but in no case should the padding\n    // ever be wider than 'nGramWidth' - 1.\n    return Math.min(this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n  }\n\n  getNumNGrams(length, nGramWidth) {\n    const padWidth = this.getPadWidth(nGramWidth);\n    return Math.max(0, length + 2 * padWidth - nGramWidth + 1);\n  }\n\n  createNGrams(data, splitIndex, output, outputStartIndex, numNGrams, nGramWidth) {\n    for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n      const padWidth = this.getPadWidth(nGramWidth);\n      const leftPadding = Math.max(0, padWidth - nGramIndex);\n      const rightPadding = Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n      const numTokens = nGramWidth - (leftPadding + rightPadding);\n      const dataStartIndex = splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth); // Calculate the total expected size of the nGram so we can reserve the\n      // correct amount of space in the string.\n\n      let nGramSize = 0; // Size of the left padding.\n\n      nGramSize += leftPadding * this.leftPad.length; // Size of the tokens.\n\n      for (let n = 0; n < numTokens; ++n) {\n        nGramSize += data[dataStartIndex + n].length;\n      } // Size of the right padding.\n\n\n      nGramSize += rightPadding * this.rightPad.length; // Size of the separators.\n\n      const numSeparators = leftPadding + rightPadding + numTokens - 1;\n      nGramSize += numSeparators * this.separator.length; // Build the nGram.\n\n      output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n      const nGram = output[outputStartIndex + nGramIndex];\n      let nextNGramIndex = 0;\n\n      const appendToNGram = str => str.forEach(value => nGram[nextNGramIndex++] = value);\n\n      for (let n = 0; n < leftPadding; ++n) {\n        appendToNGram(this.leftPad);\n        appendToNGram(this.separator);\n      } // Only output first numTokens - 1 pairs of data and separator\n\n\n      for (let n = 0; n < numTokens - 1; ++n) {\n        appendToNGram(data[dataStartIndex + n]);\n        appendToNGram(this.separator);\n      } // Handle case when there are no tokens or no right padding as these\n      // can result in consecutive separators.\n\n\n      if (numTokens > 0) {\n        // If we have tokens, then output last and then pair each separator\n        // with the right padding that follows, to ensure nGram ends either with\n        // the token or with the right pad.\n        appendToNGram(data[dataStartIndex + numTokens - 1]);\n\n        for (let n = 0; n < rightPadding; ++n) {\n          appendToNGram(this.separator);\n          appendToNGram(this.rightPad);\n        }\n      } else {\n        // If we don't have tokens, then the last item inserted into the nGram\n        // has been the separator from the left padding loop above. Hence,\n        // output right pad and separator and make sure to finish with a\n        // padding, not a separator.\n        for (let n = 0; n < rightPadding - 1; ++n) {\n          appendToNGram(this.rightPad);\n          appendToNGram(this.separator);\n        }\n\n        appendToNGram(this.rightPad);\n      }\n    }\n  } // Data and splits together form the definition of the ragged tensor,\n  // where data is 1 dimensional and contains the values of the tensor\n  // and splits denotes the indices at which each row starts.\n\n\n  compute(data, splits) {\n    // Validate that the splits are valid indices into data, only if there are\n    // splits specified.\n    const inputDataSize = data.length;\n    const splitsSize = splits.length;\n\n    if (splitsSize > 0) {\n      let prevSplit = splits[0];\n\n      if (prevSplit !== 0) {\n        throw new Error(`First split value must be 0, got ${prevSplit}`);\n      }\n\n      for (let i = 1; i < splitsSize; ++i) {\n        let validSplits = splits[i] >= prevSplit;\n        validSplits = validSplits && splits[i] <= inputDataSize;\n\n        if (!validSplits) {\n          throw new Error(`Invalid split value ${splits[i]}, must be in [${prevSplit}, ${inputDataSize}]`);\n        }\n\n        prevSplit = splits[i];\n      }\n\n      if (prevSplit !== inputDataSize) {\n        throw new Error(`Last split value must be data size. Expected ${inputDataSize}, got ${prevSplit}`);\n      }\n    }\n\n    const numBatchItems = splitsSize - 1;\n    const nGramsSplits = util.getArrayFromDType('int32', splitsSize); // If there is no data or size, return an empty ragged tensor.\n\n    if (inputDataSize === 0 || splitsSize === 0) {\n      const empty = new Array(inputDataSize);\n\n      for (let i = 0; i <= numBatchItems; ++i) {\n        nGramsSplits[i] = 0;\n      }\n\n      return [empty, nGramsSplits];\n    }\n\n    nGramsSplits[0] = 0;\n\n    for (let i = 1; i <= numBatchItems; ++i) {\n      const length = splits[i] - splits[i - 1];\n      let numNGrams = 0;\n      this.nGramWidths.forEach(nGramWidth => {\n        numNGrams += this.getNumNGrams(length, nGramWidth);\n      });\n\n      if (this.preserveShort && length > 0 && numNGrams === 0) {\n        numNGrams = 1;\n      }\n\n      nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n    }\n\n    const nGrams = new Array(nGramsSplits[numBatchItems]);\n\n    for (let i = 0; i < numBatchItems; ++i) {\n      const splitIndex = splits[i];\n      let outputStartIdx = nGramsSplits[i];\n      this.nGramWidths.forEach(nGramWidth => {\n        const length = splits[i + 1] - splits[i];\n        const numNGrams = this.getNumNGrams(length, nGramWidth);\n        this.createNGrams(data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n        outputStartIdx += numNGrams;\n      }); // If we're preserving short sequences, check to see if no sequence was\n      // generated by comparing the current output start idx to the original\n      // one (nGramSplitsdata). If no ngrams were generated, then they will\n      // be equal (since we increment outputStartIdx by numNGrams every\n      // time we create a set of ngrams.)\n\n      if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n        const dataLength = splits[i + 1] - splits[i]; // One legitimate reason to not have any ngrams when this.preserveShort\n        // is true is if the sequence itself is empty. In that case, move on.\n\n        if (dataLength === 0) {\n          continue;\n        } // We don't have to worry about dynamic padding sizes here: if padding\n        // was dynamic, every sequence would have had sufficient padding to\n        // generate at least one nGram.\n\n\n        const nGramWidth = dataLength + 2 * this.padWidth;\n        const numNGrams = 1;\n        this.createNGrams(data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n      }\n    }\n\n    return [nGrams, nGramsSplits];\n  }\n\n}\n\nexport function stringNGramsImpl(data, dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {\n  return new StringNGramsOp(separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences).compute(data, dataSplits);\n}","map":{"version":3,"names":["util","StringNGramsOp","constructor","separator","nGramWidths","leftPad","rightPad","padWidth","preserveShortSequences","encodeString","preserveShort","getPadWidth","nGramWidth","Math","min","getNumNGrams","length","max","createNGrams","data","splitIndex","output","outputStartIndex","numNGrams","nGramIndex","leftPadding","rightPadding","numTokens","dataStartIndex","nGramSize","n","numSeparators","Uint8Array","nGram","nextNGramIndex","appendToNGram","str","forEach","value","compute","splits","inputDataSize","splitsSize","prevSplit","Error","i","validSplits","numBatchItems","nGramsSplits","getArrayFromDType","empty","Array","nGrams","outputStartIdx","dataLength","stringNGramsImpl","dataSplits"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StringNGrams_impl.js"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\nclass StringNGramsOp {\n    constructor(separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {\n        this.separator = util.encodeString(separator);\n        this.nGramWidths = nGramWidths;\n        this.leftPad = util.encodeString(leftPad);\n        this.rightPad = util.encodeString(rightPad);\n        this.padWidth = padWidth;\n        this.preserveShort = preserveShortSequences;\n    }\n    getPadWidth(nGramWidth) {\n        // Ngrams can be padded with either a fixed pad width or a dynamic pad\n        // width depending on the 'padWidth' arg, but in no case should the padding\n        // ever be wider than 'nGramWidth' - 1.\n        return Math.min(this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n    }\n    getNumNGrams(length, nGramWidth) {\n        const padWidth = this.getPadWidth(nGramWidth);\n        return Math.max(0, ((length + 2 * padWidth) - nGramWidth) + 1);\n    }\n    createNGrams(data, splitIndex, output, outputStartIndex, numNGrams, nGramWidth) {\n        for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n            const padWidth = this.getPadWidth(nGramWidth);\n            const leftPadding = Math.max(0, padWidth - nGramIndex);\n            const rightPadding = Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n            const numTokens = nGramWidth - (leftPadding + rightPadding);\n            const dataStartIndex = splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n            // Calculate the total expected size of the nGram so we can reserve the\n            // correct amount of space in the string.\n            let nGramSize = 0;\n            // Size of the left padding.\n            nGramSize += leftPadding * this.leftPad.length;\n            // Size of the tokens.\n            for (let n = 0; n < numTokens; ++n) {\n                nGramSize += data[dataStartIndex + n].length;\n            }\n            // Size of the right padding.\n            nGramSize += rightPadding * this.rightPad.length;\n            // Size of the separators.\n            const numSeparators = leftPadding + rightPadding + numTokens - 1;\n            nGramSize += numSeparators * this.separator.length;\n            // Build the nGram.\n            output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n            const nGram = output[outputStartIndex + nGramIndex];\n            let nextNGramIndex = 0;\n            const appendToNGram = (str) => str.forEach((value) => nGram[nextNGramIndex++] = value);\n            for (let n = 0; n < leftPadding; ++n) {\n                appendToNGram(this.leftPad);\n                appendToNGram(this.separator);\n            }\n            // Only output first numTokens - 1 pairs of data and separator\n            for (let n = 0; n < numTokens - 1; ++n) {\n                appendToNGram(data[dataStartIndex + n]);\n                appendToNGram(this.separator);\n            }\n            // Handle case when there are no tokens or no right padding as these\n            // can result in consecutive separators.\n            if (numTokens > 0) {\n                // If we have tokens, then output last and then pair each separator\n                // with the right padding that follows, to ensure nGram ends either with\n                // the token or with the right pad.\n                appendToNGram(data[dataStartIndex + numTokens - 1]);\n                for (let n = 0; n < rightPadding; ++n) {\n                    appendToNGram(this.separator);\n                    appendToNGram(this.rightPad);\n                }\n            }\n            else {\n                // If we don't have tokens, then the last item inserted into the nGram\n                // has been the separator from the left padding loop above. Hence,\n                // output right pad and separator and make sure to finish with a\n                // padding, not a separator.\n                for (let n = 0; n < rightPadding - 1; ++n) {\n                    appendToNGram(this.rightPad);\n                    appendToNGram(this.separator);\n                }\n                appendToNGram(this.rightPad);\n            }\n        }\n    }\n    // Data and splits together form the definition of the ragged tensor,\n    // where data is 1 dimensional and contains the values of the tensor\n    // and splits denotes the indices at which each row starts.\n    compute(data, splits) {\n        // Validate that the splits are valid indices into data, only if there are\n        // splits specified.\n        const inputDataSize = data.length;\n        const splitsSize = splits.length;\n        if (splitsSize > 0) {\n            let prevSplit = splits[0];\n            if (prevSplit !== 0) {\n                throw new Error(`First split value must be 0, got ${prevSplit}`);\n            }\n            for (let i = 1; i < splitsSize; ++i) {\n                let validSplits = splits[i] >= prevSplit;\n                validSplits = validSplits && (splits[i] <= inputDataSize);\n                if (!validSplits) {\n                    throw new Error(`Invalid split value ${splits[i]}, must be in [${prevSplit}, ${inputDataSize}]`);\n                }\n                prevSplit = splits[i];\n            }\n            if (prevSplit !== inputDataSize) {\n                throw new Error(`Last split value must be data size. Expected ${inputDataSize}, got ${prevSplit}`);\n            }\n        }\n        const numBatchItems = splitsSize - 1;\n        const nGramsSplits = util.getArrayFromDType('int32', splitsSize);\n        // If there is no data or size, return an empty ragged tensor.\n        if (inputDataSize === 0 || splitsSize === 0) {\n            const empty = new Array(inputDataSize);\n            for (let i = 0; i <= numBatchItems; ++i) {\n                nGramsSplits[i] = 0;\n            }\n            return [empty, nGramsSplits];\n        }\n        nGramsSplits[0] = 0;\n        for (let i = 1; i <= numBatchItems; ++i) {\n            const length = splits[i] - splits[i - 1];\n            let numNGrams = 0;\n            this.nGramWidths.forEach((nGramWidth) => {\n                numNGrams += this.getNumNGrams(length, nGramWidth);\n            });\n            if (this.preserveShort && length > 0 && numNGrams === 0) {\n                numNGrams = 1;\n            }\n            nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n        }\n        const nGrams = new Array(nGramsSplits[numBatchItems]);\n        for (let i = 0; i < numBatchItems; ++i) {\n            const splitIndex = splits[i];\n            let outputStartIdx = nGramsSplits[i];\n            this.nGramWidths.forEach((nGramWidth) => {\n                const length = splits[i + 1] - splits[i];\n                const numNGrams = this.getNumNGrams(length, nGramWidth);\n                this.createNGrams(data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n                outputStartIdx += numNGrams;\n            });\n            // If we're preserving short sequences, check to see if no sequence was\n            // generated by comparing the current output start idx to the original\n            // one (nGramSplitsdata). If no ngrams were generated, then they will\n            // be equal (since we increment outputStartIdx by numNGrams every\n            // time we create a set of ngrams.)\n            if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n                const dataLength = splits[i + 1] - splits[i];\n                // One legitimate reason to not have any ngrams when this.preserveShort\n                // is true is if the sequence itself is empty. In that case, move on.\n                if (dataLength === 0) {\n                    continue;\n                }\n                // We don't have to worry about dynamic padding sizes here: if padding\n                // was dynamic, every sequence would have had sufficient padding to\n                // generate at least one nGram.\n                const nGramWidth = dataLength + 2 * this.padWidth;\n                const numNGrams = 1;\n                this.createNGrams(data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n            }\n        }\n        return [nGrams, nGramsSplits];\n    }\n}\nexport function stringNGramsImpl(data, dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {\n    return new StringNGramsOp(separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences)\n        .compute(data, dataSplits);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}