{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport class BatchNormPackedProgram {\n  constructor(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n    let offsetSnippet = 'vec4(0.0)';\n\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = 'vec4(1.0)';\n\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        vec4 offset = ${offsetSnippet};\n        vec4 scale = ${scaleSnippet};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${varianceEpsilon}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `;\n  }\n\n}","map":{"version":3,"names":["backend_util","BatchNormPackedProgram","constructor","xShape","meanShape","varianceShape","offsetShape","scaleShape","varianceEpsilon","packedInputs","packedOutput","variableNames","assertAndGetBroadcastShape","offsetSnippet","push","scaleSnippet","outputShape","userCode"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/batchnorm_packed_gpu.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport class BatchNormPackedProgram {\n    constructor(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.variableNames = ['x', 'mean', 'variance'];\n        backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n        backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n        let offsetSnippet = 'vec4(0.0)';\n        if (offsetShape != null) {\n            backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n            this.variableNames.push('offset');\n            offsetSnippet = 'getOffsetAtOutCoords()';\n        }\n        let scaleSnippet = 'vec4(1.0)';\n        if (scaleShape != null) {\n            backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n            this.variableNames.push('scale');\n            scaleSnippet = 'getScaleAtOutCoords()';\n        }\n        this.outputShape = xShape;\n        this.userCode = `\n      void main() {\n        vec4 offset = ${offsetSnippet};\n        vec4 scale = ${scaleSnippet};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${varianceEpsilon}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,QAA6B,uBAA7B;AACA,OAAO,MAAMC,sBAAN,CAA6B;EAChCC,WAAW,CAACC,MAAD,EAASC,SAAT,EAAoBC,aAApB,EAAmCC,WAAnC,EAAgDC,UAAhD,EAA4DC,eAA5D,EAA6E;IACpF,KAAKC,YAAL,GAAoB,IAApB;IACA,KAAKC,YAAL,GAAoB,IAApB;IACA,KAAKC,aAAL,GAAqB,CAAC,GAAD,EAAM,MAAN,EAAc,UAAd,CAArB;IACAX,YAAY,CAACY,0BAAb,CAAwCT,MAAxC,EAAgDC,SAAhD;IACAJ,YAAY,CAACY,0BAAb,CAAwCT,MAAxC,EAAgDE,aAAhD;IACA,IAAIQ,aAAa,GAAG,WAApB;;IACA,IAAIP,WAAW,IAAI,IAAnB,EAAyB;MACrBN,YAAY,CAACY,0BAAb,CAAwCT,MAAxC,EAAgDG,WAAhD;MACA,KAAKK,aAAL,CAAmBG,IAAnB,CAAwB,QAAxB;MACAD,aAAa,GAAG,wBAAhB;IACH;;IACD,IAAIE,YAAY,GAAG,WAAnB;;IACA,IAAIR,UAAU,IAAI,IAAlB,EAAwB;MACpBP,YAAY,CAACY,0BAAb,CAAwCT,MAAxC,EAAgDI,UAAhD;MACA,KAAKI,aAAL,CAAmBG,IAAnB,CAAwB,OAAxB;MACAC,YAAY,GAAG,uBAAf;IACH;;IACD,KAAKC,WAAL,GAAmBb,MAAnB;IACA,KAAKc,QAAL,GAAiB;AACzB;AACA,wBAAwBJ,aAAc;AACtC,uBAAuBE,YAAa;AACpC;AACA;AACA;AACA;AACA;AACA,yDAAyDP,eAAgB;AACzE;AACA;AACA;AACA,KAbQ;EAcH;;AAlC+B"},"metadata":{},"sourceType":"module"}