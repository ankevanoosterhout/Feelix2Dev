{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { LRN } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Normalizes the activation of a local neighborhood across or within\n * channels.\n *\n * @param x The input tensor. The 4-D input tensor is treated as a 3-D array\n *     of 1D vectors (along the last dimension), and each vector is\n *     normalized independently.\n * @param depthRadius The number of adjacent channels in the 1D normalization\n *     window.\n * @param bias A constant bias term for the basis.\n * @param alpha A scale factor, usually positive.\n * @param beta An exponent.\n *\n * @doc {heading: 'Operations', subheading: 'Normalization'}\n */\n\nfunction localResponseNormalization_(x, depthRadius = 5, bias = 1, alpha = 1, beta = 0.5) {\n  const $x = convertToTensor(x, 'x', 'localResponseNormalization');\n  util.assert($x.rank === 4 || $x.rank === 3, () => `Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${$x.rank}.`);\n  util.assert(util.isInt(depthRadius), () => `Error in localResponseNormalization: depthRadius must be an ` + `integer but got depthRadius ${depthRadius}.`);\n  let x4D = $x;\n  let reshapedTo4D = false;\n\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n\n  const inputs = {\n    x: x4D\n  };\n  const attrs = {\n    depthRadius,\n    bias,\n    alpha,\n    beta\n  }; // tslint:disable-next-line: no-unnecessary-type-assertion\n\n  const res = ENGINE.runKernel(LRN, inputs, attrs);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  } else {\n    return res;\n  }\n}\n\nexport const localResponseNormalization = op({\n  localResponseNormalization_\n});","map":{"version":3,"names":["ENGINE","LRN","convertToTensor","util","op","reshape","localResponseNormalization_","x","depthRadius","bias","alpha","beta","$x","assert","rank","isInt","x4D","reshapedTo4D","shape","inputs","attrs","res","runKernel","localResponseNormalization"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/local_response_normalization.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { LRN } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Normalizes the activation of a local neighborhood across or within\n * channels.\n *\n * @param x The input tensor. The 4-D input tensor is treated as a 3-D array\n *     of 1D vectors (along the last dimension), and each vector is\n *     normalized independently.\n * @param depthRadius The number of adjacent channels in the 1D normalization\n *     window.\n * @param bias A constant bias term for the basis.\n * @param alpha A scale factor, usually positive.\n * @param beta An exponent.\n *\n * @doc {heading: 'Operations', subheading: 'Normalization'}\n */\nfunction localResponseNormalization_(x, depthRadius = 5, bias = 1, alpha = 1, beta = 0.5) {\n    const $x = convertToTensor(x, 'x', 'localResponseNormalization');\n    util.assert($x.rank === 4 || $x.rank === 3, () => `Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${$x.rank}.`);\n    util.assert(util.isInt(depthRadius), () => `Error in localResponseNormalization: depthRadius must be an ` +\n        `integer but got depthRadius ${depthRadius}.`);\n    let x4D = $x;\n    let reshapedTo4D = false;\n    if ($x.rank === 3) {\n        reshapedTo4D = true;\n        x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n    }\n    const inputs = { x: x4D };\n    const attrs = { depthRadius, bias, alpha, beta };\n    // tslint:disable-next-line: no-unnecessary-type-assertion\n    const res = ENGINE.runKernel(LRN, inputs, attrs);\n    if (reshapedTo4D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n    }\n    else {\n        return res;\n    }\n}\nexport const localResponseNormalization = op({ localResponseNormalization_ });\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,WAAvB;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AACA,SAASC,EAAT,QAAmB,aAAnB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,2BAAT,CAAqCC,CAArC,EAAwCC,WAAW,GAAG,CAAtD,EAAyDC,IAAI,GAAG,CAAhE,EAAmEC,KAAK,GAAG,CAA3E,EAA8EC,IAAI,GAAG,GAArF,EAA0F;EACtF,MAAMC,EAAE,GAAGV,eAAe,CAACK,CAAD,EAAI,GAAJ,EAAS,4BAAT,CAA1B;EACAJ,IAAI,CAACU,MAAL,CAAYD,EAAE,CAACE,IAAH,KAAY,CAAZ,IAAiBF,EAAE,CAACE,IAAH,KAAY,CAAzC,EAA4C,MAAO;AACvD,sBAAsBF,EAAE,CAACE,IAAK,GAD1B;EAEAX,IAAI,CAACU,MAAL,CAAYV,IAAI,CAACY,KAAL,CAAWP,WAAX,CAAZ,EAAqC,MAAO,8DAAD,GACtC,+BAA8BA,WAAY,GAD/C;EAEA,IAAIQ,GAAG,GAAGJ,EAAV;EACA,IAAIK,YAAY,GAAG,KAAnB;;EACA,IAAIL,EAAE,CAACE,IAAH,KAAY,CAAhB,EAAmB;IACfG,YAAY,GAAG,IAAf;IACAD,GAAG,GAAGX,OAAO,CAACO,EAAD,EAAK,CAAC,CAAD,EAAIA,EAAE,CAACM,KAAH,CAAS,CAAT,CAAJ,EAAiBN,EAAE,CAACM,KAAH,CAAS,CAAT,CAAjB,EAA8BN,EAAE,CAACM,KAAH,CAAS,CAAT,CAA9B,CAAL,CAAb;EACH;;EACD,MAAMC,MAAM,GAAG;IAAEZ,CAAC,EAAES;EAAL,CAAf;EACA,MAAMI,KAAK,GAAG;IAAEZ,WAAF;IAAeC,IAAf;IAAqBC,KAArB;IAA4BC;EAA5B,CAAd,CAbsF,CActF;;EACA,MAAMU,GAAG,GAAGrB,MAAM,CAACsB,SAAP,CAAiBrB,GAAjB,EAAsBkB,MAAtB,EAA8BC,KAA9B,CAAZ;;EACA,IAAIH,YAAJ,EAAkB;IACd,OAAOZ,OAAO,CAACgB,GAAD,EAAM,CAACA,GAAG,CAACH,KAAJ,CAAU,CAAV,CAAD,EAAeG,GAAG,CAACH,KAAJ,CAAU,CAAV,CAAf,EAA6BG,GAAG,CAACH,KAAJ,CAAU,CAAV,CAA7B,CAAN,CAAd;EACH,CAFD,MAGK;IACD,OAAOG,GAAP;EACH;AACJ;;AACD,OAAO,MAAME,0BAA0B,GAAGnB,EAAE,CAAC;EAAEE;AAAF,CAAD,CAArC"},"metadata":{},"sourceType":"module"}