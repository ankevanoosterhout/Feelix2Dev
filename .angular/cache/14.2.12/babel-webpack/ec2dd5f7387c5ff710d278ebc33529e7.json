{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function maxImpl(aVals, reduceSize, outShape, dtype) {\n  const vals = util.getTypedArrayFromDType(dtype, util.sizeFromShape(outShape));\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n\n      if (Number.isNaN(value) || value > max) {\n        // comparison with NaN always return false\n        max = value;\n      }\n    }\n\n    vals[i] = max;\n  }\n\n  return vals;\n}","map":{"version":3,"names":["util","maxImpl","aVals","reduceSize","outShape","dtype","vals","getTypedArrayFromDType","sizeFromShape","i","length","offset","max","j","value","Number","isNaN"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Max_impl.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function maxImpl(aVals, reduceSize, outShape, dtype) {\n    const vals = util.getTypedArrayFromDType(dtype, util.sizeFromShape(outShape));\n    for (let i = 0; i < vals.length; ++i) {\n        const offset = i * reduceSize;\n        let max = aVals[offset];\n        for (let j = 0; j < reduceSize; ++j) {\n            const value = aVals[offset + j];\n            if (Number.isNaN(value) ||\n                value > max) { // comparison with NaN always return false\n                max = value;\n            }\n        }\n        vals[i] = max;\n    }\n    return vals;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,IAAT,QAAqB,uBAArB;AACA,OAAO,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,UAAxB,EAAoCC,QAApC,EAA8CC,KAA9C,EAAqD;EACxD,MAAMC,IAAI,GAAGN,IAAI,CAACO,sBAAL,CAA4BF,KAA5B,EAAmCL,IAAI,CAACQ,aAAL,CAAmBJ,QAAnB,CAAnC,CAAb;;EACA,KAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACI,MAAzB,EAAiC,EAAED,CAAnC,EAAsC;IAClC,MAAME,MAAM,GAAGF,CAAC,GAAGN,UAAnB;IACA,IAAIS,GAAG,GAAGV,KAAK,CAACS,MAAD,CAAf;;IACA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,UAApB,EAAgC,EAAEU,CAAlC,EAAqC;MACjC,MAAMC,KAAK,GAAGZ,KAAK,CAACS,MAAM,GAAGE,CAAV,CAAnB;;MACA,IAAIE,MAAM,CAACC,KAAP,CAAaF,KAAb,KACAA,KAAK,GAAGF,GADZ,EACiB;QAAE;QACfA,GAAG,GAAGE,KAAN;MACH;IACJ;;IACDR,IAAI,CAACG,CAAD,CAAJ,GAAUG,GAAV;EACH;;EACD,OAAON,IAAP;AACH"},"metadata":{},"sourceType":"module"}