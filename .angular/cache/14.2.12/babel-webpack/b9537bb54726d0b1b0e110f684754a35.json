{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SparseReshape } from '@tensorflow/tfjs-core';\nimport { sparseReshapeImpl } from './SparseReshape_impl';\nexport function sparseReshape(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    inputIndices,\n    inputShape,\n    newShape\n  } = inputs;\n\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(`Input indices should be a matrix but received shape\n        ${inputIndices.shape}`);\n  }\n\n  if (inputShape.shape.length !== 1) {\n    throw new Error(`Input shape should be a vector but received shape\n        ${inputShape.shape}`);\n  }\n\n  if (newShape.shape.length !== 1) {\n    throw new Error(`Target shape should be a vector but received shape ${newShape.shape}`);\n  }\n\n  const $inputShape = Array.from(backend.data.get(inputShape.dataId).values);\n  const $inputIndices = backend.data.get(inputIndices.dataId).values;\n  const targetShape = Array.from(backend.data.get(newShape.dataId).values);\n  const [newIndices, indicesShape, outputShape] = sparseReshapeImpl($inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape, targetShape);\n  return [backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices), backend.makeTensorInfo([outputShape.length], newShape.dtype, new Int32Array(outputShape))];\n}\nexport const sparseReshapeConfig = {\n  kernelName: SparseReshape,\n  backendName: 'cpu',\n  kernelFunc: sparseReshape\n};","map":{"version":3,"names":["SparseReshape","sparseReshapeImpl","sparseReshape","args","inputs","backend","inputIndices","inputShape","newShape","shape","length","Error","$inputShape","Array","from","data","get","dataId","values","$inputIndices","targetShape","newIndices","indicesShape","outputShape","dtype","makeTensorInfo","Int32Array","sparseReshapeConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseReshape.js"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SparseReshape } from '@tensorflow/tfjs-core';\nimport { sparseReshapeImpl } from './SparseReshape_impl';\nexport function sparseReshape(args) {\n    const { inputs, backend } = args;\n    const { inputIndices, inputShape, newShape } = inputs;\n    if (inputIndices.shape.length !== 2) {\n        throw new Error(`Input indices should be a matrix but received shape\n        ${inputIndices.shape}`);\n    }\n    if (inputShape.shape.length !== 1) {\n        throw new Error(`Input shape should be a vector but received shape\n        ${inputShape.shape}`);\n    }\n    if (newShape.shape.length !== 1) {\n        throw new Error(`Target shape should be a vector but received shape ${newShape.shape}`);\n    }\n    const $inputShape = Array.from(backend.data.get(inputShape.dataId).values);\n    const $inputIndices = backend.data.get(inputIndices.dataId).values;\n    const targetShape = Array.from(backend.data.get(newShape.dataId).values);\n    const [newIndices, indicesShape, outputShape] = sparseReshapeImpl($inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape, targetShape);\n    return [\n        backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),\n        backend.makeTensorInfo([outputShape.length], newShape.dtype, new Int32Array(outputShape)),\n    ];\n}\nexport const sparseReshapeConfig = {\n    kernelName: SparseReshape,\n    backendName: 'cpu',\n    kernelFunc: sparseReshape,\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,aAAT,QAA8B,uBAA9B;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;EAChC,MAAM;IAAEC,MAAF;IAAUC;EAAV,IAAsBF,IAA5B;EACA,MAAM;IAAEG,YAAF;IAAgBC,UAAhB;IAA4BC;EAA5B,IAAyCJ,MAA/C;;EACA,IAAIE,YAAY,CAACG,KAAb,CAAmBC,MAAnB,KAA8B,CAAlC,EAAqC;IACjC,MAAM,IAAIC,KAAJ,CAAW;AACzB,UAAUL,YAAY,CAACG,KAAM,EADf,CAAN;EAEH;;EACD,IAAIF,UAAU,CAACE,KAAX,CAAiBC,MAAjB,KAA4B,CAAhC,EAAmC;IAC/B,MAAM,IAAIC,KAAJ,CAAW;AACzB,UAAUJ,UAAU,CAACE,KAAM,EADb,CAAN;EAEH;;EACD,IAAID,QAAQ,CAACC,KAAT,CAAeC,MAAf,KAA0B,CAA9B,EAAiC;IAC7B,MAAM,IAAIC,KAAJ,CAAW,sDAAqDH,QAAQ,CAACC,KAAM,EAA/E,CAAN;EACH;;EACD,MAAMG,WAAW,GAAGC,KAAK,CAACC,IAAN,CAAWT,OAAO,CAACU,IAAR,CAAaC,GAAb,CAAiBT,UAAU,CAACU,MAA5B,EAAoCC,MAA/C,CAApB;EACA,MAAMC,aAAa,GAAGd,OAAO,CAACU,IAAR,CAAaC,GAAb,CAAiBV,YAAY,CAACW,MAA9B,EAAsCC,MAA5D;EACA,MAAME,WAAW,GAAGP,KAAK,CAACC,IAAN,CAAWT,OAAO,CAACU,IAAR,CAAaC,GAAb,CAAiBR,QAAQ,CAACS,MAA1B,EAAkCC,MAA7C,CAApB;EACA,MAAM,CAACG,UAAD,EAAaC,YAAb,EAA2BC,WAA3B,IAA0CtB,iBAAiB,CAACkB,aAAD,EAAgBb,YAAY,CAACG,KAA7B,EAAoCH,YAAY,CAACkB,KAAjD,EAAwDZ,WAAxD,EAAqEQ,WAArE,CAAjE;EACA,OAAO,CACHf,OAAO,CAACoB,cAAR,CAAuBH,YAAvB,EAAqChB,YAAY,CAACkB,KAAlD,EAAyDH,UAAzD,CADG,EAEHhB,OAAO,CAACoB,cAAR,CAAuB,CAACF,WAAW,CAACb,MAAb,CAAvB,EAA6CF,QAAQ,CAACgB,KAAtD,EAA6D,IAAIE,UAAJ,CAAeH,WAAf,CAA7D,CAFG,CAAP;AAIH;AACD,OAAO,MAAMI,mBAAmB,GAAG;EAC/BC,UAAU,EAAE5B,aADmB;EAE/B6B,WAAW,EAAE,KAFkB;EAG/BC,UAAU,EAAE5B;AAHmB,CAA5B"},"metadata":{},"sourceType":"module"}