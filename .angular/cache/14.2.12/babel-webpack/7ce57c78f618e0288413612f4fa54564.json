{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, FusedConv2D, util } from '@tensorflow/tfjs-core';\nimport { Conv2DProgram } from '../conv_gpu';\nimport { Conv2DPackedProgram } from '../conv_packed_gpu';\nimport { mapActivationToShaderProgram } from '../kernel_utils/kernel_funcs_utils';\nimport { conv2dByMatMul, conv2dWithIm2Row } from './Conv2D_impl';\nimport { reshape } from './Reshape';\nexport function fusedConv2d(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter,\n    bias,\n    preluActivationWeights\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false\n  /* depthwise */\n  , $dataFormat);\n  let out;\n  const intermediates = [];\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n\n  const prepareInputs = () => {\n    const inputs = [x, filter]; // If the input is a 1-D tensor, align it with the channels.\n    //\n    // For fusedConv2d, the inputs (x, W, bias, preluActivationWeights) are\n    // supposed to be aligned with the dataFormat. The 4-D tensor inputs or\n    // scalar inputs are originally aligned, but the 1-D tensor inputs are\n    // supposed to be aligned with the channels (only bias and PReLU activation\n    // weights could be a 1-D tensor).\n\n    const alignInputWithDataFormat = (input, dataFormat) => {\n      if (dataFormat === 'NCHW' && input.shape.length === 1 && input.shape[0] !== 1) {\n        const alignedInput = reshape({\n          inputs: {\n            x: input\n          },\n          backend,\n          attrs: {\n            shape: [input.shape[0], 1, 1]\n          }\n        });\n        intermediates.push(alignedInput);\n        return alignedInput;\n      }\n\n      return input;\n    };\n\n    if (hasBias) {\n      inputs.push(alignInputWithDataFormat(bias, dataFormat));\n    }\n\n    if (hasPreluActivationWeights) {\n      inputs.push(alignInputWithDataFormat(preluActivationWeights, dataFormat));\n    }\n\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(leakyreluAlpha, 'float32'));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n\n    return inputs;\n  };\n\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 && convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 && convInfo.strideHeight === 1 && convInfo.strideWidth === 1 && (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else if (convInfo.strideWidth <= 2 && $dataFormat === 'channelsLast' && env().getBool('WEBGL_EXP_CONV')) {\n    const fusedActivation = activation ? mapActivationToShaderProgram(activation, true) : null;\n    const program = new Conv2DPackedProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n    const customValues = [[convInfo.padInfo.top, convInfo.padInfo.left], [convInfo.strideHeight, convInfo.strideWidth], [convInfo.dilationHeight, convInfo.dilationWidth], [convInfo.inHeight, convInfo.inWidth]];\n    const inputs = prepareInputs();\n    out = backend.runWebGLProgram(program, inputs, 'float32', customValues);\n  } else if (env().getBool('WEBGL_CONV_IM2COL')) {\n    out = conv2dWithIm2Row({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else {\n    const fusedActivation = activation ? mapActivationToShaderProgram(activation, false) : null;\n    const program = new Conv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n    const inputs = prepareInputs();\n    out = backend.runWebGLProgram(program, inputs, 'float32');\n  }\n\n  const outReshaped = reshape({\n    inputs: {\n      x: out\n    },\n    backend,\n    attrs: {\n      shape: convInfo.outShape\n    }\n  });\n  intermediates.push(out);\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return outReshaped;\n}\nexport const fusedConv2DConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedConv2d\n};","map":{"version":3,"names":["backend_util","env","FusedConv2D","util","Conv2DProgram","Conv2DPackedProgram","mapActivationToShaderProgram","conv2dByMatMul","conv2dWithIm2Row","reshape","fusedConv2d","args","inputs","backend","attrs","x","filter","bias","preluActivationWeights","strides","pad","dataFormat","dilations","dimRoundingMode","activation","leakyreluAlpha","$dataFormat","convertConv2DDataFormat","convInfo","computeConv2DInfo","shape","out","intermediates","hasBias","hasPreluActivationWeights","hasLeakyreluAlpha","prepareInputs","alignInputWithDataFormat","input","length","alignedInput","push","$leakyreluAlpha","makeTensorInfo","createScalarValue","filterHeight","filterWidth","dilationHeight","dilationWidth","strideHeight","strideWidth","padInfo","type","getBool","fusedActivation","program","customValues","top","left","inHeight","inWidth","runWebGLProgram","outReshaped","outShape","forEach","t","disposeIntermediateTensorInfo","fusedConv2DConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FusedConv2D.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, FusedConv2D, util } from '@tensorflow/tfjs-core';\nimport { Conv2DProgram } from '../conv_gpu';\nimport { Conv2DPackedProgram } from '../conv_packed_gpu';\nimport { mapActivationToShaderProgram } from '../kernel_utils/kernel_funcs_utils';\nimport { conv2dByMatMul, conv2dWithIm2Row } from './Conv2D_impl';\nimport { reshape } from './Reshape';\nexport function fusedConv2d(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter, bias, preluActivationWeights } = inputs;\n    const { strides, pad, dataFormat, dilations, dimRoundingMode, activation, leakyreluAlpha } = attrs;\n    const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n    const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false /* depthwise */, $dataFormat);\n    let out;\n    const intermediates = [];\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const hasLeakyreluAlpha = activation === 'leakyrelu';\n    const prepareInputs = () => {\n        const inputs = [x, filter];\n        // If the input is a 1-D tensor, align it with the channels.\n        //\n        // For fusedConv2d, the inputs (x, W, bias, preluActivationWeights) are\n        // supposed to be aligned with the dataFormat. The 4-D tensor inputs or\n        // scalar inputs are originally aligned, but the 1-D tensor inputs are\n        // supposed to be aligned with the channels (only bias and PReLU activation\n        // weights could be a 1-D tensor).\n        const alignInputWithDataFormat = (input, dataFormat) => {\n            if (dataFormat === 'NCHW' && input.shape.length === 1 &&\n                input.shape[0] !== 1) {\n                const alignedInput = reshape({\n                    inputs: { x: input },\n                    backend,\n                    attrs: { shape: [input.shape[0], 1, 1] }\n                });\n                intermediates.push(alignedInput);\n                return alignedInput;\n            }\n            return input;\n        };\n        if (hasBias) {\n            inputs.push(alignInputWithDataFormat(bias, dataFormat));\n        }\n        if (hasPreluActivationWeights) {\n            inputs.push(alignInputWithDataFormat(preluActivationWeights, dataFormat));\n        }\n        if (hasLeakyreluAlpha) {\n            const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(leakyreluAlpha, 'float32'));\n            inputs.push($leakyreluAlpha);\n            intermediates.push($leakyreluAlpha);\n        }\n        return inputs;\n    };\n    if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n        convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n        convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n        (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n        out = conv2dByMatMul({\n            x,\n            filter,\n            convInfo,\n            backend,\n            bias,\n            activation,\n            preluActivationWeights,\n            leakyreluAlpha\n        });\n    }\n    else if (convInfo.strideWidth <= 2 && $dataFormat === 'channelsLast'\n        && env().getBool('WEBGL_EXP_CONV')) {\n        const fusedActivation = activation ? mapActivationToShaderProgram(activation, true) : null;\n        const program = new Conv2DPackedProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n        const customValues = [\n            [convInfo.padInfo.top, convInfo.padInfo.left],\n            [convInfo.strideHeight, convInfo.strideWidth],\n            [convInfo.dilationHeight, convInfo.dilationWidth],\n            [convInfo.inHeight, convInfo.inWidth]\n        ];\n        const inputs = prepareInputs();\n        out = backend.runWebGLProgram(program, inputs, 'float32', customValues);\n    }\n    else if (env().getBool('WEBGL_CONV_IM2COL')) {\n        out = conv2dWithIm2Row({\n            x,\n            filter,\n            convInfo,\n            backend,\n            bias,\n            activation,\n            preluActivationWeights,\n            leakyreluAlpha\n        });\n    }\n    else {\n        const fusedActivation = activation ? mapActivationToShaderProgram(activation, false) : null;\n        const program = new Conv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n        const inputs = prepareInputs();\n        out = backend.runWebGLProgram(program, inputs, 'float32');\n    }\n    const outReshaped = reshape({ inputs: { x: out }, backend, attrs: { shape: convInfo.outShape } });\n    intermediates.push(out);\n    intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return outReshaped;\n}\nexport const fusedConv2DConfig = {\n    kernelName: FusedConv2D,\n    backendName: 'webgl',\n    kernelFunc: fusedConv2d,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}