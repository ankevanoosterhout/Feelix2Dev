{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Prod, upcastType, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transpose } from './Transpose';\nexport function prodImpl(xShape, xDtype, xVals, reductionAxes) {\n  const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n  const outDtype = upcastType(xDtype, 'int32');\n  const outVals = util.makeZerosTypedArray(util.sizeFromShape(outShape), outDtype);\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  for (let i = 0; i < outVals.length; ++i) {\n    const offset = i * reduceSize;\n    let prod = 1;\n\n    for (let j = 0; j < reduceSize; ++j) {\n      prod *= xVals[offset + j];\n    }\n\n    outVals[i] = prod;\n  }\n\n  return {\n    outVals,\n    outShape,\n    outDtype\n  };\n}\nexport function prod(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis,\n    keepDims\n  } = attrs;\n  assertNotComplex(x, 'prod');\n  const xRank = x.shape.length;\n  const axes = util.parseAxisParam(axis, x.shape);\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n  let reductionAxes = axes;\n  let permutedX = x;\n  const intermediateTensorInfos = [];\n\n  if (permutation != null) {\n    permutedX = transpose({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        perm: permutation\n      }\n    });\n    intermediateTensorInfos.push(permutedX);\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  const xVals = backend.data.get(permutedX.dataId).values;\n  const {\n    outVals,\n    outShape,\n    outDtype\n  } = prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n  let resultShape = outShape;\n\n  if (keepDims) {\n    resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n  }\n\n  intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\nexport const prodConfig = {\n  kernelName: Prod,\n  backendName: 'cpu',\n  kernelFunc: prod\n};","map":{"version":3,"names":["backend_util","Prod","upcastType","util","assertNotComplex","transpose","prodImpl","xShape","xDtype","xVals","reductionAxes","outShape","reduceShape","computeOutAndReduceShapes","outDtype","outVals","makeZerosTypedArray","sizeFromShape","reduceSize","i","length","offset","prod","j","args","inputs","backend","attrs","x","axis","keepDims","xRank","shape","axes","parseAxisParam","permutation","getAxesPermutation","permutedX","intermediateTensorInfos","perm","push","getInnerMostAxes","data","get","dataId","values","dtype","resultShape","expandShapeToKeepDim","forEach","t","disposeIntermediateTensorInfo","makeTensorInfo","prodConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Prod.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Prod, upcastType, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transpose } from './Transpose';\nexport function prodImpl(xShape, xDtype, xVals, reductionAxes) {\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n    const outDtype = upcastType(xDtype, 'int32');\n    const outVals = util.makeZerosTypedArray(util.sizeFromShape(outShape), outDtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    for (let i = 0; i < outVals.length; ++i) {\n        const offset = i * reduceSize;\n        let prod = 1;\n        for (let j = 0; j < reduceSize; ++j) {\n            prod *= xVals[offset + j];\n        }\n        outVals[i] = prod;\n    }\n    return { outVals, outShape, outDtype };\n}\nexport function prod(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    assertNotComplex(x, 'prod');\n    const xRank = x.shape.length;\n    const axes = util.parseAxisParam(axis, x.shape);\n    const permutation = backend_util.getAxesPermutation(axes, xRank);\n    let reductionAxes = axes;\n    let permutedX = x;\n    const intermediateTensorInfos = [];\n    if (permutation != null) {\n        permutedX = transpose({ inputs: { x }, backend, attrs: { perm: permutation } });\n        intermediateTensorInfos.push(permutedX);\n        reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n    }\n    const xVals = backend.data.get(permutedX.dataId).values;\n    const { outVals, outShape, outDtype } = prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n    let resultShape = outShape;\n    if (keepDims) {\n        resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n    }\n    intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\nexport const prodConfig = {\n    kernelName: Prod,\n    backendName: 'cpu',\n    kernelFunc: prod\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}