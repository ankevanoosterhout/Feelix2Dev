{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { UnsortedSegmentSum, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { cast } from './Cast';\nimport { equal } from './Equal';\nimport { expandDims } from './ExpandDims';\nimport { multiply } from './Multiply';\nimport { pack } from './Pack';\nimport { sum } from './Sum';\nexport function unsortedSegmentSum(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    segmentIds\n  } = inputs;\n  const {\n    numSegments\n  } = attrs;\n  assertNotComplex(x, 'unsortedSegmentSum');\n  const xRank = x.shape.length;\n  const segmentIdsRank = segmentIds.shape.length;\n  const res = [];\n  const intermediates = []; // Reshape the segment id's so that they can be broadcast with\n  // x. The new shape should be [segmentIds.shape, 1, ..., 1]\n\n  const numIters = xRank - segmentIdsRank;\n  let $segmentIds = segmentIds;\n\n  for (let i = 0; i < numIters; ++i) {\n    const expanded = expandDims({\n      inputs: {\n        input: $segmentIds\n      },\n      backend,\n      attrs: {\n        dim: i + 1\n      }\n    });\n    $segmentIds = expanded;\n    intermediates.push(expanded);\n  }\n\n  for (let i = 0; i < numSegments; ++i) {\n    const scalarValue = util.createScalarValue(i, 'int32');\n    const segmentId = backend.makeTensorInfo([], 'int32', scalarValue);\n    const mask = equal({\n      inputs: {\n        a: segmentId,\n        b: $segmentIds\n      },\n      backend\n    });\n    const maskCasted = cast({\n      inputs: {\n        x: mask\n      },\n      backend,\n      attrs: {\n        dtype: 'float32'\n      }\n    });\n    const mul = multiply({\n      inputs: {\n        a: maskCasted,\n        b: x\n      },\n      backend\n    });\n    const sumTensorInfo = sum({\n      inputs: {\n        x: mul\n      },\n      backend,\n      attrs: {\n        axis: 0,\n        keepDims: false\n      }\n    });\n    res.push(sumTensorInfo);\n    intermediates.push(segmentId);\n    intermediates.push(mask);\n    intermediates.push(maskCasted);\n    intermediates.push(mul);\n    intermediates.push(sumTensorInfo);\n  }\n\n  const result = pack({\n    inputs: res,\n    backend,\n    attrs: {\n      axis: 0\n    }\n  });\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return result;\n}\nexport const unsortedSegmentSumConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'cpu',\n  kernelFunc: unsortedSegmentSum\n};","map":{"version":3,"names":["UnsortedSegmentSum","util","assertNotComplex","cast","equal","expandDims","multiply","pack","sum","unsortedSegmentSum","args","inputs","backend","attrs","x","segmentIds","numSegments","xRank","shape","length","segmentIdsRank","res","intermediates","numIters","$segmentIds","i","expanded","input","dim","push","scalarValue","createScalarValue","segmentId","makeTensorInfo","mask","a","b","maskCasted","dtype","mul","sumTensorInfo","axis","keepDims","result","forEach","t","disposeIntermediateTensorInfo","unsortedSegmentSumConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/UnsortedSegmentSum.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { UnsortedSegmentSum, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { cast } from './Cast';\nimport { equal } from './Equal';\nimport { expandDims } from './ExpandDims';\nimport { multiply } from './Multiply';\nimport { pack } from './Pack';\nimport { sum } from './Sum';\nexport function unsortedSegmentSum(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, segmentIds } = inputs;\n    const { numSegments } = attrs;\n    assertNotComplex(x, 'unsortedSegmentSum');\n    const xRank = x.shape.length;\n    const segmentIdsRank = segmentIds.shape.length;\n    const res = [];\n    const intermediates = [];\n    // Reshape the segment id's so that they can be broadcast with\n    // x. The new shape should be [segmentIds.shape, 1, ..., 1]\n    const numIters = xRank - segmentIdsRank;\n    let $segmentIds = segmentIds;\n    for (let i = 0; i < numIters; ++i) {\n        const expanded = expandDims({ inputs: { input: $segmentIds }, backend, attrs: { dim: i + 1 } });\n        $segmentIds = expanded;\n        intermediates.push(expanded);\n    }\n    for (let i = 0; i < numSegments; ++i) {\n        const scalarValue = util.createScalarValue(i, 'int32');\n        const segmentId = backend.makeTensorInfo([], 'int32', scalarValue);\n        const mask = equal({ inputs: { a: segmentId, b: $segmentIds }, backend });\n        const maskCasted = cast({ inputs: { x: mask }, backend, attrs: { dtype: 'float32' } });\n        const mul = multiply({ inputs: { a: maskCasted, b: x }, backend });\n        const sumTensorInfo = sum({ inputs: { x: mul }, backend, attrs: { axis: 0, keepDims: false } });\n        res.push(sumTensorInfo);\n        intermediates.push(segmentId);\n        intermediates.push(mask);\n        intermediates.push(maskCasted);\n        intermediates.push(mul);\n        intermediates.push(sumTensorInfo);\n    }\n    const result = pack({ inputs: res, backend, attrs: { axis: 0 } });\n    intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return result;\n}\nexport const unsortedSegmentSumConfig = {\n    kernelName: UnsortedSegmentSum,\n    backendName: 'cpu',\n    kernelFunc: unsortedSegmentSum\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}