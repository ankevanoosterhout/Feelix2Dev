{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\nimport { tile } from '../tile';\n/**\n * Converts images from grayscale to RGB format.\n *\n * @param image A grayscale tensor to convert. The `image`'s last dimension must\n *     be size 1 with at least a two-dimensional shape.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\n\nfunction grayscaleToRGB_(image) {\n  const $image = convertToTensor(image, 'image', 'grayscaleToRGB');\n  const lastDimsIdx = $image.rank - 1;\n  const lastDims = $image.shape[lastDimsIdx];\n  util.assert($image.rank >= 2, () => 'Error in grayscaleToRGB: images must be at least rank 2, ' + `but got rank ${$image.rank}.`);\n  util.assert(lastDims === 1, () => 'Error in grayscaleToRGB: last dimension of a grayscale image ' + `should be size 1, but got size ${lastDims}.`);\n  const reps = new Array($image.rank);\n  reps.fill(1, 0, lastDimsIdx);\n  reps[lastDimsIdx] = 3;\n  return tile($image, reps);\n}\n\nexport const grayscaleToRGB = op({\n  grayscaleToRGB_\n});","map":{"version":3,"names":["convertToTensor","util","op","tile","grayscaleToRGB_","image","$image","lastDimsIdx","rank","lastDims","shape","assert","reps","Array","fill","grayscaleToRGB"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/image/grayscale_to_rgb.js"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\nimport { tile } from '../tile';\n/**\n * Converts images from grayscale to RGB format.\n *\n * @param image A grayscale tensor to convert. The `image`'s last dimension must\n *     be size 1 with at least a two-dimensional shape.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction grayscaleToRGB_(image) {\n    const $image = convertToTensor(image, 'image', 'grayscaleToRGB');\n    const lastDimsIdx = $image.rank - 1;\n    const lastDims = $image.shape[lastDimsIdx];\n    util.assert($image.rank >= 2, () => 'Error in grayscaleToRGB: images must be at least rank 2, ' +\n        `but got rank ${$image.rank}.`);\n    util.assert(lastDims === 1, () => 'Error in grayscaleToRGB: last dimension of a grayscale image ' +\n        `should be size 1, but got size ${lastDims}.`);\n    const reps = new Array($image.rank);\n    reps.fill(1, 0, lastDimsIdx);\n    reps[lastDimsIdx] = 3;\n    return tile($image, reps);\n}\nexport const grayscaleToRGB = op({ grayscaleToRGB_ });\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,eAAT,QAAgC,uBAAhC;AACA,OAAO,KAAKC,IAAZ,MAAsB,YAAtB;AACA,SAASC,EAAT,QAAmB,cAAnB;AACA,SAASC,IAAT,QAAqB,SAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;EAC5B,MAAMC,MAAM,GAAGN,eAAe,CAACK,KAAD,EAAQ,OAAR,EAAiB,gBAAjB,CAA9B;EACA,MAAME,WAAW,GAAGD,MAAM,CAACE,IAAP,GAAc,CAAlC;EACA,MAAMC,QAAQ,GAAGH,MAAM,CAACI,KAAP,CAAaH,WAAb,CAAjB;EACAN,IAAI,CAACU,MAAL,CAAYL,MAAM,CAACE,IAAP,IAAe,CAA3B,EAA8B,MAAM,8DAC/B,gBAAeF,MAAM,CAACE,IAAK,GADhC;EAEAP,IAAI,CAACU,MAAL,CAAYF,QAAQ,KAAK,CAAzB,EAA4B,MAAM,kEAC7B,kCAAiCA,QAAS,GAD/C;EAEA,MAAMG,IAAI,GAAG,IAAIC,KAAJ,CAAUP,MAAM,CAACE,IAAjB,CAAb;EACAI,IAAI,CAACE,IAAL,CAAU,CAAV,EAAa,CAAb,EAAgBP,WAAhB;EACAK,IAAI,CAACL,WAAD,CAAJ,GAAoB,CAApB;EACA,OAAOJ,IAAI,CAACG,MAAD,EAASM,IAAT,CAAX;AACH;;AACD,OAAO,MAAMG,cAAc,GAAGb,EAAE,CAAC;EAAEE;AAAF,CAAD,CAAzB"},"metadata":{},"sourceType":"module"}