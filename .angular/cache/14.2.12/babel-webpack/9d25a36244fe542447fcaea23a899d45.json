{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, MaxPoolGrad } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxPoolPositions } from '../utils/pool_utils';\nexport function maxPoolGrad(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    input,\n    output\n  } = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, 1\n  /* dilations */\n  , pad, dimRoundingMode);\n  const xValues = backend.data.get(x.dataId).values;\n  const maxPosBuf = buffer(convInfo.outShape, x.dtype, maxPoolPositions(xValues, x.shape, x.dtype, convInfo).values);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(x.shape, 'float32');\n  const dyData = backend.data.get(dy.dataId).values;\n  const dyBuf = buffer(dy.shape, 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n\n            if (dyR < 0 || dyR >= convInfo.outHeight || Math.floor(dyR) !== dyR) {\n              continue;\n            }\n\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n\n              if (dyC < 0 || dyC >= convInfo.outWidth || Math.floor(dyC) !== dyC) {\n                continue;\n              }\n\n              const maxPos = effectiveFilterHeight * effectiveFilterWidth - 1 - maxPosBuf.get(b, dyR, dyC, d);\n              const curPos = wR * effectiveFilterWidth + wC;\n              const mask = maxPos === curPos ? 1 : 0;\n\n              if (mask === 0) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel * mask;\n            }\n          }\n\n          dx.set(dotProd, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const maxPoolGradConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPoolGrad\n};","map":{"version":3,"names":["backend_util","buffer","MaxPoolGrad","assertNotComplex","maxPoolPositions","maxPoolGrad","args","inputs","backend","attrs","dy","input","output","x","filterSize","strides","pad","dimRoundingMode","convInfo","computePool2DInfo","shape","xValues","data","get","dataId","values","maxPosBuf","outShape","dtype","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padLeft","padInfo","left","padTop","top","dx","dyData","dyBuf","b","batchSize","d","inChannels","dxR","inHeight","dxC","inWidth","dyRCorner","dyCCorner","dotProd","wR","dyR","outHeight","Math","floor","wC","dyC","outWidth","maxPos","curPos","mask","pixel","set","makeTensorInfo","maxPoolGradConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/MaxPoolGrad.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, MaxPoolGrad } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxPoolPositions } from '../utils/pool_utils';\nexport function maxPoolGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, input, output } = inputs;\n    const x = input;\n    assertNotComplex([input, output], 'maxPoolGrad');\n    const { filterSize, strides, pad, dimRoundingMode } = attrs;\n    const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);\n    const xValues = backend.data.get(x.dataId).values;\n    const maxPosBuf = buffer(convInfo.outShape, x.dtype, maxPoolPositions(xValues, x.shape, x.dtype, convInfo).values);\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const dx = buffer(x.shape, 'float32');\n    const dyData = backend.data.get(dy.dataId).values;\n    const dyBuf = buffer(dy.shape, 'float32', dyData);\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n        for (let d = 0; d < convInfo.inChannels; ++d) {\n            for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n                for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n                    // Shader code begins.\n                    const dyRCorner = dxR - padTop;\n                    const dyCCorner = dxC - padLeft;\n                    let dotProd = 0;\n                    for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n                        const dyR = (dyRCorner + wR) / strideHeight;\n                        if (dyR < 0 || dyR >= convInfo.outHeight ||\n                            Math.floor(dyR) !== dyR) {\n                            continue;\n                        }\n                        for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n                            const dyC = (dyCCorner + wC) / strideWidth;\n                            if (dyC < 0 || dyC >= convInfo.outWidth ||\n                                Math.floor(dyC) !== dyC) {\n                                continue;\n                            }\n                            const maxPos = effectiveFilterHeight * effectiveFilterWidth - 1 -\n                                maxPosBuf.get(b, dyR, dyC, d);\n                            const curPos = wR * effectiveFilterWidth + wC;\n                            const mask = maxPos === curPos ? 1 : 0;\n                            if (mask === 0) {\n                                continue;\n                            }\n                            const pixel = dyBuf.get(b, dyR, dyC, d);\n                            dotProd += pixel * mask;\n                        }\n                    }\n                    dx.set(dotProd, b, dxR, dxC, d);\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const maxPoolGradConfig = {\n    kernelName: MaxPoolGrad,\n    backendName: 'cpu',\n    kernelFunc: maxPoolGrad\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}