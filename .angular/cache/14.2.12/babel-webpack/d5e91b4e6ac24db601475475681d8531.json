{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Cast, util } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { zeros } from '../utils/zeros_impl';\nimport { complex } from './Complex';\nimport { identity } from './Identity';\nimport { real } from './Real';\nexport function castImpl(values, shape, inputType, dtype) {\n  if (dtype === 'int32') {\n    const resultValues = Int32Array.from(values);\n    return [shape, 'int32', resultValues];\n  }\n\n  if (dtype === 'bool') {\n    // This is essentially the result of notEqual(x, 0). We avoid using\n    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n    // cast -> notEqual -> binary_utils.\n    const zero = util.toTypedArray([0], inputType);\n    const [resultData, resultShape] = createSimpleBinaryKernelImpl((a, b) => a !== b ? 1 : 0)(shape, [], values, zero, 'bool');\n    return [resultShape, 'bool', resultData];\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${inputType} to ${dtype}`);\n}\nexport function cast(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    dtype\n  } = attrs; // Casting to complex64.\n\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({\n        inputs: {\n          x\n        },\n        backend\n      });\n    }\n\n    const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n    const floatX = cast({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        dtype: 'float32'\n      }\n    });\n    const result = complex({\n      inputs: {\n        real: floatX,\n        imag: zerosTensorInfo\n      },\n      backend\n    });\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    backend.disposeIntermediateTensorInfo(floatX);\n    return result;\n  } // Casting from complex64\n\n\n  if (x.dtype === 'complex64') {\n    const realPart = real({\n      inputs: {\n        input: x\n      },\n      backend\n    });\n    const result = cast({\n      inputs: {\n        x: realPart\n      },\n      backend,\n      attrs: {\n        dtype\n      }\n    });\n    backend.disposeIntermediateTensorInfo(realPart);\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({\n      inputs: {\n        x\n      },\n      backend\n    });\n    return {\n      dataId: result.dataId,\n      shape: result.shape,\n      dtype\n    };\n  }\n\n  const values = backend.data.get(x.dataId).values;\n  const [resultShape, resultType, resultData] = castImpl(values, x.shape, x.dtype, dtype);\n  return backend.makeTensorInfo(resultShape, resultType, resultData);\n}\nexport const castConfig = {\n  kernelName: Cast,\n  backendName: 'cpu',\n  kernelFunc: cast\n};","map":{"version":3,"names":["Cast","util","createSimpleBinaryKernelImpl","zeros","complex","identity","real","castImpl","values","shape","inputType","dtype","resultValues","Int32Array","from","zero","toTypedArray","resultData","resultShape","a","b","Error","cast","args","inputs","backend","attrs","x","zerosTensorInfo","floatX","result","imag","disposeIntermediateTensorInfo","realPart","input","hasEncodingLoss","dataId","data","get","resultType","makeTensorInfo","castConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Cast.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Cast, util } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { zeros } from '../utils/zeros_impl';\nimport { complex } from './Complex';\nimport { identity } from './Identity';\nimport { real } from './Real';\nexport function castImpl(values, shape, inputType, dtype) {\n    if (dtype === 'int32') {\n        const resultValues = Int32Array.from(values);\n        return [shape, 'int32', resultValues];\n    }\n    if (dtype === 'bool') {\n        // This is essentially the result of notEqual(x, 0). We avoid using\n        // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n        // cast -> notEqual -> binary_utils.\n        const zero = util.toTypedArray([0], inputType);\n        const [resultData, resultShape] = createSimpleBinaryKernelImpl((a, b) => (a !== b) ? 1 : 0)(shape, [], values, zero, 'bool');\n        return [resultShape, 'bool', resultData];\n    }\n    throw new Error(`Error in Cast: failed to cast ${inputType} to ${dtype}`);\n}\nexport function cast(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { dtype } = attrs;\n    // Casting to complex64.\n    if (dtype === 'complex64') {\n        if (x.dtype === 'complex64') {\n            return identity({ inputs: { x }, backend });\n        }\n        const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n        const floatX = cast({ inputs: { x }, backend, attrs: { dtype: 'float32' } });\n        const result = complex({ inputs: { real: floatX, imag: zerosTensorInfo }, backend });\n        backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n        backend.disposeIntermediateTensorInfo(floatX);\n        return result;\n    }\n    // Casting from complex64\n    if (x.dtype === 'complex64') {\n        const realPart = real({ inputs: { input: x }, backend });\n        const result = cast({ inputs: { x: realPart }, backend, attrs: { dtype } });\n        backend.disposeIntermediateTensorInfo(realPart);\n        return result;\n    }\n    if (!util.hasEncodingLoss(x.dtype, dtype)) {\n        // We don't change the underlying data, since we cast to higher\n        // precision.\n        const result = identity({ inputs: { x }, backend });\n        return { dataId: result.dataId, shape: result.shape, dtype };\n    }\n    const values = backend.data.get(x.dataId).values;\n    const [resultShape, resultType, resultData] = castImpl(values, x.shape, x.dtype, dtype);\n    return backend.makeTensorInfo(resultShape, resultType, resultData);\n}\nexport const castConfig = {\n    kernelName: Cast,\n    backendName: 'cpu',\n    kernelFunc: cast\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}