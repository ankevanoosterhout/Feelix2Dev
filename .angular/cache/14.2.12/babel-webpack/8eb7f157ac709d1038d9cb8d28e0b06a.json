{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ResizeNearestNeighborPackedProgram {\n  constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {\n    this.variableNames = ['A'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outputShape = [];\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n    const effectiveInSize = [alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight, alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth];\n    const effectiveOutSize = [alignCorners && newHeight > 1 ? newHeight - 1 : newHeight, alignCorners && newWidth > 1 ? newWidth - 1 : newWidth]; // When align corners is false, we rounds the value with floor.\n\n    const roundBase = alignCorners ? '0.5' : '0.0';\n    let sourceFracIndexRC;\n\n    if (halfPixelCenters) {\n      sourceFracIndexRC = `max((vec3(yRC) + vec3(0.5)) * ` + `effectiveInputOverOutputRatioRC, vec3(0.0))`;\n    } else {\n      sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n\n}","map":{"version":3,"names":["ResizeNearestNeighborPackedProgram","constructor","inputShape","newHeight","newWidth","alignCorners","halfPixelCenters","variableNames","packedInputs","packedOutput","outputShape","batch","oldHeight","oldWidth","depth","effectiveInSize","effectiveOutSize","roundBase","sourceFracIndexRC","userCode"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_nearest_neighbor_packed_gpu.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ResizeNearestNeighborPackedProgram {\n    constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = [];\n        const [batch, oldHeight, oldWidth, depth] = inputShape;\n        this.outputShape = [batch, newHeight, newWidth, depth];\n        const effectiveInSize = [\n            (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n            (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n        ];\n        const effectiveOutSize = [\n            (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n            (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n        ];\n        // When align corners is false, we rounds the value with floor.\n        const roundBase = alignCorners ? '0.5' : '0.0';\n        let sourceFracIndexRC;\n        if (halfPixelCenters) {\n            sourceFracIndexRC = `max((vec3(yRC) + vec3(0.5)) * ` +\n                `effectiveInputOverOutputRatioRC, vec3(0.0))`;\n        }\n        else {\n            sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;\n        }\n        this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,kCAAN,CAAyC;EAC5CC,WAAW,CAACC,UAAD,EAAaC,SAAb,EAAwBC,QAAxB,EAAkCC,YAAlC,EAAgDC,gBAAhD,EAAkE;IACzE,KAAKC,aAAL,GAAqB,CAAC,GAAD,CAArB;IACA,KAAKC,YAAL,GAAoB,IAApB;IACA,KAAKC,YAAL,GAAoB,IAApB;IACA,KAAKC,WAAL,GAAmB,EAAnB;IACA,MAAM,CAACC,KAAD,EAAQC,SAAR,EAAmBC,QAAnB,EAA6BC,KAA7B,IAAsCZ,UAA5C;IACA,KAAKQ,WAAL,GAAmB,CAACC,KAAD,EAAQR,SAAR,EAAmBC,QAAnB,EAA6BU,KAA7B,CAAnB;IACA,MAAMC,eAAe,GAAG,CACnBV,YAAY,IAAIF,SAAS,GAAG,CAA7B,GAAkCS,SAAS,GAAG,CAA9C,GAAkDA,SAD9B,EAEnBP,YAAY,IAAID,QAAQ,GAAG,CAA5B,GAAiCS,QAAQ,GAAG,CAA5C,GAAgDA,QAF5B,CAAxB;IAIA,MAAMG,gBAAgB,GAAG,CACpBX,YAAY,IAAIF,SAAS,GAAG,CAA7B,GAAkCA,SAAS,GAAG,CAA9C,GAAkDA,SAD7B,EAEpBE,YAAY,IAAID,QAAQ,GAAG,CAA5B,GAAiCA,QAAQ,GAAG,CAA5C,GAAgDA,QAF3B,CAAzB,CAXyE,CAezE;;IACA,MAAMa,SAAS,GAAGZ,YAAY,GAAG,KAAH,GAAW,KAAzC;IACA,IAAIa,iBAAJ;;IACA,IAAIZ,gBAAJ,EAAsB;MAClBY,iBAAiB,GAAI,gCAAD,GACf,6CADL;IAEH,CAHD,MAIK;MACDA,iBAAiB,GAAI,6CAArB;IACH;;IACD,KAAKC,QAAL,GAAiB;AACzB;AACA,YAAYJ,eAAe,CAAC,CAAD,CAAf,GAAqBC,gBAAgB,CAAC,CAAD,CAAI;AACrD,YAAYD,eAAe,CAAC,CAAD,CAAf,GAAqBC,gBAAgB,CAAC,CAAD,CAAI;AACrD,YAAYD,eAAe,CAAC,CAAD,CAAf,GAAqBC,gBAAgB,CAAC,CAAD,CAAI;AACrD,uCAAuCJ,SAAU,OAAMC,QAAS;AAChE,uCAAuCA,QAAS;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmCK,iBAAkB;AACrD;AACA;AACA;AACA,8DAA8DD,SAAU;AACxE;AACA;AACA,gCAAgCH,KAAK,GAAG,CAAE;AAC1C,uCAAuCV,QAAQ,GAAG,CAAE;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAzCQ;EA0CH;;AApE2C"},"metadata":{},"sourceType":"module"}