{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { RealDiv } from '../kernel_names';\nimport * as broadcast_util from '../ops/broadcast_util';\nimport { cast } from '../ops/cast';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { neg } from '../ops/neg';\nimport { reshape } from '../ops/reshape';\nimport { square } from '../ops/square';\nimport { sum } from '../ops/sum';\nexport const divGradConfig = {\n  kernelName: RealDiv,\n  inputsToSave: ['a', 'b'],\n  gradFunc: (dy, saved) => {\n    const [a, b] = saved;\n    const outShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n\n    const derA = () => {\n      const res = div(dy, cast(b, 'float32'));\n      const reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);\n\n      if (reduceAxes.length > 0) {\n        return reshape(sum(res, reduceAxes), a.shape);\n      }\n\n      return res;\n    };\n\n    const derB = () => {\n      let res = mul(dy, cast(a, 'float32'));\n      const reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);\n\n      if (reduceAxes.length > 0) {\n        res = reshape(sum(res, reduceAxes), b.shape);\n      }\n\n      const tmp = square(b);\n      return neg(div(res, cast(tmp, 'float32')));\n    };\n\n    return {\n      a: derA,\n      b: derB\n    };\n  }\n};","map":{"version":3,"names":["RealDiv","broadcast_util","cast","div","mul","neg","reshape","square","sum","divGradConfig","kernelName","inputsToSave","gradFunc","dy","saved","a","b","outShape","assertAndGetBroadcastShape","shape","derA","res","reduceAxes","getReductionAxes","length","derB","tmp"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/gradients/RealDiv_grad.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { RealDiv } from '../kernel_names';\nimport * as broadcast_util from '../ops/broadcast_util';\nimport { cast } from '../ops/cast';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { neg } from '../ops/neg';\nimport { reshape } from '../ops/reshape';\nimport { square } from '../ops/square';\nimport { sum } from '../ops/sum';\nexport const divGradConfig = {\n    kernelName: RealDiv,\n    inputsToSave: ['a', 'b'],\n    gradFunc: (dy, saved) => {\n        const [a, b] = saved;\n        const outShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        const derA = () => {\n            const res = div(dy, cast(b, 'float32'));\n            const reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);\n            if (reduceAxes.length > 0) {\n                return reshape(sum(res, reduceAxes), a.shape);\n            }\n            return res;\n        };\n        const derB = () => {\n            let res = mul(dy, cast(a, 'float32'));\n            const reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);\n            if (reduceAxes.length > 0) {\n                res = reshape(sum(res, reduceAxes), b.shape);\n            }\n            const tmp = square(b);\n            return neg(div(res, cast(tmp, 'float32')));\n        };\n        return { a: derA, b: derB };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAT,QAAwB,iBAAxB;AACA,OAAO,KAAKC,cAAZ,MAAgC,uBAAhC;AACA,SAASC,IAAT,QAAqB,aAArB;AACA,SAASC,GAAT,QAAoB,YAApB;AACA,SAASC,GAAT,QAAoB,YAApB;AACA,SAASC,GAAT,QAAoB,YAApB;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,SAASC,GAAT,QAAoB,YAApB;AACA,OAAO,MAAMC,aAAa,GAAG;EACzBC,UAAU,EAAEV,OADa;EAEzBW,YAAY,EAAE,CAAC,GAAD,EAAM,GAAN,CAFW;EAGzBC,QAAQ,EAAE,CAACC,EAAD,EAAKC,KAAL,KAAe;IACrB,MAAM,CAACC,CAAD,EAAIC,CAAJ,IAASF,KAAf;IACA,MAAMG,QAAQ,GAAGhB,cAAc,CAACiB,0BAAf,CAA0CH,CAAC,CAACI,KAA5C,EAAmDH,CAAC,CAACG,KAArD,CAAjB;;IACA,MAAMC,IAAI,GAAG,MAAM;MACf,MAAMC,GAAG,GAAGlB,GAAG,CAACU,EAAD,EAAKX,IAAI,CAACc,CAAD,EAAI,SAAJ,CAAT,CAAf;MACA,MAAMM,UAAU,GAAGrB,cAAc,CAACsB,gBAAf,CAAgCR,CAAC,CAACI,KAAlC,EAAyCF,QAAzC,CAAnB;;MACA,IAAIK,UAAU,CAACE,MAAX,GAAoB,CAAxB,EAA2B;QACvB,OAAOlB,OAAO,CAACE,GAAG,CAACa,GAAD,EAAMC,UAAN,CAAJ,EAAuBP,CAAC,CAACI,KAAzB,CAAd;MACH;;MACD,OAAOE,GAAP;IACH,CAPD;;IAQA,MAAMI,IAAI,GAAG,MAAM;MACf,IAAIJ,GAAG,GAAGjB,GAAG,CAACS,EAAD,EAAKX,IAAI,CAACa,CAAD,EAAI,SAAJ,CAAT,CAAb;MACA,MAAMO,UAAU,GAAGrB,cAAc,CAACsB,gBAAf,CAAgCP,CAAC,CAACG,KAAlC,EAAyCF,QAAzC,CAAnB;;MACA,IAAIK,UAAU,CAACE,MAAX,GAAoB,CAAxB,EAA2B;QACvBH,GAAG,GAAGf,OAAO,CAACE,GAAG,CAACa,GAAD,EAAMC,UAAN,CAAJ,EAAuBN,CAAC,CAACG,KAAzB,CAAb;MACH;;MACD,MAAMO,GAAG,GAAGnB,MAAM,CAACS,CAAD,CAAlB;MACA,OAAOX,GAAG,CAACF,GAAG,CAACkB,GAAD,EAAMnB,IAAI,CAACwB,GAAD,EAAM,SAAN,CAAV,CAAJ,CAAV;IACH,CARD;;IASA,OAAO;MAAEX,CAAC,EAAEK,IAAL;MAAWJ,CAAC,EAAES;IAAd,CAAP;EACH;AAxBwB,CAAtB"},"metadata":{},"sourceType":"module"}