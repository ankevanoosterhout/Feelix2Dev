{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { AvgPoolGrad } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the backprop of an 2D avg pool.\n *\n * @param dy The dy error, of rank 4 or rank 3 of shape\n *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\n * assumed.\n * @param input The input image, of rank 4 or rank 3 of shape\n *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\n * assumed.\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param pad The type of padding algorithm used in the forward prop of the op.\n *     'same', 'valid', for more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *         https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n */\n\nfunction avgPoolGrad_(dy, input, filterSize, strides, pad) {\n  const $dy = convertToTensor(dy, 'dy', 'avgPoolGrad');\n  const $input = convertToTensor(input, 'input', 'avgPoolGrad');\n  util.assert($input.rank === $dy.rank, () => `Rank of input (${$input.rank}) does not match rank of dy (${$dy.rank})`);\n  let input4D = $input;\n  let dy4D = $dy;\n  let reshapedTo4D = false;\n\n  if ($input.rank === 3) {\n    reshapedTo4D = true;\n    input4D = reshape($input, [1, $input.shape[0], $input.shape[1], $input.shape[2]]);\n    dy4D = reshape($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2]]);\n  }\n\n  util.assert(dy4D.rank === 4, () => `Error in avgPoolGrad: dy must be rank 4 but got rank ` + `${dy4D.rank}.`);\n  util.assert(input4D.rank === 4, () => `Error in avgPoolGrad: input must be rank 4 but got rank ` + `${input4D.rank}.`);\n  const inputs = {\n    dy: dy4D,\n    input: input4D\n  };\n  const attrs = {\n    filterSize,\n    strides,\n    pad\n  }; // tslint:disable-next-line: no-unnecessary-type-assertion\n\n  const res = ENGINE.runKernel(AvgPoolGrad, inputs, attrs);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n\n  return res;\n}\n\nexport const avgPoolGrad = op({\n  avgPoolGrad_\n});","map":{"version":3,"names":["ENGINE","AvgPoolGrad","convertToTensor","util","op","reshape","avgPoolGrad_","dy","input","filterSize","strides","pad","$dy","$input","assert","rank","input4D","dy4D","reshapedTo4D","shape","inputs","attrs","res","runKernel","avgPoolGrad"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool_grad.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { AvgPoolGrad } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the backprop of an 2D avg pool.\n *\n * @param dy The dy error, of rank 4 or rank 3 of shape\n *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\n * assumed.\n * @param input The input image, of rank 4 or rank 3 of shape\n *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\n * assumed.\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param pad The type of padding algorithm used in the forward prop of the op.\n *     'same', 'valid', for more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *         https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n */\nfunction avgPoolGrad_(dy, input, filterSize, strides, pad) {\n    const $dy = convertToTensor(dy, 'dy', 'avgPoolGrad');\n    const $input = convertToTensor(input, 'input', 'avgPoolGrad');\n    util.assert($input.rank === $dy.rank, () => `Rank of input (${$input.rank}) does not match rank of dy (${$dy.rank})`);\n    let input4D = $input;\n    let dy4D = $dy;\n    let reshapedTo4D = false;\n    if ($input.rank === 3) {\n        reshapedTo4D = true;\n        input4D =\n            reshape($input, [1, $input.shape[0], $input.shape[1], $input.shape[2]]);\n        dy4D = reshape($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2]]);\n    }\n    util.assert(dy4D.rank === 4, () => `Error in avgPoolGrad: dy must be rank 4 but got rank ` +\n        `${dy4D.rank}.`);\n    util.assert(input4D.rank === 4, () => `Error in avgPoolGrad: input must be rank 4 but got rank ` +\n        `${input4D.rank}.`);\n    const inputs = { dy: dy4D, input: input4D };\n    const attrs = { filterSize, strides, pad };\n    // tslint:disable-next-line: no-unnecessary-type-assertion\n    const res = ENGINE.runKernel(AvgPoolGrad, inputs, attrs);\n    if (reshapedTo4D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n    }\n    return res;\n}\nexport const avgPoolGrad = op({ avgPoolGrad_ });\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,WAAvB;AACA,SAASC,WAAT,QAA4B,iBAA5B;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AACA,SAASC,EAAT,QAAmB,aAAnB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,YAAT,CAAsBC,EAAtB,EAA0BC,KAA1B,EAAiCC,UAAjC,EAA6CC,OAA7C,EAAsDC,GAAtD,EAA2D;EACvD,MAAMC,GAAG,GAAGV,eAAe,CAACK,EAAD,EAAK,IAAL,EAAW,aAAX,CAA3B;EACA,MAAMM,MAAM,GAAGX,eAAe,CAACM,KAAD,EAAQ,OAAR,EAAiB,aAAjB,CAA9B;EACAL,IAAI,CAACW,MAAL,CAAYD,MAAM,CAACE,IAAP,KAAgBH,GAAG,CAACG,IAAhC,EAAsC,MAAO,kBAAiBF,MAAM,CAACE,IAAK,gCAA+BH,GAAG,CAACG,IAAK,GAAlH;EACA,IAAIC,OAAO,GAAGH,MAAd;EACA,IAAII,IAAI,GAAGL,GAAX;EACA,IAAIM,YAAY,GAAG,KAAnB;;EACA,IAAIL,MAAM,CAACE,IAAP,KAAgB,CAApB,EAAuB;IACnBG,YAAY,GAAG,IAAf;IACAF,OAAO,GACHX,OAAO,CAACQ,MAAD,EAAS,CAAC,CAAD,EAAIA,MAAM,CAACM,KAAP,CAAa,CAAb,CAAJ,EAAqBN,MAAM,CAACM,KAAP,CAAa,CAAb,CAArB,EAAsCN,MAAM,CAACM,KAAP,CAAa,CAAb,CAAtC,CAAT,CADX;IAEAF,IAAI,GAAGZ,OAAO,CAACO,GAAD,EAAM,CAAC,CAAD,EAAIA,GAAG,CAACO,KAAJ,CAAU,CAAV,CAAJ,EAAkBP,GAAG,CAACO,KAAJ,CAAU,CAAV,CAAlB,EAAgCP,GAAG,CAACO,KAAJ,CAAU,CAAV,CAAhC,CAAN,CAAd;EACH;;EACDhB,IAAI,CAACW,MAAL,CAAYG,IAAI,CAACF,IAAL,KAAc,CAA1B,EAA6B,MAAO,uDAAD,GAC9B,GAAEE,IAAI,CAACF,IAAK,GADjB;EAEAZ,IAAI,CAACW,MAAL,CAAYE,OAAO,CAACD,IAAR,KAAiB,CAA7B,EAAgC,MAAO,0DAAD,GACjC,GAAEC,OAAO,CAACD,IAAK,GADpB;EAEA,MAAMK,MAAM,GAAG;IAAEb,EAAE,EAAEU,IAAN;IAAYT,KAAK,EAAEQ;EAAnB,CAAf;EACA,MAAMK,KAAK,GAAG;IAAEZ,UAAF;IAAcC,OAAd;IAAuBC;EAAvB,CAAd,CAlBuD,CAmBvD;;EACA,MAAMW,GAAG,GAAGtB,MAAM,CAACuB,SAAP,CAAiBtB,WAAjB,EAA8BmB,MAA9B,EAAsCC,KAAtC,CAAZ;;EACA,IAAIH,YAAJ,EAAkB;IACd,OAAOb,OAAO,CAACiB,GAAD,EAAM,CAACA,GAAG,CAACH,KAAJ,CAAU,CAAV,CAAD,EAAeG,GAAG,CAACH,KAAJ,CAAU,CAAV,CAAf,EAA6BG,GAAG,CAACH,KAAJ,CAAU,CAAV,CAA7B,CAAN,CAAd;EACH;;EACD,OAAOG,GAAP;AACH;;AACD,OAAO,MAAME,WAAW,GAAGpB,EAAE,CAAC;EAAEE;AAAF,CAAD,CAAtB"},"metadata":{},"sourceType":"module"}