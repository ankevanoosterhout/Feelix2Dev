{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, PadV2, util } from '@tensorflow/tfjs-core';\nimport { PadProgram } from '../pad_gpu';\nimport { PadPackedProgram } from '../pad_packed_gpu';\nimport { fill } from './Fill';\nexport const padV2 = args => {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    paddings,\n    constantValue\n  } = attrs;\n\n  if (util.sizeFromShape(x.shape) === 0) {\n    // Short-circuit the computation, since x doesn't have value, only\n    // the shape is used to compute output shape to pad.\n    const outputShape = paddings.map((p, i) => p[0]\n    /* beforePad */\n    + x.shape[i] + p[1]\n    /* afterPad */\n    );\n    return fill({\n      backend,\n      attrs: {\n        shape: outputShape,\n        value: constantValue,\n        dtype: x.dtype\n      }\n    });\n  }\n\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ? new PadPackedProgram(x.shape, paddings, constantValue) : new PadProgram(x.shape, paddings, constantValue);\n  const customValues = [[constantValue]];\n  return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n};\nexport const padV2Config = {\n  kernelName: PadV2,\n  backendName: 'webgl',\n  kernelFunc: padV2\n};","map":{"version":3,"names":["env","PadV2","util","PadProgram","PadPackedProgram","fill","padV2","args","inputs","backend","attrs","x","paddings","constantValue","sizeFromShape","shape","outputShape","map","p","i","value","dtype","program","getBool","customValues","runWebGLProgram","padV2Config","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/PadV2.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, PadV2, util } from '@tensorflow/tfjs-core';\nimport { PadProgram } from '../pad_gpu';\nimport { PadPackedProgram } from '../pad_packed_gpu';\nimport { fill } from './Fill';\nexport const padV2 = (args) => {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { paddings, constantValue } = attrs;\n    if (util.sizeFromShape(x.shape) === 0) {\n        // Short-circuit the computation, since x doesn't have value, only\n        // the shape is used to compute output shape to pad.\n        const outputShape = paddings.map((p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n        return fill({\n            backend,\n            attrs: { shape: outputShape, value: constantValue, dtype: x.dtype }\n        });\n    }\n    const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new PadPackedProgram(x.shape, paddings, constantValue) :\n        new PadProgram(x.shape, paddings, constantValue);\n    const customValues = [[constantValue]];\n    return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n};\nexport const padV2Config = {\n    kernelName: PadV2,\n    backendName: 'webgl',\n    kernelFunc: padV2\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,IAArB,QAAiC,uBAAjC;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,SAASC,gBAAT,QAAiC,mBAAjC;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,OAAO,MAAMC,KAAK,GAAIC,IAAD,IAAU;EAC3B,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BH,IAAnC;EACA,MAAM;IAAEI;EAAF,IAAQH,MAAd;EACA,MAAM;IAAEI,QAAF;IAAYC;EAAZ,IAA8BH,KAApC;;EACA,IAAIR,IAAI,CAACY,aAAL,CAAmBH,CAAC,CAACI,KAArB,MAAgC,CAApC,EAAuC;IACnC;IACA;IACA,MAAMC,WAAW,GAAGJ,QAAQ,CAACK,GAAT,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAAC,CAAD;IAAI;IAAL,EAAuBP,CAAC,CAACI,KAAF,CAAQI,CAAR,CAAvB,GAAoCD,CAAC,CAAC,CAAD;IAAI;IAAhE,CAApB;IACA,OAAOb,IAAI,CAAC;MACRI,OADQ;MAERC,KAAK,EAAE;QAAEK,KAAK,EAAEC,WAAT;QAAsBI,KAAK,EAAEP,aAA7B;QAA4CQ,KAAK,EAAEV,CAAC,CAACU;MAArD;IAFC,CAAD,CAAX;EAIH;;EACD,MAAMC,OAAO,GAAGtB,GAAG,GAAGuB,OAAN,CAAc,6BAAd,IACZ,IAAInB,gBAAJ,CAAqBO,CAAC,CAACI,KAAvB,EAA8BH,QAA9B,EAAwCC,aAAxC,CADY,GAEZ,IAAIV,UAAJ,CAAeQ,CAAC,CAACI,KAAjB,EAAwBH,QAAxB,EAAkCC,aAAlC,CAFJ;EAGA,MAAMW,YAAY,GAAG,CAAC,CAACX,aAAD,CAAD,CAArB;EACA,OAAOJ,OAAO,CAACgB,eAAR,CAAwBH,OAAxB,EAAiC,CAACX,CAAD,CAAjC,EAAsCA,CAAC,CAACU,KAAxC,EAA+CG,YAA/C,CAAP;AACH,CAlBM;AAmBP,OAAO,MAAME,WAAW,GAAG;EACvBC,UAAU,EAAE1B,KADW;EAEvB2B,WAAW,EAAE,OAFU;EAGvBC,UAAU,EAAEvB;AAHW,CAApB"},"metadata":{},"sourceType":"module"}