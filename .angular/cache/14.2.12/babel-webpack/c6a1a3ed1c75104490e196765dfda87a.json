{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { MaxPoolWithArgmax } from '@tensorflow/tfjs-core';\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { maxPoolWithArgmaxImpl } from './MaxPoolWithArgmax_impl';\nexport const maxPoolWithArgmaxConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'webgl',\n  kernelFunc: ({\n    inputs,\n    attrs,\n    backend\n  }) => {\n    const {\n      x\n    } = inputs;\n    const {\n      filterSize,\n      strides,\n      pad,\n      includeBatchInIndex\n    } = attrs;\n    const webglBackend = backend;\n    util.assert(x.shape.length === 4, () => `Error in maxPool: input must be rank 4 but got rank ${x.shape.length}.`);\n    const dilations = [1, 1];\n    util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);\n    const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad);\n    const [result, indexes] = maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, webglBackend);\n    return [result, indexes];\n  }\n};","map":{"version":3,"names":["MaxPoolWithArgmax","backend_util","util","maxPoolWithArgmaxImpl","maxPoolWithArgmaxConfig","kernelName","backendName","kernelFunc","inputs","attrs","backend","x","filterSize","strides","pad","includeBatchInIndex","webglBackend","assert","shape","length","dilations","eitherStridesOrDilationsAreOne","convInfo","computePool2DInfo","result","indexes"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPoolWithArgmax.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { MaxPoolWithArgmax } from '@tensorflow/tfjs-core';\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { maxPoolWithArgmaxImpl } from './MaxPoolWithArgmax_impl';\nexport const maxPoolWithArgmaxConfig = {\n    kernelName: MaxPoolWithArgmax,\n    backendName: 'webgl',\n    kernelFunc: ({ inputs, attrs, backend }) => {\n        const { x } = inputs;\n        const { filterSize, strides, pad, includeBatchInIndex } = attrs;\n        const webglBackend = backend;\n        util.assert(x.shape.length === 4, () => `Error in maxPool: input must be rank 4 but got rank ${x.shape.length}.`);\n        const dilations = [1, 1];\n        util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n            `Got strides ${strides} and dilations '${dilations}'`);\n        const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad);\n        const [result, indexes] = maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, webglBackend);\n        return [result, indexes];\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,iBAAT,QAAkC,uBAAlC;AACA,SAASC,YAAT,EAAuBC,IAAvB,QAAmC,uBAAnC;AACA,SAASC,qBAAT,QAAsC,0BAAtC;AACA,OAAO,MAAMC,uBAAuB,GAAG;EACnCC,UAAU,EAAEL,iBADuB;EAEnCM,WAAW,EAAE,OAFsB;EAGnCC,UAAU,EAAE,CAAC;IAAEC,MAAF;IAAUC,KAAV;IAAiBC;EAAjB,CAAD,KAAgC;IACxC,MAAM;MAAEC;IAAF,IAAQH,MAAd;IACA,MAAM;MAAEI,UAAF;MAAcC,OAAd;MAAuBC,GAAvB;MAA4BC;IAA5B,IAAoDN,KAA1D;IACA,MAAMO,YAAY,GAAGN,OAArB;IACAR,IAAI,CAACe,MAAL,CAAYN,CAAC,CAACO,KAAF,CAAQC,MAAR,KAAmB,CAA/B,EAAkC,MAAO,uDAAsDR,CAAC,CAACO,KAAF,CAAQC,MAAO,GAA9G;IACA,MAAMC,SAAS,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAlB;IACAlB,IAAI,CAACe,MAAL,CAAYhB,YAAY,CAACoB,8BAAb,CAA4CR,OAA5C,EAAqDO,SAArD,CAAZ,EAA6E,MAAM,8DAC9E,eAAcP,OAAQ,mBAAkBO,SAAU,GADvD;IAEA,MAAME,QAAQ,GAAGrB,YAAY,CAACsB,iBAAb,CAA+BZ,CAAC,CAACO,KAAjC,EAAwCN,UAAxC,EAAoDC,OAApD,EAA6DO,SAA7D,EAAwEN,GAAxE,CAAjB;IACA,MAAM,CAACU,MAAD,EAASC,OAAT,IAAoBtB,qBAAqB,CAACQ,CAAD,EAAII,mBAAJ,EAAyBO,QAAzB,EAAmCN,YAAnC,CAA/C;IACA,OAAO,CAACQ,MAAD,EAASC,OAAT,CAAP;EACH;AAdkC,CAAhC"},"metadata":{},"sourceType":"module"}