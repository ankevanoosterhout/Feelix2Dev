{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Multinomial, util } from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\nimport { assertNotComplex } from '../cpu_util';\nimport { softmax } from './Softmax';\nexport function multinomial(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    logits\n  } = inputs;\n  const {\n    numSamples,\n    seed,\n    normalized\n  } = attrs;\n  assertNotComplex(logits, 'multinomial');\n  const probabilities = normalized ? logits : softmax({\n    inputs: {\n      logits\n    },\n    backend,\n    attrs: {\n      dim: -1\n    }\n  });\n  const batchSize = probabilities.shape[0];\n  const numEvents = probabilities.shape[1];\n  const probVals = backend.data.get(probabilities.dataId).values;\n  const resShape = [batchSize, numSamples];\n  const resVals = util.makeZerosTypedArray(util.sizeFromShape(resShape), 'int32');\n\n  for (let b = 0; b < batchSize; ++b) {\n    const offset = b * numEvents; // The cdf won't include the last event. It will be implicit if no other\n    // event happened.\n\n    const cdf = new Float32Array(numEvents - 1);\n    cdf[0] = probVals[offset];\n\n    for (let event = 1; event < cdf.length; ++event) {\n      cdf[event] = cdf[event - 1] + probVals[offset + event];\n    }\n\n    const random = seedrandom.alea(seed.toString());\n    const outOffset = b * numSamples;\n\n    for (let sampleId = 0; sampleId < numSamples; ++sampleId) {\n      const r = random(); // Assume last event happened by default.\n\n      resVals[outOffset + sampleId] = cdf.length;\n\n      for (let event = 0; event < cdf.length; event++) {\n        if (r < cdf[event]) {\n          resVals[outOffset + sampleId] = event;\n          break;\n        }\n      }\n    }\n  }\n\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probabilities);\n  }\n\n  return backend.makeTensorInfo(resShape, 'int32', resVals);\n}\nexport const multinomialConfig = {\n  kernelName: Multinomial,\n  backendName: 'cpu',\n  kernelFunc: multinomial\n};","map":{"version":3,"names":["Multinomial","util","seedrandom","assertNotComplex","softmax","multinomial","args","inputs","backend","attrs","logits","numSamples","seed","normalized","probabilities","dim","batchSize","shape","numEvents","probVals","data","get","dataId","values","resShape","resVals","makeZerosTypedArray","sizeFromShape","b","offset","cdf","Float32Array","event","length","random","alea","toString","outOffset","sampleId","r","disposeIntermediateTensorInfo","makeTensorInfo","multinomialConfig","kernelName","backendName","kernelFunc"],"sources":["C:/Users/Anke/Documents/Feelix documents/Feelix2.0-dev/Feelix v2/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Multinomial.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Multinomial, util } from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\nimport { assertNotComplex } from '../cpu_util';\nimport { softmax } from './Softmax';\nexport function multinomial(args) {\n    const { inputs, backend, attrs } = args;\n    const { logits } = inputs;\n    const { numSamples, seed, normalized } = attrs;\n    assertNotComplex(logits, 'multinomial');\n    const probabilities = normalized ?\n        logits :\n        softmax({ inputs: { logits }, backend, attrs: { dim: -1 } });\n    const batchSize = probabilities.shape[0];\n    const numEvents = probabilities.shape[1];\n    const probVals = backend.data.get(probabilities.dataId).values;\n    const resShape = [batchSize, numSamples];\n    const resVals = util.makeZerosTypedArray(util.sizeFromShape(resShape), 'int32');\n    for (let b = 0; b < batchSize; ++b) {\n        const offset = b * numEvents;\n        // The cdf won't include the last event. It will be implicit if no other\n        // event happened.\n        const cdf = new Float32Array(numEvents - 1);\n        cdf[0] = probVals[offset];\n        for (let event = 1; event < cdf.length; ++event) {\n            cdf[event] = cdf[event - 1] + probVals[offset + event];\n        }\n        const random = seedrandom.alea(seed.toString());\n        const outOffset = b * numSamples;\n        for (let sampleId = 0; sampleId < numSamples; ++sampleId) {\n            const r = random();\n            // Assume last event happened by default.\n            resVals[outOffset + sampleId] = cdf.length;\n            for (let event = 0; event < cdf.length; event++) {\n                if (r < cdf[event]) {\n                    resVals[outOffset + sampleId] = event;\n                    break;\n                }\n            }\n        }\n    }\n    if (!normalized) {\n        backend.disposeIntermediateTensorInfo(probabilities);\n    }\n    return backend.makeTensorInfo(resShape, 'int32', resVals);\n}\nexport const multinomialConfig = {\n    kernelName: Multinomial,\n    backendName: 'cpu',\n    kernelFunc: multinomial\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}